
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b800  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800b9a0  0800b9a0  0001b9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf80  0800bf80  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf80  0800bf80  0001bf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf88  0800bf88  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf88  0800bf88  0001bf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf8c  0800bf8c  0001bf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bf90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  200001f0  0800c180  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0800c180  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a0  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ab  00000000  00000000  00030803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9d  00000000  00000000  00033aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b1d  00000000  00000000  00034745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f99  00000000  00000000  0004c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092f51  00000000  00000000  0005f1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c8c  00000000  00000000  000f214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000f7dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b988 	.word	0x0800b988

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b988 	.word	0x0800b988

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f1 	b.w	800109c <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010ae:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ba:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80010da:	bf00      	nop
     __ASM volatile ("NOP");
 80010dc:	bf00      	nop
  __ASM volatile ("NOP");
 80010de:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80010e8:	2300      	movs	r3, #0
 80010ea:	e000      	b.n	80010ee <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80010ec:	2301      	movs	r3, #1
  }
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000edf0 	.word	0xe000edf0
 80010fc:	e0001000 	.word	0xe0001000

08001100 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <delay+0x40>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800110e:	f003 ff99 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8001112:	4603      	mov	r3, r0
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <delay+0x44>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	0c9b      	lsrs	r3, r3, #18
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001124:	bf00      	nop
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <delay+0x40>)
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad2      	subs	r2, r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	d3f8      	bcc.n	8001126 <delay+0x26>
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e0001000 	.word	0xe0001000
 8001144:	431bde83 	.word	0x431bde83

08001148 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f002 f926 	bl	80033c8 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f002 f908 	bl	80033c8 <HAL_GPIO_Init>
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <DHT_Start>:


void DHT_Start (void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80011c4:	f7ff ff6c 	bl	80010a0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <DHT_Start+0x48>)
 80011ce:	f7ff ffbb 	bl	8001148 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <DHT_Start+0x48>)
 80011da:	f002 fa91 	bl	8003700 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 80011de:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80011e2:	f7ff ff8d 	bl	8001100 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <DHT_Start+0x48>)
 80011ee:	f002 fa87 	bl	8003700 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80011f2:	2014      	movs	r0, #20
 80011f4:	f7ff ff84 	bl	8001100 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DHT_Start+0x48>)
 80011fe:	f7ff ffc1 	bl	8001184 <Set_Pin_Input>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020000 	.word	0x40020000

0800120c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f7ff ff72 	bl	8001100 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800121c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001220:	4811      	ldr	r0, [pc, #68]	; (8001268 <DHT_Check_Response+0x5c>)
 8001222:	f002 fa55 	bl	80036d0 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10f      	bne.n	800124c <DHT_Check_Response+0x40>
	{
		delay (80);
 800122c:	2050      	movs	r0, #80	; 0x50
 800122e:	f7ff ff67 	bl	8001100 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <DHT_Check_Response+0x5c>)
 8001238:	f002 fa4a 	bl	80036d0 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <DHT_Check_Response+0x3c>
 8001242:	2301      	movs	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	e001      	b.n	800124c <DHT_Check_Response+0x40>
		else Response = -1;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800124c:	bf00      	nop
 800124e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <DHT_Check_Response+0x5c>)
 8001254:	f002 fa3c 	bl	80036d0 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f7      	bne.n	800124e <DHT_Check_Response+0x42>

	return Response;
 800125e:	79fb      	ldrb	r3, [r7, #7]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020000 	.word	0x40020000

0800126c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001272:	2300      	movs	r3, #0
 8001274:	71bb      	strb	r3, [r7, #6]
 8001276:	e03a      	b.n	80012ee <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001278:	bf00      	nop
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	4820      	ldr	r0, [pc, #128]	; (8001300 <DHT_Read+0x94>)
 8001280:	f002 fa26 	bl	80036d0 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f7      	beq.n	800127a <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800128a:	2028      	movs	r0, #40	; 0x28
 800128c:	f7ff ff38 	bl	8001100 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001294:	481a      	ldr	r0, [pc, #104]	; (8001300 <DHT_Read+0x94>)
 8001296:	f002 fa1b 	bl	80036d0 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10e      	bne.n	80012be <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2201      	movs	r2, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	4013      	ands	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	e00b      	b.n	80012d6 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	f1c3 0307 	rsb	r3, r3, #7
 80012c4:	2201      	movs	r2, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	b25a      	sxtb	r2, r3
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80012d6:	bf00      	nop
 80012d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <DHT_Read+0x94>)
 80012de:	f002 f9f7 	bl	80036d0 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f7      	bne.n	80012d8 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	3301      	adds	r3, #1
 80012ec:	71bb      	strb	r3, [r7, #6]
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d9c1      	bls.n	8001278 <DHT_Read+0xc>
	}
	return i;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020000 	.word	0x40020000

08001304 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800130c:	f7ff ff58 	bl	80011c0 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001310:	f7ff ff7c 	bl	800120c <DHT_Check_Response>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <DHT_GetData+0xb4>)
 800131a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800131c:	f7ff ffa6 	bl	800126c <DHT_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <DHT_GetData+0xb8>)
 8001326:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001328:	f7ff ffa0 	bl	800126c <DHT_Read>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <DHT_GetData+0xbc>)
 8001332:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001334:	f7ff ff9a 	bl	800126c <DHT_Read>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <DHT_GetData+0xc0>)
 800133e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001340:	f7ff ff94 	bl	800126c <DHT_Read>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <DHT_GetData+0xc4>)
 800134a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800134c:	f7ff ff8e 	bl	800126c <DHT_Read>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <DHT_GetData+0xc8>)
 8001356:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <DHT_GetData+0xc8>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <DHT_GetData+0xb8>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <DHT_GetData+0xbc>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4413      	add	r3, r2
 800136a:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <DHT_GetData+0xc0>)
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <DHT_GetData+0xc4>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	4413      	add	r3, r2
 8001376:	4299      	cmp	r1, r3
 8001378:	d119      	bne.n	80013ae <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <DHT_GetData+0xc0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <DHT_GetData+0xc4>)
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	4313      	orrs	r3, r2
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <DHT_GetData+0xb8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <DHT_GetData+0xbc>)
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000212 	.word	0x20000212
 80013bc:	2000020c 	.word	0x2000020c
 80013c0:	2000020d 	.word	0x2000020d
 80013c4:	2000020e 	.word	0x2000020e
 80013c8:	2000020f 	.word	0x2000020f
 80013cc:	20000210 	.word	0x20000210

080013d0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	715a      	strb	r2, [r3, #5]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af04      	add	r7, sp, #16
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	460b      	mov	r3, r1
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001422:	7afb      	ldrb	r3, [r7, #11]
 8001424:	b29a      	uxth	r2, r3
 8001426:	8af9      	ldrh	r1, [r7, #22]
 8001428:	f241 3388 	movw	r3, #5000	; 0x1388
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2302      	movs	r3, #2
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	f002 fbb9 	bl	8003bb0 <HAL_I2C_Mem_Read>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001444:	7d7b      	ldrb	r3, [r7, #21]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	7d3b      	ldrb	r3, [r7, #20]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21b      	sxth	r3, r3
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	801a      	strh	r2, [r3, #0]
		return true;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <read_register16+0x56>
	} else
		return false;
 800145c:	2300      	movs	r3, #0

}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001466:	b590      	push	{r4, r7, lr}
 8001468:	b08b      	sub	sp, #44	; 0x2c
 800146a:	af04      	add	r7, sp, #16
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	461a      	mov	r2, r3
 8001472:	460b      	mov	r3, r1
 8001474:	72fb      	strb	r3, [r7, #11]
 8001476:	4613      	mov	r3, r2
 8001478:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	b29a      	uxth	r2, r3
 800148a:	7abb      	ldrb	r3, [r7, #10]
 800148c:	b29b      	uxth	r3, r3
 800148e:	8af9      	ldrh	r1, [r7, #22]
 8001490:	f241 3488 	movw	r4, #5000	; 0x1388
 8001494:	9402      	str	r4, [sp, #8]
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	f002 fb87 	bl	8003bb0 <HAL_I2C_Mem_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <read_data+0x46>
		return 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e000      	b.n	80014ae <read_data+0x48>
	else
		return 1;
 80014ac:	2301      	movs	r3, #1

}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}

080014b6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	461a      	mov	r2, r3
 80014c2:	2188      	movs	r1, #136	; 0x88
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff9f 	bl	8001408 <read_register16>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d06f      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	461a      	mov	r2, r3
 80014d6:	218a      	movs	r1, #138	; 0x8a
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff95 	bl	8001408 <read_register16>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d065      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3304      	adds	r3, #4
 80014e8:	461a      	mov	r2, r3
 80014ea:	218c      	movs	r1, #140	; 0x8c
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff8b 	bl	8001408 <read_register16>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d05b      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3306      	adds	r3, #6
 80014fc:	461a      	mov	r2, r3
 80014fe:	218e      	movs	r1, #142	; 0x8e
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff81 	bl	8001408 <read_register16>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d051      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3308      	adds	r3, #8
 8001510:	461a      	mov	r2, r3
 8001512:	2190      	movs	r1, #144	; 0x90
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff77 	bl	8001408 <read_register16>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d047      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	330a      	adds	r3, #10
 8001524:	461a      	mov	r2, r3
 8001526:	2192      	movs	r1, #146	; 0x92
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff6d 	bl	8001408 <read_register16>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03d      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	330c      	adds	r3, #12
 8001538:	461a      	mov	r2, r3
 800153a:	2194      	movs	r1, #148	; 0x94
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff63 	bl	8001408 <read_register16>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d033      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	330e      	adds	r3, #14
 800154c:	461a      	mov	r2, r3
 800154e:	2196      	movs	r1, #150	; 0x96
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff59 	bl	8001408 <read_register16>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d029      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3310      	adds	r3, #16
 8001560:	461a      	mov	r2, r3
 8001562:	2198      	movs	r1, #152	; 0x98
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff4f 	bl	8001408 <read_register16>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01f      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3312      	adds	r3, #18
 8001574:	461a      	mov	r2, r3
 8001576:	219a      	movs	r1, #154	; 0x9a
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff45 	bl	8001408 <read_register16>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d015      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3314      	adds	r3, #20
 8001588:	461a      	mov	r2, r3
 800158a:	219c      	movs	r1, #156	; 0x9c
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff3b 	bl	8001408 <read_register16>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800159c:	461a      	mov	r2, r3
 800159e:	219e      	movs	r1, #158	; 0x9e
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff31 	bl	8001408 <read_register16>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <read_calibration_data+0xfa>

		return true;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <read_calibration_data+0xfc>
	}

	return false;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f103 0218 	add.w	r2, r3, #24
 80015c8:	2301      	movs	r3, #1
 80015ca:	21a1      	movs	r1, #161	; 0xa1
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff4a 	bl	8001466 <read_data>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14b      	bne.n	8001670 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	331a      	adds	r3, #26
 80015dc:	461a      	mov	r2, r3
 80015de:	21e1      	movs	r1, #225	; 0xe1
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff11 	bl	8001408 <read_register16>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d041      	beq.n	8001670 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f103 021c 	add.w	r2, r3, #28
 80015f2:	2301      	movs	r3, #1
 80015f4:	21e3      	movs	r1, #227	; 0xe3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff35 	bl	8001466 <read_data>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d136      	bne.n	8001670 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001602:	f107 030e 	add.w	r3, r7, #14
 8001606:	461a      	mov	r2, r3
 8001608:	21e4      	movs	r1, #228	; 0xe4
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fefc 	bl	8001408 <read_register16>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d02c      	beq.n	8001670 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	461a      	mov	r2, r3
 800161c:	21e5      	movs	r1, #229	; 0xe5
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fef2 	bl	8001408 <read_register16>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d022      	beq.n	8001670 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001630:	2301      	movs	r3, #1
 8001632:	21e7      	movs	r1, #231	; 0xe7
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff16 	bl	8001466 <read_data>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d117      	bne.n	8001670 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	b21b      	sxth	r3, r3
 8001646:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800164a:	b21a      	sxth	r2, r3
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	121b      	asrs	r3, r3, #8
 8001650:	b21b      	sxth	r3, r3
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21a      	sxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001660:	89bb      	ldrh	r3, [r7, #12]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	b29b      	uxth	r3, r3
 8001666:	b21a      	sxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	841a      	strh	r2, [r3, #32]

		return true;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b088      	sub	sp, #32
 800167e:	af04      	add	r7, sp, #16
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
 8001686:	4613      	mov	r3, r2
 8001688:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	b29a      	uxth	r2, r3
 800169a:	89f9      	ldrh	r1, [r7, #14]
 800169c:	f242 7310 	movw	r3, #10000	; 0x2710
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2301      	movs	r3, #1
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	1cbb      	adds	r3, r7, #2
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	f002 f986 	bl	80039bc <HAL_I2C_Mem_Write>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <write_register8+0x40>
		return false;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <write_register8+0x42>
	else
		return true;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016d2:	2b76      	cmp	r3, #118	; 0x76
 80016d4:	d005      	beq.n	80016e2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016da:	2b77      	cmp	r3, #119	; 0x77
 80016dc:	d001      	beq.n	80016e2 <bmp280_init+0x1e>

		return false;
 80016de:	2300      	movs	r3, #0
 80016e0:	e099      	b.n	8001816 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80016e8:	2301      	movs	r3, #1
 80016ea:	21d0      	movs	r1, #208	; 0xd0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff feba 	bl	8001466 <read_data>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <bmp280_init+0x38>
		return false;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e08c      	b.n	8001816 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001702:	2b58      	cmp	r3, #88	; 0x58
 8001704:	d006      	beq.n	8001714 <bmp280_init+0x50>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800170c:	2b60      	cmp	r3, #96	; 0x60
 800170e:	d001      	beq.n	8001714 <bmp280_init+0x50>

		return false;
 8001710:	2300      	movs	r3, #0
 8001712:	e080      	b.n	8001816 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001714:	22b6      	movs	r2, #182	; 0xb6
 8001716:	21e0      	movs	r1, #224	; 0xe0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffae 	bl	800167a <write_register8>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <bmp280_init+0x64>
		return false;
 8001724:	2300      	movs	r3, #0
 8001726:	e076      	b.n	8001816 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001728:	f107 020c 	add.w	r2, r7, #12
 800172c:	2301      	movs	r3, #1
 800172e:	21f3      	movs	r1, #243	; 0xf3
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fe98 	bl	8001466 <read_data>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f5      	bne.n	8001728 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800173c:	7b3b      	ldrb	r3, [r7, #12]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff feb5 	bl	80014b6 <read_calibration_data>
 800174c:	4603      	mov	r3, r0
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <bmp280_init+0x96>
 8001758:	e001      	b.n	800175e <bmp280_init+0x9a>
		return false;
 800175a:	2300      	movs	r3, #0
 800175c:	e05b      	b.n	8001816 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001764:	2b60      	cmp	r3, #96	; 0x60
 8001766:	d10a      	bne.n	800177e <bmp280_init+0xba>
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff26 	bl	80015ba <read_hum_calibration_data>
 800176e:	4603      	mov	r3, r0
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <bmp280_init+0xba>
		return false;
 800177a:	2300      	movs	r3, #0
 800177c:	e04b      	b.n	8001816 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	795b      	ldrb	r3, [r3, #5]
 8001782:	015b      	lsls	r3, r3, #5
 8001784:	b25a      	sxtb	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	461a      	mov	r2, r3
 8001798:	21f5      	movs	r1, #245	; 0xf5
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff6d 	bl	800167a <write_register8>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <bmp280_init+0xe6>
		return false;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e035      	b.n	8001816 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	78db      	ldrb	r3, [r3, #3]
 80017bc:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80017be:	b25a      	sxtb	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80017d6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017de:	2b60      	cmp	r3, #96	; 0x60
 80017e0:	d10d      	bne.n	80017fe <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80017e8:	7b7b      	ldrb	r3, [r7, #13]
 80017ea:	461a      	mov	r2, r3
 80017ec:	21f2      	movs	r1, #242	; 0xf2
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff43 	bl	800167a <write_register8>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <bmp280_init+0x13a>
			return false;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e00b      	b.n	8001816 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	461a      	mov	r2, r3
 8001802:	21f4      	movs	r1, #244	; 0xf4
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff38 	bl	800167a <write_register8>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <bmp280_init+0x150>
		return false;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <bmp280_init+0x152>
	}

	return true;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	10da      	asrs	r2, r3, #3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800183c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001840:	12db      	asrs	r3, r3, #11
 8001842:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	111b      	asrs	r3, r3, #4
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	8812      	ldrh	r2, [r2, #0]
 800184c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	1112      	asrs	r2, r2, #4
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	8809      	ldrh	r1, [r1, #0]
 8001856:	1a52      	subs	r2, r2, r1
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001864:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001868:	139b      	asrs	r3, r3, #14
 800186a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	441a      	add	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3380      	adds	r3, #128	; 0x80
 8001882:	121b      	asrs	r3, r3, #8
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b0cc      	sub	sp, #304	; 0x130
 8001896:	af00      	add	r7, sp, #0
 8001898:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800189c:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80018a0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80018a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018a8:	17da      	asrs	r2, r3, #31
 80018aa:	461c      	mov	r4, r3
 80018ac:	4615      	mov	r5, r2
 80018ae:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80018b2:	f145 3bff 	adc.w	fp, r5, #4294967295
 80018b6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80018ba:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80018be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018c2:	fb03 f102 	mul.w	r1, r3, r2
 80018c6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80018ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	18ca      	adds	r2, r1, r3
 80018d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018d8:	fba3 8903 	umull	r8, r9, r3, r3
 80018dc:	eb02 0309 	add.w	r3, r2, r9
 80018e0:	4699      	mov	r9, r3
 80018e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	17da      	asrs	r2, r3, #31
 80018ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018f2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80018f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80018fa:	4603      	mov	r3, r0
 80018fc:	fb03 f209 	mul.w	r2, r3, r9
 8001900:	460b      	mov	r3, r1
 8001902:	fb08 f303 	mul.w	r3, r8, r3
 8001906:	4413      	add	r3, r2
 8001908:	4602      	mov	r2, r0
 800190a:	fba8 1202 	umull	r1, r2, r8, r2
 800190e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001912:	460a      	mov	r2, r1
 8001914:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001918:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800191c:	4413      	add	r3, r2
 800191e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001922:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001926:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800192a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800192e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001932:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001936:	b21b      	sxth	r3, r3
 8001938:	17da      	asrs	r2, r3, #31
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800193e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001946:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800194a:	462a      	mov	r2, r5
 800194c:	fb02 f203 	mul.w	r2, r2, r3
 8001950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001954:	4621      	mov	r1, r4
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	441a      	add	r2, r3
 800195c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001960:	4621      	mov	r1, r4
 8001962:	fba3 1301 	umull	r1, r3, r3, r1
 8001966:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800196a:	460b      	mov	r3, r1
 800196c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001986:	462b      	mov	r3, r5
 8001988:	0459      	lsls	r1, r3, #17
 800198a:	4623      	mov	r3, r4
 800198c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001990:	4623      	mov	r3, r4
 8001992:	0458      	lsls	r0, r3, #17
 8001994:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001998:	1814      	adds	r4, r2, r0
 800199a:	643c      	str	r4, [r7, #64]	; 0x40
 800199c:	414b      	adcs	r3, r1
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
 80019a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80019a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80019a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	17da      	asrs	r2, r3, #31
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019c8:	00d9      	lsls	r1, r3, #3
 80019ca:	2000      	movs	r0, #0
 80019cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	63bc      	str	r4, [r7, #56]	; 0x38
 80019d4:	414b      	adcs	r3, r1
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80019dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80019e0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019e8:	fb03 f102 	mul.w	r1, r3, r2
 80019ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	18ca      	adds	r2, r1, r3
 80019fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019fe:	fba3 1303 	umull	r1, r3, r3, r3
 8001a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a06:	460b      	mov	r3, r1
 8001a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	17da      	asrs	r2, r3, #31
 8001a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001a2a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001a2e:	462b      	mov	r3, r5
 8001a30:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001a34:	4642      	mov	r2, r8
 8001a36:	fb02 f203 	mul.w	r2, r2, r3
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	4622      	mov	r2, r4
 8001a46:	4641      	mov	r1, r8
 8001a48:	fba2 1201 	umull	r1, r2, r2, r1
 8001a4c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001a50:	460a      	mov	r2, r1
 8001a52:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001a56:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	0a18      	lsrs	r0, r3, #8
 8001a70:	462b      	mov	r3, r5
 8001a72:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a76:	462b      	mov	r3, r5
 8001a78:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	17da      	asrs	r2, r3, #31
 8001a86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a8a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a92:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001a96:	464a      	mov	r2, r9
 8001a98:	fb02 f203 	mul.w	r2, r2, r3
 8001a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001aa0:	4644      	mov	r4, r8
 8001aa2:	fb04 f303 	mul.w	r3, r4, r3
 8001aa6:	441a      	add	r2, r3
 8001aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001aac:	4644      	mov	r4, r8
 8001aae:	fba3 4304 	umull	r4, r3, r3, r4
 8001ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ac0:	18d3      	adds	r3, r2, r3
 8001ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001ad2:	464c      	mov	r4, r9
 8001ad4:	0323      	lsls	r3, r4, #12
 8001ad6:	4644      	mov	r4, r8
 8001ad8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001adc:	4644      	mov	r4, r8
 8001ade:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001ae0:	1884      	adds	r4, r0, r2
 8001ae2:	633c      	str	r4, [r7, #48]	; 0x30
 8001ae4:	eb41 0303 	adc.w	r3, r1, r3
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001aee:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001af2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001af6:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001afa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001afe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b06:	88db      	ldrh	r3, [r3, #6]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b14:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b18:	462b      	mov	r3, r5
 8001b1a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001b1e:	4642      	mov	r2, r8
 8001b20:	fb02 f203 	mul.w	r2, r2, r3
 8001b24:	464b      	mov	r3, r9
 8001b26:	4621      	mov	r1, r4
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4622      	mov	r2, r4
 8001b30:	4641      	mov	r1, r8
 8001b32:	fba2 1201 	umull	r1, r2, r2, r1
 8001b36:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001b40:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001b44:	4413      	add	r3, r2
 8001b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001b56:	4629      	mov	r1, r5
 8001b58:	104a      	asrs	r2, r1, #1
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	17cb      	asrs	r3, r1, #31
 8001b5e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001b62:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b66:	4313      	orrs	r3, r2
 8001b68:	d101      	bne.n	8001b6e <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e148      	b.n	8001e00 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001b6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b72:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b76:	17da      	asrs	r2, r3, #31
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b7c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001b84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b88:	105b      	asrs	r3, r3, #1
 8001b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b92:	07db      	lsls	r3, r3, #31
 8001b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b98:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b9c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	1a89      	subs	r1, r1, r2
 8001ba4:	67b9      	str	r1, [r7, #120]	; 0x78
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	eb61 0303 	sbc.w	r3, r1, r3
 8001bac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	1891      	adds	r1, r2, r2
 8001bb8:	6239      	str	r1, [r7, #32]
 8001bba:	415b      	adcs	r3, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	1851      	adds	r1, r2, r1
 8001bc6:	61b9      	str	r1, [r7, #24]
 8001bc8:	4629      	mov	r1, r5
 8001bca:	414b      	adcs	r3, r1
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001bda:	4649      	mov	r1, r9
 8001bdc:	018b      	lsls	r3, r1, #6
 8001bde:	4641      	mov	r1, r8
 8001be0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001be4:	4641      	mov	r1, r8
 8001be6:	018a      	lsls	r2, r1, #6
 8001be8:	4641      	mov	r1, r8
 8001bea:	1889      	adds	r1, r1, r2
 8001bec:	6139      	str	r1, [r7, #16]
 8001bee:	4649      	mov	r1, r9
 8001bf0:	eb43 0101 	adc.w	r1, r3, r1
 8001bf4:	6179      	str	r1, [r7, #20]
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c02:	4649      	mov	r1, r9
 8001c04:	008b      	lsls	r3, r1, #2
 8001c06:	4641      	mov	r1, r8
 8001c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c0c:	4641      	mov	r1, r8
 8001c0e:	008a      	lsls	r2, r1, #2
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	4622      	mov	r2, r4
 8001c18:	189b      	adds	r3, r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	462a      	mov	r2, r5
 8001c20:	eb42 0303 	adc.w	r3, r2, r3
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c32:	4649      	mov	r1, r9
 8001c34:	008b      	lsls	r3, r1, #2
 8001c36:	4641      	mov	r1, r8
 8001c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	008a      	lsls	r2, r1, #2
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	4622      	mov	r2, r4
 8001c48:	189b      	adds	r3, r3, r2
 8001c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	460a      	mov	r2, r1
 8001c50:	eb42 0303 	adc.w	r3, r2, r3
 8001c54:	677b      	str	r3, [r7, #116]	; 0x74
 8001c56:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c5a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c5e:	f7ff f81b 	bl	8000c98 <__aeabi_ldivmod>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	17da      	asrs	r2, r3, #31
 8001c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0b50      	lsrs	r0, r2, #13
 8001c88:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c8c:	1359      	asrs	r1, r3, #13
 8001c8e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001c92:	462b      	mov	r3, r5
 8001c94:	fb00 f203 	mul.w	r2, r0, r3
 8001c98:	4623      	mov	r3, r4
 8001c9a:	fb03 f301 	mul.w	r3, r3, r1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001caa:	460a      	mov	r2, r1
 8001cac:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001cb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001cba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0b50      	lsrs	r0, r2, #13
 8001cc8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ccc:	1359      	asrs	r1, r3, #13
 8001cce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	fb00 f203 	mul.w	r2, r0, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	fb03 f301 	mul.w	r3, r3, r1
 8001cde:	4413      	add	r3, r2
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ce6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cea:	460a      	mov	r2, r1
 8001cec:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001cf0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001d06:	4621      	mov	r1, r4
 8001d08:	0e4a      	lsrs	r2, r1, #25
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d10:	4629      	mov	r1, r5
 8001d12:	164b      	asrs	r3, r1, #25
 8001d14:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	17da      	asrs	r2, r3, #31
 8001d24:	663b      	str	r3, [r7, #96]	; 0x60
 8001d26:	667a      	str	r2, [r7, #100]	; 0x64
 8001d28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d30:	462a      	mov	r2, r5
 8001d32:	fb02 f203 	mul.w	r2, r2, r3
 8001d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d46:	4621      	mov	r1, r4
 8001d48:	fba2 1201 	umull	r1, r2, r2, r1
 8001d4c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001d50:	460a      	mov	r2, r1
 8001d52:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001d56:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	0cca      	lsrs	r2, r1, #19
 8001d70:	4629      	mov	r1, r5
 8001d72:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001d76:	4629      	mov	r1, r5
 8001d78:	14cb      	asrs	r3, r1, #19
 8001d7a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001d7e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001d82:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d86:	1884      	adds	r4, r0, r2
 8001d88:	65bc      	str	r4, [r7, #88]	; 0x58
 8001d8a:	eb41 0303 	adc.w	r3, r1, r3
 8001d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d90:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001d94:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001d98:	4621      	mov	r1, r4
 8001d9a:	1889      	adds	r1, r1, r2
 8001d9c:	6539      	str	r1, [r7, #80]	; 0x50
 8001d9e:	4629      	mov	r1, r5
 8001da0:	eb43 0101 	adc.w	r1, r3, r1
 8001da4:	6579      	str	r1, [r7, #84]	; 0x54
 8001da6:	f04f 0000 	mov.w	r0, #0
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001db2:	4623      	mov	r3, r4
 8001db4:	0a18      	lsrs	r0, r3, #8
 8001db6:	462b      	mov	r3, r5
 8001db8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001dbc:	462b      	mov	r3, r5
 8001dbe:	1219      	asrs	r1, r3, #8
 8001dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dc4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	17da      	asrs	r2, r3, #31
 8001dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dce:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001ddc:	464c      	mov	r4, r9
 8001dde:	0123      	lsls	r3, r4, #4
 8001de0:	4644      	mov	r4, r8
 8001de2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001de6:	4644      	mov	r4, r8
 8001de8:	0122      	lsls	r2, r4, #4
 8001dea:	1884      	adds	r4, r0, r2
 8001dec:	603c      	str	r4, [r7, #0]
 8001dee:	eb41 0303 	adc.w	r3, r1, r3
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001df8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001dfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001e06:	46bd      	mov	sp, r7
 8001e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e0c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001e1e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	039a      	lsls	r2, r3, #14
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e2a:	051b      	lsls	r3, r3, #20
 8001e2c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e34:	4619      	mov	r1, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e42:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	fb01 f202 	mul.w	r2, r1, r2
 8001e52:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	7f09      	ldrb	r1, [r1, #28]
 8001e58:	4608      	mov	r0, r1
 8001e5a:	6979      	ldr	r1, [r7, #20]
 8001e5c:	fb00 f101 	mul.w	r1, r0, r1
 8001e60:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001e62:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001e66:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001e6a:	1292      	asrs	r2, r2, #10
 8001e6c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001e76:	fb01 f202 	mul.w	r2, r1, r2
 8001e7a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001e7e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	13db      	asrs	r3, r3, #15
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	13d2      	asrs	r2, r2, #15
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	7e12      	ldrb	r2, [r2, #24]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001eaa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001eb2:	bfa8      	it	ge
 8001eb4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001eb8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	131b      	asrs	r3, r3, #12
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b08c      	sub	sp, #48	; 0x30
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ede:	2b60      	cmp	r3, #96	; 0x60
 8001ee0:	d007      	beq.n	8001ef2 <bmp280_read_fixed+0x28>
		if (humidity)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <bmp280_read_fixed+0x32>
 8001ef8:	2308      	movs	r3, #8
 8001efa:	e000      	b.n	8001efe <bmp280_read_fixed+0x34>
 8001efc:	2306      	movs	r3, #6
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f107 0218 	add.w	r2, r7, #24
 8001f08:	21f7      	movs	r1, #247	; 0xf7
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7ff faab 	bl	8001466 <read_data>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <bmp280_read_fixed+0x50>
		return false;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e038      	b.n	8001f8c <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f1a:	7e3b      	ldrb	r3, [r7, #24]
 8001f1c:	031a      	lsls	r2, r3, #12
 8001f1e:	7e7b      	ldrb	r3, [r7, #25]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4313      	orrs	r3, r2
 8001f24:	7eba      	ldrb	r2, [r7, #26]
 8001f26:	0912      	lsrs	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001f2e:	7efb      	ldrb	r3, [r7, #27]
 8001f30:	031a      	lsls	r2, r3, #12
 8001f32:	7f3b      	ldrb	r3, [r7, #28]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4313      	orrs	r3, r2
 8001f38:	7f7a      	ldrb	r2, [r7, #29]
 8001f3a:	0912      	lsrs	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	461a      	mov	r2, r3
 8001f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff fc67 	bl	800181e <compensate_temperature>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fc97 	bl	8001890 <compensate_pressure>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001f6e:	7fbb      	ldrb	r3, [r7, #30]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	7ffa      	ldrb	r2, [r7, #31]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff ff44 	bl	8001e0c <compensate_humidity>
 8001f84:	4602      	mov	r2, r0
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3730      	adds	r7, #48	; 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <bmp280_read_float+0x1a>
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	e000      	b.n	8001fb0 <bmp280_read_float+0x1c>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f107 0218 	add.w	r2, r7, #24
 8001fb4:	f107 011c 	add.w	r1, r7, #28
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff ff86 	bl	8001eca <bmp280_read_fixed>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d028      	beq.n	8002016 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fce:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002020 <bmp280_read_float+0x8c>
 8001fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002024 <bmp280_read_float+0x90>
 8001fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002004:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002028 <bmp280_read_float+0x94>
 8002008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <bmp280_read_float+0x84>
	}

	return false;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	42c80000 	.word	0x42c80000
 8002024:	43800000 	.word	0x43800000
 8002028:	44800000 	.word	0x44800000

0800202c <ReadDataFromSensors>:
uint32_t lastReadSensorTick = 0;
uint32_t readSensorInterval = 4000;
uint32_t lastSendDataTick = 0;
uint32_t sendDataInterval = 30000;

void ReadDataFromSensors() {
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af02      	add	r7, sp, #8
	// Set LED for Debugging
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	2120      	movs	r1, #32
 8002036:	4868      	ldr	r0, [pc, #416]	; (80021d8 <ReadDataFromSensors+0x1ac>)
 8002038:	f001 fb62 	bl	8003700 <HAL_GPIO_WritePin>

	// GET DATA FROM DHT22
	sprintf(uartData, "\r\nDHT22 Sensor:\r\n");
 800203c:	4967      	ldr	r1, [pc, #412]	; (80021dc <ReadDataFromSensors+0x1b0>)
 800203e:	4868      	ldr	r0, [pc, #416]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 8002040:	f005 f8ca 	bl	80071d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002044:	4866      	ldr	r0, [pc, #408]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 8002046:	f7fe f91b 	bl	8000280 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	b29a      	uxth	r2, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	4963      	ldr	r1, [pc, #396]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 8002054:	4863      	ldr	r0, [pc, #396]	; (80021e4 <ReadDataFromSensors+0x1b8>)
 8002056:	f003 fdcb 	bl	8005bf0 <HAL_UART_Transmit>
	DHT_GetData(&DHT22_Data);
 800205a:	4863      	ldr	r0, [pc, #396]	; (80021e8 <ReadDataFromSensors+0x1bc>)
 800205c:	f7ff f952 	bl	8001304 <DHT_GetData>
	DHT_temperature = DHT22_Data.Temperature / 10;
 8002060:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <ReadDataFromSensors+0x1bc>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800206a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <ReadDataFromSensors+0x1c0>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	DHT_humidity = DHT22_Data.Humidity / 10;
 8002074:	4b5c      	ldr	r3, [pc, #368]	; (80021e8 <ReadDataFromSensors+0x1bc>)
 8002076:	ed93 7a01 	vldr	s14, [r3, #4]
 800207a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800207e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <ReadDataFromSensors+0x1c4>)
 8002084:	edc3 7a00 	vstr	s15, [r3]
	sprintf(uartData, "Temp (C) =\t %.1f\r\nHumidity (%%) =\t %.1f%%\r\n",
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <ReadDataFromSensors+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa63 	bl	8000558 <__aeabi_f2d>
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <ReadDataFromSensors+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa5c 	bl	8000558 <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	e9cd 2300 	strd	r2, r3, [sp]
 80020a8:	4622      	mov	r2, r4
 80020aa:	462b      	mov	r3, r5
 80020ac:	4951      	ldr	r1, [pc, #324]	; (80021f4 <ReadDataFromSensors+0x1c8>)
 80020ae:	484c      	ldr	r0, [pc, #304]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020b0:	f005 f892 	bl	80071d8 <siprintf>
			DHT_temperature, DHT_humidity);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80020b4:	484a      	ldr	r0, [pc, #296]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020b6:	f7fe f8e3 	bl	8000280 <strlen>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b29a      	uxth	r2, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	4947      	ldr	r1, [pc, #284]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020c4:	4847      	ldr	r0, [pc, #284]	; (80021e4 <ReadDataFromSensors+0x1b8>)
 80020c6:	f003 fd93 	bl	8005bf0 <HAL_UART_Transmit>

	HAL_Delay(1000); // WAIT
 80020ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ce:	f001 f871 	bl	80031b4 <HAL_Delay>

	// GET DATA FROM BMP-280
	sprintf(uartData, "BMP-280 Sensor:\r\n");
 80020d2:	4949      	ldr	r1, [pc, #292]	; (80021f8 <ReadDataFromSensors+0x1cc>)
 80020d4:	4842      	ldr	r0, [pc, #264]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020d6:	f005 f87f 	bl	80071d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80020da:	4841      	ldr	r0, [pc, #260]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020dc:	f7fe f8d0 	bl	8000280 <strlen>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e8:	493d      	ldr	r1, [pc, #244]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020ea:	483e      	ldr	r0, [pc, #248]	; (80021e4 <ReadDataFromSensors+0x1b8>)
 80020ec:	f003 fd80 	bl	8005bf0 <HAL_UART_Transmit>
	while (!bmp280_read_float(&bmp280, &BMP_temperature, &BMP_pressure,
 80020f0:	e012      	b.n	8002118 <ReadDataFromSensors+0xec>
			&BMP_humidity)) {
		sprintf(uartData, "Temperature/pressure reading failed\r\n");
 80020f2:	4942      	ldr	r1, [pc, #264]	; (80021fc <ReadDataFromSensors+0x1d0>)
 80020f4:	483a      	ldr	r0, [pc, #232]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020f6:	f005 f86f 	bl	80071d8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80020fa:	4839      	ldr	r0, [pc, #228]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80020fc:	f7fe f8c0 	bl	8000280 <strlen>
 8002100:	4603      	mov	r3, r0
 8002102:	b29a      	uxth	r2, r3
 8002104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002108:	4935      	ldr	r1, [pc, #212]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 800210a:	4836      	ldr	r0, [pc, #216]	; (80021e4 <ReadDataFromSensors+0x1b8>)
 800210c:	f003 fd70 	bl	8005bf0 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8002110:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002114:	f001 f84e 	bl	80031b4 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &BMP_temperature, &BMP_pressure,
 8002118:	4b39      	ldr	r3, [pc, #228]	; (8002200 <ReadDataFromSensors+0x1d4>)
 800211a:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <ReadDataFromSensors+0x1d8>)
 800211c:	493a      	ldr	r1, [pc, #232]	; (8002208 <ReadDataFromSensors+0x1dc>)
 800211e:	483b      	ldr	r0, [pc, #236]	; (800220c <ReadDataFromSensors+0x1e0>)
 8002120:	f7ff ff38 	bl	8001f94 <bmp280_read_float>
 8002124:	4603      	mov	r3, r0
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e0      	bne.n	80020f2 <ReadDataFromSensors+0xc6>
	}

	sprintf(uartData, "Pressure: %.2f Pa, Temperature: %.2f C", BMP_pressure,
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <ReadDataFromSensors+0x1d8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fa0f 	bl	8000558 <__aeabi_f2d>
 800213a:	4604      	mov	r4, r0
 800213c:	460d      	mov	r5, r1
 800213e:	4b32      	ldr	r3, [pc, #200]	; (8002208 <ReadDataFromSensors+0x1dc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa08 	bl	8000558 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	e9cd 2300 	strd	r2, r3, [sp]
 8002150:	4622      	mov	r2, r4
 8002152:	462b      	mov	r3, r5
 8002154:	492e      	ldr	r1, [pc, #184]	; (8002210 <ReadDataFromSensors+0x1e4>)
 8002156:	4822      	ldr	r0, [pc, #136]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 8002158:	f005 f83e 	bl	80071d8 <siprintf>
			BMP_temperature);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 800215c:	4820      	ldr	r0, [pc, #128]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 800215e:	f7fe f88f 	bl	8000280 <strlen>
 8002162:	4603      	mov	r3, r0
 8002164:	b29a      	uxth	r2, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	491d      	ldr	r1, [pc, #116]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 800216c:	481d      	ldr	r0, [pc, #116]	; (80021e4 <ReadDataFromSensors+0x1b8>)
 800216e:	f003 fd3f 	bl	8005bf0 <HAL_UART_Transmit>
	if (bme280p) {
 8002172:	4b28      	ldr	r3, [pc, #160]	; (8002214 <ReadDataFromSensors+0x1e8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <ReadDataFromSensors+0x17c>
		sprintf(uartData, ", Humidity: %.2f\r\n", BMP_humidity);
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <ReadDataFromSensors+0x1d4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9ea 	bl	8000558 <__aeabi_f2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4923      	ldr	r1, [pc, #140]	; (8002218 <ReadDataFromSensors+0x1ec>)
 800218a:	4815      	ldr	r0, [pc, #84]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 800218c:	f005 f824 	bl	80071d8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002190:	4813      	ldr	r0, [pc, #76]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 8002192:	f7fe f875 	bl	8000280 <strlen>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	4910      	ldr	r1, [pc, #64]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80021a0:	4810      	ldr	r0, [pc, #64]	; (80021e4 <ReadDataFromSensors+0x1b8>)
 80021a2:	f003 fd25 	bl	8005bf0 <HAL_UART_Transmit>
 80021a6:	e00e      	b.n	80021c6 <ReadDataFromSensors+0x19a>
	}

	else {
		sprintf((char*) uartData, "\r\n");
 80021a8:	491c      	ldr	r1, [pc, #112]	; (800221c <ReadDataFromSensors+0x1f0>)
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80021ac:	f005 f814 	bl	80071d8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80021b0:	480b      	ldr	r0, [pc, #44]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80021b2:	f7fe f865 	bl	8000280 <strlen>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <ReadDataFromSensors+0x1b4>)
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <ReadDataFromSensors+0x1b8>)
 80021c2:	f003 fd15 	bl	8005bf0 <HAL_UART_Transmit>
	}

	// Set LED for Debugging
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2120      	movs	r1, #32
 80021ca:	4803      	ldr	r0, [pc, #12]	; (80021d8 <ReadDataFromSensors+0x1ac>)
 80021cc:	f001 fa98 	bl	8003700 <HAL_GPIO_WritePin>
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40020000 	.word	0x40020000
 80021dc:	0800b9a0 	.word	0x0800b9a0
 80021e0:	20000340 	.word	0x20000340
 80021e4:	200002f8 	.word	0x200002f8
 80021e8:	2000051c 	.word	0x2000051c
 80021ec:	20000524 	.word	0x20000524
 80021f0:	20000528 	.word	0x20000528
 80021f4:	0800b9b4 	.word	0x0800b9b4
 80021f8:	0800b9e0 	.word	0x0800b9e0
 80021fc:	0800b9f4 	.word	0x0800b9f4
 8002200:	20000518 	.word	0x20000518
 8002204:	20000510 	.word	0x20000510
 8002208:	20000514 	.word	0x20000514
 800220c:	200004d8 	.word	0x200004d8
 8002210:	0800ba1c 	.word	0x0800ba1c
 8002214:	2000050c 	.word	0x2000050c
 8002218:	0800ba44 	.word	0x0800ba44
 800221c:	0800ba58 	.word	0x0800ba58

08002220 <ProcessData>:

void ProcessData() {
 8002220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
	// Choose Data & Calibrate

	// Choose DHT22 over BMP-280 for temperature because it is more accurate
	if (DHT_temperature != 0) {
 8002228:	4b9d      	ldr	r3, [pc, #628]	; (80024a0 <ProcessData+0x280>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	d004      	beq.n	8002242 <ProcessData+0x22>
		cur_temperature = DHT_temperature;
 8002238:	4b99      	ldr	r3, [pc, #612]	; (80024a0 <ProcessData+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a99      	ldr	r2, [pc, #612]	; (80024a4 <ProcessData+0x284>)
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e010      	b.n	8002264 <ProcessData+0x44>
	} else if (BMP_temperature != 0) {
 8002242:	4b99      	ldr	r3, [pc, #612]	; (80024a8 <ProcessData+0x288>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	eef5 7a40 	vcmp.f32	s15, #0.0
 800224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002250:	d004      	beq.n	800225c <ProcessData+0x3c>
		cur_temperature = BMP_temperature;
 8002252:	4b95      	ldr	r3, [pc, #596]	; (80024a8 <ProcessData+0x288>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a93      	ldr	r2, [pc, #588]	; (80024a4 <ProcessData+0x284>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e003      	b.n	8002264 <ProcessData+0x44>
	} else {
		cur_temperature = prev_temperature;
 800225c:	4b93      	ldr	r3, [pc, #588]	; (80024ac <ProcessData+0x28c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a90      	ldr	r2, [pc, #576]	; (80024a4 <ProcessData+0x284>)
 8002262:	6013      	str	r3, [r2, #0]
	}

	// Humidity is DHT22-exclusive
	if (DHT_humidity != 0) {
 8002264:	4b92      	ldr	r3, [pc, #584]	; (80024b0 <ProcessData+0x290>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d00a      	beq.n	800228a <ProcessData+0x6a>
		cur_humidity = DHT_humidity - 10; // Calibration
 8002274:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <ProcessData+0x290>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800227e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002282:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <ProcessData+0x294>)
 8002284:	edc3 7a00 	vstr	s15, [r3]
 8002288:	e003      	b.n	8002292 <ProcessData+0x72>
	} else {
		cur_humidity = prev_humidity;
 800228a:	4b8b      	ldr	r3, [pc, #556]	; (80024b8 <ProcessData+0x298>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a89      	ldr	r2, [pc, #548]	; (80024b4 <ProcessData+0x294>)
 8002290:	6013      	str	r3, [r2, #0]
	}

	// Pressure is BMP-280-exclusive
	if (BMP_pressure != 0) {
 8002292:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <ProcessData+0x29c>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	eef5 7a40 	vcmp.f32	s15, #0.0
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d004      	beq.n	80022ac <ProcessData+0x8c>
		cur_pressure = BMP_pressure;
 80022a2:	4b86      	ldr	r3, [pc, #536]	; (80024bc <ProcessData+0x29c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a86      	ldr	r2, [pc, #536]	; (80024c0 <ProcessData+0x2a0>)
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e003      	b.n	80022b4 <ProcessData+0x94>
	} else {
		cur_pressure = BMP_pressure;
 80022ac:	4b83      	ldr	r3, [pc, #524]	; (80024bc <ProcessData+0x29c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a83      	ldr	r2, [pc, #524]	; (80024c0 <ProcessData+0x2a0>)
 80022b2:	6013      	str	r3, [r2, #0]

	// Process Prediction Algorithm

	// Calculate Pressure at Sea Level
	double temp1 = 1.0
			- (0.0065 * altitude)
 80022b4:	4b83      	ldr	r3, [pc, #524]	; (80024c4 <ProcessData+0x2a4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94d 	bl	8000558 <__aeabi_f2d>
 80022be:	a368      	add	r3, pc, #416	; (adr r3, 8002460 <ProcessData+0x240>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe f9a0 	bl	8000608 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4690      	mov	r8, r2
 80022ce:	4699      	mov	r9, r3
					/ (cur_temperature + 0.0065 * altitude + 273.15);
 80022d0:	4b74      	ldr	r3, [pc, #464]	; (80024a4 <ProcessData+0x284>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f93f 	bl	8000558 <__aeabi_f2d>
 80022da:	4604      	mov	r4, r0
 80022dc:	460d      	mov	r5, r1
 80022de:	4b79      	ldr	r3, [pc, #484]	; (80024c4 <ProcessData+0x2a4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f938 	bl	8000558 <__aeabi_f2d>
 80022e8:	a35d      	add	r3, pc, #372	; (adr r3, 8002460 <ProcessData+0x240>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f98b 	bl	8000608 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4620      	mov	r0, r4
 80022f8:	4629      	mov	r1, r5
 80022fa:	f7fd ffcf 	bl	800029c <__adddf3>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	a358      	add	r3, pc, #352	; (adr r3, 8002468 <ProcessData+0x248>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fd ffc6 	bl	800029c <__adddf3>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4640      	mov	r0, r8
 8002316:	4649      	mov	r1, r9
 8002318:	f7fe faa0 	bl	800085c <__aeabi_ddiv>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
	double temp1 = 1.0
 8002320:	f04f 0000 	mov.w	r0, #0
 8002324:	4968      	ldr	r1, [pc, #416]	; (80024c8 <ProcessData+0x2a8>)
 8002326:	f7fd ffb7 	bl	8000298 <__aeabi_dsub>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temp2 = pow(temp1, -5.257);
 8002332:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8002470 <ProcessData+0x250>
 8002336:	ed97 0b04 	vldr	d0, [r7, #16]
 800233a:	f008 fbed 	bl	800ab18 <pow>
 800233e:	ed87 0b02 	vstr	d0, [r7, #8]
	double p0 = cur_pressure / 100 * temp2;
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <ProcessData+0x2a0>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80024cc <ProcessData+0x2ac>
 800234c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002350:	ee16 0a90 	vmov	r0, s13
 8002354:	f7fe f900 	bl	8000558 <__aeabi_f2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002360:	f7fe f952 	bl	8000608 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	e9c7 2300 	strd	r2, r3, [r7]

	// Pressure is Rising
	if (cur_pressure > prev_pressure + 160) {
 800236c:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <ProcessData+0x2b0>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80024d4 <ProcessData+0x2b4>
 8002376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800237a:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <ProcessData+0x2a0>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	d518      	bpl.n	80023bc <ProcessData+0x19c>
		z = 185 - 0.16 * p0;
 800238a:	a33b      	add	r3, pc, #236	; (adr r3, 8002478 <ProcessData+0x258>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002394:	f7fe f938 	bl	8000608 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	a138      	add	r1, pc, #224	; (adr r1, 8002480 <ProcessData+0x260>)
 800239e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023a2:	f7fd ff79 	bl	8000298 <__aeabi_dsub>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fc03 	bl	8000bb8 <__aeabi_d2uiz>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <ProcessData+0x2b8>)
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e03f      	b.n	800243c <ProcessData+0x21c>
	}
	// Pressure is Falling
	else if (cur_pressure < prev_pressure - 160) {
 80023bc:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <ProcessData+0x2b0>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80024d4 <ProcessData+0x2b4>
 80023c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <ProcessData+0x2a0>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	dd18      	ble.n	800240c <ProcessData+0x1ec>
		z = 127 - 0.12 * p0;
 80023da:	a32b      	add	r3, pc, #172	; (adr r3, 8002488 <ProcessData+0x268>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023e4:	f7fe f910 	bl	8000608 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	a128      	add	r1, pc, #160	; (adr r1, 8002490 <ProcessData+0x270>)
 80023ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023f2:	f7fd ff51 	bl	8000298 <__aeabi_dsub>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fbdb 	bl	8000bb8 <__aeabi_d2uiz>
 8002402:	4603      	mov	r3, r0
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <ProcessData+0x2b8>)
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e017      	b.n	800243c <ProcessData+0x21c>
	}
	// Pressure is Steady
	else {
		z = 144 - 0.13 * p0;
 800240c:	a322      	add	r3, pc, #136	; (adr r3, 8002498 <ProcessData+0x278>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002416:	f7fe f8f7 	bl	8000608 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	f04f 0000 	mov.w	r0, #0
 8002422:	492e      	ldr	r1, [pc, #184]	; (80024dc <ProcessData+0x2bc>)
 8002424:	f7fd ff38 	bl	8000298 <__aeabi_dsub>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbc2 	bl	8000bb8 <__aeabi_d2uiz>
 8002434:	4603      	mov	r3, r0
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <ProcessData+0x2b8>)
 800243a:	701a      	strb	r2, [r3, #0]
	}

	if(cur_humidity > 80.0)
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <ProcessData+0x294>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80024e0 <ProcessData+0x2c0>
 8002446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	dd49      	ble.n	80024e4 <ProcessData+0x2c4>
	{
		z += 2;
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <ProcessData+0x2b8>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	3302      	adds	r3, #2
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <ProcessData+0x2b8>)
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e052      	b.n	8002504 <ProcessData+0x2e4>
 800245e:	bf00      	nop
 8002460:	76c8b439 	.word	0x76c8b439
 8002464:	3f7a9fbe 	.word	0x3f7a9fbe
 8002468:	66666666 	.word	0x66666666
 800246c:	40711266 	.word	0x40711266
 8002470:	020c49ba 	.word	0x020c49ba
 8002474:	c015072b 	.word	0xc015072b
 8002478:	47ae147b 	.word	0x47ae147b
 800247c:	3fc47ae1 	.word	0x3fc47ae1
 8002480:	00000000 	.word	0x00000000
 8002484:	40672000 	.word	0x40672000
 8002488:	eb851eb8 	.word	0xeb851eb8
 800248c:	3fbeb851 	.word	0x3fbeb851
 8002490:	00000000 	.word	0x00000000
 8002494:	405fc000 	.word	0x405fc000
 8002498:	0a3d70a4 	.word	0x0a3d70a4
 800249c:	3fc0a3d7 	.word	0x3fc0a3d7
 80024a0:	20000524 	.word	0x20000524
 80024a4:	20000530 	.word	0x20000530
 80024a8:	20000514 	.word	0x20000514
 80024ac:	2000053c 	.word	0x2000053c
 80024b0:	20000528 	.word	0x20000528
 80024b4:	20000534 	.word	0x20000534
 80024b8:	20000540 	.word	0x20000540
 80024bc:	20000510 	.word	0x20000510
 80024c0:	2000052c 	.word	0x2000052c
 80024c4:	20000000 	.word	0x20000000
 80024c8:	3ff00000 	.word	0x3ff00000
 80024cc:	42c80000 	.word	0x42c80000
 80024d0:	20000538 	.word	0x20000538
 80024d4:	43200000 	.word	0x43200000
 80024d8:	20000544 	.word	0x20000544
 80024dc:	40620000 	.word	0x40620000
 80024e0:	42a00000 	.word	0x42a00000
	}
	else if(cur_humidity > 55.0)
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <ProcessData+0x35c>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002580 <ProcessData+0x360>
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	dd05      	ble.n	8002504 <ProcessData+0x2e4>
	{
		z += 1;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <ProcessData+0x364>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <ProcessData+0x364>)
 8002502:	701a      	strb	r2, [r3, #0]
	}

//	sprintf(uartData, "\r\nDEBUG: %f %f %f\r\n", temp1, temp2, p0);
//	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);

	sprintf(uartData, "\r\nForecast Number = %d\r\n", z);
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <ProcessData+0x364>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	491f      	ldr	r1, [pc, #124]	; (8002588 <ProcessData+0x368>)
 800250c:	481f      	ldr	r0, [pc, #124]	; (800258c <ProcessData+0x36c>)
 800250e:	f004 fe63 	bl	80071d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002512:	481e      	ldr	r0, [pc, #120]	; (800258c <ProcessData+0x36c>)
 8002514:	f7fd feb4 	bl	8000280 <strlen>
 8002518:	4603      	mov	r3, r0
 800251a:	b29a      	uxth	r2, r3
 800251c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002520:	491a      	ldr	r1, [pc, #104]	; (800258c <ProcessData+0x36c>)
 8002522:	481b      	ldr	r0, [pc, #108]	; (8002590 <ProcessData+0x370>)
 8002524:	f003 fb64 	bl	8005bf0 <HAL_UART_Transmit>

	// Set Data History
	if (cur_pressure != 0) {
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <ProcessData+0x374>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	d003      	beq.n	8002540 <ProcessData+0x320>
		prev_pressure = cur_pressure;
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <ProcessData+0x374>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a16      	ldr	r2, [pc, #88]	; (8002598 <ProcessData+0x378>)
 800253e:	6013      	str	r3, [r2, #0]
	}
	if (cur_temperature != 0) {
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <ProcessData+0x37c>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	eef5 7a40 	vcmp.f32	s15, #0.0
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d003      	beq.n	8002558 <ProcessData+0x338>
		prev_temperature = cur_temperature;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <ProcessData+0x37c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <ProcessData+0x380>)
 8002556:	6013      	str	r3, [r2, #0]
	}
	if (cur_humidity != 0) {
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <ProcessData+0x35c>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	d003      	beq.n	8002570 <ProcessData+0x350>
		prev_humidity = cur_humidity;
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <ProcessData+0x35c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <ProcessData+0x384>)
 800256e:	6013      	str	r3, [r2, #0]
	}
}
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800257a:	bf00      	nop
 800257c:	20000534 	.word	0x20000534
 8002580:	425c0000 	.word	0x425c0000
 8002584:	20000544 	.word	0x20000544
 8002588:	0800ba5c 	.word	0x0800ba5c
 800258c:	20000340 	.word	0x20000340
 8002590:	200002f8 	.word	0x200002f8
 8002594:	2000052c 	.word	0x2000052c
 8002598:	20000538 	.word	0x20000538
 800259c:	20000530 	.word	0x20000530
 80025a0:	2000053c 	.word	0x2000053c
 80025a4:	20000540 	.word	0x20000540

080025a8 <SendDataToNodeMCU>:

void SendDataToNodeMCU() {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af06      	add	r7, sp, #24
	// Decompose dustval to string (sprintf won't work with float)
	int pressure_before_decimal = (int) cur_pressure;
 80025ae:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <SendDataToNodeMCU+0x110>)
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b8:	ee17 3a90 	vmov	r3, s15
 80025bc:	617b      	str	r3, [r7, #20]
	int pressure_after_decimal = (int) (100
			* (cur_pressure - pressure_before_decimal));
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <SendDataToNodeMCU+0x110>)
 80025c0:	ed93 7a00 	vldr	s14, [r3]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80026bc <SendDataToNodeMCU+0x114>
 80025d6:	ee67 7a87 	vmul.f32	s15, s15, s14
	int pressure_after_decimal = (int) (100
 80025da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025de:	ee17 3a90 	vmov	r3, s15
 80025e2:	613b      	str	r3, [r7, #16]

	int temperature_before_decimal = (int) cur_temperature;
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <SendDataToNodeMCU+0x118>)
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ee:	ee17 3a90 	vmov	r3, s15
 80025f2:	60fb      	str	r3, [r7, #12]
	int temperature_after_decimal = (int) (100
			* (cur_temperature - temperature_before_decimal));
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <SendDataToNodeMCU+0x118>)
 80025f6:	ed93 7a00 	vldr	s14, [r3]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002608:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80026bc <SendDataToNodeMCU+0x114>
 800260c:	ee67 7a87 	vmul.f32	s15, s15, s14
	int temperature_after_decimal = (int) (100
 8002610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002614:	ee17 3a90 	vmov	r3, s15
 8002618:	60bb      	str	r3, [r7, #8]
	int humidity_before_decimal = (int) cur_humidity;
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <SendDataToNodeMCU+0x11c>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002624:	ee17 3a90 	vmov	r3, s15
 8002628:	607b      	str	r3, [r7, #4]
	int humidity_after_decimal = (int) (100
			* (cur_humidity - humidity_before_decimal));
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <SendDataToNodeMCU+0x11c>)
 800262c:	ed93 7a00 	vldr	s14, [r3]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026bc <SendDataToNodeMCU+0x114>
 8002642:	ee67 7a87 	vmul.f32	s15, s15, s14
	int humidity_after_decimal = (int) (100
 8002646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264a:	ee17 3a90 	vmov	r3, s15
 800264e:	603b      	str	r3, [r7, #0]

	sprintf(nodemcu_buffer, "s%d.%d,%d.%d,%d.%d,%d\n", pressure_before_decimal,
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <SendDataToNodeMCU+0x120>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	9303      	str	r3, [sp, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4918      	ldr	r1, [pc, #96]	; (80026cc <SendDataToNodeMCU+0x124>)
 800266c:	4818      	ldr	r0, [pc, #96]	; (80026d0 <SendDataToNodeMCU+0x128>)
 800266e:	f004 fdb3 	bl	80071d8 <siprintf>
			temperature_after_decimal, humidity_before_decimal,
			humidity_after_decimal, z);
	//dummy
	//	sprintf(pmbuffer, "s1.2,3.4,5.67,20e");
	// Transmit the message to ESP8266 in the correct format
	HAL_UART_Transmit(&huart1, (uint8_t*) nodemcu_buffer, strlen(nodemcu_buffer),
 8002672:	4817      	ldr	r0, [pc, #92]	; (80026d0 <SendDataToNodeMCU+0x128>)
 8002674:	f7fd fe04 	bl	8000280 <strlen>
 8002678:	4603      	mov	r3, r0
 800267a:	b29a      	uxth	r2, r3
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
 8002680:	4913      	ldr	r1, [pc, #76]	; (80026d0 <SendDataToNodeMCU+0x128>)
 8002682:	4814      	ldr	r0, [pc, #80]	; (80026d4 <SendDataToNodeMCU+0x12c>)
 8002684:	f003 fab4 	bl	8005bf0 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	HAL_Delay(500);
 8002688:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800268c:	f000 fd92 	bl	80031b4 <HAL_Delay>

	// uncomment to debug (print the sent message to console (baudrate=115200))
	sprintf(uartData, "\r\n===============\r\nmessage = %s\r===============\r\n", nodemcu_buffer);
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <SendDataToNodeMCU+0x128>)
 8002692:	4911      	ldr	r1, [pc, #68]	; (80026d8 <SendDataToNodeMCU+0x130>)
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <SendDataToNodeMCU+0x134>)
 8002696:	f004 fd9f 	bl	80071d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData),
 800269a:	4810      	ldr	r0, [pc, #64]	; (80026dc <SendDataToNodeMCU+0x134>)
 800269c:	f7fd fdf0 	bl	8000280 <strlen>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <SendDataToNodeMCU+0x134>)
 80026aa:	480d      	ldr	r0, [pc, #52]	; (80026e0 <SendDataToNodeMCU+0x138>)
 80026ac:	f003 faa0 	bl	8005bf0 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000052c 	.word	0x2000052c
 80026bc:	42c80000 	.word	0x42c80000
 80026c0:	20000530 	.word	0x20000530
 80026c4:	20000534 	.word	0x20000534
 80026c8:	20000544 	.word	0x20000544
 80026cc:	0800ba78 	.word	0x0800ba78
 80026d0:	20000440 	.word	0x20000440
 80026d4:	200002b0 	.word	0x200002b0
 80026d8:	0800ba90 	.word	0x0800ba90
 80026dc:	20000340 	.word	0x20000340
 80026e0:	200002f8 	.word	0x200002f8

080026e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026ea:	f000 fcf1 	bl	80030d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ee:	f000 f893 	bl	8002818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026f2:	f000 f9f1 	bl	8002ad8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80026f6:	f000 f9c5 	bl	8002a84 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80026fa:	f000 f999 	bl	8002a30 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80026fe:	f000 f921 	bl	8002944 <MX_TIM3_Init>
  MX_I2C2_Init();
 8002702:	f000 f8f1 	bl	80028e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	bmp280_init_default_params(&bmp280.params);
 8002706:	4836      	ldr	r0, [pc, #216]	; (80027e0 <main+0xfc>)
 8002708:	f7fe fe62 	bl	80013d0 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <main+0x100>)
 800270e:	2276      	movs	r2, #118	; 0x76
 8002710:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <main+0x100>)
 8002714:	4a34      	ldr	r2, [pc, #208]	; (80027e8 <main+0x104>)
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002718:	e012      	b.n	8002740 <main+0x5c>
		sprintf(uartData, "BMP280 initialization failed\r\n");
 800271a:	4934      	ldr	r1, [pc, #208]	; (80027ec <main+0x108>)
 800271c:	4834      	ldr	r0, [pc, #208]	; (80027f0 <main+0x10c>)
 800271e:	f004 fd5b 	bl	80071d8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002722:	4833      	ldr	r0, [pc, #204]	; (80027f0 <main+0x10c>)
 8002724:	f7fd fdac 	bl	8000280 <strlen>
 8002728:	4603      	mov	r3, r0
 800272a:	b29a      	uxth	r2, r3
 800272c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002730:	492f      	ldr	r1, [pc, #188]	; (80027f0 <main+0x10c>)
 8002732:	4830      	ldr	r0, [pc, #192]	; (80027f4 <main+0x110>)
 8002734:	f003 fa5c 	bl	8005bf0 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8002738:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800273c:	f000 fd3a 	bl	80031b4 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002740:	4927      	ldr	r1, [pc, #156]	; (80027e0 <main+0xfc>)
 8002742:	4828      	ldr	r0, [pc, #160]	; (80027e4 <main+0x100>)
 8002744:	f7fe ffbe 	bl	80016c4 <bmp280_init>
 8002748:	4603      	mov	r3, r0
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e2      	bne.n	800271a <main+0x36>
	}
	bme280p = bmp280.id == BME280_CHIP_ID;
 8002754:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <main+0x100>)
 8002756:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800275a:	2b60      	cmp	r3, #96	; 0x60
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <main+0x114>)
 8002766:	701a      	strb	r2, [r3, #0]
	sprintf(uartData, "\r\nBMP280: found %s\r\n",
			bme280p ? "BME280" : "BMP280");
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <main+0x114>)
 800276a:	781b      	ldrb	r3, [r3, #0]
	sprintf(uartData, "\r\nBMP280: found %s\r\n",
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <main+0x90>
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <main+0x118>)
 8002772:	e000      	b.n	8002776 <main+0x92>
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <main+0x11c>)
 8002776:	461a      	mov	r2, r3
 8002778:	4922      	ldr	r1, [pc, #136]	; (8002804 <main+0x120>)
 800277a:	481d      	ldr	r0, [pc, #116]	; (80027f0 <main+0x10c>)
 800277c:	f004 fd2c 	bl	80071d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002780:	481b      	ldr	r0, [pc, #108]	; (80027f0 <main+0x10c>)
 8002782:	f7fd fd7d 	bl	8000280 <strlen>
 8002786:	4603      	mov	r3, r0
 8002788:	b29a      	uxth	r2, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	4918      	ldr	r1, [pc, #96]	; (80027f0 <main+0x10c>)
 8002790:	4818      	ldr	r0, [pc, #96]	; (80027f4 <main+0x110>)
 8002792:	f003 fa2d 	bl	8005bf0 <HAL_UART_Transmit>
	HAL_Delay(1000); // WAIT
 8002796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800279a:	f000 fd0b 	bl	80031b4 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint32_t currentTick = HAL_GetTick();
 800279e:	f000 fcfd 	bl	800319c <HAL_GetTick>
 80027a2:	6078      	str	r0, [r7, #4]

		if(currentTick - lastReadSensorTick >= readSensorInterval){
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <main+0x124>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	1ad2      	subs	r2, r2, r3
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <main+0x128>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d306      	bcc.n	80027c2 <main+0xde>
			ReadDataFromSensors();
 80027b4:	f7ff fc3a 	bl	800202c <ReadDataFromSensors>
			ProcessData();
 80027b8:	f7ff fd32 	bl	8002220 <ProcessData>
			lastReadSensorTick = currentTick;
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <main+0x124>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
		}

		if(currentTick - lastSendDataTick >= sendDataInterval){
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <main+0x12c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	1ad2      	subs	r2, r2, r3
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <main+0x130>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d3e5      	bcc.n	800279e <main+0xba>
			// Send Data to NodeMCU
			SendDataToNodeMCU();
 80027d2:	f7ff fee9 	bl	80025a8 <SendDataToNodeMCU>
			lastSendDataTick = currentTick;
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <main+0x12c>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6013      	str	r3, [r2, #0]
	while (1) {
 80027dc:	e7df      	b.n	800279e <main+0xba>
 80027de:	bf00      	nop
 80027e0:	20000504 	.word	0x20000504
 80027e4:	200004d8 	.word	0x200004d8
 80027e8:	20000214 	.word	0x20000214
 80027ec:	0800bac4 	.word	0x0800bac4
 80027f0:	20000340 	.word	0x20000340
 80027f4:	200002f8 	.word	0x200002f8
 80027f8:	2000050c 	.word	0x2000050c
 80027fc:	0800bae4 	.word	0x0800bae4
 8002800:	0800baec 	.word	0x0800baec
 8002804:	0800baf4 	.word	0x0800baf4
 8002808:	20000548 	.word	0x20000548
 800280c:	20000004 	.word	0x20000004
 8002810:	2000054c 	.word	0x2000054c
 8002814:	20000008 	.word	0x20000008

08002818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b094      	sub	sp, #80	; 0x50
 800281c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281e:	f107 0320 	add.w	r3, r7, #32
 8002822:	2230      	movs	r2, #48	; 0x30
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f004 fd39 	bl	800729e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <SystemClock_Config+0xc8>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <SystemClock_Config+0xc8>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6413      	str	r3, [r2, #64]	; 0x40
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <SystemClock_Config+0xc8>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <SystemClock_Config+0xcc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a20      	ldr	r2, [pc, #128]	; (80028e4 <SystemClock_Config+0xcc>)
 8002862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <SystemClock_Config+0xcc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002874:	2301      	movs	r3, #1
 8002876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800287e:	2302      	movs	r3, #2
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002888:	2308      	movs	r3, #8
 800288a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800288c:	2364      	movs	r3, #100	; 0x64
 800288e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002890:	2302      	movs	r3, #2
 8002892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002894:	2304      	movs	r3, #4
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002898:	f107 0320 	add.w	r3, r7, #32
 800289c:	4618      	mov	r0, r3
 800289e:	f001 ff6d 	bl	800477c <HAL_RCC_OscConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028a8:	f000 f986 	bl	8002bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ac:	230f      	movs	r3, #15
 80028ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b0:	2302      	movs	r3, #2
 80028b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	2101      	movs	r1, #1
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 f9cf 	bl	8004c6c <HAL_RCC_ClockConfig>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80028d4:	f000 f970 	bl	8002bb8 <Error_Handler>
  }
}
 80028d8:	bf00      	nop
 80028da:	3750      	adds	r7, #80	; 0x50
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000

080028e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_I2C2_Init+0x50>)
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <MX_I2C2_Init+0x54>)
 80028f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_I2C2_Init+0x50>)
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <MX_I2C2_Init+0x58>)
 80028f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <MX_I2C2_Init+0x50>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_I2C2_Init+0x50>)
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <MX_I2C2_Init+0x50>)
 8002906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800290a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <MX_I2C2_Init+0x50>)
 800290e:	2200      	movs	r2, #0
 8002910:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <MX_I2C2_Init+0x50>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <MX_I2C2_Init+0x50>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <MX_I2C2_Init+0x50>)
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <MX_I2C2_Init+0x50>)
 8002926:	f000 ff05 	bl	8003734 <HAL_I2C_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002930:	f000 f942 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000214 	.word	0x20000214
 800293c:	40005800 	.word	0x40005800
 8002940:	000186a0 	.word	0x000186a0

08002944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	f107 0320 	add.w	r3, r7, #32
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]
 8002972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002974:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <MX_TIM3_Init+0xe4>)
 8002976:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <MX_TIM3_Init+0xe8>)
 8002978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <MX_TIM3_Init+0xe4>)
 800297c:	2263      	movs	r2, #99	; 0x63
 800297e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <MX_TIM3_Init+0xe4>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002986:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <MX_TIM3_Init+0xe4>)
 8002988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <MX_TIM3_Init+0xe4>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <MX_TIM3_Init+0xe4>)
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800299a:	4823      	ldr	r0, [pc, #140]	; (8002a28 <MX_TIM3_Init+0xe4>)
 800299c:	f002 fb86 	bl	80050ac <HAL_TIM_Base_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80029a6:	f000 f907 	bl	8002bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b4:	4619      	mov	r1, r3
 80029b6:	481c      	ldr	r0, [pc, #112]	; (8002a28 <MX_TIM3_Init+0xe4>)
 80029b8:	f002 fce2 	bl	8005380 <HAL_TIM_ConfigClockSource>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80029c2:	f000 f8f9 	bl	8002bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029c6:	4818      	ldr	r0, [pc, #96]	; (8002a28 <MX_TIM3_Init+0xe4>)
 80029c8:	f002 fbbf 	bl	800514a <HAL_TIM_PWM_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80029d2:	f000 f8f1 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029de:	f107 0320 	add.w	r3, r7, #32
 80029e2:	4619      	mov	r1, r3
 80029e4:	4810      	ldr	r0, [pc, #64]	; (8002a28 <MX_TIM3_Init+0xe4>)
 80029e6:	f003 f845 	bl	8005a74 <HAL_TIMEx_MasterConfigSynchronization>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80029f0:	f000 f8e2 	bl	8002bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f4:	2360      	movs	r3, #96	; 0x60
 80029f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4807      	ldr	r0, [pc, #28]	; (8002a28 <MX_TIM3_Init+0xe4>)
 8002a0c:	f002 fbf6 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002a16:	f000 f8cf 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a1a:	4803      	ldr	r0, [pc, #12]	; (8002a28 <MX_TIM3_Init+0xe4>)
 8002a1c:	f000 f976 	bl	8002d0c <HAL_TIM_MspPostInit>

}
 8002a20:	bf00      	nop
 8002a22:	3738      	adds	r7, #56	; 0x38
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000268 	.word	0x20000268
 8002a2c:	40000400 	.word	0x40000400

08002a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <MX_USART1_UART_Init+0x50>)
 8002a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a68:	f003 f872 	bl	8005b50 <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a72:	f000 f8a1 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200002b0 	.word	0x200002b0
 8002a80:	40011000 	.word	0x40011000

08002a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <MX_USART2_UART_Init+0x50>)
 8002a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002aaa:	220c      	movs	r2, #12
 8002aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002abc:	f003 f848 	bl	8005b50 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ac6:	f000 f877 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200002f8 	.word	0x200002f8
 8002ad4:	40004400 	.word	0x40004400

08002ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b27      	ldr	r3, [pc, #156]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a26      	ldr	r2, [pc, #152]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_GPIO_Init+0xd4>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002b64:	4812      	ldr	r0, [pc, #72]	; (8002bb0 <MX_GPIO_Init+0xd8>)
 8002b66:	f000 fdcb 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <MX_GPIO_Init+0xdc>)
 8002b82:	f000 fc21 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002b86:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <MX_GPIO_Init+0xd8>)
 8002ba0:	f000 fc12 	bl	80033c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40020800 	.word	0x40020800

08002bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8002bc0:	e7fe      	b.n	8002bc0 <Error_Handler+0x8>
	...

08002bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_MspInit+0x4c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <HAL_MspInit+0x4c>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_MspInit+0x4c>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_MspInit+0x4c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <HAL_MspInit+0x4c>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_MspInit+0x4c>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800

08002c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_I2C_MspInit+0xa8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d13d      	bne.n	8002cb2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_I2C_MspInit+0xac>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <HAL_I2C_MspInit+0xac>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <HAL_I2C_MspInit+0xac>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c58:	2312      	movs	r3, #18
 8002c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c64:	2304      	movs	r3, #4
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4815      	ldr	r0, [pc, #84]	; (8002cc4 <HAL_I2C_MspInit+0xb0>)
 8002c70:	f000 fbaa 	bl	80033c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7a:	2312      	movs	r3, #18
 8002c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002c86:	2309      	movs	r3, #9
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480c      	ldr	r0, [pc, #48]	; (8002cc4 <HAL_I2C_MspInit+0xb0>)
 8002c92:	f000 fb99 	bl	80033c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_I2C_MspInit+0xac>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_I2C_MspInit+0xac>)
 8002ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_I2C_MspInit+0xac>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40005800 	.word	0x40005800
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400

08002cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <HAL_TIM_Base_MspInit+0x3c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_TIM_Base_MspInit+0x40>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_TIM_Base_MspInit+0x40>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <HAL_TIM_Base_MspInit+0x40>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40023800 	.word	0x40023800

08002d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_TIM_MspPostInit+0x68>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d11d      	bne.n	8002d6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_TIM_MspPostInit+0x6c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <HAL_TIM_MspPostInit+0x6c>)
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_TIM_MspPostInit+0x6c>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d4a:	2340      	movs	r3, #64	; 0x40
 8002d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4619      	mov	r1, r3
 8002d64:	4805      	ldr	r0, [pc, #20]	; (8002d7c <HAL_TIM_MspPostInit+0x70>)
 8002d66:	f000 fb2f 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40020800 	.word	0x40020800

08002d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 031c 	add.w	r3, r7, #28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a32      	ldr	r2, [pc, #200]	; (8002e68 <HAL_UART_MspInit+0xe8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d12d      	bne.n	8002dfe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a30      	ldr	r2, [pc, #192]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002dac:	f043 0310 	orr.w	r3, r3, #16
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dec:	2307      	movs	r3, #7
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	481e      	ldr	r0, [pc, #120]	; (8002e70 <HAL_UART_MspInit+0xf0>)
 8002df8:	f000 fae6 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dfc:	e030      	b.n	8002e60 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_UART_MspInit+0xf4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d12b      	bne.n	8002e60 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e16:	6413      	str	r3, [r2, #64]	; 0x40
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6313      	str	r3, [r2, #48]	; 0x30
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_UART_MspInit+0xec>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e40:	230c      	movs	r3, #12
 8002e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e50:	2307      	movs	r3, #7
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <HAL_UART_MspInit+0xf0>)
 8002e5c:	f000 fab4 	bl	80033c8 <HAL_GPIO_Init>
}
 8002e60:	bf00      	nop
 8002e62:	3730      	adds	r7, #48	; 0x30
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40011000 	.word	0x40011000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	40004400 	.word	0x40004400

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e7c:	e7fe      	b.n	8002e7c <NMI_Handler+0x4>

08002e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e82:	e7fe      	b.n	8002e82 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <BusFault_Handler+0x4>

08002e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <UsageFault_Handler+0x4>

08002e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec4:	f000 f956 	bl	8003174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return 1;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_kill>:

int _kill(int pid, int sig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ee6:	f004 fa2d 	bl	8007344 <__errno>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2216      	movs	r2, #22
 8002eee:	601a      	str	r2, [r3, #0]
  return -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_exit>:

void _exit (int status)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffe7 	bl	8002edc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f0e:	e7fe      	b.n	8002f0e <_exit+0x12>

08002f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e00a      	b.n	8002f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f22:	f3af 8000 	nop.w
 8002f26:	4601      	mov	r1, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	b2ca      	uxtb	r2, r1
 8002f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbf0      	blt.n	8002f22 <_read+0x12>
  }

  return len;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e009      	b.n	8002f70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbf1      	blt.n	8002f5c <_write+0x12>
  }
  return len;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_close>:

int _close(int file)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002faa:	605a      	str	r2, [r3, #4]
  return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <_isatty>:

int _isatty(int file)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <_sbrk+0x5c>)
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <_sbrk+0x60>)
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <_sbrk+0x64>)
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <_sbrk+0x68>)
 800300c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <_sbrk+0x64>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	429a      	cmp	r2, r3
 800301a:	d207      	bcs.n	800302c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800301c:	f004 f992 	bl	8007344 <__errno>
 8003020:	4603      	mov	r3, r0
 8003022:	220c      	movs	r2, #12
 8003024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	e009      	b.n	8003040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <_sbrk+0x64>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <_sbrk+0x64>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <_sbrk+0x64>)
 800303c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20020000 	.word	0x20020000
 800304c:	00000400 	.word	0x00000400
 8003050:	20000550 	.word	0x20000550
 8003054:	200006a8 	.word	0x200006a8

08003058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <SystemInit+0x20>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <SystemInit+0x20>)
 8003064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800307c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003080:	f7ff ffea 	bl	8003058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003084:	480c      	ldr	r0, [pc, #48]	; (80030b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003086:	490d      	ldr	r1, [pc, #52]	; (80030bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800308c:	e002      	b.n	8003094 <LoopCopyDataInit>

0800308e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800308e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003092:	3304      	adds	r3, #4

08003094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003098:	d3f9      	bcc.n	800308e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800309c:	4c0a      	ldr	r4, [pc, #40]	; (80030c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a0:	e001      	b.n	80030a6 <LoopFillZerobss>

080030a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a4:	3204      	adds	r2, #4

080030a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a8:	d3fb      	bcc.n	80030a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030aa:	f004 f951 	bl	8007350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ae:	f7ff fb19 	bl	80026e4 <main>
  bx  lr    
 80030b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030bc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80030c0:	0800bf90 	.word	0x0800bf90
  ldr r2, =_sbss
 80030c4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80030c8:	200006a4 	.word	0x200006a4

080030cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC_IRQHandler>
	...

080030d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_Init+0x40>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <HAL_Init+0x40>)
 80030da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_Init+0x40>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <HAL_Init+0x40>)
 80030e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <HAL_Init+0x40>)
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f8:	2003      	movs	r0, #3
 80030fa:	f000 f931 	bl	8003360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030fe:	200f      	movs	r0, #15
 8003100:	f000 f808 	bl	8003114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003104:	f7ff fd5e 	bl	8002bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00

08003114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_InitTick+0x54>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_InitTick+0x58>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800312a:	fbb3 f3f1 	udiv	r3, r3, r1
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f93b 	bl	80033ae <HAL_SYSTICK_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00e      	b.n	8003160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d80a      	bhi.n	800315e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003148:	2200      	movs	r2, #0
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f000 f911 	bl	8003376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003154:	4a06      	ldr	r2, [pc, #24]	; (8003170 <HAL_InitTick+0x5c>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000000c 	.word	0x2000000c
 800316c:	20000014 	.word	0x20000014
 8003170:	20000010 	.word	0x20000010

08003174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_IncTick+0x20>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_IncTick+0x24>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4413      	add	r3, r2
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_IncTick+0x24>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000014 	.word	0x20000014
 8003198:	20000554 	.word	0x20000554

0800319c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return uwTick;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_GetTick+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000554 	.word	0x20000554

080031b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff ffee 	bl	800319c <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d005      	beq.n	80031da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_Delay+0x44>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031da:	bf00      	nop
 80031dc:	f7ff ffde 	bl	800319c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d8f7      	bhi.n	80031dc <HAL_Delay+0x28>
  {
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000014 	.word	0x20000014

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	db0a      	blt.n	800328a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	490c      	ldr	r1, [pc, #48]	; (80032ac <__NVIC_SetPriority+0x4c>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	440b      	add	r3, r1
 8003284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003288:	e00a      	b.n	80032a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4908      	ldr	r1, [pc, #32]	; (80032b0 <__NVIC_SetPriority+0x50>)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3b04      	subs	r3, #4
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	440b      	add	r3, r1
 800329e:	761a      	strb	r2, [r3, #24]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000e100 	.word	0xe000e100
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	bf28      	it	cs
 80032d2:	2304      	movcs	r3, #4
 80032d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3304      	adds	r3, #4
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d902      	bls.n	80032e4 <NVIC_EncodePriority+0x30>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3b03      	subs	r3, #3
 80032e2:	e000      	b.n	80032e6 <NVIC_EncodePriority+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43d9      	mvns	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	4313      	orrs	r3, r2
         );
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	; 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800332c:	d301      	bcc.n	8003332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332e:	2301      	movs	r3, #1
 8003330:	e00f      	b.n	8003352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <SysTick_Config+0x40>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333a:	210f      	movs	r1, #15
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f7ff ff8e 	bl	8003260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <SysTick_Config+0x40>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <SysTick_Config+0x40>)
 800334c:	2207      	movs	r2, #7
 800334e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	e000e010 	.word	0xe000e010

08003360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ff47 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003376:	b580      	push	{r7, lr}
 8003378:	b086      	sub	sp, #24
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003388:	f7ff ff5c 	bl	8003244 <__NVIC_GetPriorityGrouping>
 800338c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	6978      	ldr	r0, [r7, #20]
 8003394:	f7ff ff8e 	bl	80032b4 <NVIC_EncodePriority>
 8003398:	4602      	mov	r2, r0
 800339a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff5d 	bl	8003260 <__NVIC_SetPriority>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ffb0 	bl	800331c <SysTick_Config>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e159      	b.n	8003698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f040 8148 	bne.w	8003692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d005      	beq.n	800341a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003416:	2b02      	cmp	r3, #2
 8003418:	d130      	bne.n	800347c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003450:	2201      	movs	r2, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 0201 	and.w	r2, r3, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b03      	cmp	r3, #3
 8003486:	d017      	beq.n	80034b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d123      	bne.n	800350c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	08da      	lsrs	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3208      	adds	r2, #8
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	2203      	movs	r2, #3
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a2 	beq.w	8003692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_GPIO_Init+0x2e8>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	4a56      	ldr	r2, [pc, #344]	; (80036b0 <HAL_GPIO_Init+0x2e8>)
 8003558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355c:	6453      	str	r3, [r2, #68]	; 0x44
 800355e:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <HAL_GPIO_Init+0x2e8>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356a:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_GPIO_Init+0x2ec>)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3302      	adds	r3, #2
 8003572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a49      	ldr	r2, [pc, #292]	; (80036b8 <HAL_GPIO_Init+0x2f0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d019      	beq.n	80035ca <HAL_GPIO_Init+0x202>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a48      	ldr	r2, [pc, #288]	; (80036bc <HAL_GPIO_Init+0x2f4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_GPIO_Init+0x1fe>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a47      	ldr	r2, [pc, #284]	; (80036c0 <HAL_GPIO_Init+0x2f8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00d      	beq.n	80035c2 <HAL_GPIO_Init+0x1fa>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a46      	ldr	r2, [pc, #280]	; (80036c4 <HAL_GPIO_Init+0x2fc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <HAL_GPIO_Init+0x1f6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a45      	ldr	r2, [pc, #276]	; (80036c8 <HAL_GPIO_Init+0x300>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_GPIO_Init+0x1f2>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e008      	b.n	80035cc <HAL_GPIO_Init+0x204>
 80035ba:	2307      	movs	r3, #7
 80035bc:	e006      	b.n	80035cc <HAL_GPIO_Init+0x204>
 80035be:	2303      	movs	r3, #3
 80035c0:	e004      	b.n	80035cc <HAL_GPIO_Init+0x204>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e002      	b.n	80035cc <HAL_GPIO_Init+0x204>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_GPIO_Init+0x204>
 80035ca:	2300      	movs	r3, #0
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	f002 0203 	and.w	r2, r2, #3
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	4093      	lsls	r3, r2
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035dc:	4935      	ldr	r1, [pc, #212]	; (80036b4 <HAL_GPIO_Init+0x2ec>)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	3302      	adds	r3, #2
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_GPIO_Init+0x304>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360e:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <HAL_GPIO_Init+0x304>)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_GPIO_Init+0x304>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003638:	4a24      	ldr	r2, [pc, #144]	; (80036cc <HAL_GPIO_Init+0x304>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <HAL_GPIO_Init+0x304>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003662:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_GPIO_Init+0x304>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <HAL_GPIO_Init+0x304>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800368c:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <HAL_GPIO_Init+0x304>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3301      	adds	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	f67f aea2 	bls.w	80033e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40013800 	.word	0x40013800
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40020400 	.word	0x40020400
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020c00 	.word	0x40020c00
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40013c00 	.word	0x40013c00

080036d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	e001      	b.n	80036f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
 800370c:	4613      	mov	r3, r2
 800370e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003710:	787b      	ldrb	r3, [r7, #1]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800371c:	e003      	b.n	8003726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	041a      	lsls	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	619a      	str	r2, [r3, #24]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e12b      	b.n	800399e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fa5a 	bl	8002c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003798:	f001 fc60 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4a81      	ldr	r2, [pc, #516]	; (80039a8 <HAL_I2C_Init+0x274>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d807      	bhi.n	80037b8 <HAL_I2C_Init+0x84>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a80      	ldr	r2, [pc, #512]	; (80039ac <HAL_I2C_Init+0x278>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bf94      	ite	ls
 80037b0:	2301      	movls	r3, #1
 80037b2:	2300      	movhi	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e006      	b.n	80037c6 <HAL_I2C_Init+0x92>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a7d      	ldr	r2, [pc, #500]	; (80039b0 <HAL_I2C_Init+0x27c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0e7      	b.n	800399e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a78      	ldr	r2, [pc, #480]	; (80039b4 <HAL_I2C_Init+0x280>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0c9b      	lsrs	r3, r3, #18
 80037d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a6a      	ldr	r2, [pc, #424]	; (80039a8 <HAL_I2C_Init+0x274>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d802      	bhi.n	8003808 <HAL_I2C_Init+0xd4>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	e009      	b.n	800381c <HAL_I2C_Init+0xe8>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a69      	ldr	r2, [pc, #420]	; (80039b8 <HAL_I2C_Init+0x284>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	3301      	adds	r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	430b      	orrs	r3, r1
 8003822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800382e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	495c      	ldr	r1, [pc, #368]	; (80039a8 <HAL_I2C_Init+0x274>)
 8003838:	428b      	cmp	r3, r1
 800383a:	d819      	bhi.n	8003870 <HAL_I2C_Init+0x13c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e59      	subs	r1, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fbb1 f3f3 	udiv	r3, r1, r3
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003850:	400b      	ands	r3, r1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_I2C_Init+0x138>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e59      	subs	r1, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fbb1 f3f3 	udiv	r3, r1, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	e051      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 800386c:	2304      	movs	r3, #4
 800386e:	e04f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <HAL_I2C_Init+0x168>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e012      	b.n	80038c2 <HAL_I2C_Init+0x18e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	0099      	lsls	r1, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Init+0x196>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e022      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10e      	bne.n	80038f0 <HAL_I2C_Init+0x1bc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e58      	subs	r0, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	440b      	add	r3, r1
 80038e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	6809      	ldr	r1, [r1, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800393e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6911      	ldr	r1, [r2, #16]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	000186a0 	.word	0x000186a0
 80039ac:	001e847f 	.word	0x001e847f
 80039b0:	003d08ff 	.word	0x003d08ff
 80039b4:	431bde83 	.word	0x431bde83
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d6:	f7ff fbe1 	bl	800319c <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	f040 80d9 	bne.w	8003b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2319      	movs	r3, #25
 80039f0:	2201      	movs	r2, #1
 80039f2:	496d      	ldr	r1, [pc, #436]	; (8003ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fc8b 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0cc      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Mem_Write+0x56>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0c5      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d007      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a4d      	ldr	r2, [pc, #308]	; (8003bac <HAL_I2C_Mem_Write+0x1f0>)
 8003a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7a:	88f8      	ldrh	r0, [r7, #6]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4603      	mov	r3, r0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fac2 	bl	8004014 <I2C_RequestMemoryWrite>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d052      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e081      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fd50 	bl	8004544 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_I2C_Mem_Write+0x180>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1aa      	bne.n	8003a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fd43 	bl	80045d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d107      	bne.n	8003b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e016      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	00100002 	.word	0x00100002
 8003bac:	ffff0000 	.word	0xffff0000

08003bb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	817b      	strh	r3, [r7, #10]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	813b      	strh	r3, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bca:	f7ff fae7 	bl	800319c <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 8214 	bne.w	8004006 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2319      	movs	r3, #25
 8003be4:	2201      	movs	r2, #1
 8003be6:	497b      	ldr	r1, [pc, #492]	; (8003dd4 <HAL_I2C_Mem_Read+0x224>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fb91 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e207      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_Mem_Read+0x56>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e200      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d007      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2222      	movs	r2, #34	; 0x22
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_I2C_Mem_Read+0x228>)
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6e:	88f8      	ldrh	r0, [r7, #6]
 8003c70:	893a      	ldrh	r2, [r7, #8]
 8003c72:	8979      	ldrh	r1, [r7, #10]
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa5e 	bl	8004140 <I2C_RequestMemoryRead>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1bc      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d113      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e190      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d11b      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e170      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d11b      	bne.n	8003d3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	e150      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d54:	e144      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	f200 80f1 	bhi.w	8003f42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d123      	bne.n	8003db0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fc79 	bl	8004664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e145      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dae:	e117      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d14e      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4906      	ldr	r1, [pc, #24]	; (8003ddc <HAL_I2C_Mem_Read+0x22c>)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 faa4 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e11a      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
 8003dd2:	bf00      	nop
 8003dd4:	00100002 	.word	0x00100002
 8003dd8:	ffff0000 	.word	0xffff0000
 8003ddc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e54:	e0c4      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	496c      	ldr	r1, [pc, #432]	; (8004010 <HAL_I2C_Mem_Read+0x460>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fa55 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0cb      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4955      	ldr	r1, [pc, #340]	; (8004010 <HAL_I2C_Mem_Read+0x460>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fa27 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e09d      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f40:	e04e      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fb8c 	bl	8004664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e058      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d124      	bne.n	8003fe0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d107      	bne.n	8003fae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f aeb6 	bne.w	8003d56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	00010004 	.word	0x00010004

08004014 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	461a      	mov	r2, r3
 8004022:	4603      	mov	r3, r0
 8004024:	817b      	strh	r3, [r7, #10]
 8004026:	460b      	mov	r3, r1
 8004028:	813b      	strh	r3, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2200      	movs	r2, #0
 8004046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f960 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004064:	d103      	bne.n	800406e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e05f      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	492d      	ldr	r1, [pc, #180]	; (800413c <I2C_RequestMemoryWrite+0x128>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f9bb 	bl	8004404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e04c      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fa46 	bl	8004544 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e02b      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]
 80040ea:	e021      	b.n	8004130 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	6a39      	ldr	r1, [r7, #32]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa20 	bl	8004544 <I2C_WaitOnTXEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b04      	cmp	r3, #4
 8004110:	d107      	bne.n	8004122 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e005      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2200      	movs	r2, #0
 8004182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8c2 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a0:	d103      	bne.n	80041aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0aa      	b.n	8004304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	6a3a      	ldr	r2, [r7, #32]
 80041c2:	4952      	ldr	r1, [pc, #328]	; (800430c <I2C_RequestMemoryRead+0x1cc>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f91d 	bl	8004404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e097      	b.n	8004304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	6a39      	ldr	r1, [r7, #32]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f9a8 	bl	8004544 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d107      	bne.n	8004212 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e076      	b.n	8004304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d105      	bne.n	8004228 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800421c:	893b      	ldrh	r3, [r7, #8]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]
 8004226:	e021      	b.n	800426c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004228:	893b      	ldrh	r3, [r7, #8]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b29b      	uxth	r3, r3
 800422e:	b2da      	uxtb	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	6a39      	ldr	r1, [r7, #32]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f982 	bl	8004544 <I2C_WaitOnTXEFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b04      	cmp	r3, #4
 800424c:	d107      	bne.n	800425e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e050      	b.n	8004304 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004262:	893b      	ldrh	r3, [r7, #8]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	6a39      	ldr	r1, [r7, #32]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f967 	bl	8004544 <I2C_WaitOnTXEFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	2b04      	cmp	r3, #4
 8004282:	d107      	bne.n	8004294 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004292:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e035      	b.n	8004304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f82b 	bl	8004310 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00d      	beq.n	80042dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ce:	d103      	bne.n	80042d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e013      	b.n	8004304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042dc:	897b      	ldrh	r3, [r7, #10]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	4906      	ldr	r1, [pc, #24]	; (800430c <I2C_RequestMemoryRead+0x1cc>)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f886 	bl	8004404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	00010002 	.word	0x00010002

08004310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004320:	e048      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d044      	beq.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fe ff37 	bl	800319c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d139      	bne.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10d      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x56>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	43da      	mvns	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	e00c      	b.n	8004380 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	43da      	mvns	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	429a      	cmp	r2, r3
 8004384:	d116      	bne.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e023      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10d      	bne.n	80043da <I2C_WaitOnFlagUntilTimeout+0xca>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	e00c      	b.n	80043f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d093      	beq.n	8004322 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004412:	e071      	b.n	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d123      	bne.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004432:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800443c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f043 0204 	orr.w	r2, r3, #4
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e067      	b.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d041      	beq.n	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004474:	f7fe fe92 	bl	800319c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d136      	bne.n	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10c      	bne.n	80044ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	43da      	mvns	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e00b      	b.n	80044c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	43da      	mvns	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e021      	b.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10c      	bne.n	800451c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	e00b      	b.n	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	43da      	mvns	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4013      	ands	r3, r2
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	f47f af6d 	bne.w	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004550:	e034      	b.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f8e3 	bl	800471e <I2C_IsAcknowledgeFailed>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e034      	b.n	80045cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d028      	beq.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456a:	f7fe fe17 	bl	800319c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d11d      	bne.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d016      	beq.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e007      	b.n	80045cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d1c3      	bne.n	8004552 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045e0:	e034      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f89b 	bl	800471e <I2C_IsAcknowledgeFailed>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e034      	b.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d028      	beq.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe fdcf 	bl	800319c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d11d      	bne.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b04      	cmp	r3, #4
 800461c:	d016      	beq.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b04      	cmp	r3, #4
 8004658:	d1c3      	bne.n	80045e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004670:	e049      	b.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b10      	cmp	r3, #16
 800467e:	d119      	bne.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0210 	mvn.w	r2, #16
 8004688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e030      	b.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fd72 	bl	800319c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11d      	bne.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	d016      	beq.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e007      	b.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d1ae      	bne.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d11b      	bne.n	800476e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800473e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e267      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d075      	beq.n	8004886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800479a:	4b88      	ldr	r3, [pc, #544]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d00c      	beq.n	80047c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a6:	4b85      	ldr	r3, [pc, #532]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d112      	bne.n	80047d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b2:	4b82      	ldr	r3, [pc, #520]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047be:	d10b      	bne.n	80047d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c0:	4b7e      	ldr	r3, [pc, #504]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d05b      	beq.n	8004884 <HAL_RCC_OscConfig+0x108>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d157      	bne.n	8004884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e242      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e0:	d106      	bne.n	80047f0 <HAL_RCC_OscConfig+0x74>
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a75      	ldr	r2, [pc, #468]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e01d      	b.n	800482c <HAL_RCC_OscConfig+0xb0>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCC_OscConfig+0x98>
 80047fa:	4b70      	ldr	r3, [pc, #448]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a6f      	ldr	r2, [pc, #444]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6c      	ldr	r2, [pc, #432]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e00b      	b.n	800482c <HAL_RCC_OscConfig+0xb0>
 8004814:	4b69      	ldr	r3, [pc, #420]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a68      	ldr	r2, [pc, #416]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 800481a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	4b66      	ldr	r3, [pc, #408]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a65      	ldr	r2, [pc, #404]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fe fcb2 	bl	800319c <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800483c:	f7fe fcae 	bl	800319c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e207      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b5b      	ldr	r3, [pc, #364]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0xc0>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fe fc9e 	bl	800319c <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004864:	f7fe fc9a 	bl	800319c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e1f3      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	4b51      	ldr	r3, [pc, #324]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0xe8>
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d063      	beq.n	800495a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004892:	4b4a      	ldr	r3, [pc, #296]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489e:	4b47      	ldr	r3, [pc, #284]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d11c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048aa:	4b44      	ldr	r3, [pc, #272]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d116      	bne.n	80048e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	4b41      	ldr	r3, [pc, #260]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_RCC_OscConfig+0x152>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e1c7      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ce:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4937      	ldr	r1, [pc, #220]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	e03a      	b.n	800495a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d020      	beq.n	800492e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ec:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <HAL_RCC_OscConfig+0x244>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fe fc53 	bl	800319c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048fa:	f7fe fc4f 	bl	800319c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e1a8      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4925      	ldr	r1, [pc, #148]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
 800492c:	e015      	b.n	800495a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_OscConfig+0x244>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fe fc32 	bl	800319c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493c:	f7fe fc2e 	bl	800319c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e187      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d036      	beq.n	80049d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d016      	beq.n	800499c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_RCC_OscConfig+0x248>)
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fe fc12 	bl	800319c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497c:	f7fe fc0e 	bl	800319c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e167      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_RCC_OscConfig+0x240>)
 8004990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x200>
 800499a:	e01b      	b.n	80049d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_OscConfig+0x248>)
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a2:	f7fe fbfb 	bl	800319c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	e00e      	b.n	80049c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049aa:	f7fe fbf7 	bl	800319c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d907      	bls.n	80049c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e150      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
 80049bc:	40023800 	.word	0x40023800
 80049c0:	42470000 	.word	0x42470000
 80049c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ea      	bne.n	80049aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8097 	beq.w	8004b10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e6:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b7d      	ldr	r3, [pc, #500]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a7c      	ldr	r2, [pc, #496]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b7a      	ldr	r3, [pc, #488]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a12:	4b77      	ldr	r3, [pc, #476]	; (8004bf0 <HAL_RCC_OscConfig+0x474>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d118      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1e:	4b74      	ldr	r3, [pc, #464]	; (8004bf0 <HAL_RCC_OscConfig+0x474>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a73      	ldr	r2, [pc, #460]	; (8004bf0 <HAL_RCC_OscConfig+0x474>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fbb7 	bl	800319c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a32:	f7fe fbb3 	bl	800319c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e10c      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	4b6a      	ldr	r3, [pc, #424]	; (8004bf0 <HAL_RCC_OscConfig+0x474>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x2ea>
 8004a58:	4b64      	ldr	r3, [pc, #400]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	4a63      	ldr	r2, [pc, #396]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	6713      	str	r3, [r2, #112]	; 0x70
 8004a64:	e01c      	b.n	8004aa0 <HAL_RCC_OscConfig+0x324>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x30c>
 8004a6e:	4b5f      	ldr	r3, [pc, #380]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a5e      	ldr	r2, [pc, #376]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7a:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a5b      	ldr	r2, [pc, #364]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCC_OscConfig+0x324>
 8004a88:	4b58      	ldr	r3, [pc, #352]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a57      	ldr	r2, [pc, #348]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
 8004a94:	4b55      	ldr	r3, [pc, #340]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a54      	ldr	r2, [pc, #336]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004a9a:	f023 0304 	bic.w	r3, r3, #4
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d015      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fe fb78 	bl	800319c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fe fb74 	bl	800319c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e0cb      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	4b49      	ldr	r3, [pc, #292]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ee      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x334>
 8004ad2:	e014      	b.n	8004afe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad4:	f7fe fb62 	bl	800319c <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fe fb5e 	bl	800319c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0b5      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ee      	bne.n	8004adc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b04:	4b39      	ldr	r3, [pc, #228]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	4a38      	ldr	r2, [pc, #224]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a1 	beq.w	8004c5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d05c      	beq.n	8004be0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d141      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2e:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <HAL_RCC_OscConfig+0x478>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fe fb32 	bl	800319c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fe fb2e 	bl	800319c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e087      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	3b01      	subs	r3, #1
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	491b      	ldr	r1, [pc, #108]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b84:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x478>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fb07 	bl	800319c <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fe fb03 	bl	800319c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e05c      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x416>
 8004bb0:	e054      	b.n	8004c5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_RCC_OscConfig+0x478>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fe faf0 	bl	800319c <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fe faec 	bl	800319c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e045      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCC_OscConfig+0x470>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x444>
 8004bde:	e03d      	b.n	8004c5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e038      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <HAL_RCC_OscConfig+0x4ec>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d028      	beq.n	8004c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d121      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d11a      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d111      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	3b01      	subs	r3, #1
 8004c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800

08004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0cc      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d90c      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b63      	ldr	r3, [pc, #396]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0b8      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc0:	4b59      	ldr	r3, [pc, #356]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a58      	ldr	r2, [pc, #352]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd8:	4b53      	ldr	r3, [pc, #332]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a52      	ldr	r2, [pc, #328]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	494d      	ldr	r1, [pc, #308]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d044      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d119      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e07f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d003      	beq.n	8004d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e067      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4934      	ldr	r1, [pc, #208]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fe fa1e 	bl	800319c <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fe fa1a 	bl	800319c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e04f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d20c      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e032      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc0:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4916      	ldr	r1, [pc, #88]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dde:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	490e      	ldr	r1, [pc, #56]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004df2:	f000 f821 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004df6:	4602      	mov	r2, r0
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	490a      	ldr	r1, [pc, #40]	; (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004e04:	5ccb      	ldrb	r3, [r1, r3]
 8004e06:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0a:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe f97e 	bl	8003114 <HAL_InitTick>

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40023c00 	.word	0x40023c00
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	0800bb0c 	.word	0x0800bb0c
 8004e30:	2000000c 	.word	0x2000000c
 8004e34:	20000010 	.word	0x20000010

08004e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e3c:	b094      	sub	sp, #80	; 0x50
 8004e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
 8004e44:	2300      	movs	r3, #0
 8004e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e48:	2300      	movs	r3, #0
 8004e4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e50:	4b79      	ldr	r3, [pc, #484]	; (8005038 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d00d      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x40>
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	f200 80e1 	bhi.w	8005024 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x34>
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d003      	beq.n	8004e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e6a:	e0db      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e6c:	4b73      	ldr	r3, [pc, #460]	; (800503c <HAL_RCC_GetSysClockFreq+0x204>)
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e70:	e0db      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e72:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e76:	e0d8      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e78:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e82:	4b6d      	ldr	r3, [pc, #436]	; (8005038 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d063      	beq.n	8004f56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8e:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	099b      	lsrs	r3, r3, #6
 8004e94:	2200      	movs	r2, #0
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eaa:	4622      	mov	r2, r4
 8004eac:	462b      	mov	r3, r5
 8004eae:	f04f 0000 	mov.w	r0, #0
 8004eb2:	f04f 0100 	mov.w	r1, #0
 8004eb6:	0159      	lsls	r1, r3, #5
 8004eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ebc:	0150      	lsls	r0, r2, #5
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	1a51      	subs	r1, r2, r1
 8004ec6:	6139      	str	r1, [r7, #16]
 8004ec8:	4629      	mov	r1, r5
 8004eca:	eb63 0301 	sbc.w	r3, r3, r1
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004edc:	4659      	mov	r1, fp
 8004ede:	018b      	lsls	r3, r1, #6
 8004ee0:	4651      	mov	r1, sl
 8004ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	018a      	lsls	r2, r1, #6
 8004eea:	4651      	mov	r1, sl
 8004eec:	ebb2 0801 	subs.w	r8, r2, r1
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f0a:	4690      	mov	r8, r2
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	4623      	mov	r3, r4
 8004f10:	eb18 0303 	adds.w	r3, r8, r3
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	462b      	mov	r3, r5
 8004f18:	eb49 0303 	adc.w	r3, r9, r3
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	024b      	lsls	r3, r1, #9
 8004f2e:	4621      	mov	r1, r4
 8004f30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f34:	4621      	mov	r1, r4
 8004f36:	024a      	lsls	r2, r1, #9
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3e:	2200      	movs	r2, #0
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f48:	f7fb fef6 	bl	8000d38 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4613      	mov	r3, r2
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f54:	e058      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f56:	4b38      	ldr	r3, [pc, #224]	; (8005038 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	4611      	mov	r1, r2
 8004f62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	f04f 0000 	mov.w	r0, #0
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	0159      	lsls	r1, r3, #5
 8004f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f82:	0150      	lsls	r0, r2, #5
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4641      	mov	r1, r8
 8004f8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f8e:	4649      	mov	r1, r9
 8004f90:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fa8:	ebb2 040a 	subs.w	r4, r2, sl
 8004fac:	eb63 050b 	sbc.w	r5, r3, fp
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	00eb      	lsls	r3, r5, #3
 8004fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fbe:	00e2      	lsls	r2, r4, #3
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	461d      	mov	r5, r3
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	18e3      	adds	r3, r4, r3
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	464b      	mov	r3, r9
 8004fcc:	eb45 0303 	adc.w	r3, r5, r3
 8004fd0:	607b      	str	r3, [r7, #4]
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fde:	4629      	mov	r1, r5
 8004fe0:	028b      	lsls	r3, r1, #10
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fe8:	4621      	mov	r1, r4
 8004fea:	028a      	lsls	r2, r1, #10
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	61fa      	str	r2, [r7, #28]
 8004ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ffc:	f7fb fe9c 	bl	8000d38 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4613      	mov	r3, r2
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_GetSysClockFreq+0x200>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	3301      	adds	r3, #1
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800501a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005022:	e002      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetSysClockFreq+0x204>)
 8005026:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800502a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800502c:	4618      	mov	r0, r3
 800502e:	3750      	adds	r7, #80	; 0x50
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005036:	bf00      	nop
 8005038:	40023800 	.word	0x40023800
 800503c:	00f42400 	.word	0x00f42400
 8005040:	007a1200 	.word	0x007a1200

08005044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <HAL_RCC_GetHCLKFreq+0x14>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005060:	f7ff fff0 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0a9b      	lsrs	r3, r3, #10
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40023800 	.word	0x40023800
 8005080:	0800bb1c 	.word	0x0800bb1c

08005084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005088:	f7ff ffdc 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	0b5b      	lsrs	r3, r3, #13
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4903      	ldr	r1, [pc, #12]	; (80050a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40023800 	.word	0x40023800
 80050a8:	0800bb1c 	.word	0x0800bb1c

080050ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e041      	b.n	8005142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fd fdf8 	bl	8002cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 fa10 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e041      	b.n	80051e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f839 	bl	80051e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 f9c1 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005216:	2302      	movs	r3, #2
 8005218:	e0ae      	b.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	f200 809f 	bhi.w	8005368 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005265 	.word	0x08005265
 8005234:	08005369 	.word	0x08005369
 8005238:	08005369 	.word	0x08005369
 800523c:	08005369 	.word	0x08005369
 8005240:	080052a5 	.word	0x080052a5
 8005244:	08005369 	.word	0x08005369
 8005248:	08005369 	.word	0x08005369
 800524c:	08005369 	.word	0x08005369
 8005250:	080052e7 	.word	0x080052e7
 8005254:	08005369 	.word	0x08005369
 8005258:	08005369 	.word	0x08005369
 800525c:	08005369 	.word	0x08005369
 8005260:	08005327 	.word	0x08005327
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f9dc 	bl	8005628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0208 	orr.w	r2, r2, #8
 800527e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0204 	bic.w	r2, r2, #4
 800528e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6999      	ldr	r1, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	619a      	str	r2, [r3, #24]
      break;
 80052a2:	e064      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fa22 	bl	80056f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6999      	ldr	r1, [r3, #24]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	619a      	str	r2, [r3, #24]
      break;
 80052e4:	e043      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fa6d 	bl	80057cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0208 	orr.w	r2, r2, #8
 8005300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0204 	bic.w	r2, r2, #4
 8005310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69d9      	ldr	r1, [r3, #28]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	61da      	str	r2, [r3, #28]
      break;
 8005324:	e023      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fab7 	bl	80058a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69d9      	ldr	r1, [r3, #28]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	021a      	lsls	r2, r3, #8
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	61da      	str	r2, [r3, #28]
      break;
 8005366:	e002      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
      break;
 800536c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIM_ConfigClockSource+0x1c>
 8005398:	2302      	movs	r3, #2
 800539a:	e0b4      	b.n	8005506 <HAL_TIM_ConfigClockSource+0x186>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d4:	d03e      	beq.n	8005454 <HAL_TIM_ConfigClockSource+0xd4>
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053da:	f200 8087 	bhi.w	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e2:	f000 8086 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x172>
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ea:	d87f      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b70      	cmp	r3, #112	; 0x70
 80053ee:	d01a      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0xa6>
 80053f0:	2b70      	cmp	r3, #112	; 0x70
 80053f2:	d87b      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b60      	cmp	r3, #96	; 0x60
 80053f6:	d050      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x11a>
 80053f8:	2b60      	cmp	r3, #96	; 0x60
 80053fa:	d877      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b50      	cmp	r3, #80	; 0x50
 80053fe:	d03c      	beq.n	800547a <HAL_TIM_ConfigClockSource+0xfa>
 8005400:	2b50      	cmp	r3, #80	; 0x50
 8005402:	d873      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d058      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x13a>
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d86f      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 800540c:	2b30      	cmp	r3, #48	; 0x30
 800540e:	d064      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	d86b      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d060      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005418:	2b20      	cmp	r3, #32
 800541a:	d867      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d05c      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005420:	2b10      	cmp	r3, #16
 8005422:	d05a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	e062      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	f000 fafd 	bl	8005a34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	609a      	str	r2, [r3, #8]
      break;
 8005452:	e04f      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	f000 fae6 	bl	8005a34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005476:	609a      	str	r2, [r3, #8]
      break;
 8005478:	e03c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	461a      	mov	r2, r3
 8005488:	f000 fa5a 	bl	8005940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2150      	movs	r1, #80	; 0x50
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fab3 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 8005498:	e02c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a6:	461a      	mov	r2, r3
 80054a8:	f000 fa79 	bl	800599e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2160      	movs	r1, #96	; 0x60
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 faa3 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 80054b8:	e01c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 fa3a 	bl	8005940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2140      	movs	r1, #64	; 0x40
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fa93 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 80054d8:	e00c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f000 fa8a 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 80054ea:	e003      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3a      	ldr	r2, [pc, #232]	; (800560c <TIM_Base_SetConfig+0xfc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00f      	beq.n	8005548 <TIM_Base_SetConfig+0x38>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d00b      	beq.n	8005548 <TIM_Base_SetConfig+0x38>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a37      	ldr	r2, [pc, #220]	; (8005610 <TIM_Base_SetConfig+0x100>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <TIM_Base_SetConfig+0x38>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a36      	ldr	r2, [pc, #216]	; (8005614 <TIM_Base_SetConfig+0x104>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_Base_SetConfig+0x38>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a35      	ldr	r2, [pc, #212]	; (8005618 <TIM_Base_SetConfig+0x108>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2b      	ldr	r2, [pc, #172]	; (800560c <TIM_Base_SetConfig+0xfc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01b      	beq.n	800559a <TIM_Base_SetConfig+0x8a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005568:	d017      	beq.n	800559a <TIM_Base_SetConfig+0x8a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a28      	ldr	r2, [pc, #160]	; (8005610 <TIM_Base_SetConfig+0x100>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0x8a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a27      	ldr	r2, [pc, #156]	; (8005614 <TIM_Base_SetConfig+0x104>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0x8a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a26      	ldr	r2, [pc, #152]	; (8005618 <TIM_Base_SetConfig+0x108>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0x8a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a25      	ldr	r2, [pc, #148]	; (800561c <TIM_Base_SetConfig+0x10c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0x8a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a24      	ldr	r2, [pc, #144]	; (8005620 <TIM_Base_SetConfig+0x110>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0x8a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a23      	ldr	r2, [pc, #140]	; (8005624 <TIM_Base_SetConfig+0x114>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0e      	ldr	r2, [pc, #56]	; (800560c <TIM_Base_SetConfig+0xfc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d105      	bne.n	80055fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]
  }
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f023 0201 	bic.w	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 0302 	bic.w	r3, r3, #2
 8005670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a1c      	ldr	r2, [pc, #112]	; (80056f0 <TIM_OC1_SetConfig+0xc8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10c      	bne.n	800569e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0308 	bic.w	r3, r3, #8
 800568a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <TIM_OC1_SetConfig+0xc8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d111      	bne.n	80056ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	621a      	str	r2, [r3, #32]
}
 80056e4:	bf00      	nop
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40010000 	.word	0x40010000

080056f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0210 	bic.w	r2, r3, #16
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0320 	bic.w	r3, r3, #32
 800573e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a1e      	ldr	r2, [pc, #120]	; (80057c8 <TIM_OC2_SetConfig+0xd4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d10d      	bne.n	8005770 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800576e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <TIM_OC2_SetConfig+0xd4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d113      	bne.n	80057a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800577e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40010000 	.word	0x40010000

080057cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a1d      	ldr	r2, [pc, #116]	; (800589c <TIM_OC3_SetConfig+0xd0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10d      	bne.n	8005846 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <TIM_OC3_SetConfig+0xd0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d113      	bne.n	8005876 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	621a      	str	r2, [r3, #32]
}
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40010000 	.word	0x40010000

080058a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	031b      	lsls	r3, r3, #12
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a10      	ldr	r2, [pc, #64]	; (800593c <TIM_OC4_SetConfig+0x9c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d109      	bne.n	8005914 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	019b      	lsls	r3, r3, #6
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000

08005940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800596a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 030a 	bic.w	r3, r3, #10
 800597c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599e:	b480      	push	{r7}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f023 0210 	bic.w	r2, r3, #16
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	031b      	lsls	r3, r3, #12
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f043 0307 	orr.w	r3, r3, #7
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	609a      	str	r2, [r3, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	021a      	lsls	r2, r3, #8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	609a      	str	r2, [r3, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e050      	b.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1c      	ldr	r2, [pc, #112]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad8:	d013      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10c      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40000c00 	.word	0x40000c00
 8005b4c:	40014000 	.word	0x40014000

08005b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e042      	b.n	8005be8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fd f902 	bl	8002d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f973 	bl	8005e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d175      	bne.n	8005cfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_UART_Transmit+0x2c>
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e06e      	b.n	8005cfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2221      	movs	r2, #33	; 0x21
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fd fab5 	bl	800319c <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d108      	bne.n	8005c5c <HAL_UART_Transmit+0x6c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c64:	e02e      	b.n	8005cc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f848 	bl	8005d06 <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e03a      	b.n	8005cfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e007      	b.n	8005cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1cb      	bne.n	8005c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2140      	movs	r1, #64	; 0x40
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f814 	bl	8005d06 <UART_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e006      	b.n	8005cfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e000      	b.n	8005cfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
  }
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	4613      	mov	r3, r2
 8005d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d16:	e03b      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d037      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d20:	f7fd fa3c 	bl	800319c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e03a      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d023      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d020      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d01d      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d116      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f81d 	bl	8005db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2208      	movs	r2, #8
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e00f      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d0b4      	beq.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b095      	sub	sp, #84	; 0x54
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005de0:	643a      	str	r2, [r7, #64]	; 0x40
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e5      	bne.n	8005dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3314      	adds	r3, #20
 8005dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e5      	bne.n	8005df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d119      	bne.n	8005e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f023 0310 	bic.w	r3, r3, #16
 8005e46:	647b      	str	r3, [r7, #68]	; 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e50:	61ba      	str	r2, [r7, #24]
 8005e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6979      	ldr	r1, [r7, #20]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e5      	bne.n	8005e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e72:	bf00      	nop
 8005e74:	3754      	adds	r7, #84	; 0x54
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e84:	b0c0      	sub	sp, #256	; 0x100
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9c:	68d9      	ldr	r1, [r3, #12]
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	ea40 0301 	orr.w	r3, r0, r1
 8005ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ed8:	f021 010c 	bic.w	r1, r1, #12
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efa:	6999      	ldr	r1, [r3, #24]
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	ea40 0301 	orr.w	r3, r0, r1
 8005f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b8f      	ldr	r3, [pc, #572]	; (800614c <UART_SetConfig+0x2cc>)
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d005      	beq.n	8005f20 <UART_SetConfig+0xa0>
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b8d      	ldr	r3, [pc, #564]	; (8006150 <UART_SetConfig+0x2d0>)
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d104      	bne.n	8005f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7ff f8b0 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8005f24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f28:	e003      	b.n	8005f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f2a:	f7ff f897 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8005f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3c:	f040 810c 	bne.w	8006158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f52:	4622      	mov	r2, r4
 8005f54:	462b      	mov	r3, r5
 8005f56:	1891      	adds	r1, r2, r2
 8005f58:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f62:	4621      	mov	r1, r4
 8005f64:	eb12 0801 	adds.w	r8, r2, r1
 8005f68:	4629      	mov	r1, r5
 8005f6a:	eb43 0901 	adc.w	r9, r3, r1
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f82:	4690      	mov	r8, r2
 8005f84:	4699      	mov	r9, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	eb18 0303 	adds.w	r3, r8, r3
 8005f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f90:	462b      	mov	r3, r5
 8005f92:	eb49 0303 	adc.w	r3, r9, r3
 8005f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fae:	460b      	mov	r3, r1
 8005fb0:	18db      	adds	r3, r3, r3
 8005fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	eb42 0303 	adc.w	r3, r2, r3
 8005fba:	657b      	str	r3, [r7, #84]	; 0x54
 8005fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fc4:	f7fa feb8 	bl	8000d38 <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4b61      	ldr	r3, [pc, #388]	; (8006154 <UART_SetConfig+0x2d4>)
 8005fce:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	011c      	lsls	r4, r3, #4
 8005fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	1891      	adds	r1, r2, r2
 8005fee:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ff0:	415b      	adcs	r3, r3
 8005ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8005ffe:	4649      	mov	r1, r9
 8006000:	eb43 0b01 	adc.w	fp, r3, r1
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006018:	4692      	mov	sl, r2
 800601a:	469b      	mov	fp, r3
 800601c:	4643      	mov	r3, r8
 800601e:	eb1a 0303 	adds.w	r3, sl, r3
 8006022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006026:	464b      	mov	r3, r9
 8006028:	eb4b 0303 	adc.w	r3, fp, r3
 800602c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800603c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006044:	460b      	mov	r3, r1
 8006046:	18db      	adds	r3, r3, r3
 8006048:	643b      	str	r3, [r7, #64]	; 0x40
 800604a:	4613      	mov	r3, r2
 800604c:	eb42 0303 	adc.w	r3, r2, r3
 8006050:	647b      	str	r3, [r7, #68]	; 0x44
 8006052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800605a:	f7fa fe6d 	bl	8000d38 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4611      	mov	r1, r2
 8006064:	4b3b      	ldr	r3, [pc, #236]	; (8006154 <UART_SetConfig+0x2d4>)
 8006066:	fba3 2301 	umull	r2, r3, r3, r1
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	2264      	movs	r2, #100	; 0x64
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	1acb      	subs	r3, r1, r3
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800607a:	4b36      	ldr	r3, [pc, #216]	; (8006154 <UART_SetConfig+0x2d4>)
 800607c:	fba3 2302 	umull	r2, r3, r3, r2
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006088:	441c      	add	r4, r3
 800608a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006094:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800609c:	4642      	mov	r2, r8
 800609e:	464b      	mov	r3, r9
 80060a0:	1891      	adds	r1, r2, r2
 80060a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80060a4:	415b      	adcs	r3, r3
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060ac:	4641      	mov	r1, r8
 80060ae:	1851      	adds	r1, r2, r1
 80060b0:	6339      	str	r1, [r7, #48]	; 0x30
 80060b2:	4649      	mov	r1, r9
 80060b4:	414b      	adcs	r3, r1
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060c4:	4659      	mov	r1, fp
 80060c6:	00cb      	lsls	r3, r1, #3
 80060c8:	4651      	mov	r1, sl
 80060ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ce:	4651      	mov	r1, sl
 80060d0:	00ca      	lsls	r2, r1, #3
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	4642      	mov	r2, r8
 80060da:	189b      	adds	r3, r3, r2
 80060dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060e0:	464b      	mov	r3, r9
 80060e2:	460a      	mov	r2, r1
 80060e4:	eb42 0303 	adc.w	r3, r2, r3
 80060e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006100:	460b      	mov	r3, r1
 8006102:	18db      	adds	r3, r3, r3
 8006104:	62bb      	str	r3, [r7, #40]	; 0x28
 8006106:	4613      	mov	r3, r2
 8006108:	eb42 0303 	adc.w	r3, r2, r3
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800610e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006116:	f7fa fe0f 	bl	8000d38 <__aeabi_uldivmod>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <UART_SetConfig+0x2d4>)
 8006120:	fba3 1302 	umull	r1, r3, r3, r2
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	2164      	movs	r1, #100	; 0x64
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	3332      	adds	r3, #50	; 0x32
 8006132:	4a08      	ldr	r2, [pc, #32]	; (8006154 <UART_SetConfig+0x2d4>)
 8006134:	fba2 2303 	umull	r2, r3, r2, r3
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	f003 0207 	and.w	r2, r3, #7
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4422      	add	r2, r4
 8006146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006148:	e106      	b.n	8006358 <UART_SetConfig+0x4d8>
 800614a:	bf00      	nop
 800614c:	40011000 	.word	0x40011000
 8006150:	40011400 	.word	0x40011400
 8006154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615c:	2200      	movs	r2, #0
 800615e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006162:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800616a:	4642      	mov	r2, r8
 800616c:	464b      	mov	r3, r9
 800616e:	1891      	adds	r1, r2, r2
 8006170:	6239      	str	r1, [r7, #32]
 8006172:	415b      	adcs	r3, r3
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
 8006176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800617a:	4641      	mov	r1, r8
 800617c:	1854      	adds	r4, r2, r1
 800617e:	4649      	mov	r1, r9
 8006180:	eb43 0501 	adc.w	r5, r3, r1
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	00eb      	lsls	r3, r5, #3
 800618e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006192:	00e2      	lsls	r2, r4, #3
 8006194:	4614      	mov	r4, r2
 8006196:	461d      	mov	r5, r3
 8006198:	4643      	mov	r3, r8
 800619a:	18e3      	adds	r3, r4, r3
 800619c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061a0:	464b      	mov	r3, r9
 80061a2:	eb45 0303 	adc.w	r3, r5, r3
 80061a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061c6:	4629      	mov	r1, r5
 80061c8:	008b      	lsls	r3, r1, #2
 80061ca:	4621      	mov	r1, r4
 80061cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d0:	4621      	mov	r1, r4
 80061d2:	008a      	lsls	r2, r1, #2
 80061d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061d8:	f7fa fdae 	bl	8000d38 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4b60      	ldr	r3, [pc, #384]	; (8006364 <UART_SetConfig+0x4e4>)
 80061e2:	fba3 2302 	umull	r2, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	011c      	lsls	r4, r3, #4
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	1891      	adds	r1, r2, r2
 8006202:	61b9      	str	r1, [r7, #24]
 8006204:	415b      	adcs	r3, r3
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800620c:	4641      	mov	r1, r8
 800620e:	1851      	adds	r1, r2, r1
 8006210:	6139      	str	r1, [r7, #16]
 8006212:	4649      	mov	r1, r9
 8006214:	414b      	adcs	r3, r1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006224:	4659      	mov	r1, fp
 8006226:	00cb      	lsls	r3, r1, #3
 8006228:	4651      	mov	r1, sl
 800622a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622e:	4651      	mov	r1, sl
 8006230:	00ca      	lsls	r2, r1, #3
 8006232:	4610      	mov	r0, r2
 8006234:	4619      	mov	r1, r3
 8006236:	4603      	mov	r3, r0
 8006238:	4642      	mov	r2, r8
 800623a:	189b      	adds	r3, r3, r2
 800623c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006240:	464b      	mov	r3, r9
 8006242:	460a      	mov	r2, r1
 8006244:	eb42 0303 	adc.w	r3, r2, r3
 8006248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	67bb      	str	r3, [r7, #120]	; 0x78
 8006256:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006264:	4649      	mov	r1, r9
 8006266:	008b      	lsls	r3, r1, #2
 8006268:	4641      	mov	r1, r8
 800626a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800626e:	4641      	mov	r1, r8
 8006270:	008a      	lsls	r2, r1, #2
 8006272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006276:	f7fa fd5f 	bl	8000d38 <__aeabi_uldivmod>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4611      	mov	r1, r2
 8006280:	4b38      	ldr	r3, [pc, #224]	; (8006364 <UART_SetConfig+0x4e4>)
 8006282:	fba3 2301 	umull	r2, r3, r3, r1
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	2264      	movs	r2, #100	; 0x64
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	1acb      	subs	r3, r1, r3
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	3332      	adds	r3, #50	; 0x32
 8006294:	4a33      	ldr	r2, [pc, #204]	; (8006364 <UART_SetConfig+0x4e4>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062a0:	441c      	add	r4, r3
 80062a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a6:	2200      	movs	r2, #0
 80062a8:	673b      	str	r3, [r7, #112]	; 0x70
 80062aa:	677a      	str	r2, [r7, #116]	; 0x74
 80062ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	415b      	adcs	r3, r3
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062c0:	4641      	mov	r1, r8
 80062c2:	1851      	adds	r1, r2, r1
 80062c4:	6039      	str	r1, [r7, #0]
 80062c6:	4649      	mov	r1, r9
 80062c8:	414b      	adcs	r3, r1
 80062ca:	607b      	str	r3, [r7, #4]
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062d8:	4659      	mov	r1, fp
 80062da:	00cb      	lsls	r3, r1, #3
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e2:	4651      	mov	r1, sl
 80062e4:	00ca      	lsls	r2, r1, #3
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	4642      	mov	r2, r8
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f2:	464b      	mov	r3, r9
 80062f4:	460a      	mov	r2, r1
 80062f6:	eb42 0303 	adc.w	r3, r2, r3
 80062fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	663b      	str	r3, [r7, #96]	; 0x60
 8006306:	667a      	str	r2, [r7, #100]	; 0x64
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006314:	4649      	mov	r1, r9
 8006316:	008b      	lsls	r3, r1, #2
 8006318:	4641      	mov	r1, r8
 800631a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800631e:	4641      	mov	r1, r8
 8006320:	008a      	lsls	r2, r1, #2
 8006322:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006326:	f7fa fd07 	bl	8000d38 <__aeabi_uldivmod>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <UART_SetConfig+0x4e4>)
 8006330:	fba3 1302 	umull	r1, r3, r3, r2
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	2164      	movs	r1, #100	; 0x64
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	3332      	adds	r3, #50	; 0x32
 8006342:	4a08      	ldr	r2, [pc, #32]	; (8006364 <UART_SetConfig+0x4e4>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4422      	add	r2, r4
 8006356:	609a      	str	r2, [r3, #8]
}
 8006358:	bf00      	nop
 800635a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800635e:	46bd      	mov	sp, r7
 8006360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006364:	51eb851f 	.word	0x51eb851f

08006368 <__cvt>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	ec55 4b10 	vmov	r4, r5, d0
 8006370:	2d00      	cmp	r5, #0
 8006372:	460e      	mov	r6, r1
 8006374:	4619      	mov	r1, r3
 8006376:	462b      	mov	r3, r5
 8006378:	bfbb      	ittet	lt
 800637a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800637e:	461d      	movlt	r5, r3
 8006380:	2300      	movge	r3, #0
 8006382:	232d      	movlt	r3, #45	; 0x2d
 8006384:	700b      	strb	r3, [r1, #0]
 8006386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006388:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800638c:	4691      	mov	r9, r2
 800638e:	f023 0820 	bic.w	r8, r3, #32
 8006392:	bfbc      	itt	lt
 8006394:	4622      	movlt	r2, r4
 8006396:	4614      	movlt	r4, r2
 8006398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800639c:	d005      	beq.n	80063aa <__cvt+0x42>
 800639e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063a2:	d100      	bne.n	80063a6 <__cvt+0x3e>
 80063a4:	3601      	adds	r6, #1
 80063a6:	2102      	movs	r1, #2
 80063a8:	e000      	b.n	80063ac <__cvt+0x44>
 80063aa:	2103      	movs	r1, #3
 80063ac:	ab03      	add	r3, sp, #12
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	ab02      	add	r3, sp, #8
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	ec45 4b10 	vmov	d0, r4, r5
 80063b8:	4653      	mov	r3, sl
 80063ba:	4632      	mov	r2, r6
 80063bc:	f001 f880 	bl	80074c0 <_dtoa_r>
 80063c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063c4:	4607      	mov	r7, r0
 80063c6:	d102      	bne.n	80063ce <__cvt+0x66>
 80063c8:	f019 0f01 	tst.w	r9, #1
 80063cc:	d022      	beq.n	8006414 <__cvt+0xac>
 80063ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063d2:	eb07 0906 	add.w	r9, r7, r6
 80063d6:	d110      	bne.n	80063fa <__cvt+0x92>
 80063d8:	783b      	ldrb	r3, [r7, #0]
 80063da:	2b30      	cmp	r3, #48	; 0x30
 80063dc:	d10a      	bne.n	80063f4 <__cvt+0x8c>
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	4620      	mov	r0, r4
 80063e4:	4629      	mov	r1, r5
 80063e6:	f7fa fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 80063ea:	b918      	cbnz	r0, 80063f4 <__cvt+0x8c>
 80063ec:	f1c6 0601 	rsb	r6, r6, #1
 80063f0:	f8ca 6000 	str.w	r6, [sl]
 80063f4:	f8da 3000 	ldr.w	r3, [sl]
 80063f8:	4499      	add	r9, r3
 80063fa:	2200      	movs	r2, #0
 80063fc:	2300      	movs	r3, #0
 80063fe:	4620      	mov	r0, r4
 8006400:	4629      	mov	r1, r5
 8006402:	f7fa fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006406:	b108      	cbz	r0, 800640c <__cvt+0xa4>
 8006408:	f8cd 900c 	str.w	r9, [sp, #12]
 800640c:	2230      	movs	r2, #48	; 0x30
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	454b      	cmp	r3, r9
 8006412:	d307      	bcc.n	8006424 <__cvt+0xbc>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006418:	1bdb      	subs	r3, r3, r7
 800641a:	4638      	mov	r0, r7
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	b004      	add	sp, #16
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	9103      	str	r1, [sp, #12]
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e7f0      	b.n	800640e <__cvt+0xa6>

0800642c <__exponent>:
 800642c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642e:	4603      	mov	r3, r0
 8006430:	2900      	cmp	r1, #0
 8006432:	bfb8      	it	lt
 8006434:	4249      	neglt	r1, r1
 8006436:	f803 2b02 	strb.w	r2, [r3], #2
 800643a:	bfb4      	ite	lt
 800643c:	222d      	movlt	r2, #45	; 0x2d
 800643e:	222b      	movge	r2, #43	; 0x2b
 8006440:	2909      	cmp	r1, #9
 8006442:	7042      	strb	r2, [r0, #1]
 8006444:	dd2a      	ble.n	800649c <__exponent+0x70>
 8006446:	f10d 0207 	add.w	r2, sp, #7
 800644a:	4617      	mov	r7, r2
 800644c:	260a      	movs	r6, #10
 800644e:	4694      	mov	ip, r2
 8006450:	fb91 f5f6 	sdiv	r5, r1, r6
 8006454:	fb06 1415 	mls	r4, r6, r5, r1
 8006458:	3430      	adds	r4, #48	; 0x30
 800645a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800645e:	460c      	mov	r4, r1
 8006460:	2c63      	cmp	r4, #99	; 0x63
 8006462:	f102 32ff 	add.w	r2, r2, #4294967295
 8006466:	4629      	mov	r1, r5
 8006468:	dcf1      	bgt.n	800644e <__exponent+0x22>
 800646a:	3130      	adds	r1, #48	; 0x30
 800646c:	f1ac 0402 	sub.w	r4, ip, #2
 8006470:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006474:	1c41      	adds	r1, r0, #1
 8006476:	4622      	mov	r2, r4
 8006478:	42ba      	cmp	r2, r7
 800647a:	d30a      	bcc.n	8006492 <__exponent+0x66>
 800647c:	f10d 0209 	add.w	r2, sp, #9
 8006480:	eba2 020c 	sub.w	r2, r2, ip
 8006484:	42bc      	cmp	r4, r7
 8006486:	bf88      	it	hi
 8006488:	2200      	movhi	r2, #0
 800648a:	4413      	add	r3, r2
 800648c:	1a18      	subs	r0, r3, r0
 800648e:	b003      	add	sp, #12
 8006490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006492:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006496:	f801 5f01 	strb.w	r5, [r1, #1]!
 800649a:	e7ed      	b.n	8006478 <__exponent+0x4c>
 800649c:	2330      	movs	r3, #48	; 0x30
 800649e:	3130      	adds	r1, #48	; 0x30
 80064a0:	7083      	strb	r3, [r0, #2]
 80064a2:	70c1      	strb	r1, [r0, #3]
 80064a4:	1d03      	adds	r3, r0, #4
 80064a6:	e7f1      	b.n	800648c <__exponent+0x60>

080064a8 <_printf_float>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ed2d 8b02 	vpush	{d8}
 80064b0:	b08d      	sub	sp, #52	; 0x34
 80064b2:	460c      	mov	r4, r1
 80064b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064b8:	4616      	mov	r6, r2
 80064ba:	461f      	mov	r7, r3
 80064bc:	4605      	mov	r5, r0
 80064be:	f000 fef7 	bl	80072b0 <_localeconv_r>
 80064c2:	f8d0 a000 	ldr.w	sl, [r0]
 80064c6:	4650      	mov	r0, sl
 80064c8:	f7f9 feda 	bl	8000280 <strlen>
 80064cc:	2300      	movs	r3, #0
 80064ce:	930a      	str	r3, [sp, #40]	; 0x28
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	9305      	str	r3, [sp, #20]
 80064d4:	f8d8 3000 	ldr.w	r3, [r8]
 80064d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064dc:	3307      	adds	r3, #7
 80064de:	f023 0307 	bic.w	r3, r3, #7
 80064e2:	f103 0208 	add.w	r2, r3, #8
 80064e6:	f8c8 2000 	str.w	r2, [r8]
 80064ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80064f8:	ee08 0a10 	vmov	s16, r0
 80064fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006504:	4b9e      	ldr	r3, [pc, #632]	; (8006780 <_printf_float+0x2d8>)
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	f7fa fb17 	bl	8000b3c <__aeabi_dcmpun>
 800650e:	bb88      	cbnz	r0, 8006574 <_printf_float+0xcc>
 8006510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006514:	4b9a      	ldr	r3, [pc, #616]	; (8006780 <_printf_float+0x2d8>)
 8006516:	f04f 32ff 	mov.w	r2, #4294967295
 800651a:	f7fa faf1 	bl	8000b00 <__aeabi_dcmple>
 800651e:	bb48      	cbnz	r0, 8006574 <_printf_float+0xcc>
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
 8006524:	4640      	mov	r0, r8
 8006526:	4649      	mov	r1, r9
 8006528:	f7fa fae0 	bl	8000aec <__aeabi_dcmplt>
 800652c:	b110      	cbz	r0, 8006534 <_printf_float+0x8c>
 800652e:	232d      	movs	r3, #45	; 0x2d
 8006530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006534:	4a93      	ldr	r2, [pc, #588]	; (8006784 <_printf_float+0x2dc>)
 8006536:	4b94      	ldr	r3, [pc, #592]	; (8006788 <_printf_float+0x2e0>)
 8006538:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800653c:	bf94      	ite	ls
 800653e:	4690      	movls	r8, r2
 8006540:	4698      	movhi	r8, r3
 8006542:	2303      	movs	r3, #3
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	9b05      	ldr	r3, [sp, #20]
 8006548:	f023 0304 	bic.w	r3, r3, #4
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	f04f 0900 	mov.w	r9, #0
 8006552:	9700      	str	r7, [sp, #0]
 8006554:	4633      	mov	r3, r6
 8006556:	aa0b      	add	r2, sp, #44	; 0x2c
 8006558:	4621      	mov	r1, r4
 800655a:	4628      	mov	r0, r5
 800655c:	f000 f9da 	bl	8006914 <_printf_common>
 8006560:	3001      	adds	r0, #1
 8006562:	f040 8090 	bne.w	8006686 <_printf_float+0x1de>
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	b00d      	add	sp, #52	; 0x34
 800656c:	ecbd 8b02 	vpop	{d8}
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	4640      	mov	r0, r8
 800657a:	4649      	mov	r1, r9
 800657c:	f7fa fade 	bl	8000b3c <__aeabi_dcmpun>
 8006580:	b140      	cbz	r0, 8006594 <_printf_float+0xec>
 8006582:	464b      	mov	r3, r9
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfbc      	itt	lt
 8006588:	232d      	movlt	r3, #45	; 0x2d
 800658a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800658e:	4a7f      	ldr	r2, [pc, #508]	; (800678c <_printf_float+0x2e4>)
 8006590:	4b7f      	ldr	r3, [pc, #508]	; (8006790 <_printf_float+0x2e8>)
 8006592:	e7d1      	b.n	8006538 <_printf_float+0x90>
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800659a:	9206      	str	r2, [sp, #24]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	d13f      	bne.n	8006620 <_printf_float+0x178>
 80065a0:	2306      	movs	r3, #6
 80065a2:	6063      	str	r3, [r4, #4]
 80065a4:	9b05      	ldr	r3, [sp, #20]
 80065a6:	6861      	ldr	r1, [r4, #4]
 80065a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065ac:	2300      	movs	r3, #0
 80065ae:	9303      	str	r3, [sp, #12]
 80065b0:	ab0a      	add	r3, sp, #40	; 0x28
 80065b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065b6:	ab09      	add	r3, sp, #36	; 0x24
 80065b8:	ec49 8b10 	vmov	d0, r8, r9
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065c4:	4628      	mov	r0, r5
 80065c6:	f7ff fecf 	bl	8006368 <__cvt>
 80065ca:	9b06      	ldr	r3, [sp, #24]
 80065cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ce:	2b47      	cmp	r3, #71	; 0x47
 80065d0:	4680      	mov	r8, r0
 80065d2:	d108      	bne.n	80065e6 <_printf_float+0x13e>
 80065d4:	1cc8      	adds	r0, r1, #3
 80065d6:	db02      	blt.n	80065de <_printf_float+0x136>
 80065d8:	6863      	ldr	r3, [r4, #4]
 80065da:	4299      	cmp	r1, r3
 80065dc:	dd41      	ble.n	8006662 <_printf_float+0x1ba>
 80065de:	f1ab 0302 	sub.w	r3, fp, #2
 80065e2:	fa5f fb83 	uxtb.w	fp, r3
 80065e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ea:	d820      	bhi.n	800662e <_printf_float+0x186>
 80065ec:	3901      	subs	r1, #1
 80065ee:	465a      	mov	r2, fp
 80065f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065f4:	9109      	str	r1, [sp, #36]	; 0x24
 80065f6:	f7ff ff19 	bl	800642c <__exponent>
 80065fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065fc:	1813      	adds	r3, r2, r0
 80065fe:	2a01      	cmp	r2, #1
 8006600:	4681      	mov	r9, r0
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	dc02      	bgt.n	800660c <_printf_float+0x164>
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	07d2      	lsls	r2, r2, #31
 800660a:	d501      	bpl.n	8006610 <_printf_float+0x168>
 800660c:	3301      	adds	r3, #1
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006614:	2b00      	cmp	r3, #0
 8006616:	d09c      	beq.n	8006552 <_printf_float+0xaa>
 8006618:	232d      	movs	r3, #45	; 0x2d
 800661a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661e:	e798      	b.n	8006552 <_printf_float+0xaa>
 8006620:	9a06      	ldr	r2, [sp, #24]
 8006622:	2a47      	cmp	r2, #71	; 0x47
 8006624:	d1be      	bne.n	80065a4 <_printf_float+0xfc>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1bc      	bne.n	80065a4 <_printf_float+0xfc>
 800662a:	2301      	movs	r3, #1
 800662c:	e7b9      	b.n	80065a2 <_printf_float+0xfa>
 800662e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006632:	d118      	bne.n	8006666 <_printf_float+0x1be>
 8006634:	2900      	cmp	r1, #0
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	dd0b      	ble.n	8006652 <_printf_float+0x1aa>
 800663a:	6121      	str	r1, [r4, #16]
 800663c:	b913      	cbnz	r3, 8006644 <_printf_float+0x19c>
 800663e:	6822      	ldr	r2, [r4, #0]
 8006640:	07d0      	lsls	r0, r2, #31
 8006642:	d502      	bpl.n	800664a <_printf_float+0x1a2>
 8006644:	3301      	adds	r3, #1
 8006646:	440b      	add	r3, r1
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	65a1      	str	r1, [r4, #88]	; 0x58
 800664c:	f04f 0900 	mov.w	r9, #0
 8006650:	e7de      	b.n	8006610 <_printf_float+0x168>
 8006652:	b913      	cbnz	r3, 800665a <_printf_float+0x1b2>
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	07d2      	lsls	r2, r2, #31
 8006658:	d501      	bpl.n	800665e <_printf_float+0x1b6>
 800665a:	3302      	adds	r3, #2
 800665c:	e7f4      	b.n	8006648 <_printf_float+0x1a0>
 800665e:	2301      	movs	r3, #1
 8006660:	e7f2      	b.n	8006648 <_printf_float+0x1a0>
 8006662:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006668:	4299      	cmp	r1, r3
 800666a:	db05      	blt.n	8006678 <_printf_float+0x1d0>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	6121      	str	r1, [r4, #16]
 8006670:	07d8      	lsls	r0, r3, #31
 8006672:	d5ea      	bpl.n	800664a <_printf_float+0x1a2>
 8006674:	1c4b      	adds	r3, r1, #1
 8006676:	e7e7      	b.n	8006648 <_printf_float+0x1a0>
 8006678:	2900      	cmp	r1, #0
 800667a:	bfd4      	ite	le
 800667c:	f1c1 0202 	rsble	r2, r1, #2
 8006680:	2201      	movgt	r2, #1
 8006682:	4413      	add	r3, r2
 8006684:	e7e0      	b.n	8006648 <_printf_float+0x1a0>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	055a      	lsls	r2, r3, #21
 800668a:	d407      	bmi.n	800669c <_printf_float+0x1f4>
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	4642      	mov	r2, r8
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	d12c      	bne.n	80066f4 <_printf_float+0x24c>
 800669a:	e764      	b.n	8006566 <_printf_float+0xbe>
 800669c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066a0:	f240 80e0 	bls.w	8006864 <_printf_float+0x3bc>
 80066a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066a8:	2200      	movs	r2, #0
 80066aa:	2300      	movs	r3, #0
 80066ac:	f7fa fa14 	bl	8000ad8 <__aeabi_dcmpeq>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d034      	beq.n	800671e <_printf_float+0x276>
 80066b4:	4a37      	ldr	r2, [pc, #220]	; (8006794 <_printf_float+0x2ec>)
 80066b6:	2301      	movs	r3, #1
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f af51 	beq.w	8006566 <_printf_float+0xbe>
 80066c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066c8:	429a      	cmp	r2, r3
 80066ca:	db02      	blt.n	80066d2 <_printf_float+0x22a>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	07d8      	lsls	r0, r3, #31
 80066d0:	d510      	bpl.n	80066f4 <_printf_float+0x24c>
 80066d2:	ee18 3a10 	vmov	r3, s16
 80066d6:	4652      	mov	r2, sl
 80066d8:	4631      	mov	r1, r6
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f af41 	beq.w	8006566 <_printf_float+0xbe>
 80066e4:	f04f 0800 	mov.w	r8, #0
 80066e8:	f104 091a 	add.w	r9, r4, #26
 80066ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ee:	3b01      	subs	r3, #1
 80066f0:	4543      	cmp	r3, r8
 80066f2:	dc09      	bgt.n	8006708 <_printf_float+0x260>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	079b      	lsls	r3, r3, #30
 80066f8:	f100 8107 	bmi.w	800690a <_printf_float+0x462>
 80066fc:	68e0      	ldr	r0, [r4, #12]
 80066fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006700:	4298      	cmp	r0, r3
 8006702:	bfb8      	it	lt
 8006704:	4618      	movlt	r0, r3
 8006706:	e730      	b.n	800656a <_printf_float+0xc2>
 8006708:	2301      	movs	r3, #1
 800670a:	464a      	mov	r2, r9
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af27 	beq.w	8006566 <_printf_float+0xbe>
 8006718:	f108 0801 	add.w	r8, r8, #1
 800671c:	e7e6      	b.n	80066ec <_printf_float+0x244>
 800671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	dc39      	bgt.n	8006798 <_printf_float+0x2f0>
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <_printf_float+0x2ec>)
 8006726:	2301      	movs	r3, #1
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f af19 	beq.w	8006566 <_printf_float+0xbe>
 8006734:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006738:	4313      	orrs	r3, r2
 800673a:	d102      	bne.n	8006742 <_printf_float+0x29a>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	07d9      	lsls	r1, r3, #31
 8006740:	d5d8      	bpl.n	80066f4 <_printf_float+0x24c>
 8006742:	ee18 3a10 	vmov	r3, s16
 8006746:	4652      	mov	r2, sl
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f af09 	beq.w	8006566 <_printf_float+0xbe>
 8006754:	f04f 0900 	mov.w	r9, #0
 8006758:	f104 0a1a 	add.w	sl, r4, #26
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	425b      	negs	r3, r3
 8006760:	454b      	cmp	r3, r9
 8006762:	dc01      	bgt.n	8006768 <_printf_float+0x2c0>
 8006764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006766:	e792      	b.n	800668e <_printf_float+0x1e6>
 8006768:	2301      	movs	r3, #1
 800676a:	4652      	mov	r2, sl
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f aef7 	beq.w	8006566 <_printf_float+0xbe>
 8006778:	f109 0901 	add.w	r9, r9, #1
 800677c:	e7ee      	b.n	800675c <_printf_float+0x2b4>
 800677e:	bf00      	nop
 8006780:	7fefffff 	.word	0x7fefffff
 8006784:	0800bb24 	.word	0x0800bb24
 8006788:	0800bb28 	.word	0x0800bb28
 800678c:	0800bb2c 	.word	0x0800bb2c
 8006790:	0800bb30 	.word	0x0800bb30
 8006794:	0800bb34 	.word	0x0800bb34
 8006798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800679a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800679c:	429a      	cmp	r2, r3
 800679e:	bfa8      	it	ge
 80067a0:	461a      	movge	r2, r3
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	4691      	mov	r9, r2
 80067a6:	dc37      	bgt.n	8006818 <_printf_float+0x370>
 80067a8:	f04f 0b00 	mov.w	fp, #0
 80067ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067b0:	f104 021a 	add.w	r2, r4, #26
 80067b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	eba3 0309 	sub.w	r3, r3, r9
 80067bc:	455b      	cmp	r3, fp
 80067be:	dc33      	bgt.n	8006828 <_printf_float+0x380>
 80067c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c4:	429a      	cmp	r2, r3
 80067c6:	db3b      	blt.n	8006840 <_printf_float+0x398>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	07da      	lsls	r2, r3, #31
 80067cc:	d438      	bmi.n	8006840 <_printf_float+0x398>
 80067ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067d2:	eba2 0903 	sub.w	r9, r2, r3
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	4591      	cmp	r9, r2
 80067dc:	bfa8      	it	ge
 80067de:	4691      	movge	r9, r2
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	dc35      	bgt.n	8006852 <_printf_float+0x3aa>
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ee:	f104 0a1a 	add.w	sl, r4, #26
 80067f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	eba3 0309 	sub.w	r3, r3, r9
 80067fc:	4543      	cmp	r3, r8
 80067fe:	f77f af79 	ble.w	80066f4 <_printf_float+0x24c>
 8006802:	2301      	movs	r3, #1
 8006804:	4652      	mov	r2, sl
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f aeaa 	beq.w	8006566 <_printf_float+0xbe>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	e7ec      	b.n	80067f2 <_printf_float+0x34a>
 8006818:	4613      	mov	r3, r2
 800681a:	4631      	mov	r1, r6
 800681c:	4642      	mov	r2, r8
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	d1c0      	bne.n	80067a8 <_printf_float+0x300>
 8006826:	e69e      	b.n	8006566 <_printf_float+0xbe>
 8006828:	2301      	movs	r3, #1
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	9205      	str	r2, [sp, #20]
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f ae97 	beq.w	8006566 <_printf_float+0xbe>
 8006838:	9a05      	ldr	r2, [sp, #20]
 800683a:	f10b 0b01 	add.w	fp, fp, #1
 800683e:	e7b9      	b.n	80067b4 <_printf_float+0x30c>
 8006840:	ee18 3a10 	vmov	r3, s16
 8006844:	4652      	mov	r2, sl
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	47b8      	blx	r7
 800684c:	3001      	adds	r0, #1
 800684e:	d1be      	bne.n	80067ce <_printf_float+0x326>
 8006850:	e689      	b.n	8006566 <_printf_float+0xbe>
 8006852:	9a05      	ldr	r2, [sp, #20]
 8006854:	464b      	mov	r3, r9
 8006856:	4442      	add	r2, r8
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	d1c1      	bne.n	80067e6 <_printf_float+0x33e>
 8006862:	e680      	b.n	8006566 <_printf_float+0xbe>
 8006864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006866:	2a01      	cmp	r2, #1
 8006868:	dc01      	bgt.n	800686e <_printf_float+0x3c6>
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d53a      	bpl.n	80068e4 <_printf_float+0x43c>
 800686e:	2301      	movs	r3, #1
 8006870:	4642      	mov	r2, r8
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae74 	beq.w	8006566 <_printf_float+0xbe>
 800687e:	ee18 3a10 	vmov	r3, s16
 8006882:	4652      	mov	r2, sl
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f ae6b 	beq.w	8006566 <_printf_float+0xbe>
 8006890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800689c:	f7fa f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80068a0:	b9d8      	cbnz	r0, 80068da <_printf_float+0x432>
 80068a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80068a6:	f108 0201 	add.w	r2, r8, #1
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d10e      	bne.n	80068d2 <_printf_float+0x42a>
 80068b4:	e657      	b.n	8006566 <_printf_float+0xbe>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4652      	mov	r2, sl
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f ae50 	beq.w	8006566 <_printf_float+0xbe>
 80068c6:	f108 0801 	add.w	r8, r8, #1
 80068ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4543      	cmp	r3, r8
 80068d0:	dcf1      	bgt.n	80068b6 <_printf_float+0x40e>
 80068d2:	464b      	mov	r3, r9
 80068d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068d8:	e6da      	b.n	8006690 <_printf_float+0x1e8>
 80068da:	f04f 0800 	mov.w	r8, #0
 80068de:	f104 0a1a 	add.w	sl, r4, #26
 80068e2:	e7f2      	b.n	80068ca <_printf_float+0x422>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4642      	mov	r2, r8
 80068e8:	e7df      	b.n	80068aa <_printf_float+0x402>
 80068ea:	2301      	movs	r3, #1
 80068ec:	464a      	mov	r2, r9
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f ae36 	beq.w	8006566 <_printf_float+0xbe>
 80068fa:	f108 0801 	add.w	r8, r8, #1
 80068fe:	68e3      	ldr	r3, [r4, #12]
 8006900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006902:	1a5b      	subs	r3, r3, r1
 8006904:	4543      	cmp	r3, r8
 8006906:	dcf0      	bgt.n	80068ea <_printf_float+0x442>
 8006908:	e6f8      	b.n	80066fc <_printf_float+0x254>
 800690a:	f04f 0800 	mov.w	r8, #0
 800690e:	f104 0919 	add.w	r9, r4, #25
 8006912:	e7f4      	b.n	80068fe <_printf_float+0x456>

08006914 <_printf_common>:
 8006914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	4616      	mov	r6, r2
 800691a:	4699      	mov	r9, r3
 800691c:	688a      	ldr	r2, [r1, #8]
 800691e:	690b      	ldr	r3, [r1, #16]
 8006920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006924:	4293      	cmp	r3, r2
 8006926:	bfb8      	it	lt
 8006928:	4613      	movlt	r3, r2
 800692a:	6033      	str	r3, [r6, #0]
 800692c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006930:	4607      	mov	r7, r0
 8006932:	460c      	mov	r4, r1
 8006934:	b10a      	cbz	r2, 800693a <_printf_common+0x26>
 8006936:	3301      	adds	r3, #1
 8006938:	6033      	str	r3, [r6, #0]
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	0699      	lsls	r1, r3, #26
 800693e:	bf42      	ittt	mi
 8006940:	6833      	ldrmi	r3, [r6, #0]
 8006942:	3302      	addmi	r3, #2
 8006944:	6033      	strmi	r3, [r6, #0]
 8006946:	6825      	ldr	r5, [r4, #0]
 8006948:	f015 0506 	ands.w	r5, r5, #6
 800694c:	d106      	bne.n	800695c <_printf_common+0x48>
 800694e:	f104 0a19 	add.w	sl, r4, #25
 8006952:	68e3      	ldr	r3, [r4, #12]
 8006954:	6832      	ldr	r2, [r6, #0]
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	42ab      	cmp	r3, r5
 800695a:	dc26      	bgt.n	80069aa <_printf_common+0x96>
 800695c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006960:	1e13      	subs	r3, r2, #0
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	bf18      	it	ne
 8006966:	2301      	movne	r3, #1
 8006968:	0692      	lsls	r2, r2, #26
 800696a:	d42b      	bmi.n	80069c4 <_printf_common+0xb0>
 800696c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006970:	4649      	mov	r1, r9
 8006972:	4638      	mov	r0, r7
 8006974:	47c0      	blx	r8
 8006976:	3001      	adds	r0, #1
 8006978:	d01e      	beq.n	80069b8 <_printf_common+0xa4>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	6922      	ldr	r2, [r4, #16]
 800697e:	f003 0306 	and.w	r3, r3, #6
 8006982:	2b04      	cmp	r3, #4
 8006984:	bf02      	ittt	eq
 8006986:	68e5      	ldreq	r5, [r4, #12]
 8006988:	6833      	ldreq	r3, [r6, #0]
 800698a:	1aed      	subeq	r5, r5, r3
 800698c:	68a3      	ldr	r3, [r4, #8]
 800698e:	bf0c      	ite	eq
 8006990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006994:	2500      	movne	r5, #0
 8006996:	4293      	cmp	r3, r2
 8006998:	bfc4      	itt	gt
 800699a:	1a9b      	subgt	r3, r3, r2
 800699c:	18ed      	addgt	r5, r5, r3
 800699e:	2600      	movs	r6, #0
 80069a0:	341a      	adds	r4, #26
 80069a2:	42b5      	cmp	r5, r6
 80069a4:	d11a      	bne.n	80069dc <_printf_common+0xc8>
 80069a6:	2000      	movs	r0, #0
 80069a8:	e008      	b.n	80069bc <_printf_common+0xa8>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4652      	mov	r2, sl
 80069ae:	4649      	mov	r1, r9
 80069b0:	4638      	mov	r0, r7
 80069b2:	47c0      	blx	r8
 80069b4:	3001      	adds	r0, #1
 80069b6:	d103      	bne.n	80069c0 <_printf_common+0xac>
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c0:	3501      	adds	r5, #1
 80069c2:	e7c6      	b.n	8006952 <_printf_common+0x3e>
 80069c4:	18e1      	adds	r1, r4, r3
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	2030      	movs	r0, #48	; 0x30
 80069ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ce:	4422      	add	r2, r4
 80069d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069d8:	3302      	adds	r3, #2
 80069da:	e7c7      	b.n	800696c <_printf_common+0x58>
 80069dc:	2301      	movs	r3, #1
 80069de:	4622      	mov	r2, r4
 80069e0:	4649      	mov	r1, r9
 80069e2:	4638      	mov	r0, r7
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d0e6      	beq.n	80069b8 <_printf_common+0xa4>
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7d9      	b.n	80069a2 <_printf_common+0x8e>
	...

080069f0 <_printf_i>:
 80069f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	7e0f      	ldrb	r7, [r1, #24]
 80069f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069f8:	2f78      	cmp	r7, #120	; 0x78
 80069fa:	4691      	mov	r9, r2
 80069fc:	4680      	mov	r8, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	469a      	mov	sl, r3
 8006a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a06:	d807      	bhi.n	8006a18 <_printf_i+0x28>
 8006a08:	2f62      	cmp	r7, #98	; 0x62
 8006a0a:	d80a      	bhi.n	8006a22 <_printf_i+0x32>
 8006a0c:	2f00      	cmp	r7, #0
 8006a0e:	f000 80d4 	beq.w	8006bba <_printf_i+0x1ca>
 8006a12:	2f58      	cmp	r7, #88	; 0x58
 8006a14:	f000 80c0 	beq.w	8006b98 <_printf_i+0x1a8>
 8006a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a20:	e03a      	b.n	8006a98 <_printf_i+0xa8>
 8006a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a26:	2b15      	cmp	r3, #21
 8006a28:	d8f6      	bhi.n	8006a18 <_printf_i+0x28>
 8006a2a:	a101      	add	r1, pc, #4	; (adr r1, 8006a30 <_printf_i+0x40>)
 8006a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a30:	08006a89 	.word	0x08006a89
 8006a34:	08006a9d 	.word	0x08006a9d
 8006a38:	08006a19 	.word	0x08006a19
 8006a3c:	08006a19 	.word	0x08006a19
 8006a40:	08006a19 	.word	0x08006a19
 8006a44:	08006a19 	.word	0x08006a19
 8006a48:	08006a9d 	.word	0x08006a9d
 8006a4c:	08006a19 	.word	0x08006a19
 8006a50:	08006a19 	.word	0x08006a19
 8006a54:	08006a19 	.word	0x08006a19
 8006a58:	08006a19 	.word	0x08006a19
 8006a5c:	08006ba1 	.word	0x08006ba1
 8006a60:	08006ac9 	.word	0x08006ac9
 8006a64:	08006b5b 	.word	0x08006b5b
 8006a68:	08006a19 	.word	0x08006a19
 8006a6c:	08006a19 	.word	0x08006a19
 8006a70:	08006bc3 	.word	0x08006bc3
 8006a74:	08006a19 	.word	0x08006a19
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006a19 	.word	0x08006a19
 8006a80:	08006a19 	.word	0x08006a19
 8006a84:	08006b63 	.word	0x08006b63
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	1d1a      	adds	r2, r3, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e09f      	b.n	8006bdc <_printf_i+0x1ec>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	0607      	lsls	r7, r0, #24
 8006aa2:	f103 0104 	add.w	r1, r3, #4
 8006aa6:	6029      	str	r1, [r5, #0]
 8006aa8:	d501      	bpl.n	8006aae <_printf_i+0xbe>
 8006aaa:	681e      	ldr	r6, [r3, #0]
 8006aac:	e003      	b.n	8006ab6 <_printf_i+0xc6>
 8006aae:	0646      	lsls	r6, r0, #25
 8006ab0:	d5fb      	bpl.n	8006aaa <_printf_i+0xba>
 8006ab2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	da03      	bge.n	8006ac2 <_printf_i+0xd2>
 8006aba:	232d      	movs	r3, #45	; 0x2d
 8006abc:	4276      	negs	r6, r6
 8006abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac2:	485a      	ldr	r0, [pc, #360]	; (8006c2c <_printf_i+0x23c>)
 8006ac4:	230a      	movs	r3, #10
 8006ac6:	e012      	b.n	8006aee <_printf_i+0xfe>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	6820      	ldr	r0, [r4, #0]
 8006acc:	1d19      	adds	r1, r3, #4
 8006ace:	6029      	str	r1, [r5, #0]
 8006ad0:	0605      	lsls	r5, r0, #24
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_i+0xe8>
 8006ad4:	681e      	ldr	r6, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <_printf_i+0xee>
 8006ad8:	0641      	lsls	r1, r0, #25
 8006ada:	d5fb      	bpl.n	8006ad4 <_printf_i+0xe4>
 8006adc:	881e      	ldrh	r6, [r3, #0]
 8006ade:	4853      	ldr	r0, [pc, #332]	; (8006c2c <_printf_i+0x23c>)
 8006ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2308      	moveq	r3, #8
 8006ae6:	230a      	movne	r3, #10
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aee:	6865      	ldr	r5, [r4, #4]
 8006af0:	60a5      	str	r5, [r4, #8]
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	bfa2      	ittt	ge
 8006af6:	6821      	ldrge	r1, [r4, #0]
 8006af8:	f021 0104 	bicge.w	r1, r1, #4
 8006afc:	6021      	strge	r1, [r4, #0]
 8006afe:	b90e      	cbnz	r6, 8006b04 <_printf_i+0x114>
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	d04b      	beq.n	8006b9c <_printf_i+0x1ac>
 8006b04:	4615      	mov	r5, r2
 8006b06:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b0a:	fb03 6711 	mls	r7, r3, r1, r6
 8006b0e:	5dc7      	ldrb	r7, [r0, r7]
 8006b10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b14:	4637      	mov	r7, r6
 8006b16:	42bb      	cmp	r3, r7
 8006b18:	460e      	mov	r6, r1
 8006b1a:	d9f4      	bls.n	8006b06 <_printf_i+0x116>
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d10b      	bne.n	8006b38 <_printf_i+0x148>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07de      	lsls	r6, r3, #31
 8006b24:	d508      	bpl.n	8006b38 <_printf_i+0x148>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6861      	ldr	r1, [r4, #4]
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	bfde      	ittt	le
 8006b2e:	2330      	movle	r3, #48	; 0x30
 8006b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b38:	1b52      	subs	r2, r2, r5
 8006b3a:	6122      	str	r2, [r4, #16]
 8006b3c:	f8cd a000 	str.w	sl, [sp]
 8006b40:	464b      	mov	r3, r9
 8006b42:	aa03      	add	r2, sp, #12
 8006b44:	4621      	mov	r1, r4
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7ff fee4 	bl	8006914 <_printf_common>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d14a      	bne.n	8006be6 <_printf_i+0x1f6>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b004      	add	sp, #16
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	4833      	ldr	r0, [pc, #204]	; (8006c30 <_printf_i+0x240>)
 8006b64:	2778      	movs	r7, #120	; 0x78
 8006b66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	6829      	ldr	r1, [r5, #0]
 8006b6e:	061f      	lsls	r7, r3, #24
 8006b70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b74:	d402      	bmi.n	8006b7c <_printf_i+0x18c>
 8006b76:	065f      	lsls	r7, r3, #25
 8006b78:	bf48      	it	mi
 8006b7a:	b2b6      	uxthmi	r6, r6
 8006b7c:	07df      	lsls	r7, r3, #31
 8006b7e:	bf48      	it	mi
 8006b80:	f043 0320 	orrmi.w	r3, r3, #32
 8006b84:	6029      	str	r1, [r5, #0]
 8006b86:	bf48      	it	mi
 8006b88:	6023      	strmi	r3, [r4, #0]
 8006b8a:	b91e      	cbnz	r6, 8006b94 <_printf_i+0x1a4>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	f023 0320 	bic.w	r3, r3, #32
 8006b92:	6023      	str	r3, [r4, #0]
 8006b94:	2310      	movs	r3, #16
 8006b96:	e7a7      	b.n	8006ae8 <_printf_i+0xf8>
 8006b98:	4824      	ldr	r0, [pc, #144]	; (8006c2c <_printf_i+0x23c>)
 8006b9a:	e7e4      	b.n	8006b66 <_printf_i+0x176>
 8006b9c:	4615      	mov	r5, r2
 8006b9e:	e7bd      	b.n	8006b1c <_printf_i+0x12c>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	6826      	ldr	r6, [r4, #0]
 8006ba4:	6961      	ldr	r1, [r4, #20]
 8006ba6:	1d18      	adds	r0, r3, #4
 8006ba8:	6028      	str	r0, [r5, #0]
 8006baa:	0635      	lsls	r5, r6, #24
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	d501      	bpl.n	8006bb4 <_printf_i+0x1c4>
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	e002      	b.n	8006bba <_printf_i+0x1ca>
 8006bb4:	0670      	lsls	r0, r6, #25
 8006bb6:	d5fb      	bpl.n	8006bb0 <_printf_i+0x1c0>
 8006bb8:	8019      	strh	r1, [r3, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	4615      	mov	r5, r2
 8006bc0:	e7bc      	b.n	8006b3c <_printf_i+0x14c>
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	1d1a      	adds	r2, r3, #4
 8006bc6:	602a      	str	r2, [r5, #0]
 8006bc8:	681d      	ldr	r5, [r3, #0]
 8006bca:	6862      	ldr	r2, [r4, #4]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f7f9 fb06 	bl	80001e0 <memchr>
 8006bd4:	b108      	cbz	r0, 8006bda <_printf_i+0x1ea>
 8006bd6:	1b40      	subs	r0, r0, r5
 8006bd8:	6060      	str	r0, [r4, #4]
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	2300      	movs	r3, #0
 8006be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be4:	e7aa      	b.n	8006b3c <_printf_i+0x14c>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d0ad      	beq.n	8006b50 <_printf_i+0x160>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	079b      	lsls	r3, r3, #30
 8006bf8:	d413      	bmi.n	8006c22 <_printf_i+0x232>
 8006bfa:	68e0      	ldr	r0, [r4, #12]
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	4298      	cmp	r0, r3
 8006c00:	bfb8      	it	lt
 8006c02:	4618      	movlt	r0, r3
 8006c04:	e7a6      	b.n	8006b54 <_printf_i+0x164>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	47d0      	blx	sl
 8006c10:	3001      	adds	r0, #1
 8006c12:	d09d      	beq.n	8006b50 <_printf_i+0x160>
 8006c14:	3501      	adds	r5, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	9903      	ldr	r1, [sp, #12]
 8006c1a:	1a5b      	subs	r3, r3, r1
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dcf2      	bgt.n	8006c06 <_printf_i+0x216>
 8006c20:	e7eb      	b.n	8006bfa <_printf_i+0x20a>
 8006c22:	2500      	movs	r5, #0
 8006c24:	f104 0619 	add.w	r6, r4, #25
 8006c28:	e7f5      	b.n	8006c16 <_printf_i+0x226>
 8006c2a:	bf00      	nop
 8006c2c:	0800bb36 	.word	0x0800bb36
 8006c30:	0800bb47 	.word	0x0800bb47

08006c34 <_scanf_float>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	b087      	sub	sp, #28
 8006c3a:	4617      	mov	r7, r2
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	688b      	ldr	r3, [r1, #8]
 8006c40:	1e5a      	subs	r2, r3, #1
 8006c42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c46:	bf83      	ittte	hi
 8006c48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c4c:	195b      	addhi	r3, r3, r5
 8006c4e:	9302      	strhi	r3, [sp, #8]
 8006c50:	2300      	movls	r3, #0
 8006c52:	bf86      	itte	hi
 8006c54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c58:	608b      	strhi	r3, [r1, #8]
 8006c5a:	9302      	strls	r3, [sp, #8]
 8006c5c:	680b      	ldr	r3, [r1, #0]
 8006c5e:	468b      	mov	fp, r1
 8006c60:	2500      	movs	r5, #0
 8006c62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c66:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c6e:	4680      	mov	r8, r0
 8006c70:	460c      	mov	r4, r1
 8006c72:	465e      	mov	r6, fp
 8006c74:	46aa      	mov	sl, r5
 8006c76:	46a9      	mov	r9, r5
 8006c78:	9501      	str	r5, [sp, #4]
 8006c7a:	68a2      	ldr	r2, [r4, #8]
 8006c7c:	b152      	cbz	r2, 8006c94 <_scanf_float+0x60>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b4e      	cmp	r3, #78	; 0x4e
 8006c84:	d864      	bhi.n	8006d50 <_scanf_float+0x11c>
 8006c86:	2b40      	cmp	r3, #64	; 0x40
 8006c88:	d83c      	bhi.n	8006d04 <_scanf_float+0xd0>
 8006c8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c8e:	b2c8      	uxtb	r0, r1
 8006c90:	280e      	cmp	r0, #14
 8006c92:	d93a      	bls.n	8006d0a <_scanf_float+0xd6>
 8006c94:	f1b9 0f00 	cmp.w	r9, #0
 8006c98:	d003      	beq.n	8006ca2 <_scanf_float+0x6e>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ca6:	f1ba 0f01 	cmp.w	sl, #1
 8006caa:	f200 8113 	bhi.w	8006ed4 <_scanf_float+0x2a0>
 8006cae:	455e      	cmp	r6, fp
 8006cb0:	f200 8105 	bhi.w	8006ebe <_scanf_float+0x28a>
 8006cb4:	2501      	movs	r5, #1
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	b007      	add	sp, #28
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006cc2:	2a0d      	cmp	r2, #13
 8006cc4:	d8e6      	bhi.n	8006c94 <_scanf_float+0x60>
 8006cc6:	a101      	add	r1, pc, #4	; (adr r1, 8006ccc <_scanf_float+0x98>)
 8006cc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ccc:	08006e0b 	.word	0x08006e0b
 8006cd0:	08006c95 	.word	0x08006c95
 8006cd4:	08006c95 	.word	0x08006c95
 8006cd8:	08006c95 	.word	0x08006c95
 8006cdc:	08006e6b 	.word	0x08006e6b
 8006ce0:	08006e43 	.word	0x08006e43
 8006ce4:	08006c95 	.word	0x08006c95
 8006ce8:	08006c95 	.word	0x08006c95
 8006cec:	08006e19 	.word	0x08006e19
 8006cf0:	08006c95 	.word	0x08006c95
 8006cf4:	08006c95 	.word	0x08006c95
 8006cf8:	08006c95 	.word	0x08006c95
 8006cfc:	08006c95 	.word	0x08006c95
 8006d00:	08006dd1 	.word	0x08006dd1
 8006d04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d08:	e7db      	b.n	8006cc2 <_scanf_float+0x8e>
 8006d0a:	290e      	cmp	r1, #14
 8006d0c:	d8c2      	bhi.n	8006c94 <_scanf_float+0x60>
 8006d0e:	a001      	add	r0, pc, #4	; (adr r0, 8006d14 <_scanf_float+0xe0>)
 8006d10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d14:	08006dc3 	.word	0x08006dc3
 8006d18:	08006c95 	.word	0x08006c95
 8006d1c:	08006dc3 	.word	0x08006dc3
 8006d20:	08006e57 	.word	0x08006e57
 8006d24:	08006c95 	.word	0x08006c95
 8006d28:	08006d71 	.word	0x08006d71
 8006d2c:	08006dad 	.word	0x08006dad
 8006d30:	08006dad 	.word	0x08006dad
 8006d34:	08006dad 	.word	0x08006dad
 8006d38:	08006dad 	.word	0x08006dad
 8006d3c:	08006dad 	.word	0x08006dad
 8006d40:	08006dad 	.word	0x08006dad
 8006d44:	08006dad 	.word	0x08006dad
 8006d48:	08006dad 	.word	0x08006dad
 8006d4c:	08006dad 	.word	0x08006dad
 8006d50:	2b6e      	cmp	r3, #110	; 0x6e
 8006d52:	d809      	bhi.n	8006d68 <_scanf_float+0x134>
 8006d54:	2b60      	cmp	r3, #96	; 0x60
 8006d56:	d8b2      	bhi.n	8006cbe <_scanf_float+0x8a>
 8006d58:	2b54      	cmp	r3, #84	; 0x54
 8006d5a:	d077      	beq.n	8006e4c <_scanf_float+0x218>
 8006d5c:	2b59      	cmp	r3, #89	; 0x59
 8006d5e:	d199      	bne.n	8006c94 <_scanf_float+0x60>
 8006d60:	2d07      	cmp	r5, #7
 8006d62:	d197      	bne.n	8006c94 <_scanf_float+0x60>
 8006d64:	2508      	movs	r5, #8
 8006d66:	e029      	b.n	8006dbc <_scanf_float+0x188>
 8006d68:	2b74      	cmp	r3, #116	; 0x74
 8006d6a:	d06f      	beq.n	8006e4c <_scanf_float+0x218>
 8006d6c:	2b79      	cmp	r3, #121	; 0x79
 8006d6e:	e7f6      	b.n	8006d5e <_scanf_float+0x12a>
 8006d70:	6821      	ldr	r1, [r4, #0]
 8006d72:	05c8      	lsls	r0, r1, #23
 8006d74:	d51a      	bpl.n	8006dac <_scanf_float+0x178>
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d7c:	6021      	str	r1, [r4, #0]
 8006d7e:	f109 0901 	add.w	r9, r9, #1
 8006d82:	b11b      	cbz	r3, 8006d8c <_scanf_float+0x158>
 8006d84:	3b01      	subs	r3, #1
 8006d86:	3201      	adds	r2, #1
 8006d88:	9302      	str	r3, [sp, #8]
 8006d8a:	60a2      	str	r2, [r4, #8]
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	60a3      	str	r3, [r4, #8]
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	3301      	adds	r3, #1
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	f340 8084 	ble.w	8006eac <_scanf_float+0x278>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	603b      	str	r3, [r7, #0]
 8006daa:	e766      	b.n	8006c7a <_scanf_float+0x46>
 8006dac:	eb1a 0f05 	cmn.w	sl, r5
 8006db0:	f47f af70 	bne.w	8006c94 <_scanf_float+0x60>
 8006db4:	6822      	ldr	r2, [r4, #0]
 8006db6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006dba:	6022      	str	r2, [r4, #0]
 8006dbc:	f806 3b01 	strb.w	r3, [r6], #1
 8006dc0:	e7e4      	b.n	8006d8c <_scanf_float+0x158>
 8006dc2:	6822      	ldr	r2, [r4, #0]
 8006dc4:	0610      	lsls	r0, r2, #24
 8006dc6:	f57f af65 	bpl.w	8006c94 <_scanf_float+0x60>
 8006dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dce:	e7f4      	b.n	8006dba <_scanf_float+0x186>
 8006dd0:	f1ba 0f00 	cmp.w	sl, #0
 8006dd4:	d10e      	bne.n	8006df4 <_scanf_float+0x1c0>
 8006dd6:	f1b9 0f00 	cmp.w	r9, #0
 8006dda:	d10e      	bne.n	8006dfa <_scanf_float+0x1c6>
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006de2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006de6:	d108      	bne.n	8006dfa <_scanf_float+0x1c6>
 8006de8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dec:	6022      	str	r2, [r4, #0]
 8006dee:	f04f 0a01 	mov.w	sl, #1
 8006df2:	e7e3      	b.n	8006dbc <_scanf_float+0x188>
 8006df4:	f1ba 0f02 	cmp.w	sl, #2
 8006df8:	d055      	beq.n	8006ea6 <_scanf_float+0x272>
 8006dfa:	2d01      	cmp	r5, #1
 8006dfc:	d002      	beq.n	8006e04 <_scanf_float+0x1d0>
 8006dfe:	2d04      	cmp	r5, #4
 8006e00:	f47f af48 	bne.w	8006c94 <_scanf_float+0x60>
 8006e04:	3501      	adds	r5, #1
 8006e06:	b2ed      	uxtb	r5, r5
 8006e08:	e7d8      	b.n	8006dbc <_scanf_float+0x188>
 8006e0a:	f1ba 0f01 	cmp.w	sl, #1
 8006e0e:	f47f af41 	bne.w	8006c94 <_scanf_float+0x60>
 8006e12:	f04f 0a02 	mov.w	sl, #2
 8006e16:	e7d1      	b.n	8006dbc <_scanf_float+0x188>
 8006e18:	b97d      	cbnz	r5, 8006e3a <_scanf_float+0x206>
 8006e1a:	f1b9 0f00 	cmp.w	r9, #0
 8006e1e:	f47f af3c 	bne.w	8006c9a <_scanf_float+0x66>
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e2c:	f47f af39 	bne.w	8006ca2 <_scanf_float+0x6e>
 8006e30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e34:	6022      	str	r2, [r4, #0]
 8006e36:	2501      	movs	r5, #1
 8006e38:	e7c0      	b.n	8006dbc <_scanf_float+0x188>
 8006e3a:	2d03      	cmp	r5, #3
 8006e3c:	d0e2      	beq.n	8006e04 <_scanf_float+0x1d0>
 8006e3e:	2d05      	cmp	r5, #5
 8006e40:	e7de      	b.n	8006e00 <_scanf_float+0x1cc>
 8006e42:	2d02      	cmp	r5, #2
 8006e44:	f47f af26 	bne.w	8006c94 <_scanf_float+0x60>
 8006e48:	2503      	movs	r5, #3
 8006e4a:	e7b7      	b.n	8006dbc <_scanf_float+0x188>
 8006e4c:	2d06      	cmp	r5, #6
 8006e4e:	f47f af21 	bne.w	8006c94 <_scanf_float+0x60>
 8006e52:	2507      	movs	r5, #7
 8006e54:	e7b2      	b.n	8006dbc <_scanf_float+0x188>
 8006e56:	6822      	ldr	r2, [r4, #0]
 8006e58:	0591      	lsls	r1, r2, #22
 8006e5a:	f57f af1b 	bpl.w	8006c94 <_scanf_float+0x60>
 8006e5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e62:	6022      	str	r2, [r4, #0]
 8006e64:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e68:	e7a8      	b.n	8006dbc <_scanf_float+0x188>
 8006e6a:	6822      	ldr	r2, [r4, #0]
 8006e6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e74:	d006      	beq.n	8006e84 <_scanf_float+0x250>
 8006e76:	0550      	lsls	r0, r2, #21
 8006e78:	f57f af0c 	bpl.w	8006c94 <_scanf_float+0x60>
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	f43f af0f 	beq.w	8006ca2 <_scanf_float+0x6e>
 8006e84:	0591      	lsls	r1, r2, #22
 8006e86:	bf58      	it	pl
 8006e88:	9901      	ldrpl	r1, [sp, #4]
 8006e8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e8e:	bf58      	it	pl
 8006e90:	eba9 0101 	subpl.w	r1, r9, r1
 8006e94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e98:	bf58      	it	pl
 8006e9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e9e:	6022      	str	r2, [r4, #0]
 8006ea0:	f04f 0900 	mov.w	r9, #0
 8006ea4:	e78a      	b.n	8006dbc <_scanf_float+0x188>
 8006ea6:	f04f 0a03 	mov.w	sl, #3
 8006eaa:	e787      	b.n	8006dbc <_scanf_float+0x188>
 8006eac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4798      	blx	r3
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f43f aedf 	beq.w	8006c7a <_scanf_float+0x46>
 8006ebc:	e6ea      	b.n	8006c94 <_scanf_float+0x60>
 8006ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ec6:	463a      	mov	r2, r7
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4798      	blx	r3
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	e6ec      	b.n	8006cae <_scanf_float+0x7a>
 8006ed4:	1e6b      	subs	r3, r5, #1
 8006ed6:	2b06      	cmp	r3, #6
 8006ed8:	d825      	bhi.n	8006f26 <_scanf_float+0x2f2>
 8006eda:	2d02      	cmp	r5, #2
 8006edc:	d836      	bhi.n	8006f4c <_scanf_float+0x318>
 8006ede:	455e      	cmp	r6, fp
 8006ee0:	f67f aee8 	bls.w	8006cb4 <_scanf_float+0x80>
 8006ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eec:	463a      	mov	r2, r7
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4798      	blx	r3
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	e7f1      	b.n	8006ede <_scanf_float+0x2aa>
 8006efa:	9802      	ldr	r0, [sp, #8]
 8006efc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f04:	9002      	str	r0, [sp, #8]
 8006f06:	463a      	mov	r2, r7
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4798      	blx	r3
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f16:	fa5f fa8a 	uxtb.w	sl, sl
 8006f1a:	f1ba 0f02 	cmp.w	sl, #2
 8006f1e:	d1ec      	bne.n	8006efa <_scanf_float+0x2c6>
 8006f20:	3d03      	subs	r5, #3
 8006f22:	b2ed      	uxtb	r5, r5
 8006f24:	1b76      	subs	r6, r6, r5
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	05da      	lsls	r2, r3, #23
 8006f2a:	d52f      	bpl.n	8006f8c <_scanf_float+0x358>
 8006f2c:	055b      	lsls	r3, r3, #21
 8006f2e:	d510      	bpl.n	8006f52 <_scanf_float+0x31e>
 8006f30:	455e      	cmp	r6, fp
 8006f32:	f67f aebf 	bls.w	8006cb4 <_scanf_float+0x80>
 8006f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f3e:	463a      	mov	r2, r7
 8006f40:	4640      	mov	r0, r8
 8006f42:	4798      	blx	r3
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	e7f1      	b.n	8006f30 <_scanf_float+0x2fc>
 8006f4c:	46aa      	mov	sl, r5
 8006f4e:	9602      	str	r6, [sp, #8]
 8006f50:	e7df      	b.n	8006f12 <_scanf_float+0x2de>
 8006f52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	2965      	cmp	r1, #101	; 0x65
 8006f5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f62:	6123      	str	r3, [r4, #16]
 8006f64:	d00c      	beq.n	8006f80 <_scanf_float+0x34c>
 8006f66:	2945      	cmp	r1, #69	; 0x45
 8006f68:	d00a      	beq.n	8006f80 <_scanf_float+0x34c>
 8006f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4640      	mov	r0, r8
 8006f72:	4798      	blx	r3
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	1eb5      	subs	r5, r6, #2
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f84:	463a      	mov	r2, r7
 8006f86:	4640      	mov	r0, r8
 8006f88:	4798      	blx	r3
 8006f8a:	462e      	mov	r6, r5
 8006f8c:	6825      	ldr	r5, [r4, #0]
 8006f8e:	f015 0510 	ands.w	r5, r5, #16
 8006f92:	d158      	bne.n	8007046 <_scanf_float+0x412>
 8006f94:	7035      	strb	r5, [r6, #0]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa0:	d11c      	bne.n	8006fdc <_scanf_float+0x3a8>
 8006fa2:	9b01      	ldr	r3, [sp, #4]
 8006fa4:	454b      	cmp	r3, r9
 8006fa6:	eba3 0209 	sub.w	r2, r3, r9
 8006faa:	d124      	bne.n	8006ff6 <_scanf_float+0x3c2>
 8006fac:	2200      	movs	r2, #0
 8006fae:	4659      	mov	r1, fp
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f002 fc31 	bl	8009818 <_strtod_r>
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	6821      	ldr	r1, [r4, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f011 0f02 	tst.w	r1, #2
 8006fc0:	ec57 6b10 	vmov	r6, r7, d0
 8006fc4:	f103 0204 	add.w	r2, r3, #4
 8006fc8:	d020      	beq.n	800700c <_scanf_float+0x3d8>
 8006fca:	9903      	ldr	r1, [sp, #12]
 8006fcc:	600a      	str	r2, [r1, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	e9c3 6700 	strd	r6, r7, [r3]
 8006fd4:	68e3      	ldr	r3, [r4, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60e3      	str	r3, [r4, #12]
 8006fda:	e66c      	b.n	8006cb6 <_scanf_float+0x82>
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0e4      	beq.n	8006fac <_scanf_float+0x378>
 8006fe2:	9905      	ldr	r1, [sp, #20]
 8006fe4:	230a      	movs	r3, #10
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	3101      	adds	r1, #1
 8006fea:	4640      	mov	r0, r8
 8006fec:	f002 fc9c 	bl	8009928 <_strtol_r>
 8006ff0:	9b04      	ldr	r3, [sp, #16]
 8006ff2:	9e05      	ldr	r6, [sp, #20]
 8006ff4:	1ac2      	subs	r2, r0, r3
 8006ff6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ffa:	429e      	cmp	r6, r3
 8006ffc:	bf28      	it	cs
 8006ffe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007002:	4912      	ldr	r1, [pc, #72]	; (800704c <_scanf_float+0x418>)
 8007004:	4630      	mov	r0, r6
 8007006:	f000 f8e7 	bl	80071d8 <siprintf>
 800700a:	e7cf      	b.n	8006fac <_scanf_float+0x378>
 800700c:	f011 0f04 	tst.w	r1, #4
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	600a      	str	r2, [r1, #0]
 8007014:	d1db      	bne.n	8006fce <_scanf_float+0x39a>
 8007016:	f8d3 8000 	ldr.w	r8, [r3]
 800701a:	ee10 2a10 	vmov	r2, s0
 800701e:	ee10 0a10 	vmov	r0, s0
 8007022:	463b      	mov	r3, r7
 8007024:	4639      	mov	r1, r7
 8007026:	f7f9 fd89 	bl	8000b3c <__aeabi_dcmpun>
 800702a:	b128      	cbz	r0, 8007038 <_scanf_float+0x404>
 800702c:	4808      	ldr	r0, [pc, #32]	; (8007050 <_scanf_float+0x41c>)
 800702e:	f000 f9b7 	bl	80073a0 <nanf>
 8007032:	ed88 0a00 	vstr	s0, [r8]
 8007036:	e7cd      	b.n	8006fd4 <_scanf_float+0x3a0>
 8007038:	4630      	mov	r0, r6
 800703a:	4639      	mov	r1, r7
 800703c:	f7f9 fddc 	bl	8000bf8 <__aeabi_d2f>
 8007040:	f8c8 0000 	str.w	r0, [r8]
 8007044:	e7c6      	b.n	8006fd4 <_scanf_float+0x3a0>
 8007046:	2500      	movs	r5, #0
 8007048:	e635      	b.n	8006cb6 <_scanf_float+0x82>
 800704a:	bf00      	nop
 800704c:	0800bb58 	.word	0x0800bb58
 8007050:	0800beed 	.word	0x0800beed

08007054 <std>:
 8007054:	2300      	movs	r3, #0
 8007056:	b510      	push	{r4, lr}
 8007058:	4604      	mov	r4, r0
 800705a:	e9c0 3300 	strd	r3, r3, [r0]
 800705e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007062:	6083      	str	r3, [r0, #8]
 8007064:	8181      	strh	r1, [r0, #12]
 8007066:	6643      	str	r3, [r0, #100]	; 0x64
 8007068:	81c2      	strh	r2, [r0, #14]
 800706a:	6183      	str	r3, [r0, #24]
 800706c:	4619      	mov	r1, r3
 800706e:	2208      	movs	r2, #8
 8007070:	305c      	adds	r0, #92	; 0x5c
 8007072:	f000 f914 	bl	800729e <memset>
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <std+0x58>)
 8007078:	6263      	str	r3, [r4, #36]	; 0x24
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <std+0x5c>)
 800707c:	62a3      	str	r3, [r4, #40]	; 0x28
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <std+0x60>)
 8007080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <std+0x64>)
 8007084:	6323      	str	r3, [r4, #48]	; 0x30
 8007086:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <std+0x68>)
 8007088:	6224      	str	r4, [r4, #32]
 800708a:	429c      	cmp	r4, r3
 800708c:	d006      	beq.n	800709c <std+0x48>
 800708e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007092:	4294      	cmp	r4, r2
 8007094:	d002      	beq.n	800709c <std+0x48>
 8007096:	33d0      	adds	r3, #208	; 0xd0
 8007098:	429c      	cmp	r4, r3
 800709a:	d105      	bne.n	80070a8 <std+0x54>
 800709c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a4:	f000 b978 	b.w	8007398 <__retarget_lock_init_recursive>
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	bf00      	nop
 80070ac:	08007219 	.word	0x08007219
 80070b0:	0800723b 	.word	0x0800723b
 80070b4:	08007273 	.word	0x08007273
 80070b8:	08007297 	.word	0x08007297
 80070bc:	20000558 	.word	0x20000558

080070c0 <stdio_exit_handler>:
 80070c0:	4a02      	ldr	r2, [pc, #8]	; (80070cc <stdio_exit_handler+0xc>)
 80070c2:	4903      	ldr	r1, [pc, #12]	; (80070d0 <stdio_exit_handler+0x10>)
 80070c4:	4803      	ldr	r0, [pc, #12]	; (80070d4 <stdio_exit_handler+0x14>)
 80070c6:	f000 b869 	b.w	800719c <_fwalk_sglue>
 80070ca:	bf00      	nop
 80070cc:	20000018 	.word	0x20000018
 80070d0:	08009ce9 	.word	0x08009ce9
 80070d4:	20000024 	.word	0x20000024

080070d8 <cleanup_stdio>:
 80070d8:	6841      	ldr	r1, [r0, #4]
 80070da:	4b0c      	ldr	r3, [pc, #48]	; (800710c <cleanup_stdio+0x34>)
 80070dc:	4299      	cmp	r1, r3
 80070de:	b510      	push	{r4, lr}
 80070e0:	4604      	mov	r4, r0
 80070e2:	d001      	beq.n	80070e8 <cleanup_stdio+0x10>
 80070e4:	f002 fe00 	bl	8009ce8 <_fflush_r>
 80070e8:	68a1      	ldr	r1, [r4, #8]
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <cleanup_stdio+0x38>)
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d002      	beq.n	80070f6 <cleanup_stdio+0x1e>
 80070f0:	4620      	mov	r0, r4
 80070f2:	f002 fdf9 	bl	8009ce8 <_fflush_r>
 80070f6:	68e1      	ldr	r1, [r4, #12]
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <cleanup_stdio+0x3c>)
 80070fa:	4299      	cmp	r1, r3
 80070fc:	d004      	beq.n	8007108 <cleanup_stdio+0x30>
 80070fe:	4620      	mov	r0, r4
 8007100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007104:	f002 bdf0 	b.w	8009ce8 <_fflush_r>
 8007108:	bd10      	pop	{r4, pc}
 800710a:	bf00      	nop
 800710c:	20000558 	.word	0x20000558
 8007110:	200005c0 	.word	0x200005c0
 8007114:	20000628 	.word	0x20000628

08007118 <global_stdio_init.part.0>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <global_stdio_init.part.0+0x30>)
 800711c:	4c0b      	ldr	r4, [pc, #44]	; (800714c <global_stdio_init.part.0+0x34>)
 800711e:	4a0c      	ldr	r2, [pc, #48]	; (8007150 <global_stdio_init.part.0+0x38>)
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	4620      	mov	r0, r4
 8007124:	2200      	movs	r2, #0
 8007126:	2104      	movs	r1, #4
 8007128:	f7ff ff94 	bl	8007054 <std>
 800712c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007130:	2201      	movs	r2, #1
 8007132:	2109      	movs	r1, #9
 8007134:	f7ff ff8e 	bl	8007054 <std>
 8007138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800713c:	2202      	movs	r2, #2
 800713e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007142:	2112      	movs	r1, #18
 8007144:	f7ff bf86 	b.w	8007054 <std>
 8007148:	20000690 	.word	0x20000690
 800714c:	20000558 	.word	0x20000558
 8007150:	080070c1 	.word	0x080070c1

08007154 <__sfp_lock_acquire>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__sfp_lock_acquire+0x8>)
 8007156:	f000 b920 	b.w	800739a <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	20000699 	.word	0x20000699

08007160 <__sfp_lock_release>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__sfp_lock_release+0x8>)
 8007162:	f000 b91b 	b.w	800739c <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	20000699 	.word	0x20000699

0800716c <__sinit>:
 800716c:	b510      	push	{r4, lr}
 800716e:	4604      	mov	r4, r0
 8007170:	f7ff fff0 	bl	8007154 <__sfp_lock_acquire>
 8007174:	6a23      	ldr	r3, [r4, #32]
 8007176:	b11b      	cbz	r3, 8007180 <__sinit+0x14>
 8007178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800717c:	f7ff bff0 	b.w	8007160 <__sfp_lock_release>
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <__sinit+0x28>)
 8007182:	6223      	str	r3, [r4, #32]
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__sinit+0x2c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f5      	bne.n	8007178 <__sinit+0xc>
 800718c:	f7ff ffc4 	bl	8007118 <global_stdio_init.part.0>
 8007190:	e7f2      	b.n	8007178 <__sinit+0xc>
 8007192:	bf00      	nop
 8007194:	080070d9 	.word	0x080070d9
 8007198:	20000690 	.word	0x20000690

0800719c <_fwalk_sglue>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	4607      	mov	r7, r0
 80071a2:	4688      	mov	r8, r1
 80071a4:	4614      	mov	r4, r2
 80071a6:	2600      	movs	r6, #0
 80071a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071ac:	f1b9 0901 	subs.w	r9, r9, #1
 80071b0:	d505      	bpl.n	80071be <_fwalk_sglue+0x22>
 80071b2:	6824      	ldr	r4, [r4, #0]
 80071b4:	2c00      	cmp	r4, #0
 80071b6:	d1f7      	bne.n	80071a8 <_fwalk_sglue+0xc>
 80071b8:	4630      	mov	r0, r6
 80071ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d907      	bls.n	80071d4 <_fwalk_sglue+0x38>
 80071c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071c8:	3301      	adds	r3, #1
 80071ca:	d003      	beq.n	80071d4 <_fwalk_sglue+0x38>
 80071cc:	4629      	mov	r1, r5
 80071ce:	4638      	mov	r0, r7
 80071d0:	47c0      	blx	r8
 80071d2:	4306      	orrs	r6, r0
 80071d4:	3568      	adds	r5, #104	; 0x68
 80071d6:	e7e9      	b.n	80071ac <_fwalk_sglue+0x10>

080071d8 <siprintf>:
 80071d8:	b40e      	push	{r1, r2, r3}
 80071da:	b500      	push	{lr}
 80071dc:	b09c      	sub	sp, #112	; 0x70
 80071de:	ab1d      	add	r3, sp, #116	; 0x74
 80071e0:	9002      	str	r0, [sp, #8]
 80071e2:	9006      	str	r0, [sp, #24]
 80071e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071e8:	4809      	ldr	r0, [pc, #36]	; (8007210 <siprintf+0x38>)
 80071ea:	9107      	str	r1, [sp, #28]
 80071ec:	9104      	str	r1, [sp, #16]
 80071ee:	4909      	ldr	r1, [pc, #36]	; (8007214 <siprintf+0x3c>)
 80071f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f4:	9105      	str	r1, [sp, #20]
 80071f6:	6800      	ldr	r0, [r0, #0]
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	a902      	add	r1, sp, #8
 80071fc:	f002 fbf0 	bl	80099e0 <_svfiprintf_r>
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	b01c      	add	sp, #112	; 0x70
 8007208:	f85d eb04 	ldr.w	lr, [sp], #4
 800720c:	b003      	add	sp, #12
 800720e:	4770      	bx	lr
 8007210:	20000070 	.word	0x20000070
 8007214:	ffff0208 	.word	0xffff0208

08007218 <__sread>:
 8007218:	b510      	push	{r4, lr}
 800721a:	460c      	mov	r4, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	f000 f86c 	bl	80072fc <_read_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	bfab      	itete	ge
 8007228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800722a:	89a3      	ldrhlt	r3, [r4, #12]
 800722c:	181b      	addge	r3, r3, r0
 800722e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007232:	bfac      	ite	ge
 8007234:	6563      	strge	r3, [r4, #84]	; 0x54
 8007236:	81a3      	strhlt	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__swrite>:
 800723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	461f      	mov	r7, r3
 8007240:	898b      	ldrh	r3, [r1, #12]
 8007242:	05db      	lsls	r3, r3, #23
 8007244:	4605      	mov	r5, r0
 8007246:	460c      	mov	r4, r1
 8007248:	4616      	mov	r6, r2
 800724a:	d505      	bpl.n	8007258 <__swrite+0x1e>
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	2302      	movs	r3, #2
 8007252:	2200      	movs	r2, #0
 8007254:	f000 f840 	bl	80072d8 <_lseek_r>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800725e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	4628      	mov	r0, r5
 800726a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	f000 b857 	b.w	8007320 <_write_r>

08007272 <__sseek>:
 8007272:	b510      	push	{r4, lr}
 8007274:	460c      	mov	r4, r1
 8007276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727a:	f000 f82d 	bl	80072d8 <_lseek_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	bf15      	itete	ne
 8007284:	6560      	strne	r0, [r4, #84]	; 0x54
 8007286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800728a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800728e:	81a3      	strheq	r3, [r4, #12]
 8007290:	bf18      	it	ne
 8007292:	81a3      	strhne	r3, [r4, #12]
 8007294:	bd10      	pop	{r4, pc}

08007296 <__sclose>:
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 b80d 	b.w	80072b8 <_close_r>

0800729e <memset>:
 800729e:	4402      	add	r2, r0
 80072a0:	4603      	mov	r3, r0
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d100      	bne.n	80072a8 <memset+0xa>
 80072a6:	4770      	bx	lr
 80072a8:	f803 1b01 	strb.w	r1, [r3], #1
 80072ac:	e7f9      	b.n	80072a2 <memset+0x4>
	...

080072b0 <_localeconv_r>:
 80072b0:	4800      	ldr	r0, [pc, #0]	; (80072b4 <_localeconv_r+0x4>)
 80072b2:	4770      	bx	lr
 80072b4:	20000164 	.word	0x20000164

080072b8 <_close_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_close_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7fb fe5d 	bl	8002f82 <_close>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_close_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_close_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20000694 	.word	0x20000694

080072d8 <_lseek_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d07      	ldr	r5, [pc, #28]	; (80072f8 <_lseek_r+0x20>)
 80072dc:	4604      	mov	r4, r0
 80072de:	4608      	mov	r0, r1
 80072e0:	4611      	mov	r1, r2
 80072e2:	2200      	movs	r2, #0
 80072e4:	602a      	str	r2, [r5, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7fb fe72 	bl	8002fd0 <_lseek>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_lseek_r+0x1e>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_lseek_r+0x1e>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000694 	.word	0x20000694

080072fc <_read_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d07      	ldr	r5, [pc, #28]	; (800731c <_read_r+0x20>)
 8007300:	4604      	mov	r4, r0
 8007302:	4608      	mov	r0, r1
 8007304:	4611      	mov	r1, r2
 8007306:	2200      	movs	r2, #0
 8007308:	602a      	str	r2, [r5, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	f7fb fe00 	bl	8002f10 <_read>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_read_r+0x1e>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_read_r+0x1e>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20000694 	.word	0x20000694

08007320 <_write_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d07      	ldr	r5, [pc, #28]	; (8007340 <_write_r+0x20>)
 8007324:	4604      	mov	r4, r0
 8007326:	4608      	mov	r0, r1
 8007328:	4611      	mov	r1, r2
 800732a:	2200      	movs	r2, #0
 800732c:	602a      	str	r2, [r5, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f7fb fe0b 	bl	8002f4a <_write>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_write_r+0x1e>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_write_r+0x1e>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	20000694 	.word	0x20000694

08007344 <__errno>:
 8007344:	4b01      	ldr	r3, [pc, #4]	; (800734c <__errno+0x8>)
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	20000070 	.word	0x20000070

08007350 <__libc_init_array>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	4d0d      	ldr	r5, [pc, #52]	; (8007388 <__libc_init_array+0x38>)
 8007354:	4c0d      	ldr	r4, [pc, #52]	; (800738c <__libc_init_array+0x3c>)
 8007356:	1b64      	subs	r4, r4, r5
 8007358:	10a4      	asrs	r4, r4, #2
 800735a:	2600      	movs	r6, #0
 800735c:	42a6      	cmp	r6, r4
 800735e:	d109      	bne.n	8007374 <__libc_init_array+0x24>
 8007360:	4d0b      	ldr	r5, [pc, #44]	; (8007390 <__libc_init_array+0x40>)
 8007362:	4c0c      	ldr	r4, [pc, #48]	; (8007394 <__libc_init_array+0x44>)
 8007364:	f004 fb10 	bl	800b988 <_init>
 8007368:	1b64      	subs	r4, r4, r5
 800736a:	10a4      	asrs	r4, r4, #2
 800736c:	2600      	movs	r6, #0
 800736e:	42a6      	cmp	r6, r4
 8007370:	d105      	bne.n	800737e <__libc_init_array+0x2e>
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	f855 3b04 	ldr.w	r3, [r5], #4
 8007378:	4798      	blx	r3
 800737a:	3601      	adds	r6, #1
 800737c:	e7ee      	b.n	800735c <__libc_init_array+0xc>
 800737e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007382:	4798      	blx	r3
 8007384:	3601      	adds	r6, #1
 8007386:	e7f2      	b.n	800736e <__libc_init_array+0x1e>
 8007388:	0800bf88 	.word	0x0800bf88
 800738c:	0800bf88 	.word	0x0800bf88
 8007390:	0800bf88 	.word	0x0800bf88
 8007394:	0800bf8c 	.word	0x0800bf8c

08007398 <__retarget_lock_init_recursive>:
 8007398:	4770      	bx	lr

0800739a <__retarget_lock_acquire_recursive>:
 800739a:	4770      	bx	lr

0800739c <__retarget_lock_release_recursive>:
 800739c:	4770      	bx	lr
	...

080073a0 <nanf>:
 80073a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80073a8 <nanf+0x8>
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	7fc00000 	.word	0x7fc00000

080073ac <quorem>:
 80073ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	6903      	ldr	r3, [r0, #16]
 80073b2:	690c      	ldr	r4, [r1, #16]
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	4607      	mov	r7, r0
 80073b8:	db7e      	blt.n	80074b8 <quorem+0x10c>
 80073ba:	3c01      	subs	r4, #1
 80073bc:	f101 0814 	add.w	r8, r1, #20
 80073c0:	f100 0514 	add.w	r5, r0, #20
 80073c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073d2:	3301      	adds	r3, #1
 80073d4:	429a      	cmp	r2, r3
 80073d6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073de:	fbb2 f6f3 	udiv	r6, r2, r3
 80073e2:	d331      	bcc.n	8007448 <quorem+0x9c>
 80073e4:	f04f 0e00 	mov.w	lr, #0
 80073e8:	4640      	mov	r0, r8
 80073ea:	46ac      	mov	ip, r5
 80073ec:	46f2      	mov	sl, lr
 80073ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80073f2:	b293      	uxth	r3, r2
 80073f4:	fb06 e303 	mla	r3, r6, r3, lr
 80073f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073fc:	0c1a      	lsrs	r2, r3, #16
 80073fe:	b29b      	uxth	r3, r3
 8007400:	ebaa 0303 	sub.w	r3, sl, r3
 8007404:	f8dc a000 	ldr.w	sl, [ip]
 8007408:	fa13 f38a 	uxtah	r3, r3, sl
 800740c:	fb06 220e 	mla	r2, r6, lr, r2
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	9b00      	ldr	r3, [sp, #0]
 8007414:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007418:	b292      	uxth	r2, r2
 800741a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800741e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007422:	f8bd 3000 	ldrh.w	r3, [sp]
 8007426:	4581      	cmp	r9, r0
 8007428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800742c:	f84c 3b04 	str.w	r3, [ip], #4
 8007430:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007434:	d2db      	bcs.n	80073ee <quorem+0x42>
 8007436:	f855 300b 	ldr.w	r3, [r5, fp]
 800743a:	b92b      	cbnz	r3, 8007448 <quorem+0x9c>
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	3b04      	subs	r3, #4
 8007440:	429d      	cmp	r5, r3
 8007442:	461a      	mov	r2, r3
 8007444:	d32c      	bcc.n	80074a0 <quorem+0xf4>
 8007446:	613c      	str	r4, [r7, #16]
 8007448:	4638      	mov	r0, r7
 800744a:	f001 f9f1 	bl	8008830 <__mcmp>
 800744e:	2800      	cmp	r0, #0
 8007450:	db22      	blt.n	8007498 <quorem+0xec>
 8007452:	3601      	adds	r6, #1
 8007454:	4629      	mov	r1, r5
 8007456:	2000      	movs	r0, #0
 8007458:	f858 2b04 	ldr.w	r2, [r8], #4
 800745c:	f8d1 c000 	ldr.w	ip, [r1]
 8007460:	b293      	uxth	r3, r2
 8007462:	1ac3      	subs	r3, r0, r3
 8007464:	0c12      	lsrs	r2, r2, #16
 8007466:	fa13 f38c 	uxtah	r3, r3, ip
 800746a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800746e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007478:	45c1      	cmp	r9, r8
 800747a:	f841 3b04 	str.w	r3, [r1], #4
 800747e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007482:	d2e9      	bcs.n	8007458 <quorem+0xac>
 8007484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007488:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800748c:	b922      	cbnz	r2, 8007498 <quorem+0xec>
 800748e:	3b04      	subs	r3, #4
 8007490:	429d      	cmp	r5, r3
 8007492:	461a      	mov	r2, r3
 8007494:	d30a      	bcc.n	80074ac <quorem+0x100>
 8007496:	613c      	str	r4, [r7, #16]
 8007498:	4630      	mov	r0, r6
 800749a:	b003      	add	sp, #12
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	3b04      	subs	r3, #4
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	d1ce      	bne.n	8007446 <quorem+0x9a>
 80074a8:	3c01      	subs	r4, #1
 80074aa:	e7c9      	b.n	8007440 <quorem+0x94>
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	3b04      	subs	r3, #4
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d1f0      	bne.n	8007496 <quorem+0xea>
 80074b4:	3c01      	subs	r4, #1
 80074b6:	e7eb      	b.n	8007490 <quorem+0xe4>
 80074b8:	2000      	movs	r0, #0
 80074ba:	e7ee      	b.n	800749a <quorem+0xee>
 80074bc:	0000      	movs	r0, r0
	...

080074c0 <_dtoa_r>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	ed2d 8b04 	vpush	{d8-d9}
 80074c8:	69c5      	ldr	r5, [r0, #28]
 80074ca:	b093      	sub	sp, #76	; 0x4c
 80074cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80074d0:	ec57 6b10 	vmov	r6, r7, d0
 80074d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074d8:	9107      	str	r1, [sp, #28]
 80074da:	4604      	mov	r4, r0
 80074dc:	920a      	str	r2, [sp, #40]	; 0x28
 80074de:	930d      	str	r3, [sp, #52]	; 0x34
 80074e0:	b975      	cbnz	r5, 8007500 <_dtoa_r+0x40>
 80074e2:	2010      	movs	r0, #16
 80074e4:	f000 fe2a 	bl	800813c <malloc>
 80074e8:	4602      	mov	r2, r0
 80074ea:	61e0      	str	r0, [r4, #28]
 80074ec:	b920      	cbnz	r0, 80074f8 <_dtoa_r+0x38>
 80074ee:	4bae      	ldr	r3, [pc, #696]	; (80077a8 <_dtoa_r+0x2e8>)
 80074f0:	21ef      	movs	r1, #239	; 0xef
 80074f2:	48ae      	ldr	r0, [pc, #696]	; (80077ac <_dtoa_r+0x2ec>)
 80074f4:	f002 fc74 	bl	8009de0 <__assert_func>
 80074f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074fc:	6005      	str	r5, [r0, #0]
 80074fe:	60c5      	str	r5, [r0, #12]
 8007500:	69e3      	ldr	r3, [r4, #28]
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	b151      	cbz	r1, 800751c <_dtoa_r+0x5c>
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	604a      	str	r2, [r1, #4]
 800750a:	2301      	movs	r3, #1
 800750c:	4093      	lsls	r3, r2
 800750e:	608b      	str	r3, [r1, #8]
 8007510:	4620      	mov	r0, r4
 8007512:	f000 ff07 	bl	8008324 <_Bfree>
 8007516:	69e3      	ldr	r3, [r4, #28]
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	1e3b      	subs	r3, r7, #0
 800751e:	bfbb      	ittet	lt
 8007520:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007524:	9303      	strlt	r3, [sp, #12]
 8007526:	2300      	movge	r3, #0
 8007528:	2201      	movlt	r2, #1
 800752a:	bfac      	ite	ge
 800752c:	f8c8 3000 	strge.w	r3, [r8]
 8007530:	f8c8 2000 	strlt.w	r2, [r8]
 8007534:	4b9e      	ldr	r3, [pc, #632]	; (80077b0 <_dtoa_r+0x2f0>)
 8007536:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800753a:	ea33 0308 	bics.w	r3, r3, r8
 800753e:	d11b      	bne.n	8007578 <_dtoa_r+0xb8>
 8007540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007542:	f242 730f 	movw	r3, #9999	; 0x270f
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800754c:	4333      	orrs	r3, r6
 800754e:	f000 8593 	beq.w	8008078 <_dtoa_r+0xbb8>
 8007552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007554:	b963      	cbnz	r3, 8007570 <_dtoa_r+0xb0>
 8007556:	4b97      	ldr	r3, [pc, #604]	; (80077b4 <_dtoa_r+0x2f4>)
 8007558:	e027      	b.n	80075aa <_dtoa_r+0xea>
 800755a:	4b97      	ldr	r3, [pc, #604]	; (80077b8 <_dtoa_r+0x2f8>)
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	9800      	ldr	r0, [sp, #0]
 8007566:	b013      	add	sp, #76	; 0x4c
 8007568:	ecbd 8b04 	vpop	{d8-d9}
 800756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007570:	4b90      	ldr	r3, [pc, #576]	; (80077b4 <_dtoa_r+0x2f4>)
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	3303      	adds	r3, #3
 8007576:	e7f3      	b.n	8007560 <_dtoa_r+0xa0>
 8007578:	ed9d 7b02 	vldr	d7, [sp, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	ec51 0b17 	vmov	r0, r1, d7
 8007582:	eeb0 8a47 	vmov.f32	s16, s14
 8007586:	eef0 8a67 	vmov.f32	s17, s15
 800758a:	2300      	movs	r3, #0
 800758c:	f7f9 faa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007590:	4681      	mov	r9, r0
 8007592:	b160      	cbz	r0, 80075ae <_dtoa_r+0xee>
 8007594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007596:	2301      	movs	r3, #1
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8568 	beq.w	8008072 <_dtoa_r+0xbb2>
 80075a2:	4b86      	ldr	r3, [pc, #536]	; (80077bc <_dtoa_r+0x2fc>)
 80075a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	e7da      	b.n	8007564 <_dtoa_r+0xa4>
 80075ae:	aa10      	add	r2, sp, #64	; 0x40
 80075b0:	a911      	add	r1, sp, #68	; 0x44
 80075b2:	4620      	mov	r0, r4
 80075b4:	eeb0 0a48 	vmov.f32	s0, s16
 80075b8:	eef0 0a68 	vmov.f32	s1, s17
 80075bc:	f001 fa4e 	bl	8008a5c <__d2b>
 80075c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075c4:	4682      	mov	sl, r0
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	d07f      	beq.n	80076ca <_dtoa_r+0x20a>
 80075ca:	ee18 3a90 	vmov	r3, s17
 80075ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80075d6:	ec51 0b18 	vmov	r0, r1, d8
 80075da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80075e6:	4619      	mov	r1, r3
 80075e8:	2200      	movs	r2, #0
 80075ea:	4b75      	ldr	r3, [pc, #468]	; (80077c0 <_dtoa_r+0x300>)
 80075ec:	f7f8 fe54 	bl	8000298 <__aeabi_dsub>
 80075f0:	a367      	add	r3, pc, #412	; (adr r3, 8007790 <_dtoa_r+0x2d0>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f9 f807 	bl	8000608 <__aeabi_dmul>
 80075fa:	a367      	add	r3, pc, #412	; (adr r3, 8007798 <_dtoa_r+0x2d8>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f8 fe4c 	bl	800029c <__adddf3>
 8007604:	4606      	mov	r6, r0
 8007606:	4628      	mov	r0, r5
 8007608:	460f      	mov	r7, r1
 800760a:	f7f8 ff93 	bl	8000534 <__aeabi_i2d>
 800760e:	a364      	add	r3, pc, #400	; (adr r3, 80077a0 <_dtoa_r+0x2e0>)
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f8 fff8 	bl	8000608 <__aeabi_dmul>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f8 fe3c 	bl	800029c <__adddf3>
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	f7f9 fa9e 	bl	8000b68 <__aeabi_d2iz>
 800762c:	2200      	movs	r2, #0
 800762e:	4683      	mov	fp, r0
 8007630:	2300      	movs	r3, #0
 8007632:	4630      	mov	r0, r6
 8007634:	4639      	mov	r1, r7
 8007636:	f7f9 fa59 	bl	8000aec <__aeabi_dcmplt>
 800763a:	b148      	cbz	r0, 8007650 <_dtoa_r+0x190>
 800763c:	4658      	mov	r0, fp
 800763e:	f7f8 ff79 	bl	8000534 <__aeabi_i2d>
 8007642:	4632      	mov	r2, r6
 8007644:	463b      	mov	r3, r7
 8007646:	f7f9 fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800764a:	b908      	cbnz	r0, 8007650 <_dtoa_r+0x190>
 800764c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007650:	f1bb 0f16 	cmp.w	fp, #22
 8007654:	d857      	bhi.n	8007706 <_dtoa_r+0x246>
 8007656:	4b5b      	ldr	r3, [pc, #364]	; (80077c4 <_dtoa_r+0x304>)
 8007658:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	ec51 0b18 	vmov	r0, r1, d8
 8007664:	f7f9 fa42 	bl	8000aec <__aeabi_dcmplt>
 8007668:	2800      	cmp	r0, #0
 800766a:	d04e      	beq.n	800770a <_dtoa_r+0x24a>
 800766c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007670:	2300      	movs	r3, #0
 8007672:	930c      	str	r3, [sp, #48]	; 0x30
 8007674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007676:	1b5b      	subs	r3, r3, r5
 8007678:	1e5a      	subs	r2, r3, #1
 800767a:	bf45      	ittet	mi
 800767c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007680:	9305      	strmi	r3, [sp, #20]
 8007682:	2300      	movpl	r3, #0
 8007684:	2300      	movmi	r3, #0
 8007686:	9206      	str	r2, [sp, #24]
 8007688:	bf54      	ite	pl
 800768a:	9305      	strpl	r3, [sp, #20]
 800768c:	9306      	strmi	r3, [sp, #24]
 800768e:	f1bb 0f00 	cmp.w	fp, #0
 8007692:	db3c      	blt.n	800770e <_dtoa_r+0x24e>
 8007694:	9b06      	ldr	r3, [sp, #24]
 8007696:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800769a:	445b      	add	r3, fp
 800769c:	9306      	str	r3, [sp, #24]
 800769e:	2300      	movs	r3, #0
 80076a0:	9308      	str	r3, [sp, #32]
 80076a2:	9b07      	ldr	r3, [sp, #28]
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	d868      	bhi.n	800777a <_dtoa_r+0x2ba>
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	bfc4      	itt	gt
 80076ac:	3b04      	subgt	r3, #4
 80076ae:	9307      	strgt	r3, [sp, #28]
 80076b0:	9b07      	ldr	r3, [sp, #28]
 80076b2:	f1a3 0302 	sub.w	r3, r3, #2
 80076b6:	bfcc      	ite	gt
 80076b8:	2500      	movgt	r5, #0
 80076ba:	2501      	movle	r5, #1
 80076bc:	2b03      	cmp	r3, #3
 80076be:	f200 8085 	bhi.w	80077cc <_dtoa_r+0x30c>
 80076c2:	e8df f003 	tbb	[pc, r3]
 80076c6:	3b2e      	.short	0x3b2e
 80076c8:	5839      	.short	0x5839
 80076ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076ce:	441d      	add	r5, r3
 80076d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	bfc1      	itttt	gt
 80076d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80076e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80076e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80076e8:	bfd6      	itet	le
 80076ea:	f1c3 0320 	rsble	r3, r3, #32
 80076ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80076f2:	fa06 f003 	lslle.w	r0, r6, r3
 80076f6:	f7f8 ff0d 	bl	8000514 <__aeabi_ui2d>
 80076fa:	2201      	movs	r2, #1
 80076fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007700:	3d01      	subs	r5, #1
 8007702:	920e      	str	r2, [sp, #56]	; 0x38
 8007704:	e76f      	b.n	80075e6 <_dtoa_r+0x126>
 8007706:	2301      	movs	r3, #1
 8007708:	e7b3      	b.n	8007672 <_dtoa_r+0x1b2>
 800770a:	900c      	str	r0, [sp, #48]	; 0x30
 800770c:	e7b2      	b.n	8007674 <_dtoa_r+0x1b4>
 800770e:	9b05      	ldr	r3, [sp, #20]
 8007710:	eba3 030b 	sub.w	r3, r3, fp
 8007714:	9305      	str	r3, [sp, #20]
 8007716:	f1cb 0300 	rsb	r3, fp, #0
 800771a:	9308      	str	r3, [sp, #32]
 800771c:	2300      	movs	r3, #0
 800771e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007720:	e7bf      	b.n	80076a2 <_dtoa_r+0x1e2>
 8007722:	2300      	movs	r3, #0
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	dc52      	bgt.n	80077d2 <_dtoa_r+0x312>
 800772c:	2301      	movs	r3, #1
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	461a      	mov	r2, r3
 8007734:	920a      	str	r2, [sp, #40]	; 0x28
 8007736:	e00b      	b.n	8007750 <_dtoa_r+0x290>
 8007738:	2301      	movs	r3, #1
 800773a:	e7f3      	b.n	8007724 <_dtoa_r+0x264>
 800773c:	2300      	movs	r3, #0
 800773e:	9309      	str	r3, [sp, #36]	; 0x24
 8007740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007742:	445b      	add	r3, fp
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	3301      	adds	r3, #1
 8007748:	2b01      	cmp	r3, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	bfb8      	it	lt
 800774e:	2301      	movlt	r3, #1
 8007750:	69e0      	ldr	r0, [r4, #28]
 8007752:	2100      	movs	r1, #0
 8007754:	2204      	movs	r2, #4
 8007756:	f102 0614 	add.w	r6, r2, #20
 800775a:	429e      	cmp	r6, r3
 800775c:	d93d      	bls.n	80077da <_dtoa_r+0x31a>
 800775e:	6041      	str	r1, [r0, #4]
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fd9f 	bl	80082a4 <_Balloc>
 8007766:	9000      	str	r0, [sp, #0]
 8007768:	2800      	cmp	r0, #0
 800776a:	d139      	bne.n	80077e0 <_dtoa_r+0x320>
 800776c:	4b16      	ldr	r3, [pc, #88]	; (80077c8 <_dtoa_r+0x308>)
 800776e:	4602      	mov	r2, r0
 8007770:	f240 11af 	movw	r1, #431	; 0x1af
 8007774:	e6bd      	b.n	80074f2 <_dtoa_r+0x32>
 8007776:	2301      	movs	r3, #1
 8007778:	e7e1      	b.n	800773e <_dtoa_r+0x27e>
 800777a:	2501      	movs	r5, #1
 800777c:	2300      	movs	r3, #0
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	9509      	str	r5, [sp, #36]	; 0x24
 8007782:	f04f 33ff 	mov.w	r3, #4294967295
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	2200      	movs	r2, #0
 800778c:	2312      	movs	r3, #18
 800778e:	e7d1      	b.n	8007734 <_dtoa_r+0x274>
 8007790:	636f4361 	.word	0x636f4361
 8007794:	3fd287a7 	.word	0x3fd287a7
 8007798:	8b60c8b3 	.word	0x8b60c8b3
 800779c:	3fc68a28 	.word	0x3fc68a28
 80077a0:	509f79fb 	.word	0x509f79fb
 80077a4:	3fd34413 	.word	0x3fd34413
 80077a8:	0800bb6a 	.word	0x0800bb6a
 80077ac:	0800bb81 	.word	0x0800bb81
 80077b0:	7ff00000 	.word	0x7ff00000
 80077b4:	0800bb66 	.word	0x0800bb66
 80077b8:	0800bb5d 	.word	0x0800bb5d
 80077bc:	0800bb35 	.word	0x0800bb35
 80077c0:	3ff80000 	.word	0x3ff80000
 80077c4:	0800bc70 	.word	0x0800bc70
 80077c8:	0800bbd9 	.word	0x0800bbd9
 80077cc:	2301      	movs	r3, #1
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	e7d7      	b.n	8007782 <_dtoa_r+0x2c2>
 80077d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	e7ba      	b.n	8007750 <_dtoa_r+0x290>
 80077da:	3101      	adds	r1, #1
 80077dc:	0052      	lsls	r2, r2, #1
 80077de:	e7ba      	b.n	8007756 <_dtoa_r+0x296>
 80077e0:	69e3      	ldr	r3, [r4, #28]
 80077e2:	9a00      	ldr	r2, [sp, #0]
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	2b0e      	cmp	r3, #14
 80077ea:	f200 80a8 	bhi.w	800793e <_dtoa_r+0x47e>
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	f000 80a5 	beq.w	800793e <_dtoa_r+0x47e>
 80077f4:	f1bb 0f00 	cmp.w	fp, #0
 80077f8:	dd38      	ble.n	800786c <_dtoa_r+0x3ac>
 80077fa:	4bc0      	ldr	r3, [pc, #768]	; (8007afc <_dtoa_r+0x63c>)
 80077fc:	f00b 020f 	and.w	r2, fp, #15
 8007800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007804:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007808:	e9d3 6700 	ldrd	r6, r7, [r3]
 800780c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007810:	d019      	beq.n	8007846 <_dtoa_r+0x386>
 8007812:	4bbb      	ldr	r3, [pc, #748]	; (8007b00 <_dtoa_r+0x640>)
 8007814:	ec51 0b18 	vmov	r0, r1, d8
 8007818:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800781c:	f7f9 f81e 	bl	800085c <__aeabi_ddiv>
 8007820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007824:	f008 080f 	and.w	r8, r8, #15
 8007828:	2503      	movs	r5, #3
 800782a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007b00 <_dtoa_r+0x640>
 800782e:	f1b8 0f00 	cmp.w	r8, #0
 8007832:	d10a      	bne.n	800784a <_dtoa_r+0x38a>
 8007834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007838:	4632      	mov	r2, r6
 800783a:	463b      	mov	r3, r7
 800783c:	f7f9 f80e 	bl	800085c <__aeabi_ddiv>
 8007840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007844:	e02b      	b.n	800789e <_dtoa_r+0x3de>
 8007846:	2502      	movs	r5, #2
 8007848:	e7ef      	b.n	800782a <_dtoa_r+0x36a>
 800784a:	f018 0f01 	tst.w	r8, #1
 800784e:	d008      	beq.n	8007862 <_dtoa_r+0x3a2>
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007858:	f7f8 fed6 	bl	8000608 <__aeabi_dmul>
 800785c:	3501      	adds	r5, #1
 800785e:	4606      	mov	r6, r0
 8007860:	460f      	mov	r7, r1
 8007862:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007866:	f109 0908 	add.w	r9, r9, #8
 800786a:	e7e0      	b.n	800782e <_dtoa_r+0x36e>
 800786c:	f000 809f 	beq.w	80079ae <_dtoa_r+0x4ee>
 8007870:	f1cb 0600 	rsb	r6, fp, #0
 8007874:	4ba1      	ldr	r3, [pc, #644]	; (8007afc <_dtoa_r+0x63c>)
 8007876:	4fa2      	ldr	r7, [pc, #648]	; (8007b00 <_dtoa_r+0x640>)
 8007878:	f006 020f 	and.w	r2, r6, #15
 800787c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	ec51 0b18 	vmov	r0, r1, d8
 8007888:	f7f8 febe 	bl	8000608 <__aeabi_dmul>
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	1136      	asrs	r6, r6, #4
 8007892:	2300      	movs	r3, #0
 8007894:	2502      	movs	r5, #2
 8007896:	2e00      	cmp	r6, #0
 8007898:	d17e      	bne.n	8007998 <_dtoa_r+0x4d8>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1d0      	bne.n	8007840 <_dtoa_r+0x380>
 800789e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8084 	beq.w	80079b2 <_dtoa_r+0x4f2>
 80078aa:	4b96      	ldr	r3, [pc, #600]	; (8007b04 <_dtoa_r+0x644>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	4640      	mov	r0, r8
 80078b0:	4649      	mov	r1, r9
 80078b2:	f7f9 f91b 	bl	8000aec <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d07b      	beq.n	80079b2 <_dtoa_r+0x4f2>
 80078ba:	9b04      	ldr	r3, [sp, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d078      	beq.n	80079b2 <_dtoa_r+0x4f2>
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	dd39      	ble.n	800793a <_dtoa_r+0x47a>
 80078c6:	4b90      	ldr	r3, [pc, #576]	; (8007b08 <_dtoa_r+0x648>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f7f8 fe9b 	bl	8000608 <__aeabi_dmul>
 80078d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078d6:	9e01      	ldr	r6, [sp, #4]
 80078d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80078dc:	3501      	adds	r5, #1
 80078de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80078e2:	4628      	mov	r0, r5
 80078e4:	f7f8 fe26 	bl	8000534 <__aeabi_i2d>
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	f7f8 fe8c 	bl	8000608 <__aeabi_dmul>
 80078f0:	4b86      	ldr	r3, [pc, #536]	; (8007b0c <_dtoa_r+0x64c>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	f7f8 fcd2 	bl	800029c <__adddf3>
 80078f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80078fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007900:	9303      	str	r3, [sp, #12]
 8007902:	2e00      	cmp	r6, #0
 8007904:	d158      	bne.n	80079b8 <_dtoa_r+0x4f8>
 8007906:	4b82      	ldr	r3, [pc, #520]	; (8007b10 <_dtoa_r+0x650>)
 8007908:	2200      	movs	r2, #0
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	f7f8 fcc3 	bl	8000298 <__aeabi_dsub>
 8007912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007916:	4680      	mov	r8, r0
 8007918:	4689      	mov	r9, r1
 800791a:	f7f9 f905 	bl	8000b28 <__aeabi_dcmpgt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f040 8296 	bne.w	8007e50 <_dtoa_r+0x990>
 8007924:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007928:	4640      	mov	r0, r8
 800792a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800792e:	4649      	mov	r1, r9
 8007930:	f7f9 f8dc 	bl	8000aec <__aeabi_dcmplt>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 8289 	bne.w	8007e4c <_dtoa_r+0x98c>
 800793a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800793e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007940:	2b00      	cmp	r3, #0
 8007942:	f2c0 814e 	blt.w	8007be2 <_dtoa_r+0x722>
 8007946:	f1bb 0f0e 	cmp.w	fp, #14
 800794a:	f300 814a 	bgt.w	8007be2 <_dtoa_r+0x722>
 800794e:	4b6b      	ldr	r3, [pc, #428]	; (8007afc <_dtoa_r+0x63c>)
 8007950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795a:	2b00      	cmp	r3, #0
 800795c:	f280 80dc 	bge.w	8007b18 <_dtoa_r+0x658>
 8007960:	9b04      	ldr	r3, [sp, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	f300 80d8 	bgt.w	8007b18 <_dtoa_r+0x658>
 8007968:	f040 826f 	bne.w	8007e4a <_dtoa_r+0x98a>
 800796c:	4b68      	ldr	r3, [pc, #416]	; (8007b10 <_dtoa_r+0x650>)
 800796e:	2200      	movs	r2, #0
 8007970:	4640      	mov	r0, r8
 8007972:	4649      	mov	r1, r9
 8007974:	f7f8 fe48 	bl	8000608 <__aeabi_dmul>
 8007978:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800797c:	f7f9 f8ca 	bl	8000b14 <__aeabi_dcmpge>
 8007980:	9e04      	ldr	r6, [sp, #16]
 8007982:	4637      	mov	r7, r6
 8007984:	2800      	cmp	r0, #0
 8007986:	f040 8245 	bne.w	8007e14 <_dtoa_r+0x954>
 800798a:	9d00      	ldr	r5, [sp, #0]
 800798c:	2331      	movs	r3, #49	; 0x31
 800798e:	f805 3b01 	strb.w	r3, [r5], #1
 8007992:	f10b 0b01 	add.w	fp, fp, #1
 8007996:	e241      	b.n	8007e1c <_dtoa_r+0x95c>
 8007998:	07f2      	lsls	r2, r6, #31
 800799a:	d505      	bpl.n	80079a8 <_dtoa_r+0x4e8>
 800799c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a0:	f7f8 fe32 	bl	8000608 <__aeabi_dmul>
 80079a4:	3501      	adds	r5, #1
 80079a6:	2301      	movs	r3, #1
 80079a8:	1076      	asrs	r6, r6, #1
 80079aa:	3708      	adds	r7, #8
 80079ac:	e773      	b.n	8007896 <_dtoa_r+0x3d6>
 80079ae:	2502      	movs	r5, #2
 80079b0:	e775      	b.n	800789e <_dtoa_r+0x3de>
 80079b2:	9e04      	ldr	r6, [sp, #16]
 80079b4:	465f      	mov	r7, fp
 80079b6:	e792      	b.n	80078de <_dtoa_r+0x41e>
 80079b8:	9900      	ldr	r1, [sp, #0]
 80079ba:	4b50      	ldr	r3, [pc, #320]	; (8007afc <_dtoa_r+0x63c>)
 80079bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079c0:	4431      	add	r1, r6
 80079c2:	9102      	str	r1, [sp, #8]
 80079c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079c6:	eeb0 9a47 	vmov.f32	s18, s14
 80079ca:	eef0 9a67 	vmov.f32	s19, s15
 80079ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079d6:	2900      	cmp	r1, #0
 80079d8:	d044      	beq.n	8007a64 <_dtoa_r+0x5a4>
 80079da:	494e      	ldr	r1, [pc, #312]	; (8007b14 <_dtoa_r+0x654>)
 80079dc:	2000      	movs	r0, #0
 80079de:	f7f8 ff3d 	bl	800085c <__aeabi_ddiv>
 80079e2:	ec53 2b19 	vmov	r2, r3, d9
 80079e6:	f7f8 fc57 	bl	8000298 <__aeabi_dsub>
 80079ea:	9d00      	ldr	r5, [sp, #0]
 80079ec:	ec41 0b19 	vmov	d9, r0, r1
 80079f0:	4649      	mov	r1, r9
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7f9 f8b8 	bl	8000b68 <__aeabi_d2iz>
 80079f8:	4606      	mov	r6, r0
 80079fa:	f7f8 fd9b 	bl	8000534 <__aeabi_i2d>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7f8 fc47 	bl	8000298 <__aeabi_dsub>
 8007a0a:	3630      	adds	r6, #48	; 0x30
 8007a0c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a10:	ec53 2b19 	vmov	r2, r3, d9
 8007a14:	4680      	mov	r8, r0
 8007a16:	4689      	mov	r9, r1
 8007a18:	f7f9 f868 	bl	8000aec <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d164      	bne.n	8007aea <_dtoa_r+0x62a>
 8007a20:	4642      	mov	r2, r8
 8007a22:	464b      	mov	r3, r9
 8007a24:	4937      	ldr	r1, [pc, #220]	; (8007b04 <_dtoa_r+0x644>)
 8007a26:	2000      	movs	r0, #0
 8007a28:	f7f8 fc36 	bl	8000298 <__aeabi_dsub>
 8007a2c:	ec53 2b19 	vmov	r2, r3, d9
 8007a30:	f7f9 f85c 	bl	8000aec <__aeabi_dcmplt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f040 80b6 	bne.w	8007ba6 <_dtoa_r+0x6e6>
 8007a3a:	9b02      	ldr	r3, [sp, #8]
 8007a3c:	429d      	cmp	r5, r3
 8007a3e:	f43f af7c 	beq.w	800793a <_dtoa_r+0x47a>
 8007a42:	4b31      	ldr	r3, [pc, #196]	; (8007b08 <_dtoa_r+0x648>)
 8007a44:	ec51 0b19 	vmov	r0, r1, d9
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f7f8 fddd 	bl	8000608 <__aeabi_dmul>
 8007a4e:	4b2e      	ldr	r3, [pc, #184]	; (8007b08 <_dtoa_r+0x648>)
 8007a50:	ec41 0b19 	vmov	d9, r0, r1
 8007a54:	2200      	movs	r2, #0
 8007a56:	4640      	mov	r0, r8
 8007a58:	4649      	mov	r1, r9
 8007a5a:	f7f8 fdd5 	bl	8000608 <__aeabi_dmul>
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4689      	mov	r9, r1
 8007a62:	e7c5      	b.n	80079f0 <_dtoa_r+0x530>
 8007a64:	ec51 0b17 	vmov	r0, r1, d7
 8007a68:	f7f8 fdce 	bl	8000608 <__aeabi_dmul>
 8007a6c:	9b02      	ldr	r3, [sp, #8]
 8007a6e:	9d00      	ldr	r5, [sp, #0]
 8007a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a72:	ec41 0b19 	vmov	d9, r0, r1
 8007a76:	4649      	mov	r1, r9
 8007a78:	4640      	mov	r0, r8
 8007a7a:	f7f9 f875 	bl	8000b68 <__aeabi_d2iz>
 8007a7e:	4606      	mov	r6, r0
 8007a80:	f7f8 fd58 	bl	8000534 <__aeabi_i2d>
 8007a84:	3630      	adds	r6, #48	; 0x30
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f8 fc03 	bl	8000298 <__aeabi_dsub>
 8007a92:	f805 6b01 	strb.w	r6, [r5], #1
 8007a96:	9b02      	ldr	r3, [sp, #8]
 8007a98:	429d      	cmp	r5, r3
 8007a9a:	4680      	mov	r8, r0
 8007a9c:	4689      	mov	r9, r1
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	d124      	bne.n	8007aee <_dtoa_r+0x62e>
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <_dtoa_r+0x654>)
 8007aa6:	ec51 0b19 	vmov	r0, r1, d9
 8007aaa:	f7f8 fbf7 	bl	800029c <__adddf3>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	f7f9 f837 	bl	8000b28 <__aeabi_dcmpgt>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d173      	bne.n	8007ba6 <_dtoa_r+0x6e6>
 8007abe:	ec53 2b19 	vmov	r2, r3, d9
 8007ac2:	4914      	ldr	r1, [pc, #80]	; (8007b14 <_dtoa_r+0x654>)
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f7f8 fbe7 	bl	8000298 <__aeabi_dsub>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f9 f80b 	bl	8000aec <__aeabi_dcmplt>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f43f af2f 	beq.w	800793a <_dtoa_r+0x47a>
 8007adc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ade:	1e6b      	subs	r3, r5, #1
 8007ae0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ae2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ae6:	2b30      	cmp	r3, #48	; 0x30
 8007ae8:	d0f8      	beq.n	8007adc <_dtoa_r+0x61c>
 8007aea:	46bb      	mov	fp, r7
 8007aec:	e04a      	b.n	8007b84 <_dtoa_r+0x6c4>
 8007aee:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <_dtoa_r+0x648>)
 8007af0:	f7f8 fd8a 	bl	8000608 <__aeabi_dmul>
 8007af4:	4680      	mov	r8, r0
 8007af6:	4689      	mov	r9, r1
 8007af8:	e7bd      	b.n	8007a76 <_dtoa_r+0x5b6>
 8007afa:	bf00      	nop
 8007afc:	0800bc70 	.word	0x0800bc70
 8007b00:	0800bc48 	.word	0x0800bc48
 8007b04:	3ff00000 	.word	0x3ff00000
 8007b08:	40240000 	.word	0x40240000
 8007b0c:	401c0000 	.word	0x401c0000
 8007b10:	40140000 	.word	0x40140000
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b1c:	9d00      	ldr	r5, [sp, #0]
 8007b1e:	4642      	mov	r2, r8
 8007b20:	464b      	mov	r3, r9
 8007b22:	4630      	mov	r0, r6
 8007b24:	4639      	mov	r1, r7
 8007b26:	f7f8 fe99 	bl	800085c <__aeabi_ddiv>
 8007b2a:	f7f9 f81d 	bl	8000b68 <__aeabi_d2iz>
 8007b2e:	9001      	str	r0, [sp, #4]
 8007b30:	f7f8 fd00 	bl	8000534 <__aeabi_i2d>
 8007b34:	4642      	mov	r2, r8
 8007b36:	464b      	mov	r3, r9
 8007b38:	f7f8 fd66 	bl	8000608 <__aeabi_dmul>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f8 fba8 	bl	8000298 <__aeabi_dsub>
 8007b48:	9e01      	ldr	r6, [sp, #4]
 8007b4a:	9f04      	ldr	r7, [sp, #16]
 8007b4c:	3630      	adds	r6, #48	; 0x30
 8007b4e:	f805 6b01 	strb.w	r6, [r5], #1
 8007b52:	9e00      	ldr	r6, [sp, #0]
 8007b54:	1bae      	subs	r6, r5, r6
 8007b56:	42b7      	cmp	r7, r6
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	d134      	bne.n	8007bc8 <_dtoa_r+0x708>
 8007b5e:	f7f8 fb9d 	bl	800029c <__adddf3>
 8007b62:	4642      	mov	r2, r8
 8007b64:	464b      	mov	r3, r9
 8007b66:	4606      	mov	r6, r0
 8007b68:	460f      	mov	r7, r1
 8007b6a:	f7f8 ffdd 	bl	8000b28 <__aeabi_dcmpgt>
 8007b6e:	b9c8      	cbnz	r0, 8007ba4 <_dtoa_r+0x6e4>
 8007b70:	4642      	mov	r2, r8
 8007b72:	464b      	mov	r3, r9
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 ffae 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b7c:	b110      	cbz	r0, 8007b84 <_dtoa_r+0x6c4>
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	07db      	lsls	r3, r3, #31
 8007b82:	d40f      	bmi.n	8007ba4 <_dtoa_r+0x6e4>
 8007b84:	4651      	mov	r1, sl
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 fbcc 	bl	8008324 <_Bfree>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b90:	702b      	strb	r3, [r5, #0]
 8007b92:	f10b 0301 	add.w	r3, fp, #1
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f43f ace2 	beq.w	8007564 <_dtoa_r+0xa4>
 8007ba0:	601d      	str	r5, [r3, #0]
 8007ba2:	e4df      	b.n	8007564 <_dtoa_r+0xa4>
 8007ba4:	465f      	mov	r7, fp
 8007ba6:	462b      	mov	r3, r5
 8007ba8:	461d      	mov	r5, r3
 8007baa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bae:	2a39      	cmp	r2, #57	; 0x39
 8007bb0:	d106      	bne.n	8007bc0 <_dtoa_r+0x700>
 8007bb2:	9a00      	ldr	r2, [sp, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d1f7      	bne.n	8007ba8 <_dtoa_r+0x6e8>
 8007bb8:	9900      	ldr	r1, [sp, #0]
 8007bba:	2230      	movs	r2, #48	; 0x30
 8007bbc:	3701      	adds	r7, #1
 8007bbe:	700a      	strb	r2, [r1, #0]
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	3201      	adds	r2, #1
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e790      	b.n	8007aea <_dtoa_r+0x62a>
 8007bc8:	4ba3      	ldr	r3, [pc, #652]	; (8007e58 <_dtoa_r+0x998>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f7f8 fd1c 	bl	8000608 <__aeabi_dmul>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	f7f8 ff7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d09e      	beq.n	8007b1e <_dtoa_r+0x65e>
 8007be0:	e7d0      	b.n	8007b84 <_dtoa_r+0x6c4>
 8007be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	f000 80ca 	beq.w	8007d7e <_dtoa_r+0x8be>
 8007bea:	9a07      	ldr	r2, [sp, #28]
 8007bec:	2a01      	cmp	r2, #1
 8007bee:	f300 80ad 	bgt.w	8007d4c <_dtoa_r+0x88c>
 8007bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	f000 80a5 	beq.w	8007d44 <_dtoa_r+0x884>
 8007bfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bfe:	9e08      	ldr	r6, [sp, #32]
 8007c00:	9d05      	ldr	r5, [sp, #20]
 8007c02:	9a05      	ldr	r2, [sp, #20]
 8007c04:	441a      	add	r2, r3
 8007c06:	9205      	str	r2, [sp, #20]
 8007c08:	9a06      	ldr	r2, [sp, #24]
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	441a      	add	r2, r3
 8007c0e:	4620      	mov	r0, r4
 8007c10:	9206      	str	r2, [sp, #24]
 8007c12:	f000 fc87 	bl	8008524 <__i2b>
 8007c16:	4607      	mov	r7, r0
 8007c18:	b165      	cbz	r5, 8007c34 <_dtoa_r+0x774>
 8007c1a:	9b06      	ldr	r3, [sp, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dd09      	ble.n	8007c34 <_dtoa_r+0x774>
 8007c20:	42ab      	cmp	r3, r5
 8007c22:	9a05      	ldr	r2, [sp, #20]
 8007c24:	bfa8      	it	ge
 8007c26:	462b      	movge	r3, r5
 8007c28:	1ad2      	subs	r2, r2, r3
 8007c2a:	9205      	str	r2, [sp, #20]
 8007c2c:	9a06      	ldr	r2, [sp, #24]
 8007c2e:	1aed      	subs	r5, r5, r3
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	9306      	str	r3, [sp, #24]
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	b1f3      	cbz	r3, 8007c76 <_dtoa_r+0x7b6>
 8007c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80a3 	beq.w	8007d86 <_dtoa_r+0x8c6>
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	dd10      	ble.n	8007c66 <_dtoa_r+0x7a6>
 8007c44:	4639      	mov	r1, r7
 8007c46:	4632      	mov	r2, r6
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fd2b 	bl	80086a4 <__pow5mult>
 8007c4e:	4652      	mov	r2, sl
 8007c50:	4601      	mov	r1, r0
 8007c52:	4607      	mov	r7, r0
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fc7b 	bl	8008550 <__multiply>
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 fb60 	bl	8008324 <_Bfree>
 8007c64:	46c2      	mov	sl, r8
 8007c66:	9b08      	ldr	r3, [sp, #32]
 8007c68:	1b9a      	subs	r2, r3, r6
 8007c6a:	d004      	beq.n	8007c76 <_dtoa_r+0x7b6>
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 fd18 	bl	80086a4 <__pow5mult>
 8007c74:	4682      	mov	sl, r0
 8007c76:	2101      	movs	r1, #1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fc53 	bl	8008524 <__i2b>
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	4606      	mov	r6, r0
 8007c84:	f340 8081 	ble.w	8007d8a <_dtoa_r+0x8ca>
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fd09 	bl	80086a4 <__pow5mult>
 8007c92:	9b07      	ldr	r3, [sp, #28]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	4606      	mov	r6, r0
 8007c98:	dd7a      	ble.n	8007d90 <_dtoa_r+0x8d0>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	6933      	ldr	r3, [r6, #16]
 8007ca0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ca4:	6918      	ldr	r0, [r3, #16]
 8007ca6:	f000 fbef 	bl	8008488 <__hi0bits>
 8007caa:	f1c0 0020 	rsb	r0, r0, #32
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	4418      	add	r0, r3
 8007cb2:	f010 001f 	ands.w	r0, r0, #31
 8007cb6:	f000 8094 	beq.w	8007de2 <_dtoa_r+0x922>
 8007cba:	f1c0 0320 	rsb	r3, r0, #32
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	f340 8085 	ble.w	8007dce <_dtoa_r+0x90e>
 8007cc4:	9b05      	ldr	r3, [sp, #20]
 8007cc6:	f1c0 001c 	rsb	r0, r0, #28
 8007cca:	4403      	add	r3, r0
 8007ccc:	9305      	str	r3, [sp, #20]
 8007cce:	9b06      	ldr	r3, [sp, #24]
 8007cd0:	4403      	add	r3, r0
 8007cd2:	4405      	add	r5, r0
 8007cd4:	9306      	str	r3, [sp, #24]
 8007cd6:	9b05      	ldr	r3, [sp, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dd05      	ble.n	8007ce8 <_dtoa_r+0x828>
 8007cdc:	4651      	mov	r1, sl
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fd39 	bl	8008758 <__lshift>
 8007ce6:	4682      	mov	sl, r0
 8007ce8:	9b06      	ldr	r3, [sp, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dd05      	ble.n	8007cfa <_dtoa_r+0x83a>
 8007cee:	4631      	mov	r1, r6
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fd30 	bl	8008758 <__lshift>
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d072      	beq.n	8007de6 <_dtoa_r+0x926>
 8007d00:	4631      	mov	r1, r6
 8007d02:	4650      	mov	r0, sl
 8007d04:	f000 fd94 	bl	8008830 <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	da6c      	bge.n	8007de6 <_dtoa_r+0x926>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4651      	mov	r1, sl
 8007d10:	220a      	movs	r2, #10
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fb28 	bl	8008368 <__multadd>
 8007d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d1e:	4682      	mov	sl, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 81b0 	beq.w	8008086 <_dtoa_r+0xbc6>
 8007d26:	2300      	movs	r3, #0
 8007d28:	4639      	mov	r1, r7
 8007d2a:	220a      	movs	r2, #10
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fb1b 	bl	8008368 <__multadd>
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	4607      	mov	r7, r0
 8007d38:	f300 8096 	bgt.w	8007e68 <_dtoa_r+0x9a8>
 8007d3c:	9b07      	ldr	r3, [sp, #28]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	dc59      	bgt.n	8007df6 <_dtoa_r+0x936>
 8007d42:	e091      	b.n	8007e68 <_dtoa_r+0x9a8>
 8007d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d4a:	e758      	b.n	8007bfe <_dtoa_r+0x73e>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	1e5e      	subs	r6, r3, #1
 8007d50:	9b08      	ldr	r3, [sp, #32]
 8007d52:	42b3      	cmp	r3, r6
 8007d54:	bfbf      	itttt	lt
 8007d56:	9b08      	ldrlt	r3, [sp, #32]
 8007d58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007d5a:	9608      	strlt	r6, [sp, #32]
 8007d5c:	1af3      	sublt	r3, r6, r3
 8007d5e:	bfb4      	ite	lt
 8007d60:	18d2      	addlt	r2, r2, r3
 8007d62:	1b9e      	subge	r6, r3, r6
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	bfbc      	itt	lt
 8007d68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007d6a:	2600      	movlt	r6, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfb7      	itett	lt
 8007d70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007d74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007d78:	1a9d      	sublt	r5, r3, r2
 8007d7a:	2300      	movlt	r3, #0
 8007d7c:	e741      	b.n	8007c02 <_dtoa_r+0x742>
 8007d7e:	9e08      	ldr	r6, [sp, #32]
 8007d80:	9d05      	ldr	r5, [sp, #20]
 8007d82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d84:	e748      	b.n	8007c18 <_dtoa_r+0x758>
 8007d86:	9a08      	ldr	r2, [sp, #32]
 8007d88:	e770      	b.n	8007c6c <_dtoa_r+0x7ac>
 8007d8a:	9b07      	ldr	r3, [sp, #28]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	dc19      	bgt.n	8007dc4 <_dtoa_r+0x904>
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	b9bb      	cbnz	r3, 8007dc4 <_dtoa_r+0x904>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d9a:	b99b      	cbnz	r3, 8007dc4 <_dtoa_r+0x904>
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007da2:	0d1b      	lsrs	r3, r3, #20
 8007da4:	051b      	lsls	r3, r3, #20
 8007da6:	b183      	cbz	r3, 8007dca <_dtoa_r+0x90a>
 8007da8:	9b05      	ldr	r3, [sp, #20]
 8007daa:	3301      	adds	r3, #1
 8007dac:	9305      	str	r3, [sp, #20]
 8007dae:	9b06      	ldr	r3, [sp, #24]
 8007db0:	3301      	adds	r3, #1
 8007db2:	9306      	str	r3, [sp, #24]
 8007db4:	f04f 0801 	mov.w	r8, #1
 8007db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f47f af6f 	bne.w	8007c9e <_dtoa_r+0x7de>
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	e774      	b.n	8007cae <_dtoa_r+0x7ee>
 8007dc4:	f04f 0800 	mov.w	r8, #0
 8007dc8:	e7f6      	b.n	8007db8 <_dtoa_r+0x8f8>
 8007dca:	4698      	mov	r8, r3
 8007dcc:	e7f4      	b.n	8007db8 <_dtoa_r+0x8f8>
 8007dce:	d082      	beq.n	8007cd6 <_dtoa_r+0x816>
 8007dd0:	9a05      	ldr	r2, [sp, #20]
 8007dd2:	331c      	adds	r3, #28
 8007dd4:	441a      	add	r2, r3
 8007dd6:	9205      	str	r2, [sp, #20]
 8007dd8:	9a06      	ldr	r2, [sp, #24]
 8007dda:	441a      	add	r2, r3
 8007ddc:	441d      	add	r5, r3
 8007dde:	9206      	str	r2, [sp, #24]
 8007de0:	e779      	b.n	8007cd6 <_dtoa_r+0x816>
 8007de2:	4603      	mov	r3, r0
 8007de4:	e7f4      	b.n	8007dd0 <_dtoa_r+0x910>
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dc37      	bgt.n	8007e5c <_dtoa_r+0x99c>
 8007dec:	9b07      	ldr	r3, [sp, #28]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	dd34      	ble.n	8007e5c <_dtoa_r+0x99c>
 8007df2:	9b04      	ldr	r3, [sp, #16]
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	9b01      	ldr	r3, [sp, #4]
 8007df8:	b963      	cbnz	r3, 8007e14 <_dtoa_r+0x954>
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	2205      	movs	r2, #5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fab2 	bl	8008368 <__multadd>
 8007e04:	4601      	mov	r1, r0
 8007e06:	4606      	mov	r6, r0
 8007e08:	4650      	mov	r0, sl
 8007e0a:	f000 fd11 	bl	8008830 <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f73f adbb 	bgt.w	800798a <_dtoa_r+0x4ca>
 8007e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e16:	9d00      	ldr	r5, [sp, #0]
 8007e18:	ea6f 0b03 	mvn.w	fp, r3
 8007e1c:	f04f 0800 	mov.w	r8, #0
 8007e20:	4631      	mov	r1, r6
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 fa7e 	bl	8008324 <_Bfree>
 8007e28:	2f00      	cmp	r7, #0
 8007e2a:	f43f aeab 	beq.w	8007b84 <_dtoa_r+0x6c4>
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	d005      	beq.n	8007e40 <_dtoa_r+0x980>
 8007e34:	45b8      	cmp	r8, r7
 8007e36:	d003      	beq.n	8007e40 <_dtoa_r+0x980>
 8007e38:	4641      	mov	r1, r8
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fa72 	bl	8008324 <_Bfree>
 8007e40:	4639      	mov	r1, r7
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fa6e 	bl	8008324 <_Bfree>
 8007e48:	e69c      	b.n	8007b84 <_dtoa_r+0x6c4>
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	e7e1      	b.n	8007e14 <_dtoa_r+0x954>
 8007e50:	46bb      	mov	fp, r7
 8007e52:	4637      	mov	r7, r6
 8007e54:	e599      	b.n	800798a <_dtoa_r+0x4ca>
 8007e56:	bf00      	nop
 8007e58:	40240000 	.word	0x40240000
 8007e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 80c8 	beq.w	8007ff4 <_dtoa_r+0xb34>
 8007e64:	9b04      	ldr	r3, [sp, #16]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	dd05      	ble.n	8007e78 <_dtoa_r+0x9b8>
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fc71 	bl	8008758 <__lshift>
 8007e76:	4607      	mov	r7, r0
 8007e78:	f1b8 0f00 	cmp.w	r8, #0
 8007e7c:	d05b      	beq.n	8007f36 <_dtoa_r+0xa76>
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fa0f 	bl	80082a4 <_Balloc>
 8007e86:	4605      	mov	r5, r0
 8007e88:	b928      	cbnz	r0, 8007e96 <_dtoa_r+0x9d6>
 8007e8a:	4b83      	ldr	r3, [pc, #524]	; (8008098 <_dtoa_r+0xbd8>)
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e92:	f7ff bb2e 	b.w	80074f2 <_dtoa_r+0x32>
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	3202      	adds	r2, #2
 8007e9a:	0092      	lsls	r2, r2, #2
 8007e9c:	f107 010c 	add.w	r1, r7, #12
 8007ea0:	300c      	adds	r0, #12
 8007ea2:	f001 ff85 	bl	8009db0 <memcpy>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fc54 	bl	8008758 <__lshift>
 8007eb0:	9b00      	ldr	r3, [sp, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eba:	4413      	add	r3, r2
 8007ebc:	9308      	str	r3, [sp, #32]
 8007ebe:	9b02      	ldr	r3, [sp, #8]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	46b8      	mov	r8, r7
 8007ec6:	9306      	str	r3, [sp, #24]
 8007ec8:	4607      	mov	r7, r0
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	4631      	mov	r1, r6
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	f7ff fa6a 	bl	80073ac <quorem>
 8007ed8:	4641      	mov	r1, r8
 8007eda:	9002      	str	r0, [sp, #8]
 8007edc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	f000 fca5 	bl	8008830 <__mcmp>
 8007ee6:	463a      	mov	r2, r7
 8007ee8:	9005      	str	r0, [sp, #20]
 8007eea:	4631      	mov	r1, r6
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fcbb 	bl	8008868 <__mdiff>
 8007ef2:	68c2      	ldr	r2, [r0, #12]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	bb02      	cbnz	r2, 8007f3a <_dtoa_r+0xa7a>
 8007ef8:	4601      	mov	r1, r0
 8007efa:	4650      	mov	r0, sl
 8007efc:	f000 fc98 	bl	8008830 <__mcmp>
 8007f00:	4602      	mov	r2, r0
 8007f02:	4629      	mov	r1, r5
 8007f04:	4620      	mov	r0, r4
 8007f06:	9209      	str	r2, [sp, #36]	; 0x24
 8007f08:	f000 fa0c 	bl	8008324 <_Bfree>
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f10:	9d04      	ldr	r5, [sp, #16]
 8007f12:	ea43 0102 	orr.w	r1, r3, r2
 8007f16:	9b06      	ldr	r3, [sp, #24]
 8007f18:	4319      	orrs	r1, r3
 8007f1a:	d110      	bne.n	8007f3e <_dtoa_r+0xa7e>
 8007f1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f20:	d029      	beq.n	8007f76 <_dtoa_r+0xab6>
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dd02      	ble.n	8007f2e <_dtoa_r+0xa6e>
 8007f28:	9b02      	ldr	r3, [sp, #8]
 8007f2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	f883 9000 	strb.w	r9, [r3]
 8007f34:	e774      	b.n	8007e20 <_dtoa_r+0x960>
 8007f36:	4638      	mov	r0, r7
 8007f38:	e7ba      	b.n	8007eb0 <_dtoa_r+0x9f0>
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	e7e1      	b.n	8007f02 <_dtoa_r+0xa42>
 8007f3e:	9b05      	ldr	r3, [sp, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	db04      	blt.n	8007f4e <_dtoa_r+0xa8e>
 8007f44:	9907      	ldr	r1, [sp, #28]
 8007f46:	430b      	orrs	r3, r1
 8007f48:	9906      	ldr	r1, [sp, #24]
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	d120      	bne.n	8007f90 <_dtoa_r+0xad0>
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	dded      	ble.n	8007f2e <_dtoa_r+0xa6e>
 8007f52:	4651      	mov	r1, sl
 8007f54:	2201      	movs	r2, #1
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 fbfe 	bl	8008758 <__lshift>
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4682      	mov	sl, r0
 8007f60:	f000 fc66 	bl	8008830 <__mcmp>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dc03      	bgt.n	8007f70 <_dtoa_r+0xab0>
 8007f68:	d1e1      	bne.n	8007f2e <_dtoa_r+0xa6e>
 8007f6a:	f019 0f01 	tst.w	r9, #1
 8007f6e:	d0de      	beq.n	8007f2e <_dtoa_r+0xa6e>
 8007f70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f74:	d1d8      	bne.n	8007f28 <_dtoa_r+0xa68>
 8007f76:	9a01      	ldr	r2, [sp, #4]
 8007f78:	2339      	movs	r3, #57	; 0x39
 8007f7a:	7013      	strb	r3, [r2, #0]
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	461d      	mov	r5, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f86:	2a39      	cmp	r2, #57	; 0x39
 8007f88:	d06c      	beq.n	8008064 <_dtoa_r+0xba4>
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	e747      	b.n	8007e20 <_dtoa_r+0x960>
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	dd07      	ble.n	8007fa4 <_dtoa_r+0xae4>
 8007f94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f98:	d0ed      	beq.n	8007f76 <_dtoa_r+0xab6>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	f109 0301 	add.w	r3, r9, #1
 8007fa0:	7013      	strb	r3, [r2, #0]
 8007fa2:	e73d      	b.n	8007e20 <_dtoa_r+0x960>
 8007fa4:	9b04      	ldr	r3, [sp, #16]
 8007fa6:	9a08      	ldr	r2, [sp, #32]
 8007fa8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d043      	beq.n	8008038 <_dtoa_r+0xb78>
 8007fb0:	4651      	mov	r1, sl
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 f9d6 	bl	8008368 <__multadd>
 8007fbc:	45b8      	cmp	r8, r7
 8007fbe:	4682      	mov	sl, r0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	f04f 020a 	mov.w	r2, #10
 8007fc8:	4641      	mov	r1, r8
 8007fca:	4620      	mov	r0, r4
 8007fcc:	d107      	bne.n	8007fde <_dtoa_r+0xb1e>
 8007fce:	f000 f9cb 	bl	8008368 <__multadd>
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	4607      	mov	r7, r0
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	e775      	b.n	8007eca <_dtoa_r+0xa0a>
 8007fde:	f000 f9c3 	bl	8008368 <__multadd>
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	220a      	movs	r2, #10
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 f9bc 	bl	8008368 <__multadd>
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	e7f0      	b.n	8007fd6 <_dtoa_r+0xb16>
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	9d00      	ldr	r5, [sp, #0]
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4650      	mov	r0, sl
 8007ffe:	f7ff f9d5 	bl	80073ac <quorem>
 8008002:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	f805 9b01 	strb.w	r9, [r5], #1
 800800c:	1aea      	subs	r2, r5, r3
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	4293      	cmp	r3, r2
 8008012:	dd07      	ble.n	8008024 <_dtoa_r+0xb64>
 8008014:	4651      	mov	r1, sl
 8008016:	2300      	movs	r3, #0
 8008018:	220a      	movs	r2, #10
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f9a4 	bl	8008368 <__multadd>
 8008020:	4682      	mov	sl, r0
 8008022:	e7ea      	b.n	8007ffa <_dtoa_r+0xb3a>
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	bfc8      	it	gt
 800802a:	461d      	movgt	r5, r3
 800802c:	9b00      	ldr	r3, [sp, #0]
 800802e:	bfd8      	it	le
 8008030:	2501      	movle	r5, #1
 8008032:	441d      	add	r5, r3
 8008034:	f04f 0800 	mov.w	r8, #0
 8008038:	4651      	mov	r1, sl
 800803a:	2201      	movs	r2, #1
 800803c:	4620      	mov	r0, r4
 800803e:	f000 fb8b 	bl	8008758 <__lshift>
 8008042:	4631      	mov	r1, r6
 8008044:	4682      	mov	sl, r0
 8008046:	f000 fbf3 	bl	8008830 <__mcmp>
 800804a:	2800      	cmp	r0, #0
 800804c:	dc96      	bgt.n	8007f7c <_dtoa_r+0xabc>
 800804e:	d102      	bne.n	8008056 <_dtoa_r+0xb96>
 8008050:	f019 0f01 	tst.w	r9, #1
 8008054:	d192      	bne.n	8007f7c <_dtoa_r+0xabc>
 8008056:	462b      	mov	r3, r5
 8008058:	461d      	mov	r5, r3
 800805a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800805e:	2a30      	cmp	r2, #48	; 0x30
 8008060:	d0fa      	beq.n	8008058 <_dtoa_r+0xb98>
 8008062:	e6dd      	b.n	8007e20 <_dtoa_r+0x960>
 8008064:	9a00      	ldr	r2, [sp, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d189      	bne.n	8007f7e <_dtoa_r+0xabe>
 800806a:	f10b 0b01 	add.w	fp, fp, #1
 800806e:	2331      	movs	r3, #49	; 0x31
 8008070:	e796      	b.n	8007fa0 <_dtoa_r+0xae0>
 8008072:	4b0a      	ldr	r3, [pc, #40]	; (800809c <_dtoa_r+0xbdc>)
 8008074:	f7ff ba99 	b.w	80075aa <_dtoa_r+0xea>
 8008078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800807a:	2b00      	cmp	r3, #0
 800807c:	f47f aa6d 	bne.w	800755a <_dtoa_r+0x9a>
 8008080:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <_dtoa_r+0xbe0>)
 8008082:	f7ff ba92 	b.w	80075aa <_dtoa_r+0xea>
 8008086:	9b01      	ldr	r3, [sp, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	dcb5      	bgt.n	8007ff8 <_dtoa_r+0xb38>
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	2b02      	cmp	r3, #2
 8008090:	f73f aeb1 	bgt.w	8007df6 <_dtoa_r+0x936>
 8008094:	e7b0      	b.n	8007ff8 <_dtoa_r+0xb38>
 8008096:	bf00      	nop
 8008098:	0800bbd9 	.word	0x0800bbd9
 800809c:	0800bb34 	.word	0x0800bb34
 80080a0:	0800bb5d 	.word	0x0800bb5d

080080a4 <_free_r>:
 80080a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d044      	beq.n	8008134 <_free_r+0x90>
 80080aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ae:	9001      	str	r0, [sp, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f1a1 0404 	sub.w	r4, r1, #4
 80080b6:	bfb8      	it	lt
 80080b8:	18e4      	addlt	r4, r4, r3
 80080ba:	f000 f8e7 	bl	800828c <__malloc_lock>
 80080be:	4a1e      	ldr	r2, [pc, #120]	; (8008138 <_free_r+0x94>)
 80080c0:	9801      	ldr	r0, [sp, #4]
 80080c2:	6813      	ldr	r3, [r2, #0]
 80080c4:	b933      	cbnz	r3, 80080d4 <_free_r+0x30>
 80080c6:	6063      	str	r3, [r4, #4]
 80080c8:	6014      	str	r4, [r2, #0]
 80080ca:	b003      	add	sp, #12
 80080cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d0:	f000 b8e2 	b.w	8008298 <__malloc_unlock>
 80080d4:	42a3      	cmp	r3, r4
 80080d6:	d908      	bls.n	80080ea <_free_r+0x46>
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	1961      	adds	r1, r4, r5
 80080dc:	428b      	cmp	r3, r1
 80080de:	bf01      	itttt	eq
 80080e0:	6819      	ldreq	r1, [r3, #0]
 80080e2:	685b      	ldreq	r3, [r3, #4]
 80080e4:	1949      	addeq	r1, r1, r5
 80080e6:	6021      	streq	r1, [r4, #0]
 80080e8:	e7ed      	b.n	80080c6 <_free_r+0x22>
 80080ea:	461a      	mov	r2, r3
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	b10b      	cbz	r3, 80080f4 <_free_r+0x50>
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	d9fa      	bls.n	80080ea <_free_r+0x46>
 80080f4:	6811      	ldr	r1, [r2, #0]
 80080f6:	1855      	adds	r5, r2, r1
 80080f8:	42a5      	cmp	r5, r4
 80080fa:	d10b      	bne.n	8008114 <_free_r+0x70>
 80080fc:	6824      	ldr	r4, [r4, #0]
 80080fe:	4421      	add	r1, r4
 8008100:	1854      	adds	r4, r2, r1
 8008102:	42a3      	cmp	r3, r4
 8008104:	6011      	str	r1, [r2, #0]
 8008106:	d1e0      	bne.n	80080ca <_free_r+0x26>
 8008108:	681c      	ldr	r4, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	6053      	str	r3, [r2, #4]
 800810e:	440c      	add	r4, r1
 8008110:	6014      	str	r4, [r2, #0]
 8008112:	e7da      	b.n	80080ca <_free_r+0x26>
 8008114:	d902      	bls.n	800811c <_free_r+0x78>
 8008116:	230c      	movs	r3, #12
 8008118:	6003      	str	r3, [r0, #0]
 800811a:	e7d6      	b.n	80080ca <_free_r+0x26>
 800811c:	6825      	ldr	r5, [r4, #0]
 800811e:	1961      	adds	r1, r4, r5
 8008120:	428b      	cmp	r3, r1
 8008122:	bf04      	itt	eq
 8008124:	6819      	ldreq	r1, [r3, #0]
 8008126:	685b      	ldreq	r3, [r3, #4]
 8008128:	6063      	str	r3, [r4, #4]
 800812a:	bf04      	itt	eq
 800812c:	1949      	addeq	r1, r1, r5
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	6054      	str	r4, [r2, #4]
 8008132:	e7ca      	b.n	80080ca <_free_r+0x26>
 8008134:	b003      	add	sp, #12
 8008136:	bd30      	pop	{r4, r5, pc}
 8008138:	2000069c 	.word	0x2000069c

0800813c <malloc>:
 800813c:	4b02      	ldr	r3, [pc, #8]	; (8008148 <malloc+0xc>)
 800813e:	4601      	mov	r1, r0
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	f000 b823 	b.w	800818c <_malloc_r>
 8008146:	bf00      	nop
 8008148:	20000070 	.word	0x20000070

0800814c <sbrk_aligned>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	4e0e      	ldr	r6, [pc, #56]	; (8008188 <sbrk_aligned+0x3c>)
 8008150:	460c      	mov	r4, r1
 8008152:	6831      	ldr	r1, [r6, #0]
 8008154:	4605      	mov	r5, r0
 8008156:	b911      	cbnz	r1, 800815e <sbrk_aligned+0x12>
 8008158:	f001 fe1a 	bl	8009d90 <_sbrk_r>
 800815c:	6030      	str	r0, [r6, #0]
 800815e:	4621      	mov	r1, r4
 8008160:	4628      	mov	r0, r5
 8008162:	f001 fe15 	bl	8009d90 <_sbrk_r>
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	d00a      	beq.n	8008180 <sbrk_aligned+0x34>
 800816a:	1cc4      	adds	r4, r0, #3
 800816c:	f024 0403 	bic.w	r4, r4, #3
 8008170:	42a0      	cmp	r0, r4
 8008172:	d007      	beq.n	8008184 <sbrk_aligned+0x38>
 8008174:	1a21      	subs	r1, r4, r0
 8008176:	4628      	mov	r0, r5
 8008178:	f001 fe0a 	bl	8009d90 <_sbrk_r>
 800817c:	3001      	adds	r0, #1
 800817e:	d101      	bne.n	8008184 <sbrk_aligned+0x38>
 8008180:	f04f 34ff 	mov.w	r4, #4294967295
 8008184:	4620      	mov	r0, r4
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	200006a0 	.word	0x200006a0

0800818c <_malloc_r>:
 800818c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008190:	1ccd      	adds	r5, r1, #3
 8008192:	f025 0503 	bic.w	r5, r5, #3
 8008196:	3508      	adds	r5, #8
 8008198:	2d0c      	cmp	r5, #12
 800819a:	bf38      	it	cc
 800819c:	250c      	movcc	r5, #12
 800819e:	2d00      	cmp	r5, #0
 80081a0:	4607      	mov	r7, r0
 80081a2:	db01      	blt.n	80081a8 <_malloc_r+0x1c>
 80081a4:	42a9      	cmp	r1, r5
 80081a6:	d905      	bls.n	80081b4 <_malloc_r+0x28>
 80081a8:	230c      	movs	r3, #12
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	2600      	movs	r6, #0
 80081ae:	4630      	mov	r0, r6
 80081b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008288 <_malloc_r+0xfc>
 80081b8:	f000 f868 	bl	800828c <__malloc_lock>
 80081bc:	f8d8 3000 	ldr.w	r3, [r8]
 80081c0:	461c      	mov	r4, r3
 80081c2:	bb5c      	cbnz	r4, 800821c <_malloc_r+0x90>
 80081c4:	4629      	mov	r1, r5
 80081c6:	4638      	mov	r0, r7
 80081c8:	f7ff ffc0 	bl	800814c <sbrk_aligned>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	4604      	mov	r4, r0
 80081d0:	d155      	bne.n	800827e <_malloc_r+0xf2>
 80081d2:	f8d8 4000 	ldr.w	r4, [r8]
 80081d6:	4626      	mov	r6, r4
 80081d8:	2e00      	cmp	r6, #0
 80081da:	d145      	bne.n	8008268 <_malloc_r+0xdc>
 80081dc:	2c00      	cmp	r4, #0
 80081de:	d048      	beq.n	8008272 <_malloc_r+0xe6>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	4631      	mov	r1, r6
 80081e4:	4638      	mov	r0, r7
 80081e6:	eb04 0903 	add.w	r9, r4, r3
 80081ea:	f001 fdd1 	bl	8009d90 <_sbrk_r>
 80081ee:	4581      	cmp	r9, r0
 80081f0:	d13f      	bne.n	8008272 <_malloc_r+0xe6>
 80081f2:	6821      	ldr	r1, [r4, #0]
 80081f4:	1a6d      	subs	r5, r5, r1
 80081f6:	4629      	mov	r1, r5
 80081f8:	4638      	mov	r0, r7
 80081fa:	f7ff ffa7 	bl	800814c <sbrk_aligned>
 80081fe:	3001      	adds	r0, #1
 8008200:	d037      	beq.n	8008272 <_malloc_r+0xe6>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	442b      	add	r3, r5
 8008206:	6023      	str	r3, [r4, #0]
 8008208:	f8d8 3000 	ldr.w	r3, [r8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d038      	beq.n	8008282 <_malloc_r+0xf6>
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	42a2      	cmp	r2, r4
 8008214:	d12b      	bne.n	800826e <_malloc_r+0xe2>
 8008216:	2200      	movs	r2, #0
 8008218:	605a      	str	r2, [r3, #4]
 800821a:	e00f      	b.n	800823c <_malloc_r+0xb0>
 800821c:	6822      	ldr	r2, [r4, #0]
 800821e:	1b52      	subs	r2, r2, r5
 8008220:	d41f      	bmi.n	8008262 <_malloc_r+0xd6>
 8008222:	2a0b      	cmp	r2, #11
 8008224:	d917      	bls.n	8008256 <_malloc_r+0xca>
 8008226:	1961      	adds	r1, r4, r5
 8008228:	42a3      	cmp	r3, r4
 800822a:	6025      	str	r5, [r4, #0]
 800822c:	bf18      	it	ne
 800822e:	6059      	strne	r1, [r3, #4]
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	bf08      	it	eq
 8008234:	f8c8 1000 	streq.w	r1, [r8]
 8008238:	5162      	str	r2, [r4, r5]
 800823a:	604b      	str	r3, [r1, #4]
 800823c:	4638      	mov	r0, r7
 800823e:	f104 060b 	add.w	r6, r4, #11
 8008242:	f000 f829 	bl	8008298 <__malloc_unlock>
 8008246:	f026 0607 	bic.w	r6, r6, #7
 800824a:	1d23      	adds	r3, r4, #4
 800824c:	1af2      	subs	r2, r6, r3
 800824e:	d0ae      	beq.n	80081ae <_malloc_r+0x22>
 8008250:	1b9b      	subs	r3, r3, r6
 8008252:	50a3      	str	r3, [r4, r2]
 8008254:	e7ab      	b.n	80081ae <_malloc_r+0x22>
 8008256:	42a3      	cmp	r3, r4
 8008258:	6862      	ldr	r2, [r4, #4]
 800825a:	d1dd      	bne.n	8008218 <_malloc_r+0x8c>
 800825c:	f8c8 2000 	str.w	r2, [r8]
 8008260:	e7ec      	b.n	800823c <_malloc_r+0xb0>
 8008262:	4623      	mov	r3, r4
 8008264:	6864      	ldr	r4, [r4, #4]
 8008266:	e7ac      	b.n	80081c2 <_malloc_r+0x36>
 8008268:	4634      	mov	r4, r6
 800826a:	6876      	ldr	r6, [r6, #4]
 800826c:	e7b4      	b.n	80081d8 <_malloc_r+0x4c>
 800826e:	4613      	mov	r3, r2
 8008270:	e7cc      	b.n	800820c <_malloc_r+0x80>
 8008272:	230c      	movs	r3, #12
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4638      	mov	r0, r7
 8008278:	f000 f80e 	bl	8008298 <__malloc_unlock>
 800827c:	e797      	b.n	80081ae <_malloc_r+0x22>
 800827e:	6025      	str	r5, [r4, #0]
 8008280:	e7dc      	b.n	800823c <_malloc_r+0xb0>
 8008282:	605b      	str	r3, [r3, #4]
 8008284:	deff      	udf	#255	; 0xff
 8008286:	bf00      	nop
 8008288:	2000069c 	.word	0x2000069c

0800828c <__malloc_lock>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__malloc_lock+0x8>)
 800828e:	f7ff b884 	b.w	800739a <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	20000698 	.word	0x20000698

08008298 <__malloc_unlock>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__malloc_unlock+0x8>)
 800829a:	f7ff b87f 	b.w	800739c <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	20000698 	.word	0x20000698

080082a4 <_Balloc>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	69c6      	ldr	r6, [r0, #28]
 80082a8:	4604      	mov	r4, r0
 80082aa:	460d      	mov	r5, r1
 80082ac:	b976      	cbnz	r6, 80082cc <_Balloc+0x28>
 80082ae:	2010      	movs	r0, #16
 80082b0:	f7ff ff44 	bl	800813c <malloc>
 80082b4:	4602      	mov	r2, r0
 80082b6:	61e0      	str	r0, [r4, #28]
 80082b8:	b920      	cbnz	r0, 80082c4 <_Balloc+0x20>
 80082ba:	4b18      	ldr	r3, [pc, #96]	; (800831c <_Balloc+0x78>)
 80082bc:	4818      	ldr	r0, [pc, #96]	; (8008320 <_Balloc+0x7c>)
 80082be:	216b      	movs	r1, #107	; 0x6b
 80082c0:	f001 fd8e 	bl	8009de0 <__assert_func>
 80082c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082c8:	6006      	str	r6, [r0, #0]
 80082ca:	60c6      	str	r6, [r0, #12]
 80082cc:	69e6      	ldr	r6, [r4, #28]
 80082ce:	68f3      	ldr	r3, [r6, #12]
 80082d0:	b183      	cbz	r3, 80082f4 <_Balloc+0x50>
 80082d2:	69e3      	ldr	r3, [r4, #28]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082da:	b9b8      	cbnz	r0, 800830c <_Balloc+0x68>
 80082dc:	2101      	movs	r1, #1
 80082de:	fa01 f605 	lsl.w	r6, r1, r5
 80082e2:	1d72      	adds	r2, r6, #5
 80082e4:	0092      	lsls	r2, r2, #2
 80082e6:	4620      	mov	r0, r4
 80082e8:	f001 fd98 	bl	8009e1c <_calloc_r>
 80082ec:	b160      	cbz	r0, 8008308 <_Balloc+0x64>
 80082ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082f2:	e00e      	b.n	8008312 <_Balloc+0x6e>
 80082f4:	2221      	movs	r2, #33	; 0x21
 80082f6:	2104      	movs	r1, #4
 80082f8:	4620      	mov	r0, r4
 80082fa:	f001 fd8f 	bl	8009e1c <_calloc_r>
 80082fe:	69e3      	ldr	r3, [r4, #28]
 8008300:	60f0      	str	r0, [r6, #12]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e4      	bne.n	80082d2 <_Balloc+0x2e>
 8008308:	2000      	movs	r0, #0
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	6802      	ldr	r2, [r0, #0]
 800830e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008312:	2300      	movs	r3, #0
 8008314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008318:	e7f7      	b.n	800830a <_Balloc+0x66>
 800831a:	bf00      	nop
 800831c:	0800bb6a 	.word	0x0800bb6a
 8008320:	0800bbea 	.word	0x0800bbea

08008324 <_Bfree>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	69c6      	ldr	r6, [r0, #28]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b976      	cbnz	r6, 800834c <_Bfree+0x28>
 800832e:	2010      	movs	r0, #16
 8008330:	f7ff ff04 	bl	800813c <malloc>
 8008334:	4602      	mov	r2, r0
 8008336:	61e8      	str	r0, [r5, #28]
 8008338:	b920      	cbnz	r0, 8008344 <_Bfree+0x20>
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <_Bfree+0x3c>)
 800833c:	4809      	ldr	r0, [pc, #36]	; (8008364 <_Bfree+0x40>)
 800833e:	218f      	movs	r1, #143	; 0x8f
 8008340:	f001 fd4e 	bl	8009de0 <__assert_func>
 8008344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008348:	6006      	str	r6, [r0, #0]
 800834a:	60c6      	str	r6, [r0, #12]
 800834c:	b13c      	cbz	r4, 800835e <_Bfree+0x3a>
 800834e:	69eb      	ldr	r3, [r5, #28]
 8008350:	6862      	ldr	r2, [r4, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008358:	6021      	str	r1, [r4, #0]
 800835a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800835e:	bd70      	pop	{r4, r5, r6, pc}
 8008360:	0800bb6a 	.word	0x0800bb6a
 8008364:	0800bbea 	.word	0x0800bbea

08008368 <__multadd>:
 8008368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836c:	690d      	ldr	r5, [r1, #16]
 800836e:	4607      	mov	r7, r0
 8008370:	460c      	mov	r4, r1
 8008372:	461e      	mov	r6, r3
 8008374:	f101 0c14 	add.w	ip, r1, #20
 8008378:	2000      	movs	r0, #0
 800837a:	f8dc 3000 	ldr.w	r3, [ip]
 800837e:	b299      	uxth	r1, r3
 8008380:	fb02 6101 	mla	r1, r2, r1, r6
 8008384:	0c1e      	lsrs	r6, r3, #16
 8008386:	0c0b      	lsrs	r3, r1, #16
 8008388:	fb02 3306 	mla	r3, r2, r6, r3
 800838c:	b289      	uxth	r1, r1
 800838e:	3001      	adds	r0, #1
 8008390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008394:	4285      	cmp	r5, r0
 8008396:	f84c 1b04 	str.w	r1, [ip], #4
 800839a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800839e:	dcec      	bgt.n	800837a <__multadd+0x12>
 80083a0:	b30e      	cbz	r6, 80083e6 <__multadd+0x7e>
 80083a2:	68a3      	ldr	r3, [r4, #8]
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	dc19      	bgt.n	80083dc <__multadd+0x74>
 80083a8:	6861      	ldr	r1, [r4, #4]
 80083aa:	4638      	mov	r0, r7
 80083ac:	3101      	adds	r1, #1
 80083ae:	f7ff ff79 	bl	80082a4 <_Balloc>
 80083b2:	4680      	mov	r8, r0
 80083b4:	b928      	cbnz	r0, 80083c2 <__multadd+0x5a>
 80083b6:	4602      	mov	r2, r0
 80083b8:	4b0c      	ldr	r3, [pc, #48]	; (80083ec <__multadd+0x84>)
 80083ba:	480d      	ldr	r0, [pc, #52]	; (80083f0 <__multadd+0x88>)
 80083bc:	21ba      	movs	r1, #186	; 0xba
 80083be:	f001 fd0f 	bl	8009de0 <__assert_func>
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	3202      	adds	r2, #2
 80083c6:	f104 010c 	add.w	r1, r4, #12
 80083ca:	0092      	lsls	r2, r2, #2
 80083cc:	300c      	adds	r0, #12
 80083ce:	f001 fcef 	bl	8009db0 <memcpy>
 80083d2:	4621      	mov	r1, r4
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff ffa5 	bl	8008324 <_Bfree>
 80083da:	4644      	mov	r4, r8
 80083dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083e0:	3501      	adds	r5, #1
 80083e2:	615e      	str	r6, [r3, #20]
 80083e4:	6125      	str	r5, [r4, #16]
 80083e6:	4620      	mov	r0, r4
 80083e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ec:	0800bbd9 	.word	0x0800bbd9
 80083f0:	0800bbea 	.word	0x0800bbea

080083f4 <__s2b>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	460c      	mov	r4, r1
 80083fa:	4615      	mov	r5, r2
 80083fc:	461f      	mov	r7, r3
 80083fe:	2209      	movs	r2, #9
 8008400:	3308      	adds	r3, #8
 8008402:	4606      	mov	r6, r0
 8008404:	fb93 f3f2 	sdiv	r3, r3, r2
 8008408:	2100      	movs	r1, #0
 800840a:	2201      	movs	r2, #1
 800840c:	429a      	cmp	r2, r3
 800840e:	db09      	blt.n	8008424 <__s2b+0x30>
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff ff47 	bl	80082a4 <_Balloc>
 8008416:	b940      	cbnz	r0, 800842a <__s2b+0x36>
 8008418:	4602      	mov	r2, r0
 800841a:	4b19      	ldr	r3, [pc, #100]	; (8008480 <__s2b+0x8c>)
 800841c:	4819      	ldr	r0, [pc, #100]	; (8008484 <__s2b+0x90>)
 800841e:	21d3      	movs	r1, #211	; 0xd3
 8008420:	f001 fcde 	bl	8009de0 <__assert_func>
 8008424:	0052      	lsls	r2, r2, #1
 8008426:	3101      	adds	r1, #1
 8008428:	e7f0      	b.n	800840c <__s2b+0x18>
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	6143      	str	r3, [r0, #20]
 800842e:	2d09      	cmp	r5, #9
 8008430:	f04f 0301 	mov.w	r3, #1
 8008434:	6103      	str	r3, [r0, #16]
 8008436:	dd16      	ble.n	8008466 <__s2b+0x72>
 8008438:	f104 0909 	add.w	r9, r4, #9
 800843c:	46c8      	mov	r8, r9
 800843e:	442c      	add	r4, r5
 8008440:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008444:	4601      	mov	r1, r0
 8008446:	3b30      	subs	r3, #48	; 0x30
 8008448:	220a      	movs	r2, #10
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ff8c 	bl	8008368 <__multadd>
 8008450:	45a0      	cmp	r8, r4
 8008452:	d1f5      	bne.n	8008440 <__s2b+0x4c>
 8008454:	f1a5 0408 	sub.w	r4, r5, #8
 8008458:	444c      	add	r4, r9
 800845a:	1b2d      	subs	r5, r5, r4
 800845c:	1963      	adds	r3, r4, r5
 800845e:	42bb      	cmp	r3, r7
 8008460:	db04      	blt.n	800846c <__s2b+0x78>
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	340a      	adds	r4, #10
 8008468:	2509      	movs	r5, #9
 800846a:	e7f6      	b.n	800845a <__s2b+0x66>
 800846c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008470:	4601      	mov	r1, r0
 8008472:	3b30      	subs	r3, #48	; 0x30
 8008474:	220a      	movs	r2, #10
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ff76 	bl	8008368 <__multadd>
 800847c:	e7ee      	b.n	800845c <__s2b+0x68>
 800847e:	bf00      	nop
 8008480:	0800bbd9 	.word	0x0800bbd9
 8008484:	0800bbea 	.word	0x0800bbea

08008488 <__hi0bits>:
 8008488:	0c03      	lsrs	r3, r0, #16
 800848a:	041b      	lsls	r3, r3, #16
 800848c:	b9d3      	cbnz	r3, 80084c4 <__hi0bits+0x3c>
 800848e:	0400      	lsls	r0, r0, #16
 8008490:	2310      	movs	r3, #16
 8008492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008496:	bf04      	itt	eq
 8008498:	0200      	lsleq	r0, r0, #8
 800849a:	3308      	addeq	r3, #8
 800849c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084a0:	bf04      	itt	eq
 80084a2:	0100      	lsleq	r0, r0, #4
 80084a4:	3304      	addeq	r3, #4
 80084a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084aa:	bf04      	itt	eq
 80084ac:	0080      	lsleq	r0, r0, #2
 80084ae:	3302      	addeq	r3, #2
 80084b0:	2800      	cmp	r0, #0
 80084b2:	db05      	blt.n	80084c0 <__hi0bits+0x38>
 80084b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084b8:	f103 0301 	add.w	r3, r3, #1
 80084bc:	bf08      	it	eq
 80084be:	2320      	moveq	r3, #32
 80084c0:	4618      	mov	r0, r3
 80084c2:	4770      	bx	lr
 80084c4:	2300      	movs	r3, #0
 80084c6:	e7e4      	b.n	8008492 <__hi0bits+0xa>

080084c8 <__lo0bits>:
 80084c8:	6803      	ldr	r3, [r0, #0]
 80084ca:	f013 0207 	ands.w	r2, r3, #7
 80084ce:	d00c      	beq.n	80084ea <__lo0bits+0x22>
 80084d0:	07d9      	lsls	r1, r3, #31
 80084d2:	d422      	bmi.n	800851a <__lo0bits+0x52>
 80084d4:	079a      	lsls	r2, r3, #30
 80084d6:	bf49      	itett	mi
 80084d8:	085b      	lsrmi	r3, r3, #1
 80084da:	089b      	lsrpl	r3, r3, #2
 80084dc:	6003      	strmi	r3, [r0, #0]
 80084de:	2201      	movmi	r2, #1
 80084e0:	bf5c      	itt	pl
 80084e2:	6003      	strpl	r3, [r0, #0]
 80084e4:	2202      	movpl	r2, #2
 80084e6:	4610      	mov	r0, r2
 80084e8:	4770      	bx	lr
 80084ea:	b299      	uxth	r1, r3
 80084ec:	b909      	cbnz	r1, 80084f2 <__lo0bits+0x2a>
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	2210      	movs	r2, #16
 80084f2:	b2d9      	uxtb	r1, r3
 80084f4:	b909      	cbnz	r1, 80084fa <__lo0bits+0x32>
 80084f6:	3208      	adds	r2, #8
 80084f8:	0a1b      	lsrs	r3, r3, #8
 80084fa:	0719      	lsls	r1, r3, #28
 80084fc:	bf04      	itt	eq
 80084fe:	091b      	lsreq	r3, r3, #4
 8008500:	3204      	addeq	r2, #4
 8008502:	0799      	lsls	r1, r3, #30
 8008504:	bf04      	itt	eq
 8008506:	089b      	lsreq	r3, r3, #2
 8008508:	3202      	addeq	r2, #2
 800850a:	07d9      	lsls	r1, r3, #31
 800850c:	d403      	bmi.n	8008516 <__lo0bits+0x4e>
 800850e:	085b      	lsrs	r3, r3, #1
 8008510:	f102 0201 	add.w	r2, r2, #1
 8008514:	d003      	beq.n	800851e <__lo0bits+0x56>
 8008516:	6003      	str	r3, [r0, #0]
 8008518:	e7e5      	b.n	80084e6 <__lo0bits+0x1e>
 800851a:	2200      	movs	r2, #0
 800851c:	e7e3      	b.n	80084e6 <__lo0bits+0x1e>
 800851e:	2220      	movs	r2, #32
 8008520:	e7e1      	b.n	80084e6 <__lo0bits+0x1e>
	...

08008524 <__i2b>:
 8008524:	b510      	push	{r4, lr}
 8008526:	460c      	mov	r4, r1
 8008528:	2101      	movs	r1, #1
 800852a:	f7ff febb 	bl	80082a4 <_Balloc>
 800852e:	4602      	mov	r2, r0
 8008530:	b928      	cbnz	r0, 800853e <__i2b+0x1a>
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <__i2b+0x24>)
 8008534:	4805      	ldr	r0, [pc, #20]	; (800854c <__i2b+0x28>)
 8008536:	f240 1145 	movw	r1, #325	; 0x145
 800853a:	f001 fc51 	bl	8009de0 <__assert_func>
 800853e:	2301      	movs	r3, #1
 8008540:	6144      	str	r4, [r0, #20]
 8008542:	6103      	str	r3, [r0, #16]
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	0800bbd9 	.word	0x0800bbd9
 800854c:	0800bbea 	.word	0x0800bbea

08008550 <__multiply>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	4691      	mov	r9, r2
 8008556:	690a      	ldr	r2, [r1, #16]
 8008558:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800855c:	429a      	cmp	r2, r3
 800855e:	bfb8      	it	lt
 8008560:	460b      	movlt	r3, r1
 8008562:	460c      	mov	r4, r1
 8008564:	bfbc      	itt	lt
 8008566:	464c      	movlt	r4, r9
 8008568:	4699      	movlt	r9, r3
 800856a:	6927      	ldr	r7, [r4, #16]
 800856c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008570:	68a3      	ldr	r3, [r4, #8]
 8008572:	6861      	ldr	r1, [r4, #4]
 8008574:	eb07 060a 	add.w	r6, r7, sl
 8008578:	42b3      	cmp	r3, r6
 800857a:	b085      	sub	sp, #20
 800857c:	bfb8      	it	lt
 800857e:	3101      	addlt	r1, #1
 8008580:	f7ff fe90 	bl	80082a4 <_Balloc>
 8008584:	b930      	cbnz	r0, 8008594 <__multiply+0x44>
 8008586:	4602      	mov	r2, r0
 8008588:	4b44      	ldr	r3, [pc, #272]	; (800869c <__multiply+0x14c>)
 800858a:	4845      	ldr	r0, [pc, #276]	; (80086a0 <__multiply+0x150>)
 800858c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008590:	f001 fc26 	bl	8009de0 <__assert_func>
 8008594:	f100 0514 	add.w	r5, r0, #20
 8008598:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800859c:	462b      	mov	r3, r5
 800859e:	2200      	movs	r2, #0
 80085a0:	4543      	cmp	r3, r8
 80085a2:	d321      	bcc.n	80085e8 <__multiply+0x98>
 80085a4:	f104 0314 	add.w	r3, r4, #20
 80085a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085ac:	f109 0314 	add.w	r3, r9, #20
 80085b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80085b4:	9202      	str	r2, [sp, #8]
 80085b6:	1b3a      	subs	r2, r7, r4
 80085b8:	3a15      	subs	r2, #21
 80085ba:	f022 0203 	bic.w	r2, r2, #3
 80085be:	3204      	adds	r2, #4
 80085c0:	f104 0115 	add.w	r1, r4, #21
 80085c4:	428f      	cmp	r7, r1
 80085c6:	bf38      	it	cc
 80085c8:	2204      	movcc	r2, #4
 80085ca:	9201      	str	r2, [sp, #4]
 80085cc:	9a02      	ldr	r2, [sp, #8]
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d80c      	bhi.n	80085ee <__multiply+0x9e>
 80085d4:	2e00      	cmp	r6, #0
 80085d6:	dd03      	ble.n	80085e0 <__multiply+0x90>
 80085d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d05b      	beq.n	8008698 <__multiply+0x148>
 80085e0:	6106      	str	r6, [r0, #16]
 80085e2:	b005      	add	sp, #20
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	f843 2b04 	str.w	r2, [r3], #4
 80085ec:	e7d8      	b.n	80085a0 <__multiply+0x50>
 80085ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80085f2:	f1ba 0f00 	cmp.w	sl, #0
 80085f6:	d024      	beq.n	8008642 <__multiply+0xf2>
 80085f8:	f104 0e14 	add.w	lr, r4, #20
 80085fc:	46a9      	mov	r9, r5
 80085fe:	f04f 0c00 	mov.w	ip, #0
 8008602:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008606:	f8d9 1000 	ldr.w	r1, [r9]
 800860a:	fa1f fb82 	uxth.w	fp, r2
 800860e:	b289      	uxth	r1, r1
 8008610:	fb0a 110b 	mla	r1, sl, fp, r1
 8008614:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008618:	f8d9 2000 	ldr.w	r2, [r9]
 800861c:	4461      	add	r1, ip
 800861e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008622:	fb0a c20b 	mla	r2, sl, fp, ip
 8008626:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800862a:	b289      	uxth	r1, r1
 800862c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008630:	4577      	cmp	r7, lr
 8008632:	f849 1b04 	str.w	r1, [r9], #4
 8008636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800863a:	d8e2      	bhi.n	8008602 <__multiply+0xb2>
 800863c:	9a01      	ldr	r2, [sp, #4]
 800863e:	f845 c002 	str.w	ip, [r5, r2]
 8008642:	9a03      	ldr	r2, [sp, #12]
 8008644:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008648:	3304      	adds	r3, #4
 800864a:	f1b9 0f00 	cmp.w	r9, #0
 800864e:	d021      	beq.n	8008694 <__multiply+0x144>
 8008650:	6829      	ldr	r1, [r5, #0]
 8008652:	f104 0c14 	add.w	ip, r4, #20
 8008656:	46ae      	mov	lr, r5
 8008658:	f04f 0a00 	mov.w	sl, #0
 800865c:	f8bc b000 	ldrh.w	fp, [ip]
 8008660:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008664:	fb09 220b 	mla	r2, r9, fp, r2
 8008668:	4452      	add	r2, sl
 800866a:	b289      	uxth	r1, r1
 800866c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008670:	f84e 1b04 	str.w	r1, [lr], #4
 8008674:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008678:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800867c:	f8be 1000 	ldrh.w	r1, [lr]
 8008680:	fb09 110a 	mla	r1, r9, sl, r1
 8008684:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008688:	4567      	cmp	r7, ip
 800868a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800868e:	d8e5      	bhi.n	800865c <__multiply+0x10c>
 8008690:	9a01      	ldr	r2, [sp, #4]
 8008692:	50a9      	str	r1, [r5, r2]
 8008694:	3504      	adds	r5, #4
 8008696:	e799      	b.n	80085cc <__multiply+0x7c>
 8008698:	3e01      	subs	r6, #1
 800869a:	e79b      	b.n	80085d4 <__multiply+0x84>
 800869c:	0800bbd9 	.word	0x0800bbd9
 80086a0:	0800bbea 	.word	0x0800bbea

080086a4 <__pow5mult>:
 80086a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a8:	4615      	mov	r5, r2
 80086aa:	f012 0203 	ands.w	r2, r2, #3
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	d007      	beq.n	80086c4 <__pow5mult+0x20>
 80086b4:	4c25      	ldr	r4, [pc, #148]	; (800874c <__pow5mult+0xa8>)
 80086b6:	3a01      	subs	r2, #1
 80086b8:	2300      	movs	r3, #0
 80086ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086be:	f7ff fe53 	bl	8008368 <__multadd>
 80086c2:	4607      	mov	r7, r0
 80086c4:	10ad      	asrs	r5, r5, #2
 80086c6:	d03d      	beq.n	8008744 <__pow5mult+0xa0>
 80086c8:	69f4      	ldr	r4, [r6, #28]
 80086ca:	b97c      	cbnz	r4, 80086ec <__pow5mult+0x48>
 80086cc:	2010      	movs	r0, #16
 80086ce:	f7ff fd35 	bl	800813c <malloc>
 80086d2:	4602      	mov	r2, r0
 80086d4:	61f0      	str	r0, [r6, #28]
 80086d6:	b928      	cbnz	r0, 80086e4 <__pow5mult+0x40>
 80086d8:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <__pow5mult+0xac>)
 80086da:	481e      	ldr	r0, [pc, #120]	; (8008754 <__pow5mult+0xb0>)
 80086dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80086e0:	f001 fb7e 	bl	8009de0 <__assert_func>
 80086e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086e8:	6004      	str	r4, [r0, #0]
 80086ea:	60c4      	str	r4, [r0, #12]
 80086ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80086f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086f4:	b94c      	cbnz	r4, 800870a <__pow5mult+0x66>
 80086f6:	f240 2171 	movw	r1, #625	; 0x271
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7ff ff12 	bl	8008524 <__i2b>
 8008700:	2300      	movs	r3, #0
 8008702:	f8c8 0008 	str.w	r0, [r8, #8]
 8008706:	4604      	mov	r4, r0
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	f04f 0900 	mov.w	r9, #0
 800870e:	07eb      	lsls	r3, r5, #31
 8008710:	d50a      	bpl.n	8008728 <__pow5mult+0x84>
 8008712:	4639      	mov	r1, r7
 8008714:	4622      	mov	r2, r4
 8008716:	4630      	mov	r0, r6
 8008718:	f7ff ff1a 	bl	8008550 <__multiply>
 800871c:	4639      	mov	r1, r7
 800871e:	4680      	mov	r8, r0
 8008720:	4630      	mov	r0, r6
 8008722:	f7ff fdff 	bl	8008324 <_Bfree>
 8008726:	4647      	mov	r7, r8
 8008728:	106d      	asrs	r5, r5, #1
 800872a:	d00b      	beq.n	8008744 <__pow5mult+0xa0>
 800872c:	6820      	ldr	r0, [r4, #0]
 800872e:	b938      	cbnz	r0, 8008740 <__pow5mult+0x9c>
 8008730:	4622      	mov	r2, r4
 8008732:	4621      	mov	r1, r4
 8008734:	4630      	mov	r0, r6
 8008736:	f7ff ff0b 	bl	8008550 <__multiply>
 800873a:	6020      	str	r0, [r4, #0]
 800873c:	f8c0 9000 	str.w	r9, [r0]
 8008740:	4604      	mov	r4, r0
 8008742:	e7e4      	b.n	800870e <__pow5mult+0x6a>
 8008744:	4638      	mov	r0, r7
 8008746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800874a:	bf00      	nop
 800874c:	0800bd38 	.word	0x0800bd38
 8008750:	0800bb6a 	.word	0x0800bb6a
 8008754:	0800bbea 	.word	0x0800bbea

08008758 <__lshift>:
 8008758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	460c      	mov	r4, r1
 800875e:	6849      	ldr	r1, [r1, #4]
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	4607      	mov	r7, r0
 800876a:	4691      	mov	r9, r2
 800876c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008770:	f108 0601 	add.w	r6, r8, #1
 8008774:	42b3      	cmp	r3, r6
 8008776:	db0b      	blt.n	8008790 <__lshift+0x38>
 8008778:	4638      	mov	r0, r7
 800877a:	f7ff fd93 	bl	80082a4 <_Balloc>
 800877e:	4605      	mov	r5, r0
 8008780:	b948      	cbnz	r0, 8008796 <__lshift+0x3e>
 8008782:	4602      	mov	r2, r0
 8008784:	4b28      	ldr	r3, [pc, #160]	; (8008828 <__lshift+0xd0>)
 8008786:	4829      	ldr	r0, [pc, #164]	; (800882c <__lshift+0xd4>)
 8008788:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800878c:	f001 fb28 	bl	8009de0 <__assert_func>
 8008790:	3101      	adds	r1, #1
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	e7ee      	b.n	8008774 <__lshift+0x1c>
 8008796:	2300      	movs	r3, #0
 8008798:	f100 0114 	add.w	r1, r0, #20
 800879c:	f100 0210 	add.w	r2, r0, #16
 80087a0:	4618      	mov	r0, r3
 80087a2:	4553      	cmp	r3, sl
 80087a4:	db33      	blt.n	800880e <__lshift+0xb6>
 80087a6:	6920      	ldr	r0, [r4, #16]
 80087a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087ac:	f104 0314 	add.w	r3, r4, #20
 80087b0:	f019 091f 	ands.w	r9, r9, #31
 80087b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087bc:	d02b      	beq.n	8008816 <__lshift+0xbe>
 80087be:	f1c9 0e20 	rsb	lr, r9, #32
 80087c2:	468a      	mov	sl, r1
 80087c4:	2200      	movs	r2, #0
 80087c6:	6818      	ldr	r0, [r3, #0]
 80087c8:	fa00 f009 	lsl.w	r0, r0, r9
 80087cc:	4310      	orrs	r0, r2
 80087ce:	f84a 0b04 	str.w	r0, [sl], #4
 80087d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d6:	459c      	cmp	ip, r3
 80087d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80087dc:	d8f3      	bhi.n	80087c6 <__lshift+0x6e>
 80087de:	ebac 0304 	sub.w	r3, ip, r4
 80087e2:	3b15      	subs	r3, #21
 80087e4:	f023 0303 	bic.w	r3, r3, #3
 80087e8:	3304      	adds	r3, #4
 80087ea:	f104 0015 	add.w	r0, r4, #21
 80087ee:	4584      	cmp	ip, r0
 80087f0:	bf38      	it	cc
 80087f2:	2304      	movcc	r3, #4
 80087f4:	50ca      	str	r2, [r1, r3]
 80087f6:	b10a      	cbz	r2, 80087fc <__lshift+0xa4>
 80087f8:	f108 0602 	add.w	r6, r8, #2
 80087fc:	3e01      	subs	r6, #1
 80087fe:	4638      	mov	r0, r7
 8008800:	612e      	str	r6, [r5, #16]
 8008802:	4621      	mov	r1, r4
 8008804:	f7ff fd8e 	bl	8008324 <_Bfree>
 8008808:	4628      	mov	r0, r5
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008812:	3301      	adds	r3, #1
 8008814:	e7c5      	b.n	80087a2 <__lshift+0x4a>
 8008816:	3904      	subs	r1, #4
 8008818:	f853 2b04 	ldr.w	r2, [r3], #4
 800881c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008820:	459c      	cmp	ip, r3
 8008822:	d8f9      	bhi.n	8008818 <__lshift+0xc0>
 8008824:	e7ea      	b.n	80087fc <__lshift+0xa4>
 8008826:	bf00      	nop
 8008828:	0800bbd9 	.word	0x0800bbd9
 800882c:	0800bbea 	.word	0x0800bbea

08008830 <__mcmp>:
 8008830:	b530      	push	{r4, r5, lr}
 8008832:	6902      	ldr	r2, [r0, #16]
 8008834:	690c      	ldr	r4, [r1, #16]
 8008836:	1b12      	subs	r2, r2, r4
 8008838:	d10e      	bne.n	8008858 <__mcmp+0x28>
 800883a:	f100 0314 	add.w	r3, r0, #20
 800883e:	3114      	adds	r1, #20
 8008840:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008844:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008848:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800884c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008850:	42a5      	cmp	r5, r4
 8008852:	d003      	beq.n	800885c <__mcmp+0x2c>
 8008854:	d305      	bcc.n	8008862 <__mcmp+0x32>
 8008856:	2201      	movs	r2, #1
 8008858:	4610      	mov	r0, r2
 800885a:	bd30      	pop	{r4, r5, pc}
 800885c:	4283      	cmp	r3, r0
 800885e:	d3f3      	bcc.n	8008848 <__mcmp+0x18>
 8008860:	e7fa      	b.n	8008858 <__mcmp+0x28>
 8008862:	f04f 32ff 	mov.w	r2, #4294967295
 8008866:	e7f7      	b.n	8008858 <__mcmp+0x28>

08008868 <__mdiff>:
 8008868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	460c      	mov	r4, r1
 800886e:	4606      	mov	r6, r0
 8008870:	4611      	mov	r1, r2
 8008872:	4620      	mov	r0, r4
 8008874:	4690      	mov	r8, r2
 8008876:	f7ff ffdb 	bl	8008830 <__mcmp>
 800887a:	1e05      	subs	r5, r0, #0
 800887c:	d110      	bne.n	80088a0 <__mdiff+0x38>
 800887e:	4629      	mov	r1, r5
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff fd0f 	bl	80082a4 <_Balloc>
 8008886:	b930      	cbnz	r0, 8008896 <__mdiff+0x2e>
 8008888:	4b3a      	ldr	r3, [pc, #232]	; (8008974 <__mdiff+0x10c>)
 800888a:	4602      	mov	r2, r0
 800888c:	f240 2137 	movw	r1, #567	; 0x237
 8008890:	4839      	ldr	r0, [pc, #228]	; (8008978 <__mdiff+0x110>)
 8008892:	f001 faa5 	bl	8009de0 <__assert_func>
 8008896:	2301      	movs	r3, #1
 8008898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800889c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	bfa4      	itt	ge
 80088a2:	4643      	movge	r3, r8
 80088a4:	46a0      	movge	r8, r4
 80088a6:	4630      	mov	r0, r6
 80088a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088ac:	bfa6      	itte	ge
 80088ae:	461c      	movge	r4, r3
 80088b0:	2500      	movge	r5, #0
 80088b2:	2501      	movlt	r5, #1
 80088b4:	f7ff fcf6 	bl	80082a4 <_Balloc>
 80088b8:	b920      	cbnz	r0, 80088c4 <__mdiff+0x5c>
 80088ba:	4b2e      	ldr	r3, [pc, #184]	; (8008974 <__mdiff+0x10c>)
 80088bc:	4602      	mov	r2, r0
 80088be:	f240 2145 	movw	r1, #581	; 0x245
 80088c2:	e7e5      	b.n	8008890 <__mdiff+0x28>
 80088c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088c8:	6926      	ldr	r6, [r4, #16]
 80088ca:	60c5      	str	r5, [r0, #12]
 80088cc:	f104 0914 	add.w	r9, r4, #20
 80088d0:	f108 0514 	add.w	r5, r8, #20
 80088d4:	f100 0e14 	add.w	lr, r0, #20
 80088d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088e0:	f108 0210 	add.w	r2, r8, #16
 80088e4:	46f2      	mov	sl, lr
 80088e6:	2100      	movs	r1, #0
 80088e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80088ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088f0:	fa11 f88b 	uxtah	r8, r1, fp
 80088f4:	b299      	uxth	r1, r3
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	eba8 0801 	sub.w	r8, r8, r1
 80088fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008900:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008904:	fa1f f888 	uxth.w	r8, r8
 8008908:	1419      	asrs	r1, r3, #16
 800890a:	454e      	cmp	r6, r9
 800890c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008910:	f84a 3b04 	str.w	r3, [sl], #4
 8008914:	d8e8      	bhi.n	80088e8 <__mdiff+0x80>
 8008916:	1b33      	subs	r3, r6, r4
 8008918:	3b15      	subs	r3, #21
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	3304      	adds	r3, #4
 8008920:	3415      	adds	r4, #21
 8008922:	42a6      	cmp	r6, r4
 8008924:	bf38      	it	cc
 8008926:	2304      	movcc	r3, #4
 8008928:	441d      	add	r5, r3
 800892a:	4473      	add	r3, lr
 800892c:	469e      	mov	lr, r3
 800892e:	462e      	mov	r6, r5
 8008930:	4566      	cmp	r6, ip
 8008932:	d30e      	bcc.n	8008952 <__mdiff+0xea>
 8008934:	f10c 0203 	add.w	r2, ip, #3
 8008938:	1b52      	subs	r2, r2, r5
 800893a:	f022 0203 	bic.w	r2, r2, #3
 800893e:	3d03      	subs	r5, #3
 8008940:	45ac      	cmp	ip, r5
 8008942:	bf38      	it	cc
 8008944:	2200      	movcc	r2, #0
 8008946:	4413      	add	r3, r2
 8008948:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800894c:	b17a      	cbz	r2, 800896e <__mdiff+0x106>
 800894e:	6107      	str	r7, [r0, #16]
 8008950:	e7a4      	b.n	800889c <__mdiff+0x34>
 8008952:	f856 8b04 	ldr.w	r8, [r6], #4
 8008956:	fa11 f288 	uxtah	r2, r1, r8
 800895a:	1414      	asrs	r4, r2, #16
 800895c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008960:	b292      	uxth	r2, r2
 8008962:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008966:	f84e 2b04 	str.w	r2, [lr], #4
 800896a:	1421      	asrs	r1, r4, #16
 800896c:	e7e0      	b.n	8008930 <__mdiff+0xc8>
 800896e:	3f01      	subs	r7, #1
 8008970:	e7ea      	b.n	8008948 <__mdiff+0xe0>
 8008972:	bf00      	nop
 8008974:	0800bbd9 	.word	0x0800bbd9
 8008978:	0800bbea 	.word	0x0800bbea

0800897c <__ulp>:
 800897c:	b082      	sub	sp, #8
 800897e:	ed8d 0b00 	vstr	d0, [sp]
 8008982:	9a01      	ldr	r2, [sp, #4]
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <__ulp+0x48>)
 8008986:	4013      	ands	r3, r2
 8008988:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800898c:	2b00      	cmp	r3, #0
 800898e:	dc08      	bgt.n	80089a2 <__ulp+0x26>
 8008990:	425b      	negs	r3, r3
 8008992:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008996:	ea4f 5223 	mov.w	r2, r3, asr #20
 800899a:	da04      	bge.n	80089a6 <__ulp+0x2a>
 800899c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089a0:	4113      	asrs	r3, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	e008      	b.n	80089b8 <__ulp+0x3c>
 80089a6:	f1a2 0314 	sub.w	r3, r2, #20
 80089aa:	2b1e      	cmp	r3, #30
 80089ac:	bfda      	itte	le
 80089ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80089b2:	40da      	lsrle	r2, r3
 80089b4:	2201      	movgt	r2, #1
 80089b6:	2300      	movs	r3, #0
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	ec41 0b10 	vmov	d0, r0, r1
 80089c0:	b002      	add	sp, #8
 80089c2:	4770      	bx	lr
 80089c4:	7ff00000 	.word	0x7ff00000

080089c8 <__b2d>:
 80089c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	6906      	ldr	r6, [r0, #16]
 80089ce:	f100 0814 	add.w	r8, r0, #20
 80089d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80089d6:	1f37      	subs	r7, r6, #4
 80089d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089dc:	4610      	mov	r0, r2
 80089de:	f7ff fd53 	bl	8008488 <__hi0bits>
 80089e2:	f1c0 0320 	rsb	r3, r0, #32
 80089e6:	280a      	cmp	r0, #10
 80089e8:	600b      	str	r3, [r1, #0]
 80089ea:	491b      	ldr	r1, [pc, #108]	; (8008a58 <__b2d+0x90>)
 80089ec:	dc15      	bgt.n	8008a1a <__b2d+0x52>
 80089ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80089f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80089f6:	45b8      	cmp	r8, r7
 80089f8:	ea43 0501 	orr.w	r5, r3, r1
 80089fc:	bf34      	ite	cc
 80089fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a02:	2300      	movcs	r3, #0
 8008a04:	3015      	adds	r0, #21
 8008a06:	fa02 f000 	lsl.w	r0, r2, r0
 8008a0a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008a0e:	4303      	orrs	r3, r0
 8008a10:	461c      	mov	r4, r3
 8008a12:	ec45 4b10 	vmov	d0, r4, r5
 8008a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1a:	45b8      	cmp	r8, r7
 8008a1c:	bf3a      	itte	cc
 8008a1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a22:	f1a6 0708 	subcc.w	r7, r6, #8
 8008a26:	2300      	movcs	r3, #0
 8008a28:	380b      	subs	r0, #11
 8008a2a:	d012      	beq.n	8008a52 <__b2d+0x8a>
 8008a2c:	f1c0 0120 	rsb	r1, r0, #32
 8008a30:	fa23 f401 	lsr.w	r4, r3, r1
 8008a34:	4082      	lsls	r2, r0
 8008a36:	4322      	orrs	r2, r4
 8008a38:	4547      	cmp	r7, r8
 8008a3a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008a3e:	bf8c      	ite	hi
 8008a40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008a44:	2200      	movls	r2, #0
 8008a46:	4083      	lsls	r3, r0
 8008a48:	40ca      	lsrs	r2, r1
 8008a4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	e7de      	b.n	8008a10 <__b2d+0x48>
 8008a52:	ea42 0501 	orr.w	r5, r2, r1
 8008a56:	e7db      	b.n	8008a10 <__b2d+0x48>
 8008a58:	3ff00000 	.word	0x3ff00000

08008a5c <__d2b>:
 8008a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a60:	460f      	mov	r7, r1
 8008a62:	2101      	movs	r1, #1
 8008a64:	ec59 8b10 	vmov	r8, r9, d0
 8008a68:	4616      	mov	r6, r2
 8008a6a:	f7ff fc1b 	bl	80082a4 <_Balloc>
 8008a6e:	4604      	mov	r4, r0
 8008a70:	b930      	cbnz	r0, 8008a80 <__d2b+0x24>
 8008a72:	4602      	mov	r2, r0
 8008a74:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <__d2b+0xac>)
 8008a76:	4825      	ldr	r0, [pc, #148]	; (8008b0c <__d2b+0xb0>)
 8008a78:	f240 310f 	movw	r1, #783	; 0x30f
 8008a7c:	f001 f9b0 	bl	8009de0 <__assert_func>
 8008a80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a88:	bb2d      	cbnz	r5, 8008ad6 <__d2b+0x7a>
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	f1b8 0300 	subs.w	r3, r8, #0
 8008a90:	d026      	beq.n	8008ae0 <__d2b+0x84>
 8008a92:	4668      	mov	r0, sp
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	f7ff fd17 	bl	80084c8 <__lo0bits>
 8008a9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a9e:	b1e8      	cbz	r0, 8008adc <__d2b+0x80>
 8008aa0:	f1c0 0320 	rsb	r3, r0, #32
 8008aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	40c2      	lsrs	r2, r0
 8008aac:	6163      	str	r3, [r4, #20]
 8008aae:	9201      	str	r2, [sp, #4]
 8008ab0:	9b01      	ldr	r3, [sp, #4]
 8008ab2:	61a3      	str	r3, [r4, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bf14      	ite	ne
 8008ab8:	2202      	movne	r2, #2
 8008aba:	2201      	moveq	r2, #1
 8008abc:	6122      	str	r2, [r4, #16]
 8008abe:	b1bd      	cbz	r5, 8008af0 <__d2b+0x94>
 8008ac0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ac4:	4405      	add	r5, r0
 8008ac6:	603d      	str	r5, [r7, #0]
 8008ac8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	b003      	add	sp, #12
 8008ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ada:	e7d6      	b.n	8008a8a <__d2b+0x2e>
 8008adc:	6161      	str	r1, [r4, #20]
 8008ade:	e7e7      	b.n	8008ab0 <__d2b+0x54>
 8008ae0:	a801      	add	r0, sp, #4
 8008ae2:	f7ff fcf1 	bl	80084c8 <__lo0bits>
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	6163      	str	r3, [r4, #20]
 8008aea:	3020      	adds	r0, #32
 8008aec:	2201      	movs	r2, #1
 8008aee:	e7e5      	b.n	8008abc <__d2b+0x60>
 8008af0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008af8:	6038      	str	r0, [r7, #0]
 8008afa:	6918      	ldr	r0, [r3, #16]
 8008afc:	f7ff fcc4 	bl	8008488 <__hi0bits>
 8008b00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b04:	e7e2      	b.n	8008acc <__d2b+0x70>
 8008b06:	bf00      	nop
 8008b08:	0800bbd9 	.word	0x0800bbd9
 8008b0c:	0800bbea 	.word	0x0800bbea

08008b10 <__ratio>:
 8008b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	4688      	mov	r8, r1
 8008b16:	4669      	mov	r1, sp
 8008b18:	4681      	mov	r9, r0
 8008b1a:	f7ff ff55 	bl	80089c8 <__b2d>
 8008b1e:	a901      	add	r1, sp, #4
 8008b20:	4640      	mov	r0, r8
 8008b22:	ec55 4b10 	vmov	r4, r5, d0
 8008b26:	f7ff ff4f 	bl	80089c8 <__b2d>
 8008b2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b32:	eba3 0c02 	sub.w	ip, r3, r2
 8008b36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b40:	ec51 0b10 	vmov	r0, r1, d0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bfd6      	itet	le
 8008b48:	460a      	movle	r2, r1
 8008b4a:	462a      	movgt	r2, r5
 8008b4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b50:	468b      	mov	fp, r1
 8008b52:	462f      	mov	r7, r5
 8008b54:	bfd4      	ite	le
 8008b56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b5e:	4620      	mov	r0, r4
 8008b60:	ee10 2a10 	vmov	r2, s0
 8008b64:	465b      	mov	r3, fp
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f7 fe78 	bl	800085c <__aeabi_ddiv>
 8008b6c:	ec41 0b10 	vmov	d0, r0, r1
 8008b70:	b003      	add	sp, #12
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b76 <__copybits>:
 8008b76:	3901      	subs	r1, #1
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	1149      	asrs	r1, r1, #5
 8008b7c:	6914      	ldr	r4, [r2, #16]
 8008b7e:	3101      	adds	r1, #1
 8008b80:	f102 0314 	add.w	r3, r2, #20
 8008b84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b8c:	1f05      	subs	r5, r0, #4
 8008b8e:	42a3      	cmp	r3, r4
 8008b90:	d30c      	bcc.n	8008bac <__copybits+0x36>
 8008b92:	1aa3      	subs	r3, r4, r2
 8008b94:	3b11      	subs	r3, #17
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	3211      	adds	r2, #17
 8008b9c:	42a2      	cmp	r2, r4
 8008b9e:	bf88      	it	hi
 8008ba0:	2300      	movhi	r3, #0
 8008ba2:	4418      	add	r0, r3
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	4288      	cmp	r0, r1
 8008ba8:	d305      	bcc.n	8008bb6 <__copybits+0x40>
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	f853 6b04 	ldr.w	r6, [r3], #4
 8008bb0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008bb4:	e7eb      	b.n	8008b8e <__copybits+0x18>
 8008bb6:	f840 3b04 	str.w	r3, [r0], #4
 8008bba:	e7f4      	b.n	8008ba6 <__copybits+0x30>

08008bbc <__any_on>:
 8008bbc:	f100 0214 	add.w	r2, r0, #20
 8008bc0:	6900      	ldr	r0, [r0, #16]
 8008bc2:	114b      	asrs	r3, r1, #5
 8008bc4:	4298      	cmp	r0, r3
 8008bc6:	b510      	push	{r4, lr}
 8008bc8:	db11      	blt.n	8008bee <__any_on+0x32>
 8008bca:	dd0a      	ble.n	8008be2 <__any_on+0x26>
 8008bcc:	f011 011f 	ands.w	r1, r1, #31
 8008bd0:	d007      	beq.n	8008be2 <__any_on+0x26>
 8008bd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bd6:	fa24 f001 	lsr.w	r0, r4, r1
 8008bda:	fa00 f101 	lsl.w	r1, r0, r1
 8008bde:	428c      	cmp	r4, r1
 8008be0:	d10b      	bne.n	8008bfa <__any_on+0x3e>
 8008be2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d803      	bhi.n	8008bf2 <__any_on+0x36>
 8008bea:	2000      	movs	r0, #0
 8008bec:	bd10      	pop	{r4, pc}
 8008bee:	4603      	mov	r3, r0
 8008bf0:	e7f7      	b.n	8008be2 <__any_on+0x26>
 8008bf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bf6:	2900      	cmp	r1, #0
 8008bf8:	d0f5      	beq.n	8008be6 <__any_on+0x2a>
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	e7f6      	b.n	8008bec <__any_on+0x30>

08008bfe <sulp>:
 8008bfe:	b570      	push	{r4, r5, r6, lr}
 8008c00:	4604      	mov	r4, r0
 8008c02:	460d      	mov	r5, r1
 8008c04:	ec45 4b10 	vmov	d0, r4, r5
 8008c08:	4616      	mov	r6, r2
 8008c0a:	f7ff feb7 	bl	800897c <__ulp>
 8008c0e:	ec51 0b10 	vmov	r0, r1, d0
 8008c12:	b17e      	cbz	r6, 8008c34 <sulp+0x36>
 8008c14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dd09      	ble.n	8008c34 <sulp+0x36>
 8008c20:	051b      	lsls	r3, r3, #20
 8008c22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c26:	2400      	movs	r4, #0
 8008c28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	462b      	mov	r3, r5
 8008c30:	f7f7 fcea 	bl	8000608 <__aeabi_dmul>
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c38 <_strtod_l>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	ed2d 8b02 	vpush	{d8}
 8008c40:	b09b      	sub	sp, #108	; 0x6c
 8008c42:	4604      	mov	r4, r0
 8008c44:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c46:	2200      	movs	r2, #0
 8008c48:	9216      	str	r2, [sp, #88]	; 0x58
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	f04f 0800 	mov.w	r8, #0
 8008c50:	f04f 0900 	mov.w	r9, #0
 8008c54:	460a      	mov	r2, r1
 8008c56:	9215      	str	r2, [sp, #84]	; 0x54
 8008c58:	7811      	ldrb	r1, [r2, #0]
 8008c5a:	292b      	cmp	r1, #43	; 0x2b
 8008c5c:	d04c      	beq.n	8008cf8 <_strtod_l+0xc0>
 8008c5e:	d83a      	bhi.n	8008cd6 <_strtod_l+0x9e>
 8008c60:	290d      	cmp	r1, #13
 8008c62:	d834      	bhi.n	8008cce <_strtod_l+0x96>
 8008c64:	2908      	cmp	r1, #8
 8008c66:	d834      	bhi.n	8008cd2 <_strtod_l+0x9a>
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	d03d      	beq.n	8008ce8 <_strtod_l+0xb0>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	920a      	str	r2, [sp, #40]	; 0x28
 8008c70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008c72:	7832      	ldrb	r2, [r6, #0]
 8008c74:	2a30      	cmp	r2, #48	; 0x30
 8008c76:	f040 80b4 	bne.w	8008de2 <_strtod_l+0x1aa>
 8008c7a:	7872      	ldrb	r2, [r6, #1]
 8008c7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c80:	2a58      	cmp	r2, #88	; 0x58
 8008c82:	d170      	bne.n	8008d66 <_strtod_l+0x12e>
 8008c84:	9302      	str	r3, [sp, #8]
 8008c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	ab16      	add	r3, sp, #88	; 0x58
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	4a8e      	ldr	r2, [pc, #568]	; (8008ec8 <_strtod_l+0x290>)
 8008c90:	ab17      	add	r3, sp, #92	; 0x5c
 8008c92:	a915      	add	r1, sp, #84	; 0x54
 8008c94:	4620      	mov	r0, r4
 8008c96:	f001 f93f 	bl	8009f18 <__gethex>
 8008c9a:	f010 070f 	ands.w	r7, r0, #15
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	d005      	beq.n	8008cae <_strtod_l+0x76>
 8008ca2:	2f06      	cmp	r7, #6
 8008ca4:	d12a      	bne.n	8008cfc <_strtod_l+0xc4>
 8008ca6:	3601      	adds	r6, #1
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9615      	str	r6, [sp, #84]	; 0x54
 8008cac:	930a      	str	r3, [sp, #40]	; 0x28
 8008cae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f040 857f 	bne.w	80097b4 <_strtod_l+0xb7c>
 8008cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb8:	b1db      	cbz	r3, 8008cf2 <_strtod_l+0xba>
 8008cba:	4642      	mov	r2, r8
 8008cbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008cc0:	ec43 2b10 	vmov	d0, r2, r3
 8008cc4:	b01b      	add	sp, #108	; 0x6c
 8008cc6:	ecbd 8b02 	vpop	{d8}
 8008cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cce:	2920      	cmp	r1, #32
 8008cd0:	d1cc      	bne.n	8008c6c <_strtod_l+0x34>
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	e7bf      	b.n	8008c56 <_strtod_l+0x1e>
 8008cd6:	292d      	cmp	r1, #45	; 0x2d
 8008cd8:	d1c8      	bne.n	8008c6c <_strtod_l+0x34>
 8008cda:	2101      	movs	r1, #1
 8008cdc:	910a      	str	r1, [sp, #40]	; 0x28
 8008cde:	1c51      	adds	r1, r2, #1
 8008ce0:	9115      	str	r1, [sp, #84]	; 0x54
 8008ce2:	7852      	ldrb	r2, [r2, #1]
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	d1c3      	bne.n	8008c70 <_strtod_l+0x38>
 8008ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cea:	9515      	str	r5, [sp, #84]	; 0x54
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 855f 	bne.w	80097b0 <_strtod_l+0xb78>
 8008cf2:	4642      	mov	r2, r8
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	e7e3      	b.n	8008cc0 <_strtod_l+0x88>
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	e7ef      	b.n	8008cdc <_strtod_l+0xa4>
 8008cfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008cfe:	b13a      	cbz	r2, 8008d10 <_strtod_l+0xd8>
 8008d00:	2135      	movs	r1, #53	; 0x35
 8008d02:	a818      	add	r0, sp, #96	; 0x60
 8008d04:	f7ff ff37 	bl	8008b76 <__copybits>
 8008d08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f7ff fb0a 	bl	8008324 <_Bfree>
 8008d10:	3f01      	subs	r7, #1
 8008d12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d14:	2f04      	cmp	r7, #4
 8008d16:	d806      	bhi.n	8008d26 <_strtod_l+0xee>
 8008d18:	e8df f007 	tbb	[pc, r7]
 8008d1c:	201d0314 	.word	0x201d0314
 8008d20:	14          	.byte	0x14
 8008d21:	00          	.byte	0x00
 8008d22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008d26:	05e9      	lsls	r1, r5, #23
 8008d28:	bf48      	it	mi
 8008d2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d32:	0d1b      	lsrs	r3, r3, #20
 8008d34:	051b      	lsls	r3, r3, #20
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1b9      	bne.n	8008cae <_strtod_l+0x76>
 8008d3a:	f7fe fb03 	bl	8007344 <__errno>
 8008d3e:	2322      	movs	r3, #34	; 0x22
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	e7b4      	b.n	8008cae <_strtod_l+0x76>
 8008d44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008d48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d54:	e7e7      	b.n	8008d26 <_strtod_l+0xee>
 8008d56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008ed0 <_strtod_l+0x298>
 8008d5a:	e7e4      	b.n	8008d26 <_strtod_l+0xee>
 8008d5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d60:	f04f 38ff 	mov.w	r8, #4294967295
 8008d64:	e7df      	b.n	8008d26 <_strtod_l+0xee>
 8008d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	9215      	str	r2, [sp, #84]	; 0x54
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	2b30      	cmp	r3, #48	; 0x30
 8008d70:	d0f9      	beq.n	8008d66 <_strtod_l+0x12e>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d09b      	beq.n	8008cae <_strtod_l+0x76>
 8008d76:	2301      	movs	r3, #1
 8008d78:	f04f 0a00 	mov.w	sl, #0
 8008d7c:	9304      	str	r3, [sp, #16]
 8008d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d86:	46d3      	mov	fp, sl
 8008d88:	220a      	movs	r2, #10
 8008d8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008d8c:	7806      	ldrb	r6, [r0, #0]
 8008d8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d92:	b2d9      	uxtb	r1, r3
 8008d94:	2909      	cmp	r1, #9
 8008d96:	d926      	bls.n	8008de6 <_strtod_l+0x1ae>
 8008d98:	494c      	ldr	r1, [pc, #304]	; (8008ecc <_strtod_l+0x294>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f000 ffe6 	bl	8009d6c <strncmp>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d030      	beq.n	8008e06 <_strtod_l+0x1ce>
 8008da4:	2000      	movs	r0, #0
 8008da6:	4632      	mov	r2, r6
 8008da8:	9005      	str	r0, [sp, #20]
 8008daa:	465e      	mov	r6, fp
 8008dac:	4603      	mov	r3, r0
 8008dae:	2a65      	cmp	r2, #101	; 0x65
 8008db0:	d001      	beq.n	8008db6 <_strtod_l+0x17e>
 8008db2:	2a45      	cmp	r2, #69	; 0x45
 8008db4:	d113      	bne.n	8008dde <_strtod_l+0x1a6>
 8008db6:	b91e      	cbnz	r6, 8008dc0 <_strtod_l+0x188>
 8008db8:	9a04      	ldr	r2, [sp, #16]
 8008dba:	4302      	orrs	r2, r0
 8008dbc:	d094      	beq.n	8008ce8 <_strtod_l+0xb0>
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008dc2:	1c6a      	adds	r2, r5, #1
 8008dc4:	9215      	str	r2, [sp, #84]	; 0x54
 8008dc6:	786a      	ldrb	r2, [r5, #1]
 8008dc8:	2a2b      	cmp	r2, #43	; 0x2b
 8008dca:	d074      	beq.n	8008eb6 <_strtod_l+0x27e>
 8008dcc:	2a2d      	cmp	r2, #45	; 0x2d
 8008dce:	d078      	beq.n	8008ec2 <_strtod_l+0x28a>
 8008dd0:	f04f 0c00 	mov.w	ip, #0
 8008dd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008dd8:	2909      	cmp	r1, #9
 8008dda:	d97f      	bls.n	8008edc <_strtod_l+0x2a4>
 8008ddc:	9515      	str	r5, [sp, #84]	; 0x54
 8008dde:	2700      	movs	r7, #0
 8008de0:	e09e      	b.n	8008f20 <_strtod_l+0x2e8>
 8008de2:	2300      	movs	r3, #0
 8008de4:	e7c8      	b.n	8008d78 <_strtod_l+0x140>
 8008de6:	f1bb 0f08 	cmp.w	fp, #8
 8008dea:	bfd8      	it	le
 8008dec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008dee:	f100 0001 	add.w	r0, r0, #1
 8008df2:	bfda      	itte	le
 8008df4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008df8:	9309      	strle	r3, [sp, #36]	; 0x24
 8008dfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008dfe:	f10b 0b01 	add.w	fp, fp, #1
 8008e02:	9015      	str	r0, [sp, #84]	; 0x54
 8008e04:	e7c1      	b.n	8008d8a <_strtod_l+0x152>
 8008e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	9215      	str	r2, [sp, #84]	; 0x54
 8008e0c:	785a      	ldrb	r2, [r3, #1]
 8008e0e:	f1bb 0f00 	cmp.w	fp, #0
 8008e12:	d037      	beq.n	8008e84 <_strtod_l+0x24c>
 8008e14:	9005      	str	r0, [sp, #20]
 8008e16:	465e      	mov	r6, fp
 8008e18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e1c:	2b09      	cmp	r3, #9
 8008e1e:	d912      	bls.n	8008e46 <_strtod_l+0x20e>
 8008e20:	2301      	movs	r3, #1
 8008e22:	e7c4      	b.n	8008dae <_strtod_l+0x176>
 8008e24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	9215      	str	r2, [sp, #84]	; 0x54
 8008e2a:	785a      	ldrb	r2, [r3, #1]
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	2a30      	cmp	r2, #48	; 0x30
 8008e30:	d0f8      	beq.n	8008e24 <_strtod_l+0x1ec>
 8008e32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	f200 84c1 	bhi.w	80097be <_strtod_l+0xb86>
 8008e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e3e:	9005      	str	r0, [sp, #20]
 8008e40:	2000      	movs	r0, #0
 8008e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e44:	4606      	mov	r6, r0
 8008e46:	3a30      	subs	r2, #48	; 0x30
 8008e48:	f100 0301 	add.w	r3, r0, #1
 8008e4c:	d014      	beq.n	8008e78 <_strtod_l+0x240>
 8008e4e:	9905      	ldr	r1, [sp, #20]
 8008e50:	4419      	add	r1, r3
 8008e52:	9105      	str	r1, [sp, #20]
 8008e54:	4633      	mov	r3, r6
 8008e56:	eb00 0c06 	add.w	ip, r0, r6
 8008e5a:	210a      	movs	r1, #10
 8008e5c:	4563      	cmp	r3, ip
 8008e5e:	d113      	bne.n	8008e88 <_strtod_l+0x250>
 8008e60:	1833      	adds	r3, r6, r0
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	f106 0601 	add.w	r6, r6, #1
 8008e68:	4406      	add	r6, r0
 8008e6a:	dc1a      	bgt.n	8008ea2 <_strtod_l+0x26a>
 8008e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e6e:	230a      	movs	r3, #10
 8008e70:	fb03 2301 	mla	r3, r3, r1, r2
 8008e74:	9309      	str	r3, [sp, #36]	; 0x24
 8008e76:	2300      	movs	r3, #0
 8008e78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e7a:	1c51      	adds	r1, r2, #1
 8008e7c:	9115      	str	r1, [sp, #84]	; 0x54
 8008e7e:	7852      	ldrb	r2, [r2, #1]
 8008e80:	4618      	mov	r0, r3
 8008e82:	e7c9      	b.n	8008e18 <_strtod_l+0x1e0>
 8008e84:	4658      	mov	r0, fp
 8008e86:	e7d2      	b.n	8008e2e <_strtod_l+0x1f6>
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	f103 0301 	add.w	r3, r3, #1
 8008e8e:	dc03      	bgt.n	8008e98 <_strtod_l+0x260>
 8008e90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e92:	434f      	muls	r7, r1
 8008e94:	9709      	str	r7, [sp, #36]	; 0x24
 8008e96:	e7e1      	b.n	8008e5c <_strtod_l+0x224>
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	bfd8      	it	le
 8008e9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008ea0:	e7dc      	b.n	8008e5c <_strtod_l+0x224>
 8008ea2:	2e10      	cmp	r6, #16
 8008ea4:	bfdc      	itt	le
 8008ea6:	230a      	movle	r3, #10
 8008ea8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008eac:	e7e3      	b.n	8008e76 <_strtod_l+0x23e>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e780      	b.n	8008db8 <_strtod_l+0x180>
 8008eb6:	f04f 0c00 	mov.w	ip, #0
 8008eba:	1caa      	adds	r2, r5, #2
 8008ebc:	9215      	str	r2, [sp, #84]	; 0x54
 8008ebe:	78aa      	ldrb	r2, [r5, #2]
 8008ec0:	e788      	b.n	8008dd4 <_strtod_l+0x19c>
 8008ec2:	f04f 0c01 	mov.w	ip, #1
 8008ec6:	e7f8      	b.n	8008eba <_strtod_l+0x282>
 8008ec8:	0800bd48 	.word	0x0800bd48
 8008ecc:	0800bd44 	.word	0x0800bd44
 8008ed0:	7ff00000 	.word	0x7ff00000
 8008ed4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ed6:	1c51      	adds	r1, r2, #1
 8008ed8:	9115      	str	r1, [sp, #84]	; 0x54
 8008eda:	7852      	ldrb	r2, [r2, #1]
 8008edc:	2a30      	cmp	r2, #48	; 0x30
 8008ede:	d0f9      	beq.n	8008ed4 <_strtod_l+0x29c>
 8008ee0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ee4:	2908      	cmp	r1, #8
 8008ee6:	f63f af7a 	bhi.w	8008dde <_strtod_l+0x1a6>
 8008eea:	3a30      	subs	r2, #48	; 0x30
 8008eec:	9208      	str	r2, [sp, #32]
 8008eee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ef0:	920c      	str	r2, [sp, #48]	; 0x30
 8008ef2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ef4:	1c57      	adds	r7, r2, #1
 8008ef6:	9715      	str	r7, [sp, #84]	; 0x54
 8008ef8:	7852      	ldrb	r2, [r2, #1]
 8008efa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008efe:	f1be 0f09 	cmp.w	lr, #9
 8008f02:	d938      	bls.n	8008f76 <_strtod_l+0x33e>
 8008f04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f06:	1a7f      	subs	r7, r7, r1
 8008f08:	2f08      	cmp	r7, #8
 8008f0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008f0e:	dc03      	bgt.n	8008f18 <_strtod_l+0x2e0>
 8008f10:	9908      	ldr	r1, [sp, #32]
 8008f12:	428f      	cmp	r7, r1
 8008f14:	bfa8      	it	ge
 8008f16:	460f      	movge	r7, r1
 8008f18:	f1bc 0f00 	cmp.w	ip, #0
 8008f1c:	d000      	beq.n	8008f20 <_strtod_l+0x2e8>
 8008f1e:	427f      	negs	r7, r7
 8008f20:	2e00      	cmp	r6, #0
 8008f22:	d14f      	bne.n	8008fc4 <_strtod_l+0x38c>
 8008f24:	9904      	ldr	r1, [sp, #16]
 8008f26:	4301      	orrs	r1, r0
 8008f28:	f47f aec1 	bne.w	8008cae <_strtod_l+0x76>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f47f aedb 	bne.w	8008ce8 <_strtod_l+0xb0>
 8008f32:	2a69      	cmp	r2, #105	; 0x69
 8008f34:	d029      	beq.n	8008f8a <_strtod_l+0x352>
 8008f36:	dc26      	bgt.n	8008f86 <_strtod_l+0x34e>
 8008f38:	2a49      	cmp	r2, #73	; 0x49
 8008f3a:	d026      	beq.n	8008f8a <_strtod_l+0x352>
 8008f3c:	2a4e      	cmp	r2, #78	; 0x4e
 8008f3e:	f47f aed3 	bne.w	8008ce8 <_strtod_l+0xb0>
 8008f42:	499b      	ldr	r1, [pc, #620]	; (80091b0 <_strtod_l+0x578>)
 8008f44:	a815      	add	r0, sp, #84	; 0x54
 8008f46:	f001 fa27 	bl	800a398 <__match>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	f43f aecc 	beq.w	8008ce8 <_strtod_l+0xb0>
 8008f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b28      	cmp	r3, #40	; 0x28
 8008f56:	d12f      	bne.n	8008fb8 <_strtod_l+0x380>
 8008f58:	4996      	ldr	r1, [pc, #600]	; (80091b4 <_strtod_l+0x57c>)
 8008f5a:	aa18      	add	r2, sp, #96	; 0x60
 8008f5c:	a815      	add	r0, sp, #84	; 0x54
 8008f5e:	f001 fa2f 	bl	800a3c0 <__hexnan>
 8008f62:	2805      	cmp	r0, #5
 8008f64:	d128      	bne.n	8008fb8 <_strtod_l+0x380>
 8008f66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008f70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008f74:	e69b      	b.n	8008cae <_strtod_l+0x76>
 8008f76:	9f08      	ldr	r7, [sp, #32]
 8008f78:	210a      	movs	r1, #10
 8008f7a:	fb01 2107 	mla	r1, r1, r7, r2
 8008f7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008f82:	9208      	str	r2, [sp, #32]
 8008f84:	e7b5      	b.n	8008ef2 <_strtod_l+0x2ba>
 8008f86:	2a6e      	cmp	r2, #110	; 0x6e
 8008f88:	e7d9      	b.n	8008f3e <_strtod_l+0x306>
 8008f8a:	498b      	ldr	r1, [pc, #556]	; (80091b8 <_strtod_l+0x580>)
 8008f8c:	a815      	add	r0, sp, #84	; 0x54
 8008f8e:	f001 fa03 	bl	800a398 <__match>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f43f aea8 	beq.w	8008ce8 <_strtod_l+0xb0>
 8008f98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f9a:	4988      	ldr	r1, [pc, #544]	; (80091bc <_strtod_l+0x584>)
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	a815      	add	r0, sp, #84	; 0x54
 8008fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8008fa2:	f001 f9f9 	bl	800a398 <__match>
 8008fa6:	b910      	cbnz	r0, 8008fae <_strtod_l+0x376>
 8008fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008faa:	3301      	adds	r3, #1
 8008fac:	9315      	str	r3, [sp, #84]	; 0x54
 8008fae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80091cc <_strtod_l+0x594>
 8008fb2:	f04f 0800 	mov.w	r8, #0
 8008fb6:	e67a      	b.n	8008cae <_strtod_l+0x76>
 8008fb8:	4881      	ldr	r0, [pc, #516]	; (80091c0 <_strtod_l+0x588>)
 8008fba:	f000 ff09 	bl	8009dd0 <nan>
 8008fbe:	ec59 8b10 	vmov	r8, r9, d0
 8008fc2:	e674      	b.n	8008cae <_strtod_l+0x76>
 8008fc4:	9b05      	ldr	r3, [sp, #20]
 8008fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc8:	1afb      	subs	r3, r7, r3
 8008fca:	f1bb 0f00 	cmp.w	fp, #0
 8008fce:	bf08      	it	eq
 8008fd0:	46b3      	moveq	fp, r6
 8008fd2:	2e10      	cmp	r6, #16
 8008fd4:	9308      	str	r3, [sp, #32]
 8008fd6:	4635      	mov	r5, r6
 8008fd8:	bfa8      	it	ge
 8008fda:	2510      	movge	r5, #16
 8008fdc:	f7f7 fa9a 	bl	8000514 <__aeabi_ui2d>
 8008fe0:	2e09      	cmp	r6, #9
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	4689      	mov	r9, r1
 8008fe6:	dd13      	ble.n	8009010 <_strtod_l+0x3d8>
 8008fe8:	4b76      	ldr	r3, [pc, #472]	; (80091c4 <_strtod_l+0x58c>)
 8008fea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008fee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ff2:	f7f7 fb09 	bl	8000608 <__aeabi_dmul>
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	4689      	mov	r9, r1
 8008ffc:	f7f7 fa8a 	bl	8000514 <__aeabi_ui2d>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4640      	mov	r0, r8
 8009006:	4649      	mov	r1, r9
 8009008:	f7f7 f948 	bl	800029c <__adddf3>
 800900c:	4680      	mov	r8, r0
 800900e:	4689      	mov	r9, r1
 8009010:	2e0f      	cmp	r6, #15
 8009012:	dc38      	bgt.n	8009086 <_strtod_l+0x44e>
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f43f ae49 	beq.w	8008cae <_strtod_l+0x76>
 800901c:	dd24      	ble.n	8009068 <_strtod_l+0x430>
 800901e:	2b16      	cmp	r3, #22
 8009020:	dc0b      	bgt.n	800903a <_strtod_l+0x402>
 8009022:	4968      	ldr	r1, [pc, #416]	; (80091c4 <_strtod_l+0x58c>)
 8009024:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	f7f7 faea 	bl	8000608 <__aeabi_dmul>
 8009034:	4680      	mov	r8, r0
 8009036:	4689      	mov	r9, r1
 8009038:	e639      	b.n	8008cae <_strtod_l+0x76>
 800903a:	9a08      	ldr	r2, [sp, #32]
 800903c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009040:	4293      	cmp	r3, r2
 8009042:	db20      	blt.n	8009086 <_strtod_l+0x44e>
 8009044:	4c5f      	ldr	r4, [pc, #380]	; (80091c4 <_strtod_l+0x58c>)
 8009046:	f1c6 060f 	rsb	r6, r6, #15
 800904a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009056:	f7f7 fad7 	bl	8000608 <__aeabi_dmul>
 800905a:	9b08      	ldr	r3, [sp, #32]
 800905c:	1b9e      	subs	r6, r3, r6
 800905e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009062:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009066:	e7e3      	b.n	8009030 <_strtod_l+0x3f8>
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	3316      	adds	r3, #22
 800906c:	db0b      	blt.n	8009086 <_strtod_l+0x44e>
 800906e:	9b05      	ldr	r3, [sp, #20]
 8009070:	1bdf      	subs	r7, r3, r7
 8009072:	4b54      	ldr	r3, [pc, #336]	; (80091c4 <_strtod_l+0x58c>)
 8009074:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907c:	4640      	mov	r0, r8
 800907e:	4649      	mov	r1, r9
 8009080:	f7f7 fbec 	bl	800085c <__aeabi_ddiv>
 8009084:	e7d6      	b.n	8009034 <_strtod_l+0x3fc>
 8009086:	9b08      	ldr	r3, [sp, #32]
 8009088:	1b75      	subs	r5, r6, r5
 800908a:	441d      	add	r5, r3
 800908c:	2d00      	cmp	r5, #0
 800908e:	dd70      	ble.n	8009172 <_strtod_l+0x53a>
 8009090:	f015 030f 	ands.w	r3, r5, #15
 8009094:	d00a      	beq.n	80090ac <_strtod_l+0x474>
 8009096:	494b      	ldr	r1, [pc, #300]	; (80091c4 <_strtod_l+0x58c>)
 8009098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090a4:	f7f7 fab0 	bl	8000608 <__aeabi_dmul>
 80090a8:	4680      	mov	r8, r0
 80090aa:	4689      	mov	r9, r1
 80090ac:	f035 050f 	bics.w	r5, r5, #15
 80090b0:	d04d      	beq.n	800914e <_strtod_l+0x516>
 80090b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80090b6:	dd22      	ble.n	80090fe <_strtod_l+0x4c6>
 80090b8:	2500      	movs	r5, #0
 80090ba:	46ab      	mov	fp, r5
 80090bc:	9509      	str	r5, [sp, #36]	; 0x24
 80090be:	9505      	str	r5, [sp, #20]
 80090c0:	2322      	movs	r3, #34	; 0x22
 80090c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80091cc <_strtod_l+0x594>
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	f04f 0800 	mov.w	r8, #0
 80090cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f43f aded 	beq.w	8008cae <_strtod_l+0x76>
 80090d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090d6:	4620      	mov	r0, r4
 80090d8:	f7ff f924 	bl	8008324 <_Bfree>
 80090dc:	9905      	ldr	r1, [sp, #20]
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff f920 	bl	8008324 <_Bfree>
 80090e4:	4659      	mov	r1, fp
 80090e6:	4620      	mov	r0, r4
 80090e8:	f7ff f91c 	bl	8008324 <_Bfree>
 80090ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ee:	4620      	mov	r0, r4
 80090f0:	f7ff f918 	bl	8008324 <_Bfree>
 80090f4:	4629      	mov	r1, r5
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7ff f914 	bl	8008324 <_Bfree>
 80090fc:	e5d7      	b.n	8008cae <_strtod_l+0x76>
 80090fe:	4b32      	ldr	r3, [pc, #200]	; (80091c8 <_strtod_l+0x590>)
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	2300      	movs	r3, #0
 8009104:	112d      	asrs	r5, r5, #4
 8009106:	4640      	mov	r0, r8
 8009108:	4649      	mov	r1, r9
 800910a:	469a      	mov	sl, r3
 800910c:	2d01      	cmp	r5, #1
 800910e:	dc21      	bgt.n	8009154 <_strtod_l+0x51c>
 8009110:	b10b      	cbz	r3, 8009116 <_strtod_l+0x4de>
 8009112:	4680      	mov	r8, r0
 8009114:	4689      	mov	r9, r1
 8009116:	492c      	ldr	r1, [pc, #176]	; (80091c8 <_strtod_l+0x590>)
 8009118:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800911c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009128:	f7f7 fa6e 	bl	8000608 <__aeabi_dmul>
 800912c:	4b27      	ldr	r3, [pc, #156]	; (80091cc <_strtod_l+0x594>)
 800912e:	460a      	mov	r2, r1
 8009130:	400b      	ands	r3, r1
 8009132:	4927      	ldr	r1, [pc, #156]	; (80091d0 <_strtod_l+0x598>)
 8009134:	428b      	cmp	r3, r1
 8009136:	4680      	mov	r8, r0
 8009138:	d8be      	bhi.n	80090b8 <_strtod_l+0x480>
 800913a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800913e:	428b      	cmp	r3, r1
 8009140:	bf86      	itte	hi
 8009142:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80091d4 <_strtod_l+0x59c>
 8009146:	f04f 38ff 	movhi.w	r8, #4294967295
 800914a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800914e:	2300      	movs	r3, #0
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	e07b      	b.n	800924c <_strtod_l+0x614>
 8009154:	07ea      	lsls	r2, r5, #31
 8009156:	d505      	bpl.n	8009164 <_strtod_l+0x52c>
 8009158:	9b04      	ldr	r3, [sp, #16]
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 fa53 	bl	8000608 <__aeabi_dmul>
 8009162:	2301      	movs	r3, #1
 8009164:	9a04      	ldr	r2, [sp, #16]
 8009166:	3208      	adds	r2, #8
 8009168:	f10a 0a01 	add.w	sl, sl, #1
 800916c:	106d      	asrs	r5, r5, #1
 800916e:	9204      	str	r2, [sp, #16]
 8009170:	e7cc      	b.n	800910c <_strtod_l+0x4d4>
 8009172:	d0ec      	beq.n	800914e <_strtod_l+0x516>
 8009174:	426d      	negs	r5, r5
 8009176:	f015 020f 	ands.w	r2, r5, #15
 800917a:	d00a      	beq.n	8009192 <_strtod_l+0x55a>
 800917c:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <_strtod_l+0x58c>)
 800917e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009182:	4640      	mov	r0, r8
 8009184:	4649      	mov	r1, r9
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 fb67 	bl	800085c <__aeabi_ddiv>
 800918e:	4680      	mov	r8, r0
 8009190:	4689      	mov	r9, r1
 8009192:	112d      	asrs	r5, r5, #4
 8009194:	d0db      	beq.n	800914e <_strtod_l+0x516>
 8009196:	2d1f      	cmp	r5, #31
 8009198:	dd1e      	ble.n	80091d8 <_strtod_l+0x5a0>
 800919a:	2500      	movs	r5, #0
 800919c:	46ab      	mov	fp, r5
 800919e:	9509      	str	r5, [sp, #36]	; 0x24
 80091a0:	9505      	str	r5, [sp, #20]
 80091a2:	2322      	movs	r3, #34	; 0x22
 80091a4:	f04f 0800 	mov.w	r8, #0
 80091a8:	f04f 0900 	mov.w	r9, #0
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	e78d      	b.n	80090cc <_strtod_l+0x494>
 80091b0:	0800bb31 	.word	0x0800bb31
 80091b4:	0800bd5c 	.word	0x0800bd5c
 80091b8:	0800bb29 	.word	0x0800bb29
 80091bc:	0800bb60 	.word	0x0800bb60
 80091c0:	0800beed 	.word	0x0800beed
 80091c4:	0800bc70 	.word	0x0800bc70
 80091c8:	0800bc48 	.word	0x0800bc48
 80091cc:	7ff00000 	.word	0x7ff00000
 80091d0:	7ca00000 	.word	0x7ca00000
 80091d4:	7fefffff 	.word	0x7fefffff
 80091d8:	f015 0310 	ands.w	r3, r5, #16
 80091dc:	bf18      	it	ne
 80091de:	236a      	movne	r3, #106	; 0x6a
 80091e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009584 <_strtod_l+0x94c>
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	4640      	mov	r0, r8
 80091e8:	4649      	mov	r1, r9
 80091ea:	2300      	movs	r3, #0
 80091ec:	07ea      	lsls	r2, r5, #31
 80091ee:	d504      	bpl.n	80091fa <_strtod_l+0x5c2>
 80091f0:	e9da 2300 	ldrd	r2, r3, [sl]
 80091f4:	f7f7 fa08 	bl	8000608 <__aeabi_dmul>
 80091f8:	2301      	movs	r3, #1
 80091fa:	106d      	asrs	r5, r5, #1
 80091fc:	f10a 0a08 	add.w	sl, sl, #8
 8009200:	d1f4      	bne.n	80091ec <_strtod_l+0x5b4>
 8009202:	b10b      	cbz	r3, 8009208 <_strtod_l+0x5d0>
 8009204:	4680      	mov	r8, r0
 8009206:	4689      	mov	r9, r1
 8009208:	9b04      	ldr	r3, [sp, #16]
 800920a:	b1bb      	cbz	r3, 800923c <_strtod_l+0x604>
 800920c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009210:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009214:	2b00      	cmp	r3, #0
 8009216:	4649      	mov	r1, r9
 8009218:	dd10      	ble.n	800923c <_strtod_l+0x604>
 800921a:	2b1f      	cmp	r3, #31
 800921c:	f340 811e 	ble.w	800945c <_strtod_l+0x824>
 8009220:	2b34      	cmp	r3, #52	; 0x34
 8009222:	bfde      	ittt	le
 8009224:	f04f 33ff 	movle.w	r3, #4294967295
 8009228:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800922c:	4093      	lslle	r3, r2
 800922e:	f04f 0800 	mov.w	r8, #0
 8009232:	bfcc      	ite	gt
 8009234:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009238:	ea03 0901 	andle.w	r9, r3, r1
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	4640      	mov	r0, r8
 8009242:	4649      	mov	r1, r9
 8009244:	f7f7 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8009248:	2800      	cmp	r0, #0
 800924a:	d1a6      	bne.n	800919a <_strtod_l+0x562>
 800924c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009252:	4633      	mov	r3, r6
 8009254:	465a      	mov	r2, fp
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff f8cc 	bl	80083f4 <__s2b>
 800925c:	9009      	str	r0, [sp, #36]	; 0x24
 800925e:	2800      	cmp	r0, #0
 8009260:	f43f af2a 	beq.w	80090b8 <_strtod_l+0x480>
 8009264:	9a08      	ldr	r2, [sp, #32]
 8009266:	9b05      	ldr	r3, [sp, #20]
 8009268:	2a00      	cmp	r2, #0
 800926a:	eba3 0307 	sub.w	r3, r3, r7
 800926e:	bfa8      	it	ge
 8009270:	2300      	movge	r3, #0
 8009272:	930c      	str	r3, [sp, #48]	; 0x30
 8009274:	2500      	movs	r5, #0
 8009276:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800927a:	9312      	str	r3, [sp, #72]	; 0x48
 800927c:	46ab      	mov	fp, r5
 800927e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009280:	4620      	mov	r0, r4
 8009282:	6859      	ldr	r1, [r3, #4]
 8009284:	f7ff f80e 	bl	80082a4 <_Balloc>
 8009288:	9005      	str	r0, [sp, #20]
 800928a:	2800      	cmp	r0, #0
 800928c:	f43f af18 	beq.w	80090c0 <_strtod_l+0x488>
 8009290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009292:	691a      	ldr	r2, [r3, #16]
 8009294:	3202      	adds	r2, #2
 8009296:	f103 010c 	add.w	r1, r3, #12
 800929a:	0092      	lsls	r2, r2, #2
 800929c:	300c      	adds	r0, #12
 800929e:	f000 fd87 	bl	8009db0 <memcpy>
 80092a2:	ec49 8b10 	vmov	d0, r8, r9
 80092a6:	aa18      	add	r2, sp, #96	; 0x60
 80092a8:	a917      	add	r1, sp, #92	; 0x5c
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7ff fbd6 	bl	8008a5c <__d2b>
 80092b0:	ec49 8b18 	vmov	d8, r8, r9
 80092b4:	9016      	str	r0, [sp, #88]	; 0x58
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f af02 	beq.w	80090c0 <_strtod_l+0x488>
 80092bc:	2101      	movs	r1, #1
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff f930 	bl	8008524 <__i2b>
 80092c4:	4683      	mov	fp, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f aefa 	beq.w	80090c0 <_strtod_l+0x488>
 80092cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092d0:	2e00      	cmp	r6, #0
 80092d2:	bfab      	itete	ge
 80092d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80092d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80092d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80092de:	bfac      	ite	ge
 80092e0:	eb06 0a03 	addge.w	sl, r6, r3
 80092e4:	1b9f      	sublt	r7, r3, r6
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	1af6      	subs	r6, r6, r3
 80092ea:	4416      	add	r6, r2
 80092ec:	4ba0      	ldr	r3, [pc, #640]	; (8009570 <_strtod_l+0x938>)
 80092ee:	3e01      	subs	r6, #1
 80092f0:	429e      	cmp	r6, r3
 80092f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092f6:	f280 80c4 	bge.w	8009482 <_strtod_l+0x84a>
 80092fa:	1b9b      	subs	r3, r3, r6
 80092fc:	2b1f      	cmp	r3, #31
 80092fe:	eba2 0203 	sub.w	r2, r2, r3
 8009302:	f04f 0101 	mov.w	r1, #1
 8009306:	f300 80b0 	bgt.w	800946a <_strtod_l+0x832>
 800930a:	fa01 f303 	lsl.w	r3, r1, r3
 800930e:	930e      	str	r3, [sp, #56]	; 0x38
 8009310:	2300      	movs	r3, #0
 8009312:	930d      	str	r3, [sp, #52]	; 0x34
 8009314:	eb0a 0602 	add.w	r6, sl, r2
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	45b2      	cmp	sl, r6
 800931c:	4417      	add	r7, r2
 800931e:	441f      	add	r7, r3
 8009320:	4653      	mov	r3, sl
 8009322:	bfa8      	it	ge
 8009324:	4633      	movge	r3, r6
 8009326:	42bb      	cmp	r3, r7
 8009328:	bfa8      	it	ge
 800932a:	463b      	movge	r3, r7
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfc2      	ittt	gt
 8009330:	1af6      	subgt	r6, r6, r3
 8009332:	1aff      	subgt	r7, r7, r3
 8009334:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800933a:	2b00      	cmp	r3, #0
 800933c:	dd17      	ble.n	800936e <_strtod_l+0x736>
 800933e:	4659      	mov	r1, fp
 8009340:	461a      	mov	r2, r3
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff f9ae 	bl	80086a4 <__pow5mult>
 8009348:	4683      	mov	fp, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	f43f aeb8 	beq.w	80090c0 <_strtod_l+0x488>
 8009350:	4601      	mov	r1, r0
 8009352:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009354:	4620      	mov	r0, r4
 8009356:	f7ff f8fb 	bl	8008550 <__multiply>
 800935a:	900b      	str	r0, [sp, #44]	; 0x2c
 800935c:	2800      	cmp	r0, #0
 800935e:	f43f aeaf 	beq.w	80090c0 <_strtod_l+0x488>
 8009362:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009364:	4620      	mov	r0, r4
 8009366:	f7fe ffdd 	bl	8008324 <_Bfree>
 800936a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936c:	9316      	str	r3, [sp, #88]	; 0x58
 800936e:	2e00      	cmp	r6, #0
 8009370:	f300 808c 	bgt.w	800948c <_strtod_l+0x854>
 8009374:	9b08      	ldr	r3, [sp, #32]
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd08      	ble.n	800938c <_strtod_l+0x754>
 800937a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800937c:	9905      	ldr	r1, [sp, #20]
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff f990 	bl	80086a4 <__pow5mult>
 8009384:	9005      	str	r0, [sp, #20]
 8009386:	2800      	cmp	r0, #0
 8009388:	f43f ae9a 	beq.w	80090c0 <_strtod_l+0x488>
 800938c:	2f00      	cmp	r7, #0
 800938e:	dd08      	ble.n	80093a2 <_strtod_l+0x76a>
 8009390:	9905      	ldr	r1, [sp, #20]
 8009392:	463a      	mov	r2, r7
 8009394:	4620      	mov	r0, r4
 8009396:	f7ff f9df 	bl	8008758 <__lshift>
 800939a:	9005      	str	r0, [sp, #20]
 800939c:	2800      	cmp	r0, #0
 800939e:	f43f ae8f 	beq.w	80090c0 <_strtod_l+0x488>
 80093a2:	f1ba 0f00 	cmp.w	sl, #0
 80093a6:	dd08      	ble.n	80093ba <_strtod_l+0x782>
 80093a8:	4659      	mov	r1, fp
 80093aa:	4652      	mov	r2, sl
 80093ac:	4620      	mov	r0, r4
 80093ae:	f7ff f9d3 	bl	8008758 <__lshift>
 80093b2:	4683      	mov	fp, r0
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f43f ae83 	beq.w	80090c0 <_strtod_l+0x488>
 80093ba:	9a05      	ldr	r2, [sp, #20]
 80093bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80093be:	4620      	mov	r0, r4
 80093c0:	f7ff fa52 	bl	8008868 <__mdiff>
 80093c4:	4605      	mov	r5, r0
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f43f ae7a 	beq.w	80090c0 <_strtod_l+0x488>
 80093cc:	68c3      	ldr	r3, [r0, #12]
 80093ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80093d0:	2300      	movs	r3, #0
 80093d2:	60c3      	str	r3, [r0, #12]
 80093d4:	4659      	mov	r1, fp
 80093d6:	f7ff fa2b 	bl	8008830 <__mcmp>
 80093da:	2800      	cmp	r0, #0
 80093dc:	da60      	bge.n	80094a0 <_strtod_l+0x868>
 80093de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e0:	ea53 0308 	orrs.w	r3, r3, r8
 80093e4:	f040 8084 	bne.w	80094f0 <_strtod_l+0x8b8>
 80093e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d17f      	bne.n	80094f0 <_strtod_l+0x8b8>
 80093f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093f4:	0d1b      	lsrs	r3, r3, #20
 80093f6:	051b      	lsls	r3, r3, #20
 80093f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093fc:	d978      	bls.n	80094f0 <_strtod_l+0x8b8>
 80093fe:	696b      	ldr	r3, [r5, #20]
 8009400:	b913      	cbnz	r3, 8009408 <_strtod_l+0x7d0>
 8009402:	692b      	ldr	r3, [r5, #16]
 8009404:	2b01      	cmp	r3, #1
 8009406:	dd73      	ble.n	80094f0 <_strtod_l+0x8b8>
 8009408:	4629      	mov	r1, r5
 800940a:	2201      	movs	r2, #1
 800940c:	4620      	mov	r0, r4
 800940e:	f7ff f9a3 	bl	8008758 <__lshift>
 8009412:	4659      	mov	r1, fp
 8009414:	4605      	mov	r5, r0
 8009416:	f7ff fa0b 	bl	8008830 <__mcmp>
 800941a:	2800      	cmp	r0, #0
 800941c:	dd68      	ble.n	80094f0 <_strtod_l+0x8b8>
 800941e:	9904      	ldr	r1, [sp, #16]
 8009420:	4a54      	ldr	r2, [pc, #336]	; (8009574 <_strtod_l+0x93c>)
 8009422:	464b      	mov	r3, r9
 8009424:	2900      	cmp	r1, #0
 8009426:	f000 8084 	beq.w	8009532 <_strtod_l+0x8fa>
 800942a:	ea02 0109 	and.w	r1, r2, r9
 800942e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009432:	dc7e      	bgt.n	8009532 <_strtod_l+0x8fa>
 8009434:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009438:	f77f aeb3 	ble.w	80091a2 <_strtod_l+0x56a>
 800943c:	4b4e      	ldr	r3, [pc, #312]	; (8009578 <_strtod_l+0x940>)
 800943e:	4640      	mov	r0, r8
 8009440:	4649      	mov	r1, r9
 8009442:	2200      	movs	r2, #0
 8009444:	f7f7 f8e0 	bl	8000608 <__aeabi_dmul>
 8009448:	4b4a      	ldr	r3, [pc, #296]	; (8009574 <_strtod_l+0x93c>)
 800944a:	400b      	ands	r3, r1
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	2b00      	cmp	r3, #0
 8009452:	f47f ae3f 	bne.w	80090d4 <_strtod_l+0x49c>
 8009456:	2322      	movs	r3, #34	; 0x22
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	e63b      	b.n	80090d4 <_strtod_l+0x49c>
 800945c:	f04f 32ff 	mov.w	r2, #4294967295
 8009460:	fa02 f303 	lsl.w	r3, r2, r3
 8009464:	ea03 0808 	and.w	r8, r3, r8
 8009468:	e6e8      	b.n	800923c <_strtod_l+0x604>
 800946a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800946e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009472:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009476:	36e2      	adds	r6, #226	; 0xe2
 8009478:	fa01 f306 	lsl.w	r3, r1, r6
 800947c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009480:	e748      	b.n	8009314 <_strtod_l+0x6dc>
 8009482:	2100      	movs	r1, #0
 8009484:	2301      	movs	r3, #1
 8009486:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800948a:	e743      	b.n	8009314 <_strtod_l+0x6dc>
 800948c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800948e:	4632      	mov	r2, r6
 8009490:	4620      	mov	r0, r4
 8009492:	f7ff f961 	bl	8008758 <__lshift>
 8009496:	9016      	str	r0, [sp, #88]	; 0x58
 8009498:	2800      	cmp	r0, #0
 800949a:	f47f af6b 	bne.w	8009374 <_strtod_l+0x73c>
 800949e:	e60f      	b.n	80090c0 <_strtod_l+0x488>
 80094a0:	46ca      	mov	sl, r9
 80094a2:	d171      	bne.n	8009588 <_strtod_l+0x950>
 80094a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094aa:	b352      	cbz	r2, 8009502 <_strtod_l+0x8ca>
 80094ac:	4a33      	ldr	r2, [pc, #204]	; (800957c <_strtod_l+0x944>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d12a      	bne.n	8009508 <_strtod_l+0x8d0>
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	4641      	mov	r1, r8
 80094b6:	b1fb      	cbz	r3, 80094f8 <_strtod_l+0x8c0>
 80094b8:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <_strtod_l+0x93c>)
 80094ba:	ea09 0303 	and.w	r3, r9, r3
 80094be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	d81a      	bhi.n	80094fe <_strtod_l+0x8c6>
 80094c8:	0d1b      	lsrs	r3, r3, #20
 80094ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094ce:	fa02 f303 	lsl.w	r3, r2, r3
 80094d2:	4299      	cmp	r1, r3
 80094d4:	d118      	bne.n	8009508 <_strtod_l+0x8d0>
 80094d6:	4b2a      	ldr	r3, [pc, #168]	; (8009580 <_strtod_l+0x948>)
 80094d8:	459a      	cmp	sl, r3
 80094da:	d102      	bne.n	80094e2 <_strtod_l+0x8aa>
 80094dc:	3101      	adds	r1, #1
 80094de:	f43f adef 	beq.w	80090c0 <_strtod_l+0x488>
 80094e2:	4b24      	ldr	r3, [pc, #144]	; (8009574 <_strtod_l+0x93c>)
 80094e4:	ea0a 0303 	and.w	r3, sl, r3
 80094e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80094ec:	f04f 0800 	mov.w	r8, #0
 80094f0:	9b04      	ldr	r3, [sp, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1a2      	bne.n	800943c <_strtod_l+0x804>
 80094f6:	e5ed      	b.n	80090d4 <_strtod_l+0x49c>
 80094f8:	f04f 33ff 	mov.w	r3, #4294967295
 80094fc:	e7e9      	b.n	80094d2 <_strtod_l+0x89a>
 80094fe:	4613      	mov	r3, r2
 8009500:	e7e7      	b.n	80094d2 <_strtod_l+0x89a>
 8009502:	ea53 0308 	orrs.w	r3, r3, r8
 8009506:	d08a      	beq.n	800941e <_strtod_l+0x7e6>
 8009508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800950a:	b1e3      	cbz	r3, 8009546 <_strtod_l+0x90e>
 800950c:	ea13 0f0a 	tst.w	r3, sl
 8009510:	d0ee      	beq.n	80094f0 <_strtod_l+0x8b8>
 8009512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009514:	9a04      	ldr	r2, [sp, #16]
 8009516:	4640      	mov	r0, r8
 8009518:	4649      	mov	r1, r9
 800951a:	b1c3      	cbz	r3, 800954e <_strtod_l+0x916>
 800951c:	f7ff fb6f 	bl	8008bfe <sulp>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	ec51 0b18 	vmov	r0, r1, d8
 8009528:	f7f6 feb8 	bl	800029c <__adddf3>
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	e7de      	b.n	80094f0 <_strtod_l+0x8b8>
 8009532:	4013      	ands	r3, r2
 8009534:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009538:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800953c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009540:	f04f 38ff 	mov.w	r8, #4294967295
 8009544:	e7d4      	b.n	80094f0 <_strtod_l+0x8b8>
 8009546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009548:	ea13 0f08 	tst.w	r3, r8
 800954c:	e7e0      	b.n	8009510 <_strtod_l+0x8d8>
 800954e:	f7ff fb56 	bl	8008bfe <sulp>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	ec51 0b18 	vmov	r0, r1, d8
 800955a:	f7f6 fe9d 	bl	8000298 <__aeabi_dsub>
 800955e:	2200      	movs	r2, #0
 8009560:	2300      	movs	r3, #0
 8009562:	4680      	mov	r8, r0
 8009564:	4689      	mov	r9, r1
 8009566:	f7f7 fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800956a:	2800      	cmp	r0, #0
 800956c:	d0c0      	beq.n	80094f0 <_strtod_l+0x8b8>
 800956e:	e618      	b.n	80091a2 <_strtod_l+0x56a>
 8009570:	fffffc02 	.word	0xfffffc02
 8009574:	7ff00000 	.word	0x7ff00000
 8009578:	39500000 	.word	0x39500000
 800957c:	000fffff 	.word	0x000fffff
 8009580:	7fefffff 	.word	0x7fefffff
 8009584:	0800bd70 	.word	0x0800bd70
 8009588:	4659      	mov	r1, fp
 800958a:	4628      	mov	r0, r5
 800958c:	f7ff fac0 	bl	8008b10 <__ratio>
 8009590:	ec57 6b10 	vmov	r6, r7, d0
 8009594:	ee10 0a10 	vmov	r0, s0
 8009598:	2200      	movs	r2, #0
 800959a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800959e:	4639      	mov	r1, r7
 80095a0:	f7f7 faae 	bl	8000b00 <__aeabi_dcmple>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d071      	beq.n	800968c <_strtod_l+0xa54>
 80095a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d17c      	bne.n	80096a8 <_strtod_l+0xa70>
 80095ae:	f1b8 0f00 	cmp.w	r8, #0
 80095b2:	d15a      	bne.n	800966a <_strtod_l+0xa32>
 80095b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d15d      	bne.n	8009678 <_strtod_l+0xa40>
 80095bc:	4b90      	ldr	r3, [pc, #576]	; (8009800 <_strtod_l+0xbc8>)
 80095be:	2200      	movs	r2, #0
 80095c0:	4630      	mov	r0, r6
 80095c2:	4639      	mov	r1, r7
 80095c4:	f7f7 fa92 	bl	8000aec <__aeabi_dcmplt>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d15c      	bne.n	8009686 <_strtod_l+0xa4e>
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	4b8c      	ldr	r3, [pc, #560]	; (8009804 <_strtod_l+0xbcc>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	f7f7 f818 	bl	8000608 <__aeabi_dmul>
 80095d8:	4606      	mov	r6, r0
 80095da:	460f      	mov	r7, r1
 80095dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80095e0:	9606      	str	r6, [sp, #24]
 80095e2:	9307      	str	r3, [sp, #28]
 80095e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80095ec:	4b86      	ldr	r3, [pc, #536]	; (8009808 <_strtod_l+0xbd0>)
 80095ee:	ea0a 0303 	and.w	r3, sl, r3
 80095f2:	930d      	str	r3, [sp, #52]	; 0x34
 80095f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095f6:	4b85      	ldr	r3, [pc, #532]	; (800980c <_strtod_l+0xbd4>)
 80095f8:	429a      	cmp	r2, r3
 80095fa:	f040 8090 	bne.w	800971e <_strtod_l+0xae6>
 80095fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009602:	ec49 8b10 	vmov	d0, r8, r9
 8009606:	f7ff f9b9 	bl	800897c <__ulp>
 800960a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800960e:	ec51 0b10 	vmov	r0, r1, d0
 8009612:	f7f6 fff9 	bl	8000608 <__aeabi_dmul>
 8009616:	4642      	mov	r2, r8
 8009618:	464b      	mov	r3, r9
 800961a:	f7f6 fe3f 	bl	800029c <__adddf3>
 800961e:	460b      	mov	r3, r1
 8009620:	4979      	ldr	r1, [pc, #484]	; (8009808 <_strtod_l+0xbd0>)
 8009622:	4a7b      	ldr	r2, [pc, #492]	; (8009810 <_strtod_l+0xbd8>)
 8009624:	4019      	ands	r1, r3
 8009626:	4291      	cmp	r1, r2
 8009628:	4680      	mov	r8, r0
 800962a:	d944      	bls.n	80096b6 <_strtod_l+0xa7e>
 800962c:	ee18 2a90 	vmov	r2, s17
 8009630:	4b78      	ldr	r3, [pc, #480]	; (8009814 <_strtod_l+0xbdc>)
 8009632:	429a      	cmp	r2, r3
 8009634:	d104      	bne.n	8009640 <_strtod_l+0xa08>
 8009636:	ee18 3a10 	vmov	r3, s16
 800963a:	3301      	adds	r3, #1
 800963c:	f43f ad40 	beq.w	80090c0 <_strtod_l+0x488>
 8009640:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009814 <_strtod_l+0xbdc>
 8009644:	f04f 38ff 	mov.w	r8, #4294967295
 8009648:	9916      	ldr	r1, [sp, #88]	; 0x58
 800964a:	4620      	mov	r0, r4
 800964c:	f7fe fe6a 	bl	8008324 <_Bfree>
 8009650:	9905      	ldr	r1, [sp, #20]
 8009652:	4620      	mov	r0, r4
 8009654:	f7fe fe66 	bl	8008324 <_Bfree>
 8009658:	4659      	mov	r1, fp
 800965a:	4620      	mov	r0, r4
 800965c:	f7fe fe62 	bl	8008324 <_Bfree>
 8009660:	4629      	mov	r1, r5
 8009662:	4620      	mov	r0, r4
 8009664:	f7fe fe5e 	bl	8008324 <_Bfree>
 8009668:	e609      	b.n	800927e <_strtod_l+0x646>
 800966a:	f1b8 0f01 	cmp.w	r8, #1
 800966e:	d103      	bne.n	8009678 <_strtod_l+0xa40>
 8009670:	f1b9 0f00 	cmp.w	r9, #0
 8009674:	f43f ad95 	beq.w	80091a2 <_strtod_l+0x56a>
 8009678:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80097d0 <_strtod_l+0xb98>
 800967c:	4f60      	ldr	r7, [pc, #384]	; (8009800 <_strtod_l+0xbc8>)
 800967e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009682:	2600      	movs	r6, #0
 8009684:	e7ae      	b.n	80095e4 <_strtod_l+0x9ac>
 8009686:	4f5f      	ldr	r7, [pc, #380]	; (8009804 <_strtod_l+0xbcc>)
 8009688:	2600      	movs	r6, #0
 800968a:	e7a7      	b.n	80095dc <_strtod_l+0x9a4>
 800968c:	4b5d      	ldr	r3, [pc, #372]	; (8009804 <_strtod_l+0xbcc>)
 800968e:	4630      	mov	r0, r6
 8009690:	4639      	mov	r1, r7
 8009692:	2200      	movs	r2, #0
 8009694:	f7f6 ffb8 	bl	8000608 <__aeabi_dmul>
 8009698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d09c      	beq.n	80095dc <_strtod_l+0x9a4>
 80096a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80096a6:	e79d      	b.n	80095e4 <_strtod_l+0x9ac>
 80096a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80097d8 <_strtod_l+0xba0>
 80096ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096b0:	ec57 6b17 	vmov	r6, r7, d7
 80096b4:	e796      	b.n	80095e4 <_strtod_l+0x9ac>
 80096b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80096ba:	9b04      	ldr	r3, [sp, #16]
 80096bc:	46ca      	mov	sl, r9
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1c2      	bne.n	8009648 <_strtod_l+0xa10>
 80096c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096c8:	0d1b      	lsrs	r3, r3, #20
 80096ca:	051b      	lsls	r3, r3, #20
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d1bb      	bne.n	8009648 <_strtod_l+0xa10>
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f7 fb48 	bl	8000d68 <__aeabi_d2lz>
 80096d8:	f7f6 ff68 	bl	80005ac <__aeabi_l2d>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f6 fdd8 	bl	8000298 <__aeabi_dsub>
 80096e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096ee:	ea43 0308 	orr.w	r3, r3, r8
 80096f2:	4313      	orrs	r3, r2
 80096f4:	4606      	mov	r6, r0
 80096f6:	460f      	mov	r7, r1
 80096f8:	d054      	beq.n	80097a4 <_strtod_l+0xb6c>
 80096fa:	a339      	add	r3, pc, #228	; (adr r3, 80097e0 <_strtod_l+0xba8>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f7f7 f9f4 	bl	8000aec <__aeabi_dcmplt>
 8009704:	2800      	cmp	r0, #0
 8009706:	f47f ace5 	bne.w	80090d4 <_strtod_l+0x49c>
 800970a:	a337      	add	r3, pc, #220	; (adr r3, 80097e8 <_strtod_l+0xbb0>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	4630      	mov	r0, r6
 8009712:	4639      	mov	r1, r7
 8009714:	f7f7 fa08 	bl	8000b28 <__aeabi_dcmpgt>
 8009718:	2800      	cmp	r0, #0
 800971a:	d095      	beq.n	8009648 <_strtod_l+0xa10>
 800971c:	e4da      	b.n	80090d4 <_strtod_l+0x49c>
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	b333      	cbz	r3, 8009770 <_strtod_l+0xb38>
 8009722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009724:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009728:	d822      	bhi.n	8009770 <_strtod_l+0xb38>
 800972a:	a331      	add	r3, pc, #196	; (adr r3, 80097f0 <_strtod_l+0xbb8>)
 800972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f7 f9e4 	bl	8000b00 <__aeabi_dcmple>
 8009738:	b1a0      	cbz	r0, 8009764 <_strtod_l+0xb2c>
 800973a:	4639      	mov	r1, r7
 800973c:	4630      	mov	r0, r6
 800973e:	f7f7 fa3b 	bl	8000bb8 <__aeabi_d2uiz>
 8009742:	2801      	cmp	r0, #1
 8009744:	bf38      	it	cc
 8009746:	2001      	movcc	r0, #1
 8009748:	f7f6 fee4 	bl	8000514 <__aeabi_ui2d>
 800974c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800974e:	4606      	mov	r6, r0
 8009750:	460f      	mov	r7, r1
 8009752:	bb23      	cbnz	r3, 800979e <_strtod_l+0xb66>
 8009754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009758:	9010      	str	r0, [sp, #64]	; 0x40
 800975a:	9311      	str	r3, [sp, #68]	; 0x44
 800975c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009760:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009768:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009770:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009774:	eeb0 0a48 	vmov.f32	s0, s16
 8009778:	eef0 0a68 	vmov.f32	s1, s17
 800977c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009780:	f7ff f8fc 	bl	800897c <__ulp>
 8009784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009788:	ec53 2b10 	vmov	r2, r3, d0
 800978c:	f7f6 ff3c 	bl	8000608 <__aeabi_dmul>
 8009790:	ec53 2b18 	vmov	r2, r3, d8
 8009794:	f7f6 fd82 	bl	800029c <__adddf3>
 8009798:	4680      	mov	r8, r0
 800979a:	4689      	mov	r9, r1
 800979c:	e78d      	b.n	80096ba <_strtod_l+0xa82>
 800979e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80097a2:	e7db      	b.n	800975c <_strtod_l+0xb24>
 80097a4:	a314      	add	r3, pc, #80	; (adr r3, 80097f8 <_strtod_l+0xbc0>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f7 f99f 	bl	8000aec <__aeabi_dcmplt>
 80097ae:	e7b3      	b.n	8009718 <_strtod_l+0xae0>
 80097b0:	2300      	movs	r3, #0
 80097b2:	930a      	str	r3, [sp, #40]	; 0x28
 80097b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	f7ff ba7c 	b.w	8008cb6 <_strtod_l+0x7e>
 80097be:	2a65      	cmp	r2, #101	; 0x65
 80097c0:	f43f ab75 	beq.w	8008eae <_strtod_l+0x276>
 80097c4:	2a45      	cmp	r2, #69	; 0x45
 80097c6:	f43f ab72 	beq.w	8008eae <_strtod_l+0x276>
 80097ca:	2301      	movs	r3, #1
 80097cc:	f7ff bbaa 	b.w	8008f24 <_strtod_l+0x2ec>
 80097d0:	00000000 	.word	0x00000000
 80097d4:	bff00000 	.word	0xbff00000
 80097d8:	00000000 	.word	0x00000000
 80097dc:	3ff00000 	.word	0x3ff00000
 80097e0:	94a03595 	.word	0x94a03595
 80097e4:	3fdfffff 	.word	0x3fdfffff
 80097e8:	35afe535 	.word	0x35afe535
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	ffc00000 	.word	0xffc00000
 80097f4:	41dfffff 	.word	0x41dfffff
 80097f8:	94a03595 	.word	0x94a03595
 80097fc:	3fcfffff 	.word	0x3fcfffff
 8009800:	3ff00000 	.word	0x3ff00000
 8009804:	3fe00000 	.word	0x3fe00000
 8009808:	7ff00000 	.word	0x7ff00000
 800980c:	7fe00000 	.word	0x7fe00000
 8009810:	7c9fffff 	.word	0x7c9fffff
 8009814:	7fefffff 	.word	0x7fefffff

08009818 <_strtod_r>:
 8009818:	4b01      	ldr	r3, [pc, #4]	; (8009820 <_strtod_r+0x8>)
 800981a:	f7ff ba0d 	b.w	8008c38 <_strtod_l>
 800981e:	bf00      	nop
 8009820:	20000074 	.word	0x20000074

08009824 <_strtol_l.constprop.0>:
 8009824:	2b01      	cmp	r3, #1
 8009826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982a:	d001      	beq.n	8009830 <_strtol_l.constprop.0+0xc>
 800982c:	2b24      	cmp	r3, #36	; 0x24
 800982e:	d906      	bls.n	800983e <_strtol_l.constprop.0+0x1a>
 8009830:	f7fd fd88 	bl	8007344 <__errno>
 8009834:	2316      	movs	r3, #22
 8009836:	6003      	str	r3, [r0, #0]
 8009838:	2000      	movs	r0, #0
 800983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009924 <_strtol_l.constprop.0+0x100>
 8009842:	460d      	mov	r5, r1
 8009844:	462e      	mov	r6, r5
 8009846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800984a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800984e:	f017 0708 	ands.w	r7, r7, #8
 8009852:	d1f7      	bne.n	8009844 <_strtol_l.constprop.0+0x20>
 8009854:	2c2d      	cmp	r4, #45	; 0x2d
 8009856:	d132      	bne.n	80098be <_strtol_l.constprop.0+0x9a>
 8009858:	782c      	ldrb	r4, [r5, #0]
 800985a:	2701      	movs	r7, #1
 800985c:	1cb5      	adds	r5, r6, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d05b      	beq.n	800991a <_strtol_l.constprop.0+0xf6>
 8009862:	2b10      	cmp	r3, #16
 8009864:	d109      	bne.n	800987a <_strtol_l.constprop.0+0x56>
 8009866:	2c30      	cmp	r4, #48	; 0x30
 8009868:	d107      	bne.n	800987a <_strtol_l.constprop.0+0x56>
 800986a:	782c      	ldrb	r4, [r5, #0]
 800986c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009870:	2c58      	cmp	r4, #88	; 0x58
 8009872:	d14d      	bne.n	8009910 <_strtol_l.constprop.0+0xec>
 8009874:	786c      	ldrb	r4, [r5, #1]
 8009876:	2310      	movs	r3, #16
 8009878:	3502      	adds	r5, #2
 800987a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800987e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009882:	f04f 0e00 	mov.w	lr, #0
 8009886:	fbb8 f9f3 	udiv	r9, r8, r3
 800988a:	4676      	mov	r6, lr
 800988c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009890:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009894:	f1bc 0f09 	cmp.w	ip, #9
 8009898:	d816      	bhi.n	80098c8 <_strtol_l.constprop.0+0xa4>
 800989a:	4664      	mov	r4, ip
 800989c:	42a3      	cmp	r3, r4
 800989e:	dd24      	ble.n	80098ea <_strtol_l.constprop.0+0xc6>
 80098a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80098a4:	d008      	beq.n	80098b8 <_strtol_l.constprop.0+0x94>
 80098a6:	45b1      	cmp	r9, r6
 80098a8:	d31c      	bcc.n	80098e4 <_strtol_l.constprop.0+0xc0>
 80098aa:	d101      	bne.n	80098b0 <_strtol_l.constprop.0+0x8c>
 80098ac:	45a2      	cmp	sl, r4
 80098ae:	db19      	blt.n	80098e4 <_strtol_l.constprop.0+0xc0>
 80098b0:	fb06 4603 	mla	r6, r6, r3, r4
 80098b4:	f04f 0e01 	mov.w	lr, #1
 80098b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098bc:	e7e8      	b.n	8009890 <_strtol_l.constprop.0+0x6c>
 80098be:	2c2b      	cmp	r4, #43	; 0x2b
 80098c0:	bf04      	itt	eq
 80098c2:	782c      	ldrbeq	r4, [r5, #0]
 80098c4:	1cb5      	addeq	r5, r6, #2
 80098c6:	e7ca      	b.n	800985e <_strtol_l.constprop.0+0x3a>
 80098c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098cc:	f1bc 0f19 	cmp.w	ip, #25
 80098d0:	d801      	bhi.n	80098d6 <_strtol_l.constprop.0+0xb2>
 80098d2:	3c37      	subs	r4, #55	; 0x37
 80098d4:	e7e2      	b.n	800989c <_strtol_l.constprop.0+0x78>
 80098d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098da:	f1bc 0f19 	cmp.w	ip, #25
 80098de:	d804      	bhi.n	80098ea <_strtol_l.constprop.0+0xc6>
 80098e0:	3c57      	subs	r4, #87	; 0x57
 80098e2:	e7db      	b.n	800989c <_strtol_l.constprop.0+0x78>
 80098e4:	f04f 3eff 	mov.w	lr, #4294967295
 80098e8:	e7e6      	b.n	80098b8 <_strtol_l.constprop.0+0x94>
 80098ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80098ee:	d105      	bne.n	80098fc <_strtol_l.constprop.0+0xd8>
 80098f0:	2322      	movs	r3, #34	; 0x22
 80098f2:	6003      	str	r3, [r0, #0]
 80098f4:	4646      	mov	r6, r8
 80098f6:	b942      	cbnz	r2, 800990a <_strtol_l.constprop.0+0xe6>
 80098f8:	4630      	mov	r0, r6
 80098fa:	e79e      	b.n	800983a <_strtol_l.constprop.0+0x16>
 80098fc:	b107      	cbz	r7, 8009900 <_strtol_l.constprop.0+0xdc>
 80098fe:	4276      	negs	r6, r6
 8009900:	2a00      	cmp	r2, #0
 8009902:	d0f9      	beq.n	80098f8 <_strtol_l.constprop.0+0xd4>
 8009904:	f1be 0f00 	cmp.w	lr, #0
 8009908:	d000      	beq.n	800990c <_strtol_l.constprop.0+0xe8>
 800990a:	1e69      	subs	r1, r5, #1
 800990c:	6011      	str	r1, [r2, #0]
 800990e:	e7f3      	b.n	80098f8 <_strtol_l.constprop.0+0xd4>
 8009910:	2430      	movs	r4, #48	; 0x30
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1b1      	bne.n	800987a <_strtol_l.constprop.0+0x56>
 8009916:	2308      	movs	r3, #8
 8009918:	e7af      	b.n	800987a <_strtol_l.constprop.0+0x56>
 800991a:	2c30      	cmp	r4, #48	; 0x30
 800991c:	d0a5      	beq.n	800986a <_strtol_l.constprop.0+0x46>
 800991e:	230a      	movs	r3, #10
 8009920:	e7ab      	b.n	800987a <_strtol_l.constprop.0+0x56>
 8009922:	bf00      	nop
 8009924:	0800bd99 	.word	0x0800bd99

08009928 <_strtol_r>:
 8009928:	f7ff bf7c 	b.w	8009824 <_strtol_l.constprop.0>

0800992c <__ssputs_r>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	688e      	ldr	r6, [r1, #8]
 8009932:	461f      	mov	r7, r3
 8009934:	42be      	cmp	r6, r7
 8009936:	680b      	ldr	r3, [r1, #0]
 8009938:	4682      	mov	sl, r0
 800993a:	460c      	mov	r4, r1
 800993c:	4690      	mov	r8, r2
 800993e:	d82c      	bhi.n	800999a <__ssputs_r+0x6e>
 8009940:	898a      	ldrh	r2, [r1, #12]
 8009942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009946:	d026      	beq.n	8009996 <__ssputs_r+0x6a>
 8009948:	6965      	ldr	r5, [r4, #20]
 800994a:	6909      	ldr	r1, [r1, #16]
 800994c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009950:	eba3 0901 	sub.w	r9, r3, r1
 8009954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009958:	1c7b      	adds	r3, r7, #1
 800995a:	444b      	add	r3, r9
 800995c:	106d      	asrs	r5, r5, #1
 800995e:	429d      	cmp	r5, r3
 8009960:	bf38      	it	cc
 8009962:	461d      	movcc	r5, r3
 8009964:	0553      	lsls	r3, r2, #21
 8009966:	d527      	bpl.n	80099b8 <__ssputs_r+0x8c>
 8009968:	4629      	mov	r1, r5
 800996a:	f7fe fc0f 	bl	800818c <_malloc_r>
 800996e:	4606      	mov	r6, r0
 8009970:	b360      	cbz	r0, 80099cc <__ssputs_r+0xa0>
 8009972:	6921      	ldr	r1, [r4, #16]
 8009974:	464a      	mov	r2, r9
 8009976:	f000 fa1b 	bl	8009db0 <memcpy>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	6126      	str	r6, [r4, #16]
 8009988:	6165      	str	r5, [r4, #20]
 800998a:	444e      	add	r6, r9
 800998c:	eba5 0509 	sub.w	r5, r5, r9
 8009990:	6026      	str	r6, [r4, #0]
 8009992:	60a5      	str	r5, [r4, #8]
 8009994:	463e      	mov	r6, r7
 8009996:	42be      	cmp	r6, r7
 8009998:	d900      	bls.n	800999c <__ssputs_r+0x70>
 800999a:	463e      	mov	r6, r7
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	4632      	mov	r2, r6
 80099a0:	4641      	mov	r1, r8
 80099a2:	f000 f9c9 	bl	8009d38 <memmove>
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	1b9b      	subs	r3, r3, r6
 80099aa:	60a3      	str	r3, [r4, #8]
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	4433      	add	r3, r6
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	2000      	movs	r0, #0
 80099b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b8:	462a      	mov	r2, r5
 80099ba:	f000 fdae 	bl	800a51a <_realloc_r>
 80099be:	4606      	mov	r6, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d1e0      	bne.n	8009986 <__ssputs_r+0x5a>
 80099c4:	6921      	ldr	r1, [r4, #16]
 80099c6:	4650      	mov	r0, sl
 80099c8:	f7fe fb6c 	bl	80080a4 <_free_r>
 80099cc:	230c      	movs	r3, #12
 80099ce:	f8ca 3000 	str.w	r3, [sl]
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	f04f 30ff 	mov.w	r0, #4294967295
 80099de:	e7e9      	b.n	80099b4 <__ssputs_r+0x88>

080099e0 <_svfiprintf_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	4698      	mov	r8, r3
 80099e6:	898b      	ldrh	r3, [r1, #12]
 80099e8:	061b      	lsls	r3, r3, #24
 80099ea:	b09d      	sub	sp, #116	; 0x74
 80099ec:	4607      	mov	r7, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	4614      	mov	r4, r2
 80099f2:	d50e      	bpl.n	8009a12 <_svfiprintf_r+0x32>
 80099f4:	690b      	ldr	r3, [r1, #16]
 80099f6:	b963      	cbnz	r3, 8009a12 <_svfiprintf_r+0x32>
 80099f8:	2140      	movs	r1, #64	; 0x40
 80099fa:	f7fe fbc7 	bl	800818c <_malloc_r>
 80099fe:	6028      	str	r0, [r5, #0]
 8009a00:	6128      	str	r0, [r5, #16]
 8009a02:	b920      	cbnz	r0, 8009a0e <_svfiprintf_r+0x2e>
 8009a04:	230c      	movs	r3, #12
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e0d0      	b.n	8009bb0 <_svfiprintf_r+0x1d0>
 8009a0e:	2340      	movs	r3, #64	; 0x40
 8009a10:	616b      	str	r3, [r5, #20]
 8009a12:	2300      	movs	r3, #0
 8009a14:	9309      	str	r3, [sp, #36]	; 0x24
 8009a16:	2320      	movs	r3, #32
 8009a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a20:	2330      	movs	r3, #48	; 0x30
 8009a22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bc8 <_svfiprintf_r+0x1e8>
 8009a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a2a:	f04f 0901 	mov.w	r9, #1
 8009a2e:	4623      	mov	r3, r4
 8009a30:	469a      	mov	sl, r3
 8009a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a36:	b10a      	cbz	r2, 8009a3c <_svfiprintf_r+0x5c>
 8009a38:	2a25      	cmp	r2, #37	; 0x25
 8009a3a:	d1f9      	bne.n	8009a30 <_svfiprintf_r+0x50>
 8009a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a40:	d00b      	beq.n	8009a5a <_svfiprintf_r+0x7a>
 8009a42:	465b      	mov	r3, fp
 8009a44:	4622      	mov	r2, r4
 8009a46:	4629      	mov	r1, r5
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff ff6f 	bl	800992c <__ssputs_r>
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f000 80a9 	beq.w	8009ba6 <_svfiprintf_r+0x1c6>
 8009a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a56:	445a      	add	r2, fp
 8009a58:	9209      	str	r2, [sp, #36]	; 0x24
 8009a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 80a1 	beq.w	8009ba6 <_svfiprintf_r+0x1c6>
 8009a64:	2300      	movs	r3, #0
 8009a66:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a6e:	f10a 0a01 	add.w	sl, sl, #1
 8009a72:	9304      	str	r3, [sp, #16]
 8009a74:	9307      	str	r3, [sp, #28]
 8009a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a7c:	4654      	mov	r4, sl
 8009a7e:	2205      	movs	r2, #5
 8009a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a84:	4850      	ldr	r0, [pc, #320]	; (8009bc8 <_svfiprintf_r+0x1e8>)
 8009a86:	f7f6 fbab 	bl	80001e0 <memchr>
 8009a8a:	9a04      	ldr	r2, [sp, #16]
 8009a8c:	b9d8      	cbnz	r0, 8009ac6 <_svfiprintf_r+0xe6>
 8009a8e:	06d0      	lsls	r0, r2, #27
 8009a90:	bf44      	itt	mi
 8009a92:	2320      	movmi	r3, #32
 8009a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a98:	0711      	lsls	r1, r2, #28
 8009a9a:	bf44      	itt	mi
 8009a9c:	232b      	movmi	r3, #43	; 0x2b
 8009a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa8:	d015      	beq.n	8009ad6 <_svfiprintf_r+0xf6>
 8009aaa:	9a07      	ldr	r2, [sp, #28]
 8009aac:	4654      	mov	r4, sl
 8009aae:	2000      	movs	r0, #0
 8009ab0:	f04f 0c0a 	mov.w	ip, #10
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aba:	3b30      	subs	r3, #48	; 0x30
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	d94d      	bls.n	8009b5c <_svfiprintf_r+0x17c>
 8009ac0:	b1b0      	cbz	r0, 8009af0 <_svfiprintf_r+0x110>
 8009ac2:	9207      	str	r2, [sp, #28]
 8009ac4:	e014      	b.n	8009af0 <_svfiprintf_r+0x110>
 8009ac6:	eba0 0308 	sub.w	r3, r0, r8
 8009aca:	fa09 f303 	lsl.w	r3, r9, r3
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	46a2      	mov	sl, r4
 8009ad4:	e7d2      	b.n	8009a7c <_svfiprintf_r+0x9c>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	1d19      	adds	r1, r3, #4
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	9103      	str	r1, [sp, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bfbb      	ittet	lt
 8009ae2:	425b      	neglt	r3, r3
 8009ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ae8:	9307      	strge	r3, [sp, #28]
 8009aea:	9307      	strlt	r3, [sp, #28]
 8009aec:	bfb8      	it	lt
 8009aee:	9204      	strlt	r2, [sp, #16]
 8009af0:	7823      	ldrb	r3, [r4, #0]
 8009af2:	2b2e      	cmp	r3, #46	; 0x2e
 8009af4:	d10c      	bne.n	8009b10 <_svfiprintf_r+0x130>
 8009af6:	7863      	ldrb	r3, [r4, #1]
 8009af8:	2b2a      	cmp	r3, #42	; 0x2a
 8009afa:	d134      	bne.n	8009b66 <_svfiprintf_r+0x186>
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	9203      	str	r2, [sp, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfb8      	it	lt
 8009b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b0c:	3402      	adds	r4, #2
 8009b0e:	9305      	str	r3, [sp, #20]
 8009b10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009bd8 <_svfiprintf_r+0x1f8>
 8009b14:	7821      	ldrb	r1, [r4, #0]
 8009b16:	2203      	movs	r2, #3
 8009b18:	4650      	mov	r0, sl
 8009b1a:	f7f6 fb61 	bl	80001e0 <memchr>
 8009b1e:	b138      	cbz	r0, 8009b30 <_svfiprintf_r+0x150>
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	eba0 000a 	sub.w	r0, r0, sl
 8009b26:	2240      	movs	r2, #64	; 0x40
 8009b28:	4082      	lsls	r2, r0
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	3401      	adds	r4, #1
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b34:	4825      	ldr	r0, [pc, #148]	; (8009bcc <_svfiprintf_r+0x1ec>)
 8009b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b3a:	2206      	movs	r2, #6
 8009b3c:	f7f6 fb50 	bl	80001e0 <memchr>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d038      	beq.n	8009bb6 <_svfiprintf_r+0x1d6>
 8009b44:	4b22      	ldr	r3, [pc, #136]	; (8009bd0 <_svfiprintf_r+0x1f0>)
 8009b46:	bb1b      	cbnz	r3, 8009b90 <_svfiprintf_r+0x1b0>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	3307      	adds	r3, #7
 8009b4c:	f023 0307 	bic.w	r3, r3, #7
 8009b50:	3308      	adds	r3, #8
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b56:	4433      	add	r3, r6
 8009b58:	9309      	str	r3, [sp, #36]	; 0x24
 8009b5a:	e768      	b.n	8009a2e <_svfiprintf_r+0x4e>
 8009b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b60:	460c      	mov	r4, r1
 8009b62:	2001      	movs	r0, #1
 8009b64:	e7a6      	b.n	8009ab4 <_svfiprintf_r+0xd4>
 8009b66:	2300      	movs	r3, #0
 8009b68:	3401      	adds	r4, #1
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b78:	3a30      	subs	r2, #48	; 0x30
 8009b7a:	2a09      	cmp	r2, #9
 8009b7c:	d903      	bls.n	8009b86 <_svfiprintf_r+0x1a6>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0c6      	beq.n	8009b10 <_svfiprintf_r+0x130>
 8009b82:	9105      	str	r1, [sp, #20]
 8009b84:	e7c4      	b.n	8009b10 <_svfiprintf_r+0x130>
 8009b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e7f0      	b.n	8009b72 <_svfiprintf_r+0x192>
 8009b90:	ab03      	add	r3, sp, #12
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	462a      	mov	r2, r5
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <_svfiprintf_r+0x1f4>)
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f7fc fc84 	bl	80064a8 <_printf_float>
 8009ba0:	1c42      	adds	r2, r0, #1
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	d1d6      	bne.n	8009b54 <_svfiprintf_r+0x174>
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	065b      	lsls	r3, r3, #25
 8009baa:	f53f af2d 	bmi.w	8009a08 <_svfiprintf_r+0x28>
 8009bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb0:	b01d      	add	sp, #116	; 0x74
 8009bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb6:	ab03      	add	r3, sp, #12
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	462a      	mov	r2, r5
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <_svfiprintf_r+0x1f4>)
 8009bbe:	a904      	add	r1, sp, #16
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f7fc ff15 	bl	80069f0 <_printf_i>
 8009bc6:	e7eb      	b.n	8009ba0 <_svfiprintf_r+0x1c0>
 8009bc8:	0800be99 	.word	0x0800be99
 8009bcc:	0800bea3 	.word	0x0800bea3
 8009bd0:	080064a9 	.word	0x080064a9
 8009bd4:	0800992d 	.word	0x0800992d
 8009bd8:	0800be9f 	.word	0x0800be9f

08009bdc <__sflush_r>:
 8009bdc:	898a      	ldrh	r2, [r1, #12]
 8009bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be2:	4605      	mov	r5, r0
 8009be4:	0710      	lsls	r0, r2, #28
 8009be6:	460c      	mov	r4, r1
 8009be8:	d458      	bmi.n	8009c9c <__sflush_r+0xc0>
 8009bea:	684b      	ldr	r3, [r1, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dc05      	bgt.n	8009bfc <__sflush_r+0x20>
 8009bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	dc02      	bgt.n	8009bfc <__sflush_r+0x20>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bfe:	2e00      	cmp	r6, #0
 8009c00:	d0f9      	beq.n	8009bf6 <__sflush_r+0x1a>
 8009c02:	2300      	movs	r3, #0
 8009c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c08:	682f      	ldr	r7, [r5, #0]
 8009c0a:	6a21      	ldr	r1, [r4, #32]
 8009c0c:	602b      	str	r3, [r5, #0]
 8009c0e:	d032      	beq.n	8009c76 <__sflush_r+0x9a>
 8009c10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	075a      	lsls	r2, r3, #29
 8009c16:	d505      	bpl.n	8009c24 <__sflush_r+0x48>
 8009c18:	6863      	ldr	r3, [r4, #4]
 8009c1a:	1ac0      	subs	r0, r0, r3
 8009c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c1e:	b10b      	cbz	r3, 8009c24 <__sflush_r+0x48>
 8009c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c22:	1ac0      	subs	r0, r0, r3
 8009c24:	2300      	movs	r3, #0
 8009c26:	4602      	mov	r2, r0
 8009c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c2a:	6a21      	ldr	r1, [r4, #32]
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b0      	blx	r6
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	d106      	bne.n	8009c44 <__sflush_r+0x68>
 8009c36:	6829      	ldr	r1, [r5, #0]
 8009c38:	291d      	cmp	r1, #29
 8009c3a:	d82b      	bhi.n	8009c94 <__sflush_r+0xb8>
 8009c3c:	4a29      	ldr	r2, [pc, #164]	; (8009ce4 <__sflush_r+0x108>)
 8009c3e:	410a      	asrs	r2, r1
 8009c40:	07d6      	lsls	r6, r2, #31
 8009c42:	d427      	bmi.n	8009c94 <__sflush_r+0xb8>
 8009c44:	2200      	movs	r2, #0
 8009c46:	6062      	str	r2, [r4, #4]
 8009c48:	04d9      	lsls	r1, r3, #19
 8009c4a:	6922      	ldr	r2, [r4, #16]
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	d504      	bpl.n	8009c5a <__sflush_r+0x7e>
 8009c50:	1c42      	adds	r2, r0, #1
 8009c52:	d101      	bne.n	8009c58 <__sflush_r+0x7c>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b903      	cbnz	r3, 8009c5a <__sflush_r+0x7e>
 8009c58:	6560      	str	r0, [r4, #84]	; 0x54
 8009c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c5c:	602f      	str	r7, [r5, #0]
 8009c5e:	2900      	cmp	r1, #0
 8009c60:	d0c9      	beq.n	8009bf6 <__sflush_r+0x1a>
 8009c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c66:	4299      	cmp	r1, r3
 8009c68:	d002      	beq.n	8009c70 <__sflush_r+0x94>
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f7fe fa1a 	bl	80080a4 <_free_r>
 8009c70:	2000      	movs	r0, #0
 8009c72:	6360      	str	r0, [r4, #52]	; 0x34
 8009c74:	e7c0      	b.n	8009bf8 <__sflush_r+0x1c>
 8009c76:	2301      	movs	r3, #1
 8009c78:	4628      	mov	r0, r5
 8009c7a:	47b0      	blx	r6
 8009c7c:	1c41      	adds	r1, r0, #1
 8009c7e:	d1c8      	bne.n	8009c12 <__sflush_r+0x36>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0c5      	beq.n	8009c12 <__sflush_r+0x36>
 8009c86:	2b1d      	cmp	r3, #29
 8009c88:	d001      	beq.n	8009c8e <__sflush_r+0xb2>
 8009c8a:	2b16      	cmp	r3, #22
 8009c8c:	d101      	bne.n	8009c92 <__sflush_r+0xb6>
 8009c8e:	602f      	str	r7, [r5, #0]
 8009c90:	e7b1      	b.n	8009bf6 <__sflush_r+0x1a>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	e7ad      	b.n	8009bf8 <__sflush_r+0x1c>
 8009c9c:	690f      	ldr	r7, [r1, #16]
 8009c9e:	2f00      	cmp	r7, #0
 8009ca0:	d0a9      	beq.n	8009bf6 <__sflush_r+0x1a>
 8009ca2:	0793      	lsls	r3, r2, #30
 8009ca4:	680e      	ldr	r6, [r1, #0]
 8009ca6:	bf08      	it	eq
 8009ca8:	694b      	ldreq	r3, [r1, #20]
 8009caa:	600f      	str	r7, [r1, #0]
 8009cac:	bf18      	it	ne
 8009cae:	2300      	movne	r3, #0
 8009cb0:	eba6 0807 	sub.w	r8, r6, r7
 8009cb4:	608b      	str	r3, [r1, #8]
 8009cb6:	f1b8 0f00 	cmp.w	r8, #0
 8009cba:	dd9c      	ble.n	8009bf6 <__sflush_r+0x1a>
 8009cbc:	6a21      	ldr	r1, [r4, #32]
 8009cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cc0:	4643      	mov	r3, r8
 8009cc2:	463a      	mov	r2, r7
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b0      	blx	r6
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	dc06      	bgt.n	8009cda <__sflush_r+0xfe>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	e78e      	b.n	8009bf8 <__sflush_r+0x1c>
 8009cda:	4407      	add	r7, r0
 8009cdc:	eba8 0800 	sub.w	r8, r8, r0
 8009ce0:	e7e9      	b.n	8009cb6 <__sflush_r+0xda>
 8009ce2:	bf00      	nop
 8009ce4:	dfbffffe 	.word	0xdfbffffe

08009ce8 <_fflush_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	690b      	ldr	r3, [r1, #16]
 8009cec:	4605      	mov	r5, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	b913      	cbnz	r3, 8009cf8 <_fflush_r+0x10>
 8009cf2:	2500      	movs	r5, #0
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	b118      	cbz	r0, 8009d02 <_fflush_r+0x1a>
 8009cfa:	6a03      	ldr	r3, [r0, #32]
 8009cfc:	b90b      	cbnz	r3, 8009d02 <_fflush_r+0x1a>
 8009cfe:	f7fd fa35 	bl	800716c <__sinit>
 8009d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0f3      	beq.n	8009cf2 <_fflush_r+0xa>
 8009d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d0c:	07d0      	lsls	r0, r2, #31
 8009d0e:	d404      	bmi.n	8009d1a <_fflush_r+0x32>
 8009d10:	0599      	lsls	r1, r3, #22
 8009d12:	d402      	bmi.n	8009d1a <_fflush_r+0x32>
 8009d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d16:	f7fd fb40 	bl	800739a <__retarget_lock_acquire_recursive>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	f7ff ff5d 	bl	8009bdc <__sflush_r>
 8009d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d24:	07da      	lsls	r2, r3, #31
 8009d26:	4605      	mov	r5, r0
 8009d28:	d4e4      	bmi.n	8009cf4 <_fflush_r+0xc>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	059b      	lsls	r3, r3, #22
 8009d2e:	d4e1      	bmi.n	8009cf4 <_fflush_r+0xc>
 8009d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d32:	f7fd fb33 	bl	800739c <__retarget_lock_release_recursive>
 8009d36:	e7dd      	b.n	8009cf4 <_fflush_r+0xc>

08009d38 <memmove>:
 8009d38:	4288      	cmp	r0, r1
 8009d3a:	b510      	push	{r4, lr}
 8009d3c:	eb01 0402 	add.w	r4, r1, r2
 8009d40:	d902      	bls.n	8009d48 <memmove+0x10>
 8009d42:	4284      	cmp	r4, r0
 8009d44:	4623      	mov	r3, r4
 8009d46:	d807      	bhi.n	8009d58 <memmove+0x20>
 8009d48:	1e43      	subs	r3, r0, #1
 8009d4a:	42a1      	cmp	r1, r4
 8009d4c:	d008      	beq.n	8009d60 <memmove+0x28>
 8009d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d56:	e7f8      	b.n	8009d4a <memmove+0x12>
 8009d58:	4402      	add	r2, r0
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	428a      	cmp	r2, r1
 8009d5e:	d100      	bne.n	8009d62 <memmove+0x2a>
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d6a:	e7f7      	b.n	8009d5c <memmove+0x24>

08009d6c <strncmp>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	b16a      	cbz	r2, 8009d8c <strncmp+0x20>
 8009d70:	3901      	subs	r1, #1
 8009d72:	1884      	adds	r4, r0, r2
 8009d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d103      	bne.n	8009d88 <strncmp+0x1c>
 8009d80:	42a0      	cmp	r0, r4
 8009d82:	d001      	beq.n	8009d88 <strncmp+0x1c>
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d1f5      	bne.n	8009d74 <strncmp+0x8>
 8009d88:	1ad0      	subs	r0, r2, r3
 8009d8a:	bd10      	pop	{r4, pc}
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	e7fc      	b.n	8009d8a <strncmp+0x1e>

08009d90 <_sbrk_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d06      	ldr	r5, [pc, #24]	; (8009dac <_sbrk_r+0x1c>)
 8009d94:	2300      	movs	r3, #0
 8009d96:	4604      	mov	r4, r0
 8009d98:	4608      	mov	r0, r1
 8009d9a:	602b      	str	r3, [r5, #0]
 8009d9c:	f7f9 f926 	bl	8002fec <_sbrk>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	d102      	bne.n	8009daa <_sbrk_r+0x1a>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	b103      	cbz	r3, 8009daa <_sbrk_r+0x1a>
 8009da8:	6023      	str	r3, [r4, #0]
 8009daa:	bd38      	pop	{r3, r4, r5, pc}
 8009dac:	20000694 	.word	0x20000694

08009db0 <memcpy>:
 8009db0:	440a      	add	r2, r1
 8009db2:	4291      	cmp	r1, r2
 8009db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009db8:	d100      	bne.n	8009dbc <memcpy+0xc>
 8009dba:	4770      	bx	lr
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc6:	4291      	cmp	r1, r2
 8009dc8:	d1f9      	bne.n	8009dbe <memcpy+0xe>
 8009dca:	bd10      	pop	{r4, pc}
 8009dcc:	0000      	movs	r0, r0
	...

08009dd0 <nan>:
 8009dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009dd8 <nan+0x8>
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	00000000 	.word	0x00000000
 8009ddc:	7ff80000 	.word	0x7ff80000

08009de0 <__assert_func>:
 8009de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009de2:	4614      	mov	r4, r2
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <__assert_func+0x2c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4605      	mov	r5, r0
 8009dec:	68d8      	ldr	r0, [r3, #12]
 8009dee:	b14c      	cbz	r4, 8009e04 <__assert_func+0x24>
 8009df0:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <__assert_func+0x30>)
 8009df2:	9100      	str	r1, [sp, #0]
 8009df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009df8:	4906      	ldr	r1, [pc, #24]	; (8009e14 <__assert_func+0x34>)
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	f000 fbca 	bl	800a594 <fiprintf>
 8009e00:	f000 fbda 	bl	800a5b8 <abort>
 8009e04:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <__assert_func+0x38>)
 8009e06:	461c      	mov	r4, r3
 8009e08:	e7f3      	b.n	8009df2 <__assert_func+0x12>
 8009e0a:	bf00      	nop
 8009e0c:	20000070 	.word	0x20000070
 8009e10:	0800beb2 	.word	0x0800beb2
 8009e14:	0800bebf 	.word	0x0800bebf
 8009e18:	0800beed 	.word	0x0800beed

08009e1c <_calloc_r>:
 8009e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e1e:	fba1 2402 	umull	r2, r4, r1, r2
 8009e22:	b94c      	cbnz	r4, 8009e38 <_calloc_r+0x1c>
 8009e24:	4611      	mov	r1, r2
 8009e26:	9201      	str	r2, [sp, #4]
 8009e28:	f7fe f9b0 	bl	800818c <_malloc_r>
 8009e2c:	9a01      	ldr	r2, [sp, #4]
 8009e2e:	4605      	mov	r5, r0
 8009e30:	b930      	cbnz	r0, 8009e40 <_calloc_r+0x24>
 8009e32:	4628      	mov	r0, r5
 8009e34:	b003      	add	sp, #12
 8009e36:	bd30      	pop	{r4, r5, pc}
 8009e38:	220c      	movs	r2, #12
 8009e3a:	6002      	str	r2, [r0, #0]
 8009e3c:	2500      	movs	r5, #0
 8009e3e:	e7f8      	b.n	8009e32 <_calloc_r+0x16>
 8009e40:	4621      	mov	r1, r4
 8009e42:	f7fd fa2c 	bl	800729e <memset>
 8009e46:	e7f4      	b.n	8009e32 <_calloc_r+0x16>

08009e48 <rshift>:
 8009e48:	6903      	ldr	r3, [r0, #16]
 8009e4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e56:	f100 0414 	add.w	r4, r0, #20
 8009e5a:	dd45      	ble.n	8009ee8 <rshift+0xa0>
 8009e5c:	f011 011f 	ands.w	r1, r1, #31
 8009e60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e68:	d10c      	bne.n	8009e84 <rshift+0x3c>
 8009e6a:	f100 0710 	add.w	r7, r0, #16
 8009e6e:	4629      	mov	r1, r5
 8009e70:	42b1      	cmp	r1, r6
 8009e72:	d334      	bcc.n	8009ede <rshift+0x96>
 8009e74:	1a9b      	subs	r3, r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	1eea      	subs	r2, r5, #3
 8009e7a:	4296      	cmp	r6, r2
 8009e7c:	bf38      	it	cc
 8009e7e:	2300      	movcc	r3, #0
 8009e80:	4423      	add	r3, r4
 8009e82:	e015      	b.n	8009eb0 <rshift+0x68>
 8009e84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e88:	f1c1 0820 	rsb	r8, r1, #32
 8009e8c:	40cf      	lsrs	r7, r1
 8009e8e:	f105 0e04 	add.w	lr, r5, #4
 8009e92:	46a1      	mov	r9, r4
 8009e94:	4576      	cmp	r6, lr
 8009e96:	46f4      	mov	ip, lr
 8009e98:	d815      	bhi.n	8009ec6 <rshift+0x7e>
 8009e9a:	1a9a      	subs	r2, r3, r2
 8009e9c:	0092      	lsls	r2, r2, #2
 8009e9e:	3a04      	subs	r2, #4
 8009ea0:	3501      	adds	r5, #1
 8009ea2:	42ae      	cmp	r6, r5
 8009ea4:	bf38      	it	cc
 8009ea6:	2200      	movcc	r2, #0
 8009ea8:	18a3      	adds	r3, r4, r2
 8009eaa:	50a7      	str	r7, [r4, r2]
 8009eac:	b107      	cbz	r7, 8009eb0 <rshift+0x68>
 8009eae:	3304      	adds	r3, #4
 8009eb0:	1b1a      	subs	r2, r3, r4
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009eb8:	bf08      	it	eq
 8009eba:	2300      	moveq	r3, #0
 8009ebc:	6102      	str	r2, [r0, #16]
 8009ebe:	bf08      	it	eq
 8009ec0:	6143      	streq	r3, [r0, #20]
 8009ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ec6:	f8dc c000 	ldr.w	ip, [ip]
 8009eca:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ece:	ea4c 0707 	orr.w	r7, ip, r7
 8009ed2:	f849 7b04 	str.w	r7, [r9], #4
 8009ed6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009eda:	40cf      	lsrs	r7, r1
 8009edc:	e7da      	b.n	8009e94 <rshift+0x4c>
 8009ede:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ee2:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ee6:	e7c3      	b.n	8009e70 <rshift+0x28>
 8009ee8:	4623      	mov	r3, r4
 8009eea:	e7e1      	b.n	8009eb0 <rshift+0x68>

08009eec <__hexdig_fun>:
 8009eec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ef0:	2b09      	cmp	r3, #9
 8009ef2:	d802      	bhi.n	8009efa <__hexdig_fun+0xe>
 8009ef4:	3820      	subs	r0, #32
 8009ef6:	b2c0      	uxtb	r0, r0
 8009ef8:	4770      	bx	lr
 8009efa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d801      	bhi.n	8009f06 <__hexdig_fun+0x1a>
 8009f02:	3847      	subs	r0, #71	; 0x47
 8009f04:	e7f7      	b.n	8009ef6 <__hexdig_fun+0xa>
 8009f06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	d801      	bhi.n	8009f12 <__hexdig_fun+0x26>
 8009f0e:	3827      	subs	r0, #39	; 0x27
 8009f10:	e7f1      	b.n	8009ef6 <__hexdig_fun+0xa>
 8009f12:	2000      	movs	r0, #0
 8009f14:	4770      	bx	lr
	...

08009f18 <__gethex>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	4617      	mov	r7, r2
 8009f1e:	680a      	ldr	r2, [r1, #0]
 8009f20:	b085      	sub	sp, #20
 8009f22:	f102 0b02 	add.w	fp, r2, #2
 8009f26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f2e:	4681      	mov	r9, r0
 8009f30:	468a      	mov	sl, r1
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	32fe      	adds	r2, #254	; 0xfe
 8009f36:	eb02 030b 	add.w	r3, r2, fp
 8009f3a:	46d8      	mov	r8, fp
 8009f3c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	2830      	cmp	r0, #48	; 0x30
 8009f44:	d0f7      	beq.n	8009f36 <__gethex+0x1e>
 8009f46:	f7ff ffd1 	bl	8009eec <__hexdig_fun>
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d138      	bne.n	8009fc2 <__gethex+0xaa>
 8009f50:	49a7      	ldr	r1, [pc, #668]	; (800a1f0 <__gethex+0x2d8>)
 8009f52:	2201      	movs	r2, #1
 8009f54:	4640      	mov	r0, r8
 8009f56:	f7ff ff09 	bl	8009d6c <strncmp>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d169      	bne.n	800a034 <__gethex+0x11c>
 8009f60:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009f64:	465d      	mov	r5, fp
 8009f66:	f7ff ffc1 	bl	8009eec <__hexdig_fun>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d064      	beq.n	800a038 <__gethex+0x120>
 8009f6e:	465a      	mov	r2, fp
 8009f70:	7810      	ldrb	r0, [r2, #0]
 8009f72:	2830      	cmp	r0, #48	; 0x30
 8009f74:	4690      	mov	r8, r2
 8009f76:	f102 0201 	add.w	r2, r2, #1
 8009f7a:	d0f9      	beq.n	8009f70 <__gethex+0x58>
 8009f7c:	f7ff ffb6 	bl	8009eec <__hexdig_fun>
 8009f80:	2301      	movs	r3, #1
 8009f82:	fab0 f480 	clz	r4, r0
 8009f86:	0964      	lsrs	r4, r4, #5
 8009f88:	465e      	mov	r6, fp
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	4642      	mov	r2, r8
 8009f8e:	4615      	mov	r5, r2
 8009f90:	3201      	adds	r2, #1
 8009f92:	7828      	ldrb	r0, [r5, #0]
 8009f94:	f7ff ffaa 	bl	8009eec <__hexdig_fun>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d1f8      	bne.n	8009f8e <__gethex+0x76>
 8009f9c:	4994      	ldr	r1, [pc, #592]	; (800a1f0 <__gethex+0x2d8>)
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f7ff fee3 	bl	8009d6c <strncmp>
 8009fa6:	b978      	cbnz	r0, 8009fc8 <__gethex+0xb0>
 8009fa8:	b946      	cbnz	r6, 8009fbc <__gethex+0xa4>
 8009faa:	1c6e      	adds	r6, r5, #1
 8009fac:	4632      	mov	r2, r6
 8009fae:	4615      	mov	r5, r2
 8009fb0:	3201      	adds	r2, #1
 8009fb2:	7828      	ldrb	r0, [r5, #0]
 8009fb4:	f7ff ff9a 	bl	8009eec <__hexdig_fun>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d1f8      	bne.n	8009fae <__gethex+0x96>
 8009fbc:	1b73      	subs	r3, r6, r5
 8009fbe:	009e      	lsls	r6, r3, #2
 8009fc0:	e004      	b.n	8009fcc <__gethex+0xb4>
 8009fc2:	2400      	movs	r4, #0
 8009fc4:	4626      	mov	r6, r4
 8009fc6:	e7e1      	b.n	8009f8c <__gethex+0x74>
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	d1f7      	bne.n	8009fbc <__gethex+0xa4>
 8009fcc:	782b      	ldrb	r3, [r5, #0]
 8009fce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fd2:	2b50      	cmp	r3, #80	; 0x50
 8009fd4:	d13d      	bne.n	800a052 <__gethex+0x13a>
 8009fd6:	786b      	ldrb	r3, [r5, #1]
 8009fd8:	2b2b      	cmp	r3, #43	; 0x2b
 8009fda:	d02f      	beq.n	800a03c <__gethex+0x124>
 8009fdc:	2b2d      	cmp	r3, #45	; 0x2d
 8009fde:	d031      	beq.n	800a044 <__gethex+0x12c>
 8009fe0:	1c69      	adds	r1, r5, #1
 8009fe2:	f04f 0b00 	mov.w	fp, #0
 8009fe6:	7808      	ldrb	r0, [r1, #0]
 8009fe8:	f7ff ff80 	bl	8009eec <__hexdig_fun>
 8009fec:	1e42      	subs	r2, r0, #1
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	2a18      	cmp	r2, #24
 8009ff2:	d82e      	bhi.n	800a052 <__gethex+0x13a>
 8009ff4:	f1a0 0210 	sub.w	r2, r0, #16
 8009ff8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ffc:	f7ff ff76 	bl	8009eec <__hexdig_fun>
 800a000:	f100 3cff 	add.w	ip, r0, #4294967295
 800a004:	fa5f fc8c 	uxtb.w	ip, ip
 800a008:	f1bc 0f18 	cmp.w	ip, #24
 800a00c:	d91d      	bls.n	800a04a <__gethex+0x132>
 800a00e:	f1bb 0f00 	cmp.w	fp, #0
 800a012:	d000      	beq.n	800a016 <__gethex+0xfe>
 800a014:	4252      	negs	r2, r2
 800a016:	4416      	add	r6, r2
 800a018:	f8ca 1000 	str.w	r1, [sl]
 800a01c:	b1dc      	cbz	r4, 800a056 <__gethex+0x13e>
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	bf14      	ite	ne
 800a024:	f04f 0800 	movne.w	r8, #0
 800a028:	f04f 0806 	moveq.w	r8, #6
 800a02c:	4640      	mov	r0, r8
 800a02e:	b005      	add	sp, #20
 800a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a034:	4645      	mov	r5, r8
 800a036:	4626      	mov	r6, r4
 800a038:	2401      	movs	r4, #1
 800a03a:	e7c7      	b.n	8009fcc <__gethex+0xb4>
 800a03c:	f04f 0b00 	mov.w	fp, #0
 800a040:	1ca9      	adds	r1, r5, #2
 800a042:	e7d0      	b.n	8009fe6 <__gethex+0xce>
 800a044:	f04f 0b01 	mov.w	fp, #1
 800a048:	e7fa      	b.n	800a040 <__gethex+0x128>
 800a04a:	230a      	movs	r3, #10
 800a04c:	fb03 0002 	mla	r0, r3, r2, r0
 800a050:	e7d0      	b.n	8009ff4 <__gethex+0xdc>
 800a052:	4629      	mov	r1, r5
 800a054:	e7e0      	b.n	800a018 <__gethex+0x100>
 800a056:	eba5 0308 	sub.w	r3, r5, r8
 800a05a:	3b01      	subs	r3, #1
 800a05c:	4621      	mov	r1, r4
 800a05e:	2b07      	cmp	r3, #7
 800a060:	dc0a      	bgt.n	800a078 <__gethex+0x160>
 800a062:	4648      	mov	r0, r9
 800a064:	f7fe f91e 	bl	80082a4 <_Balloc>
 800a068:	4604      	mov	r4, r0
 800a06a:	b940      	cbnz	r0, 800a07e <__gethex+0x166>
 800a06c:	4b61      	ldr	r3, [pc, #388]	; (800a1f4 <__gethex+0x2dc>)
 800a06e:	4602      	mov	r2, r0
 800a070:	21e4      	movs	r1, #228	; 0xe4
 800a072:	4861      	ldr	r0, [pc, #388]	; (800a1f8 <__gethex+0x2e0>)
 800a074:	f7ff feb4 	bl	8009de0 <__assert_func>
 800a078:	3101      	adds	r1, #1
 800a07a:	105b      	asrs	r3, r3, #1
 800a07c:	e7ef      	b.n	800a05e <__gethex+0x146>
 800a07e:	f100 0a14 	add.w	sl, r0, #20
 800a082:	2300      	movs	r3, #0
 800a084:	495a      	ldr	r1, [pc, #360]	; (800a1f0 <__gethex+0x2d8>)
 800a086:	f8cd a004 	str.w	sl, [sp, #4]
 800a08a:	469b      	mov	fp, r3
 800a08c:	45a8      	cmp	r8, r5
 800a08e:	d342      	bcc.n	800a116 <__gethex+0x1fe>
 800a090:	9801      	ldr	r0, [sp, #4]
 800a092:	f840 bb04 	str.w	fp, [r0], #4
 800a096:	eba0 000a 	sub.w	r0, r0, sl
 800a09a:	1080      	asrs	r0, r0, #2
 800a09c:	6120      	str	r0, [r4, #16]
 800a09e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a0a2:	4658      	mov	r0, fp
 800a0a4:	f7fe f9f0 	bl	8008488 <__hi0bits>
 800a0a8:	683d      	ldr	r5, [r7, #0]
 800a0aa:	eba8 0000 	sub.w	r0, r8, r0
 800a0ae:	42a8      	cmp	r0, r5
 800a0b0:	dd59      	ble.n	800a166 <__gethex+0x24e>
 800a0b2:	eba0 0805 	sub.w	r8, r0, r5
 800a0b6:	4641      	mov	r1, r8
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7fe fd7f 	bl	8008bbc <__any_on>
 800a0be:	4683      	mov	fp, r0
 800a0c0:	b1b8      	cbz	r0, 800a0f2 <__gethex+0x1da>
 800a0c2:	f108 33ff 	add.w	r3, r8, #4294967295
 800a0c6:	1159      	asrs	r1, r3, #5
 800a0c8:	f003 021f 	and.w	r2, r3, #31
 800a0cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a0d0:	f04f 0b01 	mov.w	fp, #1
 800a0d4:	fa0b f202 	lsl.w	r2, fp, r2
 800a0d8:	420a      	tst	r2, r1
 800a0da:	d00a      	beq.n	800a0f2 <__gethex+0x1da>
 800a0dc:	455b      	cmp	r3, fp
 800a0de:	dd06      	ble.n	800a0ee <__gethex+0x1d6>
 800a0e0:	f1a8 0102 	sub.w	r1, r8, #2
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f7fe fd69 	bl	8008bbc <__any_on>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d138      	bne.n	800a160 <__gethex+0x248>
 800a0ee:	f04f 0b02 	mov.w	fp, #2
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f7ff fea7 	bl	8009e48 <rshift>
 800a0fa:	4446      	add	r6, r8
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	42b3      	cmp	r3, r6
 800a100:	da41      	bge.n	800a186 <__gethex+0x26e>
 800a102:	4621      	mov	r1, r4
 800a104:	4648      	mov	r0, r9
 800a106:	f7fe f90d 	bl	8008324 <_Bfree>
 800a10a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a10c:	2300      	movs	r3, #0
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a114:	e78a      	b.n	800a02c <__gethex+0x114>
 800a116:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a11a:	2a2e      	cmp	r2, #46	; 0x2e
 800a11c:	d014      	beq.n	800a148 <__gethex+0x230>
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d106      	bne.n	800a130 <__gethex+0x218>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	f843 bb04 	str.w	fp, [r3], #4
 800a128:	f04f 0b00 	mov.w	fp, #0
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	465b      	mov	r3, fp
 800a130:	7828      	ldrb	r0, [r5, #0]
 800a132:	9303      	str	r3, [sp, #12]
 800a134:	f7ff feda 	bl	8009eec <__hexdig_fun>
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	f000 000f 	and.w	r0, r0, #15
 800a13e:	4098      	lsls	r0, r3
 800a140:	ea4b 0b00 	orr.w	fp, fp, r0
 800a144:	3304      	adds	r3, #4
 800a146:	e7a1      	b.n	800a08c <__gethex+0x174>
 800a148:	45a8      	cmp	r8, r5
 800a14a:	d8e8      	bhi.n	800a11e <__gethex+0x206>
 800a14c:	2201      	movs	r2, #1
 800a14e:	4628      	mov	r0, r5
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	f7ff fe0b 	bl	8009d6c <strncmp>
 800a156:	4926      	ldr	r1, [pc, #152]	; (800a1f0 <__gethex+0x2d8>)
 800a158:	9b03      	ldr	r3, [sp, #12]
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d1df      	bne.n	800a11e <__gethex+0x206>
 800a15e:	e795      	b.n	800a08c <__gethex+0x174>
 800a160:	f04f 0b03 	mov.w	fp, #3
 800a164:	e7c5      	b.n	800a0f2 <__gethex+0x1da>
 800a166:	da0b      	bge.n	800a180 <__gethex+0x268>
 800a168:	eba5 0800 	sub.w	r8, r5, r0
 800a16c:	4621      	mov	r1, r4
 800a16e:	4642      	mov	r2, r8
 800a170:	4648      	mov	r0, r9
 800a172:	f7fe faf1 	bl	8008758 <__lshift>
 800a176:	eba6 0608 	sub.w	r6, r6, r8
 800a17a:	4604      	mov	r4, r0
 800a17c:	f100 0a14 	add.w	sl, r0, #20
 800a180:	f04f 0b00 	mov.w	fp, #0
 800a184:	e7ba      	b.n	800a0fc <__gethex+0x1e4>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	42b3      	cmp	r3, r6
 800a18a:	dd73      	ble.n	800a274 <__gethex+0x35c>
 800a18c:	1b9e      	subs	r6, r3, r6
 800a18e:	42b5      	cmp	r5, r6
 800a190:	dc34      	bgt.n	800a1fc <__gethex+0x2e4>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d023      	beq.n	800a1e0 <__gethex+0x2c8>
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d025      	beq.n	800a1e8 <__gethex+0x2d0>
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d115      	bne.n	800a1cc <__gethex+0x2b4>
 800a1a0:	42b5      	cmp	r5, r6
 800a1a2:	d113      	bne.n	800a1cc <__gethex+0x2b4>
 800a1a4:	2d01      	cmp	r5, #1
 800a1a6:	d10b      	bne.n	800a1c0 <__gethex+0x2a8>
 800a1a8:	9a02      	ldr	r2, [sp, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	f8ca 3000 	str.w	r3, [sl]
 800a1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a1bc:	601c      	str	r4, [r3, #0]
 800a1be:	e735      	b.n	800a02c <__gethex+0x114>
 800a1c0:	1e69      	subs	r1, r5, #1
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7fe fcfa 	bl	8008bbc <__any_on>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d1ed      	bne.n	800a1a8 <__gethex+0x290>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4648      	mov	r0, r9
 800a1d0:	f7fe f8a8 	bl	8008324 <_Bfree>
 800a1d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a1de:	e725      	b.n	800a02c <__gethex+0x114>
 800a1e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1f2      	bne.n	800a1cc <__gethex+0x2b4>
 800a1e6:	e7df      	b.n	800a1a8 <__gethex+0x290>
 800a1e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1dc      	bne.n	800a1a8 <__gethex+0x290>
 800a1ee:	e7ed      	b.n	800a1cc <__gethex+0x2b4>
 800a1f0:	0800bd44 	.word	0x0800bd44
 800a1f4:	0800bbd9 	.word	0x0800bbd9
 800a1f8:	0800beee 	.word	0x0800beee
 800a1fc:	f106 38ff 	add.w	r8, r6, #4294967295
 800a200:	f1bb 0f00 	cmp.w	fp, #0
 800a204:	d133      	bne.n	800a26e <__gethex+0x356>
 800a206:	f1b8 0f00 	cmp.w	r8, #0
 800a20a:	d004      	beq.n	800a216 <__gethex+0x2fe>
 800a20c:	4641      	mov	r1, r8
 800a20e:	4620      	mov	r0, r4
 800a210:	f7fe fcd4 	bl	8008bbc <__any_on>
 800a214:	4683      	mov	fp, r0
 800a216:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a21a:	2301      	movs	r3, #1
 800a21c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a220:	f008 081f 	and.w	r8, r8, #31
 800a224:	fa03 f308 	lsl.w	r3, r3, r8
 800a228:	4213      	tst	r3, r2
 800a22a:	4631      	mov	r1, r6
 800a22c:	4620      	mov	r0, r4
 800a22e:	bf18      	it	ne
 800a230:	f04b 0b02 	orrne.w	fp, fp, #2
 800a234:	1bad      	subs	r5, r5, r6
 800a236:	f7ff fe07 	bl	8009e48 <rshift>
 800a23a:	687e      	ldr	r6, [r7, #4]
 800a23c:	f04f 0802 	mov.w	r8, #2
 800a240:	f1bb 0f00 	cmp.w	fp, #0
 800a244:	d04a      	beq.n	800a2dc <__gethex+0x3c4>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d016      	beq.n	800a27a <__gethex+0x362>
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d018      	beq.n	800a282 <__gethex+0x36a>
 800a250:	2b01      	cmp	r3, #1
 800a252:	d109      	bne.n	800a268 <__gethex+0x350>
 800a254:	f01b 0f02 	tst.w	fp, #2
 800a258:	d006      	beq.n	800a268 <__gethex+0x350>
 800a25a:	f8da 3000 	ldr.w	r3, [sl]
 800a25e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a262:	f01b 0f01 	tst.w	fp, #1
 800a266:	d10f      	bne.n	800a288 <__gethex+0x370>
 800a268:	f048 0810 	orr.w	r8, r8, #16
 800a26c:	e036      	b.n	800a2dc <__gethex+0x3c4>
 800a26e:	f04f 0b01 	mov.w	fp, #1
 800a272:	e7d0      	b.n	800a216 <__gethex+0x2fe>
 800a274:	f04f 0801 	mov.w	r8, #1
 800a278:	e7e2      	b.n	800a240 <__gethex+0x328>
 800a27a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a27c:	f1c3 0301 	rsb	r3, r3, #1
 800a280:	930f      	str	r3, [sp, #60]	; 0x3c
 800a282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0ef      	beq.n	800a268 <__gethex+0x350>
 800a288:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a28c:	f104 0214 	add.w	r2, r4, #20
 800a290:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a29a:	2300      	movs	r3, #0
 800a29c:	4694      	mov	ip, r2
 800a29e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a2a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a2a6:	d01e      	beq.n	800a2e6 <__gethex+0x3ce>
 800a2a8:	3101      	adds	r1, #1
 800a2aa:	f8cc 1000 	str.w	r1, [ip]
 800a2ae:	f1b8 0f02 	cmp.w	r8, #2
 800a2b2:	f104 0214 	add.w	r2, r4, #20
 800a2b6:	d13d      	bne.n	800a334 <__gethex+0x41c>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	42ab      	cmp	r3, r5
 800a2be:	d10b      	bne.n	800a2d8 <__gethex+0x3c0>
 800a2c0:	1169      	asrs	r1, r5, #5
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f005 051f 	and.w	r5, r5, #31
 800a2c8:	fa03 f505 	lsl.w	r5, r3, r5
 800a2cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2d0:	421d      	tst	r5, r3
 800a2d2:	bf18      	it	ne
 800a2d4:	f04f 0801 	movne.w	r8, #1
 800a2d8:	f048 0820 	orr.w	r8, r8, #32
 800a2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2de:	601c      	str	r4, [r3, #0]
 800a2e0:	9b02      	ldr	r3, [sp, #8]
 800a2e2:	601e      	str	r6, [r3, #0]
 800a2e4:	e6a2      	b.n	800a02c <__gethex+0x114>
 800a2e6:	4290      	cmp	r0, r2
 800a2e8:	f842 3c04 	str.w	r3, [r2, #-4]
 800a2ec:	d8d6      	bhi.n	800a29c <__gethex+0x384>
 800a2ee:	68a2      	ldr	r2, [r4, #8]
 800a2f0:	4593      	cmp	fp, r2
 800a2f2:	db17      	blt.n	800a324 <__gethex+0x40c>
 800a2f4:	6861      	ldr	r1, [r4, #4]
 800a2f6:	4648      	mov	r0, r9
 800a2f8:	3101      	adds	r1, #1
 800a2fa:	f7fd ffd3 	bl	80082a4 <_Balloc>
 800a2fe:	4682      	mov	sl, r0
 800a300:	b918      	cbnz	r0, 800a30a <__gethex+0x3f2>
 800a302:	4b1b      	ldr	r3, [pc, #108]	; (800a370 <__gethex+0x458>)
 800a304:	4602      	mov	r2, r0
 800a306:	2184      	movs	r1, #132	; 0x84
 800a308:	e6b3      	b.n	800a072 <__gethex+0x15a>
 800a30a:	6922      	ldr	r2, [r4, #16]
 800a30c:	3202      	adds	r2, #2
 800a30e:	f104 010c 	add.w	r1, r4, #12
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	300c      	adds	r0, #12
 800a316:	f7ff fd4b 	bl	8009db0 <memcpy>
 800a31a:	4621      	mov	r1, r4
 800a31c:	4648      	mov	r0, r9
 800a31e:	f7fe f801 	bl	8008324 <_Bfree>
 800a322:	4654      	mov	r4, sl
 800a324:	6922      	ldr	r2, [r4, #16]
 800a326:	1c51      	adds	r1, r2, #1
 800a328:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a32c:	6121      	str	r1, [r4, #16]
 800a32e:	2101      	movs	r1, #1
 800a330:	6151      	str	r1, [r2, #20]
 800a332:	e7bc      	b.n	800a2ae <__gethex+0x396>
 800a334:	6921      	ldr	r1, [r4, #16]
 800a336:	4559      	cmp	r1, fp
 800a338:	dd0b      	ble.n	800a352 <__gethex+0x43a>
 800a33a:	2101      	movs	r1, #1
 800a33c:	4620      	mov	r0, r4
 800a33e:	f7ff fd83 	bl	8009e48 <rshift>
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	3601      	adds	r6, #1
 800a346:	42b3      	cmp	r3, r6
 800a348:	f6ff aedb 	blt.w	800a102 <__gethex+0x1ea>
 800a34c:	f04f 0801 	mov.w	r8, #1
 800a350:	e7c2      	b.n	800a2d8 <__gethex+0x3c0>
 800a352:	f015 051f 	ands.w	r5, r5, #31
 800a356:	d0f9      	beq.n	800a34c <__gethex+0x434>
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	441a      	add	r2, r3
 800a35c:	f1c5 0520 	rsb	r5, r5, #32
 800a360:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a364:	f7fe f890 	bl	8008488 <__hi0bits>
 800a368:	42a8      	cmp	r0, r5
 800a36a:	dbe6      	blt.n	800a33a <__gethex+0x422>
 800a36c:	e7ee      	b.n	800a34c <__gethex+0x434>
 800a36e:	bf00      	nop
 800a370:	0800bbd9 	.word	0x0800bbd9

0800a374 <L_shift>:
 800a374:	f1c2 0208 	rsb	r2, r2, #8
 800a378:	0092      	lsls	r2, r2, #2
 800a37a:	b570      	push	{r4, r5, r6, lr}
 800a37c:	f1c2 0620 	rsb	r6, r2, #32
 800a380:	6843      	ldr	r3, [r0, #4]
 800a382:	6804      	ldr	r4, [r0, #0]
 800a384:	fa03 f506 	lsl.w	r5, r3, r6
 800a388:	432c      	orrs	r4, r5
 800a38a:	40d3      	lsrs	r3, r2
 800a38c:	6004      	str	r4, [r0, #0]
 800a38e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a392:	4288      	cmp	r0, r1
 800a394:	d3f4      	bcc.n	800a380 <L_shift+0xc>
 800a396:	bd70      	pop	{r4, r5, r6, pc}

0800a398 <__match>:
 800a398:	b530      	push	{r4, r5, lr}
 800a39a:	6803      	ldr	r3, [r0, #0]
 800a39c:	3301      	adds	r3, #1
 800a39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3a2:	b914      	cbnz	r4, 800a3aa <__match+0x12>
 800a3a4:	6003      	str	r3, [r0, #0]
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	bd30      	pop	{r4, r5, pc}
 800a3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3b2:	2d19      	cmp	r5, #25
 800a3b4:	bf98      	it	ls
 800a3b6:	3220      	addls	r2, #32
 800a3b8:	42a2      	cmp	r2, r4
 800a3ba:	d0f0      	beq.n	800a39e <__match+0x6>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e7f3      	b.n	800a3a8 <__match+0x10>

0800a3c0 <__hexnan>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	680b      	ldr	r3, [r1, #0]
 800a3c6:	6801      	ldr	r1, [r0, #0]
 800a3c8:	115e      	asrs	r6, r3, #5
 800a3ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3ce:	f013 031f 	ands.w	r3, r3, #31
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	bf18      	it	ne
 800a3d6:	3604      	addne	r6, #4
 800a3d8:	2500      	movs	r5, #0
 800a3da:	1f37      	subs	r7, r6, #4
 800a3dc:	4682      	mov	sl, r0
 800a3de:	4690      	mov	r8, r2
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3e6:	46b9      	mov	r9, r7
 800a3e8:	463c      	mov	r4, r7
 800a3ea:	9502      	str	r5, [sp, #8]
 800a3ec:	46ab      	mov	fp, r5
 800a3ee:	784a      	ldrb	r2, [r1, #1]
 800a3f0:	1c4b      	adds	r3, r1, #1
 800a3f2:	9303      	str	r3, [sp, #12]
 800a3f4:	b342      	cbz	r2, 800a448 <__hexnan+0x88>
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	9105      	str	r1, [sp, #20]
 800a3fa:	9204      	str	r2, [sp, #16]
 800a3fc:	f7ff fd76 	bl	8009eec <__hexdig_fun>
 800a400:	2800      	cmp	r0, #0
 800a402:	d14f      	bne.n	800a4a4 <__hexnan+0xe4>
 800a404:	9a04      	ldr	r2, [sp, #16]
 800a406:	9905      	ldr	r1, [sp, #20]
 800a408:	2a20      	cmp	r2, #32
 800a40a:	d818      	bhi.n	800a43e <__hexnan+0x7e>
 800a40c:	9b02      	ldr	r3, [sp, #8]
 800a40e:	459b      	cmp	fp, r3
 800a410:	dd13      	ble.n	800a43a <__hexnan+0x7a>
 800a412:	454c      	cmp	r4, r9
 800a414:	d206      	bcs.n	800a424 <__hexnan+0x64>
 800a416:	2d07      	cmp	r5, #7
 800a418:	dc04      	bgt.n	800a424 <__hexnan+0x64>
 800a41a:	462a      	mov	r2, r5
 800a41c:	4649      	mov	r1, r9
 800a41e:	4620      	mov	r0, r4
 800a420:	f7ff ffa8 	bl	800a374 <L_shift>
 800a424:	4544      	cmp	r4, r8
 800a426:	d950      	bls.n	800a4ca <__hexnan+0x10a>
 800a428:	2300      	movs	r3, #0
 800a42a:	f1a4 0904 	sub.w	r9, r4, #4
 800a42e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a432:	f8cd b008 	str.w	fp, [sp, #8]
 800a436:	464c      	mov	r4, r9
 800a438:	461d      	mov	r5, r3
 800a43a:	9903      	ldr	r1, [sp, #12]
 800a43c:	e7d7      	b.n	800a3ee <__hexnan+0x2e>
 800a43e:	2a29      	cmp	r2, #41	; 0x29
 800a440:	d155      	bne.n	800a4ee <__hexnan+0x12e>
 800a442:	3102      	adds	r1, #2
 800a444:	f8ca 1000 	str.w	r1, [sl]
 800a448:	f1bb 0f00 	cmp.w	fp, #0
 800a44c:	d04f      	beq.n	800a4ee <__hexnan+0x12e>
 800a44e:	454c      	cmp	r4, r9
 800a450:	d206      	bcs.n	800a460 <__hexnan+0xa0>
 800a452:	2d07      	cmp	r5, #7
 800a454:	dc04      	bgt.n	800a460 <__hexnan+0xa0>
 800a456:	462a      	mov	r2, r5
 800a458:	4649      	mov	r1, r9
 800a45a:	4620      	mov	r0, r4
 800a45c:	f7ff ff8a 	bl	800a374 <L_shift>
 800a460:	4544      	cmp	r4, r8
 800a462:	d934      	bls.n	800a4ce <__hexnan+0x10e>
 800a464:	f1a8 0204 	sub.w	r2, r8, #4
 800a468:	4623      	mov	r3, r4
 800a46a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a46e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a472:	429f      	cmp	r7, r3
 800a474:	d2f9      	bcs.n	800a46a <__hexnan+0xaa>
 800a476:	1b3b      	subs	r3, r7, r4
 800a478:	f023 0303 	bic.w	r3, r3, #3
 800a47c:	3304      	adds	r3, #4
 800a47e:	3e03      	subs	r6, #3
 800a480:	3401      	adds	r4, #1
 800a482:	42a6      	cmp	r6, r4
 800a484:	bf38      	it	cc
 800a486:	2304      	movcc	r3, #4
 800a488:	4443      	add	r3, r8
 800a48a:	2200      	movs	r2, #0
 800a48c:	f843 2b04 	str.w	r2, [r3], #4
 800a490:	429f      	cmp	r7, r3
 800a492:	d2fb      	bcs.n	800a48c <__hexnan+0xcc>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	b91b      	cbnz	r3, 800a4a0 <__hexnan+0xe0>
 800a498:	4547      	cmp	r7, r8
 800a49a:	d126      	bne.n	800a4ea <__hexnan+0x12a>
 800a49c:	2301      	movs	r3, #1
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	2005      	movs	r0, #5
 800a4a2:	e025      	b.n	800a4f0 <__hexnan+0x130>
 800a4a4:	3501      	adds	r5, #1
 800a4a6:	2d08      	cmp	r5, #8
 800a4a8:	f10b 0b01 	add.w	fp, fp, #1
 800a4ac:	dd06      	ble.n	800a4bc <__hexnan+0xfc>
 800a4ae:	4544      	cmp	r4, r8
 800a4b0:	d9c3      	bls.n	800a43a <__hexnan+0x7a>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4b8:	2501      	movs	r5, #1
 800a4ba:	3c04      	subs	r4, #4
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	f000 000f 	and.w	r0, r0, #15
 800a4c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4c6:	6020      	str	r0, [r4, #0]
 800a4c8:	e7b7      	b.n	800a43a <__hexnan+0x7a>
 800a4ca:	2508      	movs	r5, #8
 800a4cc:	e7b5      	b.n	800a43a <__hexnan+0x7a>
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d0df      	beq.n	800a494 <__hexnan+0xd4>
 800a4d4:	f1c3 0320 	rsb	r3, r3, #32
 800a4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4dc:	40da      	lsrs	r2, r3
 800a4de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800a4e8:	e7d4      	b.n	800a494 <__hexnan+0xd4>
 800a4ea:	3f04      	subs	r7, #4
 800a4ec:	e7d2      	b.n	800a494 <__hexnan+0xd4>
 800a4ee:	2004      	movs	r0, #4
 800a4f0:	b007      	add	sp, #28
 800a4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4f6 <__ascii_mbtowc>:
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	b901      	cbnz	r1, 800a4fc <__ascii_mbtowc+0x6>
 800a4fa:	a901      	add	r1, sp, #4
 800a4fc:	b142      	cbz	r2, 800a510 <__ascii_mbtowc+0x1a>
 800a4fe:	b14b      	cbz	r3, 800a514 <__ascii_mbtowc+0x1e>
 800a500:	7813      	ldrb	r3, [r2, #0]
 800a502:	600b      	str	r3, [r1, #0]
 800a504:	7812      	ldrb	r2, [r2, #0]
 800a506:	1e10      	subs	r0, r2, #0
 800a508:	bf18      	it	ne
 800a50a:	2001      	movne	r0, #1
 800a50c:	b002      	add	sp, #8
 800a50e:	4770      	bx	lr
 800a510:	4610      	mov	r0, r2
 800a512:	e7fb      	b.n	800a50c <__ascii_mbtowc+0x16>
 800a514:	f06f 0001 	mvn.w	r0, #1
 800a518:	e7f8      	b.n	800a50c <__ascii_mbtowc+0x16>

0800a51a <_realloc_r>:
 800a51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51e:	4680      	mov	r8, r0
 800a520:	4614      	mov	r4, r2
 800a522:	460e      	mov	r6, r1
 800a524:	b921      	cbnz	r1, 800a530 <_realloc_r+0x16>
 800a526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a52a:	4611      	mov	r1, r2
 800a52c:	f7fd be2e 	b.w	800818c <_malloc_r>
 800a530:	b92a      	cbnz	r2, 800a53e <_realloc_r+0x24>
 800a532:	f7fd fdb7 	bl	80080a4 <_free_r>
 800a536:	4625      	mov	r5, r4
 800a538:	4628      	mov	r0, r5
 800a53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53e:	f000 f842 	bl	800a5c6 <_malloc_usable_size_r>
 800a542:	4284      	cmp	r4, r0
 800a544:	4607      	mov	r7, r0
 800a546:	d802      	bhi.n	800a54e <_realloc_r+0x34>
 800a548:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a54c:	d812      	bhi.n	800a574 <_realloc_r+0x5a>
 800a54e:	4621      	mov	r1, r4
 800a550:	4640      	mov	r0, r8
 800a552:	f7fd fe1b 	bl	800818c <_malloc_r>
 800a556:	4605      	mov	r5, r0
 800a558:	2800      	cmp	r0, #0
 800a55a:	d0ed      	beq.n	800a538 <_realloc_r+0x1e>
 800a55c:	42bc      	cmp	r4, r7
 800a55e:	4622      	mov	r2, r4
 800a560:	4631      	mov	r1, r6
 800a562:	bf28      	it	cs
 800a564:	463a      	movcs	r2, r7
 800a566:	f7ff fc23 	bl	8009db0 <memcpy>
 800a56a:	4631      	mov	r1, r6
 800a56c:	4640      	mov	r0, r8
 800a56e:	f7fd fd99 	bl	80080a4 <_free_r>
 800a572:	e7e1      	b.n	800a538 <_realloc_r+0x1e>
 800a574:	4635      	mov	r5, r6
 800a576:	e7df      	b.n	800a538 <_realloc_r+0x1e>

0800a578 <__ascii_wctomb>:
 800a578:	b149      	cbz	r1, 800a58e <__ascii_wctomb+0x16>
 800a57a:	2aff      	cmp	r2, #255	; 0xff
 800a57c:	bf85      	ittet	hi
 800a57e:	238a      	movhi	r3, #138	; 0x8a
 800a580:	6003      	strhi	r3, [r0, #0]
 800a582:	700a      	strbls	r2, [r1, #0]
 800a584:	f04f 30ff 	movhi.w	r0, #4294967295
 800a588:	bf98      	it	ls
 800a58a:	2001      	movls	r0, #1
 800a58c:	4770      	bx	lr
 800a58e:	4608      	mov	r0, r1
 800a590:	4770      	bx	lr
	...

0800a594 <fiprintf>:
 800a594:	b40e      	push	{r1, r2, r3}
 800a596:	b503      	push	{r0, r1, lr}
 800a598:	4601      	mov	r1, r0
 800a59a:	ab03      	add	r3, sp, #12
 800a59c:	4805      	ldr	r0, [pc, #20]	; (800a5b4 <fiprintf+0x20>)
 800a59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a2:	6800      	ldr	r0, [r0, #0]
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	f000 f83f 	bl	800a628 <_vfiprintf_r>
 800a5aa:	b002      	add	sp, #8
 800a5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b0:	b003      	add	sp, #12
 800a5b2:	4770      	bx	lr
 800a5b4:	20000070 	.word	0x20000070

0800a5b8 <abort>:
 800a5b8:	b508      	push	{r3, lr}
 800a5ba:	2006      	movs	r0, #6
 800a5bc:	f000 fa0c 	bl	800a9d8 <raise>
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	f7f8 fc9b 	bl	8002efc <_exit>

0800a5c6 <_malloc_usable_size_r>:
 800a5c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ca:	1f18      	subs	r0, r3, #4
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bfbc      	itt	lt
 800a5d0:	580b      	ldrlt	r3, [r1, r0]
 800a5d2:	18c0      	addlt	r0, r0, r3
 800a5d4:	4770      	bx	lr

0800a5d6 <__sfputc_r>:
 800a5d6:	6893      	ldr	r3, [r2, #8]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	b410      	push	{r4}
 800a5de:	6093      	str	r3, [r2, #8]
 800a5e0:	da08      	bge.n	800a5f4 <__sfputc_r+0x1e>
 800a5e2:	6994      	ldr	r4, [r2, #24]
 800a5e4:	42a3      	cmp	r3, r4
 800a5e6:	db01      	blt.n	800a5ec <__sfputc_r+0x16>
 800a5e8:	290a      	cmp	r1, #10
 800a5ea:	d103      	bne.n	800a5f4 <__sfputc_r+0x1e>
 800a5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5f0:	f000 b934 	b.w	800a85c <__swbuf_r>
 800a5f4:	6813      	ldr	r3, [r2, #0]
 800a5f6:	1c58      	adds	r0, r3, #1
 800a5f8:	6010      	str	r0, [r2, #0]
 800a5fa:	7019      	strb	r1, [r3, #0]
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <__sfputs_r>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	4606      	mov	r6, r0
 800a608:	460f      	mov	r7, r1
 800a60a:	4614      	mov	r4, r2
 800a60c:	18d5      	adds	r5, r2, r3
 800a60e:	42ac      	cmp	r4, r5
 800a610:	d101      	bne.n	800a616 <__sfputs_r+0x12>
 800a612:	2000      	movs	r0, #0
 800a614:	e007      	b.n	800a626 <__sfputs_r+0x22>
 800a616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61a:	463a      	mov	r2, r7
 800a61c:	4630      	mov	r0, r6
 800a61e:	f7ff ffda 	bl	800a5d6 <__sfputc_r>
 800a622:	1c43      	adds	r3, r0, #1
 800a624:	d1f3      	bne.n	800a60e <__sfputs_r+0xa>
 800a626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a628 <_vfiprintf_r>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	460d      	mov	r5, r1
 800a62e:	b09d      	sub	sp, #116	; 0x74
 800a630:	4614      	mov	r4, r2
 800a632:	4698      	mov	r8, r3
 800a634:	4606      	mov	r6, r0
 800a636:	b118      	cbz	r0, 800a640 <_vfiprintf_r+0x18>
 800a638:	6a03      	ldr	r3, [r0, #32]
 800a63a:	b90b      	cbnz	r3, 800a640 <_vfiprintf_r+0x18>
 800a63c:	f7fc fd96 	bl	800716c <__sinit>
 800a640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a642:	07d9      	lsls	r1, r3, #31
 800a644:	d405      	bmi.n	800a652 <_vfiprintf_r+0x2a>
 800a646:	89ab      	ldrh	r3, [r5, #12]
 800a648:	059a      	lsls	r2, r3, #22
 800a64a:	d402      	bmi.n	800a652 <_vfiprintf_r+0x2a>
 800a64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a64e:	f7fc fea4 	bl	800739a <__retarget_lock_acquire_recursive>
 800a652:	89ab      	ldrh	r3, [r5, #12]
 800a654:	071b      	lsls	r3, r3, #28
 800a656:	d501      	bpl.n	800a65c <_vfiprintf_r+0x34>
 800a658:	692b      	ldr	r3, [r5, #16]
 800a65a:	b99b      	cbnz	r3, 800a684 <_vfiprintf_r+0x5c>
 800a65c:	4629      	mov	r1, r5
 800a65e:	4630      	mov	r0, r6
 800a660:	f000 f93a 	bl	800a8d8 <__swsetup_r>
 800a664:	b170      	cbz	r0, 800a684 <_vfiprintf_r+0x5c>
 800a666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a668:	07dc      	lsls	r4, r3, #31
 800a66a:	d504      	bpl.n	800a676 <_vfiprintf_r+0x4e>
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	b01d      	add	sp, #116	; 0x74
 800a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	0598      	lsls	r0, r3, #22
 800a67a:	d4f7      	bmi.n	800a66c <_vfiprintf_r+0x44>
 800a67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a67e:	f7fc fe8d 	bl	800739c <__retarget_lock_release_recursive>
 800a682:	e7f3      	b.n	800a66c <_vfiprintf_r+0x44>
 800a684:	2300      	movs	r3, #0
 800a686:	9309      	str	r3, [sp, #36]	; 0x24
 800a688:	2320      	movs	r3, #32
 800a68a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a68e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a692:	2330      	movs	r3, #48	; 0x30
 800a694:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a848 <_vfiprintf_r+0x220>
 800a698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a69c:	f04f 0901 	mov.w	r9, #1
 800a6a0:	4623      	mov	r3, r4
 800a6a2:	469a      	mov	sl, r3
 800a6a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6a8:	b10a      	cbz	r2, 800a6ae <_vfiprintf_r+0x86>
 800a6aa:	2a25      	cmp	r2, #37	; 0x25
 800a6ac:	d1f9      	bne.n	800a6a2 <_vfiprintf_r+0x7a>
 800a6ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a6b2:	d00b      	beq.n	800a6cc <_vfiprintf_r+0xa4>
 800a6b4:	465b      	mov	r3, fp
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f7ff ffa2 	bl	800a604 <__sfputs_r>
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	f000 80a9 	beq.w	800a818 <_vfiprintf_r+0x1f0>
 800a6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c8:	445a      	add	r2, fp
 800a6ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80a1 	beq.w	800a818 <_vfiprintf_r+0x1f0>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6e0:	f10a 0a01 	add.w	sl, sl, #1
 800a6e4:	9304      	str	r3, [sp, #16]
 800a6e6:	9307      	str	r3, [sp, #28]
 800a6e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a6ee:	4654      	mov	r4, sl
 800a6f0:	2205      	movs	r2, #5
 800a6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f6:	4854      	ldr	r0, [pc, #336]	; (800a848 <_vfiprintf_r+0x220>)
 800a6f8:	f7f5 fd72 	bl	80001e0 <memchr>
 800a6fc:	9a04      	ldr	r2, [sp, #16]
 800a6fe:	b9d8      	cbnz	r0, 800a738 <_vfiprintf_r+0x110>
 800a700:	06d1      	lsls	r1, r2, #27
 800a702:	bf44      	itt	mi
 800a704:	2320      	movmi	r3, #32
 800a706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a70a:	0713      	lsls	r3, r2, #28
 800a70c:	bf44      	itt	mi
 800a70e:	232b      	movmi	r3, #43	; 0x2b
 800a710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a714:	f89a 3000 	ldrb.w	r3, [sl]
 800a718:	2b2a      	cmp	r3, #42	; 0x2a
 800a71a:	d015      	beq.n	800a748 <_vfiprintf_r+0x120>
 800a71c:	9a07      	ldr	r2, [sp, #28]
 800a71e:	4654      	mov	r4, sl
 800a720:	2000      	movs	r0, #0
 800a722:	f04f 0c0a 	mov.w	ip, #10
 800a726:	4621      	mov	r1, r4
 800a728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a72c:	3b30      	subs	r3, #48	; 0x30
 800a72e:	2b09      	cmp	r3, #9
 800a730:	d94d      	bls.n	800a7ce <_vfiprintf_r+0x1a6>
 800a732:	b1b0      	cbz	r0, 800a762 <_vfiprintf_r+0x13a>
 800a734:	9207      	str	r2, [sp, #28]
 800a736:	e014      	b.n	800a762 <_vfiprintf_r+0x13a>
 800a738:	eba0 0308 	sub.w	r3, r0, r8
 800a73c:	fa09 f303 	lsl.w	r3, r9, r3
 800a740:	4313      	orrs	r3, r2
 800a742:	9304      	str	r3, [sp, #16]
 800a744:	46a2      	mov	sl, r4
 800a746:	e7d2      	b.n	800a6ee <_vfiprintf_r+0xc6>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	1d19      	adds	r1, r3, #4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	9103      	str	r1, [sp, #12]
 800a750:	2b00      	cmp	r3, #0
 800a752:	bfbb      	ittet	lt
 800a754:	425b      	neglt	r3, r3
 800a756:	f042 0202 	orrlt.w	r2, r2, #2
 800a75a:	9307      	strge	r3, [sp, #28]
 800a75c:	9307      	strlt	r3, [sp, #28]
 800a75e:	bfb8      	it	lt
 800a760:	9204      	strlt	r2, [sp, #16]
 800a762:	7823      	ldrb	r3, [r4, #0]
 800a764:	2b2e      	cmp	r3, #46	; 0x2e
 800a766:	d10c      	bne.n	800a782 <_vfiprintf_r+0x15a>
 800a768:	7863      	ldrb	r3, [r4, #1]
 800a76a:	2b2a      	cmp	r3, #42	; 0x2a
 800a76c:	d134      	bne.n	800a7d8 <_vfiprintf_r+0x1b0>
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	1d1a      	adds	r2, r3, #4
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	9203      	str	r2, [sp, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	bfb8      	it	lt
 800a77a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a77e:	3402      	adds	r4, #2
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a858 <_vfiprintf_r+0x230>
 800a786:	7821      	ldrb	r1, [r4, #0]
 800a788:	2203      	movs	r2, #3
 800a78a:	4650      	mov	r0, sl
 800a78c:	f7f5 fd28 	bl	80001e0 <memchr>
 800a790:	b138      	cbz	r0, 800a7a2 <_vfiprintf_r+0x17a>
 800a792:	9b04      	ldr	r3, [sp, #16]
 800a794:	eba0 000a 	sub.w	r0, r0, sl
 800a798:	2240      	movs	r2, #64	; 0x40
 800a79a:	4082      	lsls	r2, r0
 800a79c:	4313      	orrs	r3, r2
 800a79e:	3401      	adds	r4, #1
 800a7a0:	9304      	str	r3, [sp, #16]
 800a7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a6:	4829      	ldr	r0, [pc, #164]	; (800a84c <_vfiprintf_r+0x224>)
 800a7a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7ac:	2206      	movs	r2, #6
 800a7ae:	f7f5 fd17 	bl	80001e0 <memchr>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d03f      	beq.n	800a836 <_vfiprintf_r+0x20e>
 800a7b6:	4b26      	ldr	r3, [pc, #152]	; (800a850 <_vfiprintf_r+0x228>)
 800a7b8:	bb1b      	cbnz	r3, 800a802 <_vfiprintf_r+0x1da>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	3307      	adds	r3, #7
 800a7be:	f023 0307 	bic.w	r3, r3, #7
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	9303      	str	r3, [sp, #12]
 800a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c8:	443b      	add	r3, r7
 800a7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a7cc:	e768      	b.n	800a6a0 <_vfiprintf_r+0x78>
 800a7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	e7a6      	b.n	800a726 <_vfiprintf_r+0xfe>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	3401      	adds	r4, #1
 800a7dc:	9305      	str	r3, [sp, #20]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	f04f 0c0a 	mov.w	ip, #10
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ea:	3a30      	subs	r2, #48	; 0x30
 800a7ec:	2a09      	cmp	r2, #9
 800a7ee:	d903      	bls.n	800a7f8 <_vfiprintf_r+0x1d0>
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d0c6      	beq.n	800a782 <_vfiprintf_r+0x15a>
 800a7f4:	9105      	str	r1, [sp, #20]
 800a7f6:	e7c4      	b.n	800a782 <_vfiprintf_r+0x15a>
 800a7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	2301      	movs	r3, #1
 800a800:	e7f0      	b.n	800a7e4 <_vfiprintf_r+0x1bc>
 800a802:	ab03      	add	r3, sp, #12
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	462a      	mov	r2, r5
 800a808:	4b12      	ldr	r3, [pc, #72]	; (800a854 <_vfiprintf_r+0x22c>)
 800a80a:	a904      	add	r1, sp, #16
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7fb fe4b 	bl	80064a8 <_printf_float>
 800a812:	4607      	mov	r7, r0
 800a814:	1c78      	adds	r0, r7, #1
 800a816:	d1d6      	bne.n	800a7c6 <_vfiprintf_r+0x19e>
 800a818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a81a:	07d9      	lsls	r1, r3, #31
 800a81c:	d405      	bmi.n	800a82a <_vfiprintf_r+0x202>
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	059a      	lsls	r2, r3, #22
 800a822:	d402      	bmi.n	800a82a <_vfiprintf_r+0x202>
 800a824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a826:	f7fc fdb9 	bl	800739c <__retarget_lock_release_recursive>
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	065b      	lsls	r3, r3, #25
 800a82e:	f53f af1d 	bmi.w	800a66c <_vfiprintf_r+0x44>
 800a832:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a834:	e71c      	b.n	800a670 <_vfiprintf_r+0x48>
 800a836:	ab03      	add	r3, sp, #12
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	462a      	mov	r2, r5
 800a83c:	4b05      	ldr	r3, [pc, #20]	; (800a854 <_vfiprintf_r+0x22c>)
 800a83e:	a904      	add	r1, sp, #16
 800a840:	4630      	mov	r0, r6
 800a842:	f7fc f8d5 	bl	80069f0 <_printf_i>
 800a846:	e7e4      	b.n	800a812 <_vfiprintf_r+0x1ea>
 800a848:	0800be99 	.word	0x0800be99
 800a84c:	0800bea3 	.word	0x0800bea3
 800a850:	080064a9 	.word	0x080064a9
 800a854:	0800a605 	.word	0x0800a605
 800a858:	0800be9f 	.word	0x0800be9f

0800a85c <__swbuf_r>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	460e      	mov	r6, r1
 800a860:	4614      	mov	r4, r2
 800a862:	4605      	mov	r5, r0
 800a864:	b118      	cbz	r0, 800a86e <__swbuf_r+0x12>
 800a866:	6a03      	ldr	r3, [r0, #32]
 800a868:	b90b      	cbnz	r3, 800a86e <__swbuf_r+0x12>
 800a86a:	f7fc fc7f 	bl	800716c <__sinit>
 800a86e:	69a3      	ldr	r3, [r4, #24]
 800a870:	60a3      	str	r3, [r4, #8]
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	071a      	lsls	r2, r3, #28
 800a876:	d525      	bpl.n	800a8c4 <__swbuf_r+0x68>
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	b31b      	cbz	r3, 800a8c4 <__swbuf_r+0x68>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	6922      	ldr	r2, [r4, #16]
 800a880:	1a98      	subs	r0, r3, r2
 800a882:	6963      	ldr	r3, [r4, #20]
 800a884:	b2f6      	uxtb	r6, r6
 800a886:	4283      	cmp	r3, r0
 800a888:	4637      	mov	r7, r6
 800a88a:	dc04      	bgt.n	800a896 <__swbuf_r+0x3a>
 800a88c:	4621      	mov	r1, r4
 800a88e:	4628      	mov	r0, r5
 800a890:	f7ff fa2a 	bl	8009ce8 <_fflush_r>
 800a894:	b9e0      	cbnz	r0, 800a8d0 <__swbuf_r+0x74>
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	3b01      	subs	r3, #1
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	6022      	str	r2, [r4, #0]
 800a8a2:	701e      	strb	r6, [r3, #0]
 800a8a4:	6962      	ldr	r2, [r4, #20]
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d004      	beq.n	800a8b6 <__swbuf_r+0x5a>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	07db      	lsls	r3, r3, #31
 800a8b0:	d506      	bpl.n	800a8c0 <__swbuf_r+0x64>
 800a8b2:	2e0a      	cmp	r6, #10
 800a8b4:	d104      	bne.n	800a8c0 <__swbuf_r+0x64>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f7ff fa15 	bl	8009ce8 <_fflush_r>
 800a8be:	b938      	cbnz	r0, 800a8d0 <__swbuf_r+0x74>
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 f806 	bl	800a8d8 <__swsetup_r>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d0d5      	beq.n	800a87c <__swbuf_r+0x20>
 800a8d0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8d4:	e7f4      	b.n	800a8c0 <__swbuf_r+0x64>
	...

0800a8d8 <__swsetup_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4b2a      	ldr	r3, [pc, #168]	; (800a984 <__swsetup_r+0xac>)
 800a8dc:	4605      	mov	r5, r0
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	b118      	cbz	r0, 800a8ec <__swsetup_r+0x14>
 800a8e4:	6a03      	ldr	r3, [r0, #32]
 800a8e6:	b90b      	cbnz	r3, 800a8ec <__swsetup_r+0x14>
 800a8e8:	f7fc fc40 	bl	800716c <__sinit>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f2:	0718      	lsls	r0, r3, #28
 800a8f4:	d422      	bmi.n	800a93c <__swsetup_r+0x64>
 800a8f6:	06d9      	lsls	r1, r3, #27
 800a8f8:	d407      	bmi.n	800a90a <__swsetup_r+0x32>
 800a8fa:	2309      	movs	r3, #9
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	e034      	b.n	800a974 <__swsetup_r+0x9c>
 800a90a:	0758      	lsls	r0, r3, #29
 800a90c:	d512      	bpl.n	800a934 <__swsetup_r+0x5c>
 800a90e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a910:	b141      	cbz	r1, 800a924 <__swsetup_r+0x4c>
 800a912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a916:	4299      	cmp	r1, r3
 800a918:	d002      	beq.n	800a920 <__swsetup_r+0x48>
 800a91a:	4628      	mov	r0, r5
 800a91c:	f7fd fbc2 	bl	80080a4 <_free_r>
 800a920:	2300      	movs	r3, #0
 800a922:	6363      	str	r3, [r4, #52]	; 0x34
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a92a:	81a3      	strh	r3, [r4, #12]
 800a92c:	2300      	movs	r3, #0
 800a92e:	6063      	str	r3, [r4, #4]
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	f043 0308 	orr.w	r3, r3, #8
 800a93a:	81a3      	strh	r3, [r4, #12]
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	b94b      	cbnz	r3, 800a954 <__swsetup_r+0x7c>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a94a:	d003      	beq.n	800a954 <__swsetup_r+0x7c>
 800a94c:	4621      	mov	r1, r4
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 f884 	bl	800aa5c <__smakebuf_r>
 800a954:	89a0      	ldrh	r0, [r4, #12]
 800a956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a95a:	f010 0301 	ands.w	r3, r0, #1
 800a95e:	d00a      	beq.n	800a976 <__swsetup_r+0x9e>
 800a960:	2300      	movs	r3, #0
 800a962:	60a3      	str	r3, [r4, #8]
 800a964:	6963      	ldr	r3, [r4, #20]
 800a966:	425b      	negs	r3, r3
 800a968:	61a3      	str	r3, [r4, #24]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	b943      	cbnz	r3, 800a980 <__swsetup_r+0xa8>
 800a96e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a972:	d1c4      	bne.n	800a8fe <__swsetup_r+0x26>
 800a974:	bd38      	pop	{r3, r4, r5, pc}
 800a976:	0781      	lsls	r1, r0, #30
 800a978:	bf58      	it	pl
 800a97a:	6963      	ldrpl	r3, [r4, #20]
 800a97c:	60a3      	str	r3, [r4, #8]
 800a97e:	e7f4      	b.n	800a96a <__swsetup_r+0x92>
 800a980:	2000      	movs	r0, #0
 800a982:	e7f7      	b.n	800a974 <__swsetup_r+0x9c>
 800a984:	20000070 	.word	0x20000070

0800a988 <_raise_r>:
 800a988:	291f      	cmp	r1, #31
 800a98a:	b538      	push	{r3, r4, r5, lr}
 800a98c:	4604      	mov	r4, r0
 800a98e:	460d      	mov	r5, r1
 800a990:	d904      	bls.n	800a99c <_raise_r+0x14>
 800a992:	2316      	movs	r3, #22
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	f04f 30ff 	mov.w	r0, #4294967295
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a99e:	b112      	cbz	r2, 800a9a6 <_raise_r+0x1e>
 800a9a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9a4:	b94b      	cbnz	r3, 800a9ba <_raise_r+0x32>
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f830 	bl	800aa0c <_getpid_r>
 800a9ac:	462a      	mov	r2, r5
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b6:	f000 b817 	b.w	800a9e8 <_kill_r>
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d00a      	beq.n	800a9d4 <_raise_r+0x4c>
 800a9be:	1c59      	adds	r1, r3, #1
 800a9c0:	d103      	bne.n	800a9ca <_raise_r+0x42>
 800a9c2:	2316      	movs	r3, #22
 800a9c4:	6003      	str	r3, [r0, #0]
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	e7e7      	b.n	800a99a <_raise_r+0x12>
 800a9ca:	2400      	movs	r4, #0
 800a9cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	4798      	blx	r3
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e7e0      	b.n	800a99a <_raise_r+0x12>

0800a9d8 <raise>:
 800a9d8:	4b02      	ldr	r3, [pc, #8]	; (800a9e4 <raise+0xc>)
 800a9da:	4601      	mov	r1, r0
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	f7ff bfd3 	b.w	800a988 <_raise_r>
 800a9e2:	bf00      	nop
 800a9e4:	20000070 	.word	0x20000070

0800a9e8 <_kill_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4d07      	ldr	r5, [pc, #28]	; (800aa08 <_kill_r+0x20>)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	4608      	mov	r0, r1
 800a9f2:	4611      	mov	r1, r2
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	f7f8 fa71 	bl	8002edc <_kill>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	d102      	bne.n	800aa04 <_kill_r+0x1c>
 800a9fe:	682b      	ldr	r3, [r5, #0]
 800aa00:	b103      	cbz	r3, 800aa04 <_kill_r+0x1c>
 800aa02:	6023      	str	r3, [r4, #0]
 800aa04:	bd38      	pop	{r3, r4, r5, pc}
 800aa06:	bf00      	nop
 800aa08:	20000694 	.word	0x20000694

0800aa0c <_getpid_r>:
 800aa0c:	f7f8 ba5e 	b.w	8002ecc <_getpid>

0800aa10 <__swhatbuf_r>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	460c      	mov	r4, r1
 800aa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	b096      	sub	sp, #88	; 0x58
 800aa1c:	4615      	mov	r5, r2
 800aa1e:	461e      	mov	r6, r3
 800aa20:	da0d      	bge.n	800aa3e <__swhatbuf_r+0x2e>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa28:	f04f 0100 	mov.w	r1, #0
 800aa2c:	bf0c      	ite	eq
 800aa2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa32:	2340      	movne	r3, #64	; 0x40
 800aa34:	2000      	movs	r0, #0
 800aa36:	6031      	str	r1, [r6, #0]
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	b016      	add	sp, #88	; 0x58
 800aa3c:	bd70      	pop	{r4, r5, r6, pc}
 800aa3e:	466a      	mov	r2, sp
 800aa40:	f000 f848 	bl	800aad4 <_fstat_r>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	dbec      	blt.n	800aa22 <__swhatbuf_r+0x12>
 800aa48:	9901      	ldr	r1, [sp, #4]
 800aa4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa52:	4259      	negs	r1, r3
 800aa54:	4159      	adcs	r1, r3
 800aa56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa5a:	e7eb      	b.n	800aa34 <__swhatbuf_r+0x24>

0800aa5c <__smakebuf_r>:
 800aa5c:	898b      	ldrh	r3, [r1, #12]
 800aa5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa60:	079d      	lsls	r5, r3, #30
 800aa62:	4606      	mov	r6, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	d507      	bpl.n	800aa78 <__smakebuf_r+0x1c>
 800aa68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	6123      	str	r3, [r4, #16]
 800aa70:	2301      	movs	r3, #1
 800aa72:	6163      	str	r3, [r4, #20]
 800aa74:	b002      	add	sp, #8
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	ab01      	add	r3, sp, #4
 800aa7a:	466a      	mov	r2, sp
 800aa7c:	f7ff ffc8 	bl	800aa10 <__swhatbuf_r>
 800aa80:	9900      	ldr	r1, [sp, #0]
 800aa82:	4605      	mov	r5, r0
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7fd fb81 	bl	800818c <_malloc_r>
 800aa8a:	b948      	cbnz	r0, 800aaa0 <__smakebuf_r+0x44>
 800aa8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa90:	059a      	lsls	r2, r3, #22
 800aa92:	d4ef      	bmi.n	800aa74 <__smakebuf_r+0x18>
 800aa94:	f023 0303 	bic.w	r3, r3, #3
 800aa98:	f043 0302 	orr.w	r3, r3, #2
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	e7e3      	b.n	800aa68 <__smakebuf_r+0xc>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	6020      	str	r0, [r4, #0]
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	9b00      	ldr	r3, [sp, #0]
 800aaac:	6163      	str	r3, [r4, #20]
 800aaae:	9b01      	ldr	r3, [sp, #4]
 800aab0:	6120      	str	r0, [r4, #16]
 800aab2:	b15b      	cbz	r3, 800aacc <__smakebuf_r+0x70>
 800aab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 f81d 	bl	800aaf8 <_isatty_r>
 800aabe:	b128      	cbz	r0, 800aacc <__smakebuf_r+0x70>
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	f023 0303 	bic.w	r3, r3, #3
 800aac6:	f043 0301 	orr.w	r3, r3, #1
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	431d      	orrs	r5, r3
 800aad0:	81a5      	strh	r5, [r4, #12]
 800aad2:	e7cf      	b.n	800aa74 <__smakebuf_r+0x18>

0800aad4 <_fstat_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d07      	ldr	r5, [pc, #28]	; (800aaf4 <_fstat_r+0x20>)
 800aad8:	2300      	movs	r3, #0
 800aada:	4604      	mov	r4, r0
 800aadc:	4608      	mov	r0, r1
 800aade:	4611      	mov	r1, r2
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	f7f8 fa5a 	bl	8002f9a <_fstat>
 800aae6:	1c43      	adds	r3, r0, #1
 800aae8:	d102      	bne.n	800aaf0 <_fstat_r+0x1c>
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	b103      	cbz	r3, 800aaf0 <_fstat_r+0x1c>
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000694 	.word	0x20000694

0800aaf8 <_isatty_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d06      	ldr	r5, [pc, #24]	; (800ab14 <_isatty_r+0x1c>)
 800aafc:	2300      	movs	r3, #0
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	f7f8 fa59 	bl	8002fba <_isatty>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d102      	bne.n	800ab12 <_isatty_r+0x1a>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b103      	cbz	r3, 800ab12 <_isatty_r+0x1a>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	20000694 	.word	0x20000694

0800ab18 <pow>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	ed2d 8b02 	vpush	{d8}
 800ab1e:	eeb0 8a40 	vmov.f32	s16, s0
 800ab22:	eef0 8a60 	vmov.f32	s17, s1
 800ab26:	ec55 4b11 	vmov	r4, r5, d1
 800ab2a:	f000 f871 	bl	800ac10 <__ieee754_pow>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	462b      	mov	r3, r5
 800ab32:	4620      	mov	r0, r4
 800ab34:	4629      	mov	r1, r5
 800ab36:	ec57 6b10 	vmov	r6, r7, d0
 800ab3a:	f7f5 ffff 	bl	8000b3c <__aeabi_dcmpun>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d13b      	bne.n	800abba <pow+0xa2>
 800ab42:	ec51 0b18 	vmov	r0, r1, d8
 800ab46:	2200      	movs	r2, #0
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f7f5 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab4e:	b1b8      	cbz	r0, 800ab80 <pow+0x68>
 800ab50:	2200      	movs	r2, #0
 800ab52:	2300      	movs	r3, #0
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f5 ffbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d146      	bne.n	800abee <pow+0xd6>
 800ab60:	ec45 4b10 	vmov	d0, r4, r5
 800ab64:	f000 f848 	bl	800abf8 <finite>
 800ab68:	b338      	cbz	r0, 800abba <pow+0xa2>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4620      	mov	r0, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f5 ffbb 	bl	8000aec <__aeabi_dcmplt>
 800ab76:	b300      	cbz	r0, 800abba <pow+0xa2>
 800ab78:	f7fc fbe4 	bl	8007344 <__errno>
 800ab7c:	2322      	movs	r3, #34	; 0x22
 800ab7e:	e01b      	b.n	800abb8 <pow+0xa0>
 800ab80:	ec47 6b10 	vmov	d0, r6, r7
 800ab84:	f000 f838 	bl	800abf8 <finite>
 800ab88:	b9e0      	cbnz	r0, 800abc4 <pow+0xac>
 800ab8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ab8e:	eef0 0a68 	vmov.f32	s1, s17
 800ab92:	f000 f831 	bl	800abf8 <finite>
 800ab96:	b1a8      	cbz	r0, 800abc4 <pow+0xac>
 800ab98:	ec45 4b10 	vmov	d0, r4, r5
 800ab9c:	f000 f82c 	bl	800abf8 <finite>
 800aba0:	b180      	cbz	r0, 800abc4 <pow+0xac>
 800aba2:	4632      	mov	r2, r6
 800aba4:	463b      	mov	r3, r7
 800aba6:	4630      	mov	r0, r6
 800aba8:	4639      	mov	r1, r7
 800abaa:	f7f5 ffc7 	bl	8000b3c <__aeabi_dcmpun>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d0e2      	beq.n	800ab78 <pow+0x60>
 800abb2:	f7fc fbc7 	bl	8007344 <__errno>
 800abb6:	2321      	movs	r3, #33	; 0x21
 800abb8:	6003      	str	r3, [r0, #0]
 800abba:	ecbd 8b02 	vpop	{d8}
 800abbe:	ec47 6b10 	vmov	d0, r6, r7
 800abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc4:	2200      	movs	r2, #0
 800abc6:	2300      	movs	r3, #0
 800abc8:	4630      	mov	r0, r6
 800abca:	4639      	mov	r1, r7
 800abcc:	f7f5 ff84 	bl	8000ad8 <__aeabi_dcmpeq>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d0f2      	beq.n	800abba <pow+0xa2>
 800abd4:	eeb0 0a48 	vmov.f32	s0, s16
 800abd8:	eef0 0a68 	vmov.f32	s1, s17
 800abdc:	f000 f80c 	bl	800abf8 <finite>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d0ea      	beq.n	800abba <pow+0xa2>
 800abe4:	ec45 4b10 	vmov	d0, r4, r5
 800abe8:	f000 f806 	bl	800abf8 <finite>
 800abec:	e7c3      	b.n	800ab76 <pow+0x5e>
 800abee:	4f01      	ldr	r7, [pc, #4]	; (800abf4 <pow+0xdc>)
 800abf0:	2600      	movs	r6, #0
 800abf2:	e7e2      	b.n	800abba <pow+0xa2>
 800abf4:	3ff00000 	.word	0x3ff00000

0800abf8 <finite>:
 800abf8:	b082      	sub	sp, #8
 800abfa:	ed8d 0b00 	vstr	d0, [sp]
 800abfe:	9801      	ldr	r0, [sp, #4]
 800ac00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ac04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ac08:	0fc0      	lsrs	r0, r0, #31
 800ac0a:	b002      	add	sp, #8
 800ac0c:	4770      	bx	lr
	...

0800ac10 <__ieee754_pow>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	ed2d 8b06 	vpush	{d8-d10}
 800ac18:	b089      	sub	sp, #36	; 0x24
 800ac1a:	ed8d 1b00 	vstr	d1, [sp]
 800ac1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ac22:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ac26:	ea58 0102 	orrs.w	r1, r8, r2
 800ac2a:	ec57 6b10 	vmov	r6, r7, d0
 800ac2e:	d115      	bne.n	800ac5c <__ieee754_pow+0x4c>
 800ac30:	19b3      	adds	r3, r6, r6
 800ac32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ac36:	4152      	adcs	r2, r2
 800ac38:	4299      	cmp	r1, r3
 800ac3a:	4b89      	ldr	r3, [pc, #548]	; (800ae60 <__ieee754_pow+0x250>)
 800ac3c:	4193      	sbcs	r3, r2
 800ac3e:	f080 84d1 	bcs.w	800b5e4 <__ieee754_pow+0x9d4>
 800ac42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac46:	4630      	mov	r0, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	f7f5 fb27 	bl	800029c <__adddf3>
 800ac4e:	ec41 0b10 	vmov	d0, r0, r1
 800ac52:	b009      	add	sp, #36	; 0x24
 800ac54:	ecbd 8b06 	vpop	{d8-d10}
 800ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5c:	4b81      	ldr	r3, [pc, #516]	; (800ae64 <__ieee754_pow+0x254>)
 800ac5e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ac62:	429c      	cmp	r4, r3
 800ac64:	ee10 aa10 	vmov	sl, s0
 800ac68:	463d      	mov	r5, r7
 800ac6a:	dc06      	bgt.n	800ac7a <__ieee754_pow+0x6a>
 800ac6c:	d101      	bne.n	800ac72 <__ieee754_pow+0x62>
 800ac6e:	2e00      	cmp	r6, #0
 800ac70:	d1e7      	bne.n	800ac42 <__ieee754_pow+0x32>
 800ac72:	4598      	cmp	r8, r3
 800ac74:	dc01      	bgt.n	800ac7a <__ieee754_pow+0x6a>
 800ac76:	d10f      	bne.n	800ac98 <__ieee754_pow+0x88>
 800ac78:	b172      	cbz	r2, 800ac98 <__ieee754_pow+0x88>
 800ac7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ac7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ac82:	ea55 050a 	orrs.w	r5, r5, sl
 800ac86:	d1dc      	bne.n	800ac42 <__ieee754_pow+0x32>
 800ac88:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac8c:	18db      	adds	r3, r3, r3
 800ac8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ac92:	4152      	adcs	r2, r2
 800ac94:	429d      	cmp	r5, r3
 800ac96:	e7d0      	b.n	800ac3a <__ieee754_pow+0x2a>
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	da3b      	bge.n	800ad14 <__ieee754_pow+0x104>
 800ac9c:	4b72      	ldr	r3, [pc, #456]	; (800ae68 <__ieee754_pow+0x258>)
 800ac9e:	4598      	cmp	r8, r3
 800aca0:	dc51      	bgt.n	800ad46 <__ieee754_pow+0x136>
 800aca2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800aca6:	4598      	cmp	r8, r3
 800aca8:	f340 84ab 	ble.w	800b602 <__ieee754_pow+0x9f2>
 800acac:	ea4f 5328 	mov.w	r3, r8, asr #20
 800acb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800acb4:	2b14      	cmp	r3, #20
 800acb6:	dd0f      	ble.n	800acd8 <__ieee754_pow+0xc8>
 800acb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800acbc:	fa22 f103 	lsr.w	r1, r2, r3
 800acc0:	fa01 f303 	lsl.w	r3, r1, r3
 800acc4:	4293      	cmp	r3, r2
 800acc6:	f040 849c 	bne.w	800b602 <__ieee754_pow+0x9f2>
 800acca:	f001 0101 	and.w	r1, r1, #1
 800acce:	f1c1 0302 	rsb	r3, r1, #2
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	b182      	cbz	r2, 800acf8 <__ieee754_pow+0xe8>
 800acd6:	e05f      	b.n	800ad98 <__ieee754_pow+0x188>
 800acd8:	2a00      	cmp	r2, #0
 800acda:	d15b      	bne.n	800ad94 <__ieee754_pow+0x184>
 800acdc:	f1c3 0314 	rsb	r3, r3, #20
 800ace0:	fa48 f103 	asr.w	r1, r8, r3
 800ace4:	fa01 f303 	lsl.w	r3, r1, r3
 800ace8:	4543      	cmp	r3, r8
 800acea:	f040 8487 	bne.w	800b5fc <__ieee754_pow+0x9ec>
 800acee:	f001 0101 	and.w	r1, r1, #1
 800acf2:	f1c1 0302 	rsb	r3, r1, #2
 800acf6:	9304      	str	r3, [sp, #16]
 800acf8:	4b5c      	ldr	r3, [pc, #368]	; (800ae6c <__ieee754_pow+0x25c>)
 800acfa:	4598      	cmp	r8, r3
 800acfc:	d132      	bne.n	800ad64 <__ieee754_pow+0x154>
 800acfe:	f1b9 0f00 	cmp.w	r9, #0
 800ad02:	f280 8477 	bge.w	800b5f4 <__ieee754_pow+0x9e4>
 800ad06:	4959      	ldr	r1, [pc, #356]	; (800ae6c <__ieee754_pow+0x25c>)
 800ad08:	4632      	mov	r2, r6
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	f7f5 fda5 	bl	800085c <__aeabi_ddiv>
 800ad12:	e79c      	b.n	800ac4e <__ieee754_pow+0x3e>
 800ad14:	2300      	movs	r3, #0
 800ad16:	9304      	str	r3, [sp, #16]
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d13d      	bne.n	800ad98 <__ieee754_pow+0x188>
 800ad1c:	4b51      	ldr	r3, [pc, #324]	; (800ae64 <__ieee754_pow+0x254>)
 800ad1e:	4598      	cmp	r8, r3
 800ad20:	d1ea      	bne.n	800acf8 <__ieee754_pow+0xe8>
 800ad22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ad26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ad2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ad2e:	f000 8459 	beq.w	800b5e4 <__ieee754_pow+0x9d4>
 800ad32:	4b4f      	ldr	r3, [pc, #316]	; (800ae70 <__ieee754_pow+0x260>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	dd08      	ble.n	800ad4a <__ieee754_pow+0x13a>
 800ad38:	f1b9 0f00 	cmp.w	r9, #0
 800ad3c:	f2c0 8456 	blt.w	800b5ec <__ieee754_pow+0x9dc>
 800ad40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad44:	e783      	b.n	800ac4e <__ieee754_pow+0x3e>
 800ad46:	2302      	movs	r3, #2
 800ad48:	e7e5      	b.n	800ad16 <__ieee754_pow+0x106>
 800ad4a:	f1b9 0f00 	cmp.w	r9, #0
 800ad4e:	f04f 0000 	mov.w	r0, #0
 800ad52:	f04f 0100 	mov.w	r1, #0
 800ad56:	f6bf af7a 	bge.w	800ac4e <__ieee754_pow+0x3e>
 800ad5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ad5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad62:	e774      	b.n	800ac4e <__ieee754_pow+0x3e>
 800ad64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ad68:	d106      	bne.n	800ad78 <__ieee754_pow+0x168>
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4639      	mov	r1, r7
 800ad72:	f7f5 fc49 	bl	8000608 <__aeabi_dmul>
 800ad76:	e76a      	b.n	800ac4e <__ieee754_pow+0x3e>
 800ad78:	4b3e      	ldr	r3, [pc, #248]	; (800ae74 <__ieee754_pow+0x264>)
 800ad7a:	4599      	cmp	r9, r3
 800ad7c:	d10c      	bne.n	800ad98 <__ieee754_pow+0x188>
 800ad7e:	2d00      	cmp	r5, #0
 800ad80:	db0a      	blt.n	800ad98 <__ieee754_pow+0x188>
 800ad82:	ec47 6b10 	vmov	d0, r6, r7
 800ad86:	b009      	add	sp, #36	; 0x24
 800ad88:	ecbd 8b06 	vpop	{d8-d10}
 800ad8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	f000 bd20 	b.w	800b7d4 <__ieee754_sqrt>
 800ad94:	2300      	movs	r3, #0
 800ad96:	9304      	str	r3, [sp, #16]
 800ad98:	ec47 6b10 	vmov	d0, r6, r7
 800ad9c:	f000 fc62 	bl	800b664 <fabs>
 800ada0:	ec51 0b10 	vmov	r0, r1, d0
 800ada4:	f1ba 0f00 	cmp.w	sl, #0
 800ada8:	d129      	bne.n	800adfe <__ieee754_pow+0x1ee>
 800adaa:	b124      	cbz	r4, 800adb6 <__ieee754_pow+0x1a6>
 800adac:	4b2f      	ldr	r3, [pc, #188]	; (800ae6c <__ieee754_pow+0x25c>)
 800adae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d123      	bne.n	800adfe <__ieee754_pow+0x1ee>
 800adb6:	f1b9 0f00 	cmp.w	r9, #0
 800adba:	da05      	bge.n	800adc8 <__ieee754_pow+0x1b8>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	2000      	movs	r0, #0
 800adc2:	492a      	ldr	r1, [pc, #168]	; (800ae6c <__ieee754_pow+0x25c>)
 800adc4:	f7f5 fd4a 	bl	800085c <__aeabi_ddiv>
 800adc8:	2d00      	cmp	r5, #0
 800adca:	f6bf af40 	bge.w	800ac4e <__ieee754_pow+0x3e>
 800adce:	9b04      	ldr	r3, [sp, #16]
 800add0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800add4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800add8:	431c      	orrs	r4, r3
 800adda:	d108      	bne.n	800adee <__ieee754_pow+0x1de>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4610      	mov	r0, r2
 800ade2:	4619      	mov	r1, r3
 800ade4:	f7f5 fa58 	bl	8000298 <__aeabi_dsub>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	e78f      	b.n	800ad0e <__ieee754_pow+0xfe>
 800adee:	9b04      	ldr	r3, [sp, #16]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	f47f af2c 	bne.w	800ac4e <__ieee754_pow+0x3e>
 800adf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adfa:	4619      	mov	r1, r3
 800adfc:	e727      	b.n	800ac4e <__ieee754_pow+0x3e>
 800adfe:	0feb      	lsrs	r3, r5, #31
 800ae00:	3b01      	subs	r3, #1
 800ae02:	9306      	str	r3, [sp, #24]
 800ae04:	9a06      	ldr	r2, [sp, #24]
 800ae06:	9b04      	ldr	r3, [sp, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	d102      	bne.n	800ae12 <__ieee754_pow+0x202>
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	463b      	mov	r3, r7
 800ae10:	e7e6      	b.n	800ade0 <__ieee754_pow+0x1d0>
 800ae12:	4b19      	ldr	r3, [pc, #100]	; (800ae78 <__ieee754_pow+0x268>)
 800ae14:	4598      	cmp	r8, r3
 800ae16:	f340 80fb 	ble.w	800b010 <__ieee754_pow+0x400>
 800ae1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ae1e:	4598      	cmp	r8, r3
 800ae20:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <__ieee754_pow+0x260>)
 800ae22:	dd0c      	ble.n	800ae3e <__ieee754_pow+0x22e>
 800ae24:	429c      	cmp	r4, r3
 800ae26:	dc0f      	bgt.n	800ae48 <__ieee754_pow+0x238>
 800ae28:	f1b9 0f00 	cmp.w	r9, #0
 800ae2c:	da0f      	bge.n	800ae4e <__ieee754_pow+0x23e>
 800ae2e:	2000      	movs	r0, #0
 800ae30:	b009      	add	sp, #36	; 0x24
 800ae32:	ecbd 8b06 	vpop	{d8-d10}
 800ae36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3a:	f000 bcc2 	b.w	800b7c2 <__math_oflow>
 800ae3e:	429c      	cmp	r4, r3
 800ae40:	dbf2      	blt.n	800ae28 <__ieee754_pow+0x218>
 800ae42:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <__ieee754_pow+0x25c>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	dd19      	ble.n	800ae7c <__ieee754_pow+0x26c>
 800ae48:	f1b9 0f00 	cmp.w	r9, #0
 800ae4c:	dcef      	bgt.n	800ae2e <__ieee754_pow+0x21e>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	b009      	add	sp, #36	; 0x24
 800ae52:	ecbd 8b06 	vpop	{d8-d10}
 800ae56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5a:	f000 bca9 	b.w	800b7b0 <__math_uflow>
 800ae5e:	bf00      	nop
 800ae60:	fff00000 	.word	0xfff00000
 800ae64:	7ff00000 	.word	0x7ff00000
 800ae68:	433fffff 	.word	0x433fffff
 800ae6c:	3ff00000 	.word	0x3ff00000
 800ae70:	3fefffff 	.word	0x3fefffff
 800ae74:	3fe00000 	.word	0x3fe00000
 800ae78:	41e00000 	.word	0x41e00000
 800ae7c:	4b60      	ldr	r3, [pc, #384]	; (800b000 <__ieee754_pow+0x3f0>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f7f5 fa0a 	bl	8000298 <__aeabi_dsub>
 800ae84:	a354      	add	r3, pc, #336	; (adr r3, 800afd8 <__ieee754_pow+0x3c8>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	f7f5 fbbb 	bl	8000608 <__aeabi_dmul>
 800ae92:	a353      	add	r3, pc, #332	; (adr r3, 800afe0 <__ieee754_pow+0x3d0>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	4606      	mov	r6, r0
 800ae9a:	460f      	mov	r7, r1
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 fbb2 	bl	8000608 <__aeabi_dmul>
 800aea4:	4b57      	ldr	r3, [pc, #348]	; (800b004 <__ieee754_pow+0x3f4>)
 800aea6:	4682      	mov	sl, r0
 800aea8:	468b      	mov	fp, r1
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4620      	mov	r0, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 fbaa 	bl	8000608 <__aeabi_dmul>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	a14b      	add	r1, pc, #300	; (adr r1, 800afe8 <__ieee754_pow+0x3d8>)
 800aeba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aebe:	f7f5 f9eb 	bl	8000298 <__aeabi_dsub>
 800aec2:	4622      	mov	r2, r4
 800aec4:	462b      	mov	r3, r5
 800aec6:	f7f5 fb9f 	bl	8000608 <__aeabi_dmul>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	2000      	movs	r0, #0
 800aed0:	494d      	ldr	r1, [pc, #308]	; (800b008 <__ieee754_pow+0x3f8>)
 800aed2:	f7f5 f9e1 	bl	8000298 <__aeabi_dsub>
 800aed6:	4622      	mov	r2, r4
 800aed8:	4680      	mov	r8, r0
 800aeda:	4689      	mov	r9, r1
 800aedc:	462b      	mov	r3, r5
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 fb91 	bl	8000608 <__aeabi_dmul>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	4640      	mov	r0, r8
 800aeec:	4649      	mov	r1, r9
 800aeee:	f7f5 fb8b 	bl	8000608 <__aeabi_dmul>
 800aef2:	a33f      	add	r3, pc, #252	; (adr r3, 800aff0 <__ieee754_pow+0x3e0>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f7f5 fb86 	bl	8000608 <__aeabi_dmul>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4650      	mov	r0, sl
 800af02:	4659      	mov	r1, fp
 800af04:	f7f5 f9c8 	bl	8000298 <__aeabi_dsub>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4680      	mov	r8, r0
 800af0e:	4689      	mov	r9, r1
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	f7f5 f9c2 	bl	800029c <__adddf3>
 800af18:	2000      	movs	r0, #0
 800af1a:	4632      	mov	r2, r6
 800af1c:	463b      	mov	r3, r7
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	f7f5 f9b9 	bl	8000298 <__aeabi_dsub>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	4640      	mov	r0, r8
 800af2c:	4649      	mov	r1, r9
 800af2e:	f7f5 f9b3 	bl	8000298 <__aeabi_dsub>
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	9a06      	ldr	r2, [sp, #24]
 800af36:	3b01      	subs	r3, #1
 800af38:	4313      	orrs	r3, r2
 800af3a:	4682      	mov	sl, r0
 800af3c:	468b      	mov	fp, r1
 800af3e:	f040 81e7 	bne.w	800b310 <__ieee754_pow+0x700>
 800af42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800aff8 <__ieee754_pow+0x3e8>
 800af46:	eeb0 8a47 	vmov.f32	s16, s14
 800af4a:	eef0 8a67 	vmov.f32	s17, s15
 800af4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af52:	2600      	movs	r6, #0
 800af54:	4632      	mov	r2, r6
 800af56:	463b      	mov	r3, r7
 800af58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af5c:	f7f5 f99c 	bl	8000298 <__aeabi_dsub>
 800af60:	4622      	mov	r2, r4
 800af62:	462b      	mov	r3, r5
 800af64:	f7f5 fb50 	bl	8000608 <__aeabi_dmul>
 800af68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af6c:	4680      	mov	r8, r0
 800af6e:	4689      	mov	r9, r1
 800af70:	4650      	mov	r0, sl
 800af72:	4659      	mov	r1, fp
 800af74:	f7f5 fb48 	bl	8000608 <__aeabi_dmul>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4640      	mov	r0, r8
 800af7e:	4649      	mov	r1, r9
 800af80:	f7f5 f98c 	bl	800029c <__adddf3>
 800af84:	4632      	mov	r2, r6
 800af86:	463b      	mov	r3, r7
 800af88:	4680      	mov	r8, r0
 800af8a:	4689      	mov	r9, r1
 800af8c:	4620      	mov	r0, r4
 800af8e:	4629      	mov	r1, r5
 800af90:	f7f5 fb3a 	bl	8000608 <__aeabi_dmul>
 800af94:	460b      	mov	r3, r1
 800af96:	4604      	mov	r4, r0
 800af98:	460d      	mov	r5, r1
 800af9a:	4602      	mov	r2, r0
 800af9c:	4649      	mov	r1, r9
 800af9e:	4640      	mov	r0, r8
 800afa0:	f7f5 f97c 	bl	800029c <__adddf3>
 800afa4:	4b19      	ldr	r3, [pc, #100]	; (800b00c <__ieee754_pow+0x3fc>)
 800afa6:	4299      	cmp	r1, r3
 800afa8:	ec45 4b19 	vmov	d9, r4, r5
 800afac:	4606      	mov	r6, r0
 800afae:	460f      	mov	r7, r1
 800afb0:	468b      	mov	fp, r1
 800afb2:	f340 82f0 	ble.w	800b596 <__ieee754_pow+0x986>
 800afb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800afba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800afbe:	4303      	orrs	r3, r0
 800afc0:	f000 81e4 	beq.w	800b38c <__ieee754_pow+0x77c>
 800afc4:	ec51 0b18 	vmov	r0, r1, d8
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	f7f5 fd8e 	bl	8000aec <__aeabi_dcmplt>
 800afd0:	3800      	subs	r0, #0
 800afd2:	bf18      	it	ne
 800afd4:	2001      	movne	r0, #1
 800afd6:	e72b      	b.n	800ae30 <__ieee754_pow+0x220>
 800afd8:	60000000 	.word	0x60000000
 800afdc:	3ff71547 	.word	0x3ff71547
 800afe0:	f85ddf44 	.word	0xf85ddf44
 800afe4:	3e54ae0b 	.word	0x3e54ae0b
 800afe8:	55555555 	.word	0x55555555
 800afec:	3fd55555 	.word	0x3fd55555
 800aff0:	652b82fe 	.word	0x652b82fe
 800aff4:	3ff71547 	.word	0x3ff71547
 800aff8:	00000000 	.word	0x00000000
 800affc:	bff00000 	.word	0xbff00000
 800b000:	3ff00000 	.word	0x3ff00000
 800b004:	3fd00000 	.word	0x3fd00000
 800b008:	3fe00000 	.word	0x3fe00000
 800b00c:	408fffff 	.word	0x408fffff
 800b010:	4bd5      	ldr	r3, [pc, #852]	; (800b368 <__ieee754_pow+0x758>)
 800b012:	402b      	ands	r3, r5
 800b014:	2200      	movs	r2, #0
 800b016:	b92b      	cbnz	r3, 800b024 <__ieee754_pow+0x414>
 800b018:	4bd4      	ldr	r3, [pc, #848]	; (800b36c <__ieee754_pow+0x75c>)
 800b01a:	f7f5 faf5 	bl	8000608 <__aeabi_dmul>
 800b01e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b022:	460c      	mov	r4, r1
 800b024:	1523      	asrs	r3, r4, #20
 800b026:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b02a:	4413      	add	r3, r2
 800b02c:	9305      	str	r3, [sp, #20]
 800b02e:	4bd0      	ldr	r3, [pc, #832]	; (800b370 <__ieee754_pow+0x760>)
 800b030:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b034:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b038:	429c      	cmp	r4, r3
 800b03a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b03e:	dd08      	ble.n	800b052 <__ieee754_pow+0x442>
 800b040:	4bcc      	ldr	r3, [pc, #816]	; (800b374 <__ieee754_pow+0x764>)
 800b042:	429c      	cmp	r4, r3
 800b044:	f340 8162 	ble.w	800b30c <__ieee754_pow+0x6fc>
 800b048:	9b05      	ldr	r3, [sp, #20]
 800b04a:	3301      	adds	r3, #1
 800b04c:	9305      	str	r3, [sp, #20]
 800b04e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b052:	2400      	movs	r4, #0
 800b054:	00e3      	lsls	r3, r4, #3
 800b056:	9307      	str	r3, [sp, #28]
 800b058:	4bc7      	ldr	r3, [pc, #796]	; (800b378 <__ieee754_pow+0x768>)
 800b05a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b05e:	ed93 7b00 	vldr	d7, [r3]
 800b062:	4629      	mov	r1, r5
 800b064:	ec53 2b17 	vmov	r2, r3, d7
 800b068:	eeb0 9a47 	vmov.f32	s18, s14
 800b06c:	eef0 9a67 	vmov.f32	s19, s15
 800b070:	4682      	mov	sl, r0
 800b072:	f7f5 f911 	bl	8000298 <__aeabi_dsub>
 800b076:	4652      	mov	r2, sl
 800b078:	4606      	mov	r6, r0
 800b07a:	460f      	mov	r7, r1
 800b07c:	462b      	mov	r3, r5
 800b07e:	ec51 0b19 	vmov	r0, r1, d9
 800b082:	f7f5 f90b 	bl	800029c <__adddf3>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	2000      	movs	r0, #0
 800b08c:	49bb      	ldr	r1, [pc, #748]	; (800b37c <__ieee754_pow+0x76c>)
 800b08e:	f7f5 fbe5 	bl	800085c <__aeabi_ddiv>
 800b092:	ec41 0b1a 	vmov	d10, r0, r1
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4630      	mov	r0, r6
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 fab3 	bl	8000608 <__aeabi_dmul>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0a8:	9302      	str	r3, [sp, #8]
 800b0aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0ae:	46ab      	mov	fp, r5
 800b0b0:	106d      	asrs	r5, r5, #1
 800b0b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b0b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b0ba:	ec41 0b18 	vmov	d8, r0, r1
 800b0be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	461d      	mov	r5, r3
 800b0cc:	f7f5 fa9c 	bl	8000608 <__aeabi_dmul>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 f8de 	bl	8000298 <__aeabi_dsub>
 800b0dc:	ec53 2b19 	vmov	r2, r3, d9
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	460f      	mov	r7, r1
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f7f5 f8d6 	bl	8000298 <__aeabi_dsub>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	f7f5 f8d0 	bl	8000298 <__aeabi_dsub>
 800b0f8:	4642      	mov	r2, r8
 800b0fa:	464b      	mov	r3, r9
 800b0fc:	f7f5 fa84 	bl	8000608 <__aeabi_dmul>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 f8c6 	bl	8000298 <__aeabi_dsub>
 800b10c:	ec53 2b1a 	vmov	r2, r3, d10
 800b110:	f7f5 fa7a 	bl	8000608 <__aeabi_dmul>
 800b114:	ec53 2b18 	vmov	r2, r3, d8
 800b118:	ec41 0b19 	vmov	d9, r0, r1
 800b11c:	ec51 0b18 	vmov	r0, r1, d8
 800b120:	f7f5 fa72 	bl	8000608 <__aeabi_dmul>
 800b124:	a37c      	add	r3, pc, #496	; (adr r3, 800b318 <__ieee754_pow+0x708>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	4604      	mov	r4, r0
 800b12c:	460d      	mov	r5, r1
 800b12e:	f7f5 fa6b 	bl	8000608 <__aeabi_dmul>
 800b132:	a37b      	add	r3, pc, #492	; (adr r3, 800b320 <__ieee754_pow+0x710>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 f8b0 	bl	800029c <__adddf3>
 800b13c:	4622      	mov	r2, r4
 800b13e:	462b      	mov	r3, r5
 800b140:	f7f5 fa62 	bl	8000608 <__aeabi_dmul>
 800b144:	a378      	add	r3, pc, #480	; (adr r3, 800b328 <__ieee754_pow+0x718>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	f7f5 f8a7 	bl	800029c <__adddf3>
 800b14e:	4622      	mov	r2, r4
 800b150:	462b      	mov	r3, r5
 800b152:	f7f5 fa59 	bl	8000608 <__aeabi_dmul>
 800b156:	a376      	add	r3, pc, #472	; (adr r3, 800b330 <__ieee754_pow+0x720>)
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	f7f5 f89e 	bl	800029c <__adddf3>
 800b160:	4622      	mov	r2, r4
 800b162:	462b      	mov	r3, r5
 800b164:	f7f5 fa50 	bl	8000608 <__aeabi_dmul>
 800b168:	a373      	add	r3, pc, #460	; (adr r3, 800b338 <__ieee754_pow+0x728>)
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	f7f5 f895 	bl	800029c <__adddf3>
 800b172:	4622      	mov	r2, r4
 800b174:	462b      	mov	r3, r5
 800b176:	f7f5 fa47 	bl	8000608 <__aeabi_dmul>
 800b17a:	a371      	add	r3, pc, #452	; (adr r3, 800b340 <__ieee754_pow+0x730>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f7f5 f88c 	bl	800029c <__adddf3>
 800b184:	4622      	mov	r2, r4
 800b186:	4606      	mov	r6, r0
 800b188:	460f      	mov	r7, r1
 800b18a:	462b      	mov	r3, r5
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 fa3a 	bl	8000608 <__aeabi_dmul>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4630      	mov	r0, r6
 800b19a:	4639      	mov	r1, r7
 800b19c:	f7f5 fa34 	bl	8000608 <__aeabi_dmul>
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	464b      	mov	r3, r9
 800b1a8:	ec51 0b18 	vmov	r0, r1, d8
 800b1ac:	f7f5 f876 	bl	800029c <__adddf3>
 800b1b0:	ec53 2b19 	vmov	r2, r3, d9
 800b1b4:	f7f5 fa28 	bl	8000608 <__aeabi_dmul>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	462b      	mov	r3, r5
 800b1bc:	f7f5 f86e 	bl	800029c <__adddf3>
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	4682      	mov	sl, r0
 800b1c4:	468b      	mov	fp, r1
 800b1c6:	464b      	mov	r3, r9
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 fa1c 	bl	8000608 <__aeabi_dmul>
 800b1d0:	4b6b      	ldr	r3, [pc, #428]	; (800b380 <__ieee754_pow+0x770>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	460f      	mov	r7, r1
 800b1d8:	f7f5 f860 	bl	800029c <__adddf3>
 800b1dc:	4652      	mov	r2, sl
 800b1de:	465b      	mov	r3, fp
 800b1e0:	f7f5 f85c 	bl	800029c <__adddf3>
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	f7f5 fa09 	bl	8000608 <__aeabi_dmul>
 800b1f6:	4b62      	ldr	r3, [pc, #392]	; (800b380 <__ieee754_pow+0x770>)
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	4689      	mov	r9, r1
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4620      	mov	r0, r4
 800b200:	4629      	mov	r1, r5
 800b202:	f7f5 f849 	bl	8000298 <__aeabi_dsub>
 800b206:	4632      	mov	r2, r6
 800b208:	463b      	mov	r3, r7
 800b20a:	f7f5 f845 	bl	8000298 <__aeabi_dsub>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4650      	mov	r0, sl
 800b214:	4659      	mov	r1, fp
 800b216:	f7f5 f83f 	bl	8000298 <__aeabi_dsub>
 800b21a:	ec53 2b18 	vmov	r2, r3, d8
 800b21e:	f7f5 f9f3 	bl	8000608 <__aeabi_dmul>
 800b222:	4622      	mov	r2, r4
 800b224:	4606      	mov	r6, r0
 800b226:	460f      	mov	r7, r1
 800b228:	462b      	mov	r3, r5
 800b22a:	ec51 0b19 	vmov	r0, r1, d9
 800b22e:	f7f5 f9eb 	bl	8000608 <__aeabi_dmul>
 800b232:	4602      	mov	r2, r0
 800b234:	460b      	mov	r3, r1
 800b236:	4630      	mov	r0, r6
 800b238:	4639      	mov	r1, r7
 800b23a:	f7f5 f82f 	bl	800029c <__adddf3>
 800b23e:	4606      	mov	r6, r0
 800b240:	460f      	mov	r7, r1
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4640      	mov	r0, r8
 800b248:	4649      	mov	r1, r9
 800b24a:	f7f5 f827 	bl	800029c <__adddf3>
 800b24e:	a33e      	add	r3, pc, #248	; (adr r3, 800b348 <__ieee754_pow+0x738>)
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	2000      	movs	r0, #0
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	f7f5 f9d5 	bl	8000608 <__aeabi_dmul>
 800b25e:	4642      	mov	r2, r8
 800b260:	ec41 0b18 	vmov	d8, r0, r1
 800b264:	464b      	mov	r3, r9
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f5 f815 	bl	8000298 <__aeabi_dsub>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	4630      	mov	r0, r6
 800b274:	4639      	mov	r1, r7
 800b276:	f7f5 f80f 	bl	8000298 <__aeabi_dsub>
 800b27a:	a335      	add	r3, pc, #212	; (adr r3, 800b350 <__ieee754_pow+0x740>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f5 f9c2 	bl	8000608 <__aeabi_dmul>
 800b284:	a334      	add	r3, pc, #208	; (adr r3, 800b358 <__ieee754_pow+0x748>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f5 f9b9 	bl	8000608 <__aeabi_dmul>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4630      	mov	r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f4 fffd 	bl	800029c <__adddf3>
 800b2a2:	9a07      	ldr	r2, [sp, #28]
 800b2a4:	4b37      	ldr	r3, [pc, #220]	; (800b384 <__ieee754_pow+0x774>)
 800b2a6:	4413      	add	r3, r2
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	f7f4 fff6 	bl	800029c <__adddf3>
 800b2b0:	4682      	mov	sl, r0
 800b2b2:	9805      	ldr	r0, [sp, #20]
 800b2b4:	468b      	mov	fp, r1
 800b2b6:	f7f5 f93d 	bl	8000534 <__aeabi_i2d>
 800b2ba:	9a07      	ldr	r2, [sp, #28]
 800b2bc:	4b32      	ldr	r3, [pc, #200]	; (800b388 <__ieee754_pow+0x778>)
 800b2be:	4413      	add	r3, r2
 800b2c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	460f      	mov	r7, r1
 800b2c8:	4652      	mov	r2, sl
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	ec51 0b18 	vmov	r0, r1, d8
 800b2d0:	f7f4 ffe4 	bl	800029c <__adddf3>
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	f7f4 ffe0 	bl	800029c <__adddf3>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	f7f4 ffdc 	bl	800029c <__adddf3>
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	4632      	mov	r2, r6
 800b2e8:	463b      	mov	r3, r7
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	f7f4 ffd3 	bl	8000298 <__aeabi_dsub>
 800b2f2:	4642      	mov	r2, r8
 800b2f4:	464b      	mov	r3, r9
 800b2f6:	f7f4 ffcf 	bl	8000298 <__aeabi_dsub>
 800b2fa:	ec53 2b18 	vmov	r2, r3, d8
 800b2fe:	f7f4 ffcb 	bl	8000298 <__aeabi_dsub>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4650      	mov	r0, sl
 800b308:	4659      	mov	r1, fp
 800b30a:	e610      	b.n	800af2e <__ieee754_pow+0x31e>
 800b30c:	2401      	movs	r4, #1
 800b30e:	e6a1      	b.n	800b054 <__ieee754_pow+0x444>
 800b310:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b360 <__ieee754_pow+0x750>
 800b314:	e617      	b.n	800af46 <__ieee754_pow+0x336>
 800b316:	bf00      	nop
 800b318:	4a454eef 	.word	0x4a454eef
 800b31c:	3fca7e28 	.word	0x3fca7e28
 800b320:	93c9db65 	.word	0x93c9db65
 800b324:	3fcd864a 	.word	0x3fcd864a
 800b328:	a91d4101 	.word	0xa91d4101
 800b32c:	3fd17460 	.word	0x3fd17460
 800b330:	518f264d 	.word	0x518f264d
 800b334:	3fd55555 	.word	0x3fd55555
 800b338:	db6fabff 	.word	0xdb6fabff
 800b33c:	3fdb6db6 	.word	0x3fdb6db6
 800b340:	33333303 	.word	0x33333303
 800b344:	3fe33333 	.word	0x3fe33333
 800b348:	e0000000 	.word	0xe0000000
 800b34c:	3feec709 	.word	0x3feec709
 800b350:	dc3a03fd 	.word	0xdc3a03fd
 800b354:	3feec709 	.word	0x3feec709
 800b358:	145b01f5 	.word	0x145b01f5
 800b35c:	be3e2fe0 	.word	0xbe3e2fe0
 800b360:	00000000 	.word	0x00000000
 800b364:	3ff00000 	.word	0x3ff00000
 800b368:	7ff00000 	.word	0x7ff00000
 800b36c:	43400000 	.word	0x43400000
 800b370:	0003988e 	.word	0x0003988e
 800b374:	000bb679 	.word	0x000bb679
 800b378:	0800bf50 	.word	0x0800bf50
 800b37c:	3ff00000 	.word	0x3ff00000
 800b380:	40080000 	.word	0x40080000
 800b384:	0800bf70 	.word	0x0800bf70
 800b388:	0800bf60 	.word	0x0800bf60
 800b38c:	a3b3      	add	r3, pc, #716	; (adr r3, 800b65c <__ieee754_pow+0xa4c>)
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	4640      	mov	r0, r8
 800b394:	4649      	mov	r1, r9
 800b396:	f7f4 ff81 	bl	800029c <__adddf3>
 800b39a:	4622      	mov	r2, r4
 800b39c:	ec41 0b1a 	vmov	d10, r0, r1
 800b3a0:	462b      	mov	r3, r5
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f4 ff77 	bl	8000298 <__aeabi_dsub>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	ec51 0b1a 	vmov	r0, r1, d10
 800b3b2:	f7f5 fbb9 	bl	8000b28 <__aeabi_dcmpgt>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f47f ae04 	bne.w	800afc4 <__ieee754_pow+0x3b4>
 800b3bc:	4aa2      	ldr	r2, [pc, #648]	; (800b648 <__ieee754_pow+0xa38>)
 800b3be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	f340 8107 	ble.w	800b5d6 <__ieee754_pow+0x9c6>
 800b3c8:	151b      	asrs	r3, r3, #20
 800b3ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b3ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b3d2:	fa4a fa03 	asr.w	sl, sl, r3
 800b3d6:	44da      	add	sl, fp
 800b3d8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b3dc:	489b      	ldr	r0, [pc, #620]	; (800b64c <__ieee754_pow+0xa3c>)
 800b3de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b3e2:	4108      	asrs	r0, r1
 800b3e4:	ea00 030a 	and.w	r3, r0, sl
 800b3e8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b3ec:	f1c1 0114 	rsb	r1, r1, #20
 800b3f0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b3f4:	fa4a fa01 	asr.w	sl, sl, r1
 800b3f8:	f1bb 0f00 	cmp.w	fp, #0
 800b3fc:	f04f 0200 	mov.w	r2, #0
 800b400:	4620      	mov	r0, r4
 800b402:	4629      	mov	r1, r5
 800b404:	bfb8      	it	lt
 800b406:	f1ca 0a00 	rsblt	sl, sl, #0
 800b40a:	f7f4 ff45 	bl	8000298 <__aeabi_dsub>
 800b40e:	ec41 0b19 	vmov	d9, r0, r1
 800b412:	4642      	mov	r2, r8
 800b414:	464b      	mov	r3, r9
 800b416:	ec51 0b19 	vmov	r0, r1, d9
 800b41a:	f7f4 ff3f 	bl	800029c <__adddf3>
 800b41e:	a37a      	add	r3, pc, #488	; (adr r3, 800b608 <__ieee754_pow+0x9f8>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	2000      	movs	r0, #0
 800b426:	4604      	mov	r4, r0
 800b428:	460d      	mov	r5, r1
 800b42a:	f7f5 f8ed 	bl	8000608 <__aeabi_dmul>
 800b42e:	ec53 2b19 	vmov	r2, r3, d9
 800b432:	4606      	mov	r6, r0
 800b434:	460f      	mov	r7, r1
 800b436:	4620      	mov	r0, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f4 ff2d 	bl	8000298 <__aeabi_dsub>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4640      	mov	r0, r8
 800b444:	4649      	mov	r1, r9
 800b446:	f7f4 ff27 	bl	8000298 <__aeabi_dsub>
 800b44a:	a371      	add	r3, pc, #452	; (adr r3, 800b610 <__ieee754_pow+0xa00>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f7f5 f8da 	bl	8000608 <__aeabi_dmul>
 800b454:	a370      	add	r3, pc, #448	; (adr r3, 800b618 <__ieee754_pow+0xa08>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	4680      	mov	r8, r0
 800b45c:	4689      	mov	r9, r1
 800b45e:	4620      	mov	r0, r4
 800b460:	4629      	mov	r1, r5
 800b462:	f7f5 f8d1 	bl	8000608 <__aeabi_dmul>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4640      	mov	r0, r8
 800b46c:	4649      	mov	r1, r9
 800b46e:	f7f4 ff15 	bl	800029c <__adddf3>
 800b472:	4604      	mov	r4, r0
 800b474:	460d      	mov	r5, r1
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4630      	mov	r0, r6
 800b47c:	4639      	mov	r1, r7
 800b47e:	f7f4 ff0d 	bl	800029c <__adddf3>
 800b482:	4632      	mov	r2, r6
 800b484:	463b      	mov	r3, r7
 800b486:	4680      	mov	r8, r0
 800b488:	4689      	mov	r9, r1
 800b48a:	f7f4 ff05 	bl	8000298 <__aeabi_dsub>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f7f4 feff 	bl	8000298 <__aeabi_dsub>
 800b49a:	4642      	mov	r2, r8
 800b49c:	4606      	mov	r6, r0
 800b49e:	460f      	mov	r7, r1
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f5 f8af 	bl	8000608 <__aeabi_dmul>
 800b4aa:	a35d      	add	r3, pc, #372	; (adr r3, 800b620 <__ieee754_pow+0xa10>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	f7f5 f8a8 	bl	8000608 <__aeabi_dmul>
 800b4b8:	a35b      	add	r3, pc, #364	; (adr r3, 800b628 <__ieee754_pow+0xa18>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f4 feeb 	bl	8000298 <__aeabi_dsub>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	462b      	mov	r3, r5
 800b4c6:	f7f5 f89f 	bl	8000608 <__aeabi_dmul>
 800b4ca:	a359      	add	r3, pc, #356	; (adr r3, 800b630 <__ieee754_pow+0xa20>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 fee4 	bl	800029c <__adddf3>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	f7f5 f896 	bl	8000608 <__aeabi_dmul>
 800b4dc:	a356      	add	r3, pc, #344	; (adr r3, 800b638 <__ieee754_pow+0xa28>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fed9 	bl	8000298 <__aeabi_dsub>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	f7f5 f88d 	bl	8000608 <__aeabi_dmul>
 800b4ee:	a354      	add	r3, pc, #336	; (adr r3, 800b640 <__ieee754_pow+0xa30>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f4 fed2 	bl	800029c <__adddf3>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f5 f884 	bl	8000608 <__aeabi_dmul>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4640      	mov	r0, r8
 800b506:	4649      	mov	r1, r9
 800b508:	f7f4 fec6 	bl	8000298 <__aeabi_dsub>
 800b50c:	4604      	mov	r4, r0
 800b50e:	460d      	mov	r5, r1
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4640      	mov	r0, r8
 800b516:	4649      	mov	r1, r9
 800b518:	f7f5 f876 	bl	8000608 <__aeabi_dmul>
 800b51c:	2200      	movs	r2, #0
 800b51e:	ec41 0b19 	vmov	d9, r0, r1
 800b522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	f7f4 feb5 	bl	8000298 <__aeabi_dsub>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	ec51 0b19 	vmov	r0, r1, d9
 800b536:	f7f5 f991 	bl	800085c <__aeabi_ddiv>
 800b53a:	4632      	mov	r2, r6
 800b53c:	4604      	mov	r4, r0
 800b53e:	460d      	mov	r5, r1
 800b540:	463b      	mov	r3, r7
 800b542:	4640      	mov	r0, r8
 800b544:	4649      	mov	r1, r9
 800b546:	f7f5 f85f 	bl	8000608 <__aeabi_dmul>
 800b54a:	4632      	mov	r2, r6
 800b54c:	463b      	mov	r3, r7
 800b54e:	f7f4 fea5 	bl	800029c <__adddf3>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4620      	mov	r0, r4
 800b558:	4629      	mov	r1, r5
 800b55a:	f7f4 fe9d 	bl	8000298 <__aeabi_dsub>
 800b55e:	4642      	mov	r2, r8
 800b560:	464b      	mov	r3, r9
 800b562:	f7f4 fe99 	bl	8000298 <__aeabi_dsub>
 800b566:	460b      	mov	r3, r1
 800b568:	4602      	mov	r2, r0
 800b56a:	4939      	ldr	r1, [pc, #228]	; (800b650 <__ieee754_pow+0xa40>)
 800b56c:	2000      	movs	r0, #0
 800b56e:	f7f4 fe93 	bl	8000298 <__aeabi_dsub>
 800b572:	ec41 0b10 	vmov	d0, r0, r1
 800b576:	ee10 3a90 	vmov	r3, s1
 800b57a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b57e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b582:	da2b      	bge.n	800b5dc <__ieee754_pow+0x9cc>
 800b584:	4650      	mov	r0, sl
 800b586:	f000 f877 	bl	800b678 <scalbn>
 800b58a:	ec51 0b10 	vmov	r0, r1, d0
 800b58e:	ec53 2b18 	vmov	r2, r3, d8
 800b592:	f7ff bbee 	b.w	800ad72 <__ieee754_pow+0x162>
 800b596:	4b2f      	ldr	r3, [pc, #188]	; (800b654 <__ieee754_pow+0xa44>)
 800b598:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b59c:	429e      	cmp	r6, r3
 800b59e:	f77f af0d 	ble.w	800b3bc <__ieee754_pow+0x7ac>
 800b5a2:	4b2d      	ldr	r3, [pc, #180]	; (800b658 <__ieee754_pow+0xa48>)
 800b5a4:	440b      	add	r3, r1
 800b5a6:	4303      	orrs	r3, r0
 800b5a8:	d009      	beq.n	800b5be <__ieee754_pow+0x9ae>
 800b5aa:	ec51 0b18 	vmov	r0, r1, d8
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f7f5 fa9b 	bl	8000aec <__aeabi_dcmplt>
 800b5b6:	3800      	subs	r0, #0
 800b5b8:	bf18      	it	ne
 800b5ba:	2001      	movne	r0, #1
 800b5bc:	e448      	b.n	800ae50 <__ieee754_pow+0x240>
 800b5be:	4622      	mov	r2, r4
 800b5c0:	462b      	mov	r3, r5
 800b5c2:	f7f4 fe69 	bl	8000298 <__aeabi_dsub>
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	f7f5 faa3 	bl	8000b14 <__aeabi_dcmpge>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f aef4 	beq.w	800b3bc <__ieee754_pow+0x7ac>
 800b5d4:	e7e9      	b.n	800b5aa <__ieee754_pow+0x99a>
 800b5d6:	f04f 0a00 	mov.w	sl, #0
 800b5da:	e71a      	b.n	800b412 <__ieee754_pow+0x802>
 800b5dc:	ec51 0b10 	vmov	r0, r1, d0
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	e7d4      	b.n	800b58e <__ieee754_pow+0x97e>
 800b5e4:	491a      	ldr	r1, [pc, #104]	; (800b650 <__ieee754_pow+0xa40>)
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7ff bb31 	b.w	800ac4e <__ieee754_pow+0x3e>
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	f7ff bb2d 	b.w	800ac4e <__ieee754_pow+0x3e>
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	4639      	mov	r1, r7
 800b5f8:	f7ff bb29 	b.w	800ac4e <__ieee754_pow+0x3e>
 800b5fc:	9204      	str	r2, [sp, #16]
 800b5fe:	f7ff bb7b 	b.w	800acf8 <__ieee754_pow+0xe8>
 800b602:	2300      	movs	r3, #0
 800b604:	f7ff bb65 	b.w	800acd2 <__ieee754_pow+0xc2>
 800b608:	00000000 	.word	0x00000000
 800b60c:	3fe62e43 	.word	0x3fe62e43
 800b610:	fefa39ef 	.word	0xfefa39ef
 800b614:	3fe62e42 	.word	0x3fe62e42
 800b618:	0ca86c39 	.word	0x0ca86c39
 800b61c:	be205c61 	.word	0xbe205c61
 800b620:	72bea4d0 	.word	0x72bea4d0
 800b624:	3e663769 	.word	0x3e663769
 800b628:	c5d26bf1 	.word	0xc5d26bf1
 800b62c:	3ebbbd41 	.word	0x3ebbbd41
 800b630:	af25de2c 	.word	0xaf25de2c
 800b634:	3f11566a 	.word	0x3f11566a
 800b638:	16bebd93 	.word	0x16bebd93
 800b63c:	3f66c16c 	.word	0x3f66c16c
 800b640:	5555553e 	.word	0x5555553e
 800b644:	3fc55555 	.word	0x3fc55555
 800b648:	3fe00000 	.word	0x3fe00000
 800b64c:	fff00000 	.word	0xfff00000
 800b650:	3ff00000 	.word	0x3ff00000
 800b654:	4090cbff 	.word	0x4090cbff
 800b658:	3f6f3400 	.word	0x3f6f3400
 800b65c:	652b82fe 	.word	0x652b82fe
 800b660:	3c971547 	.word	0x3c971547

0800b664 <fabs>:
 800b664:	ec51 0b10 	vmov	r0, r1, d0
 800b668:	ee10 2a10 	vmov	r2, s0
 800b66c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b670:	ec43 2b10 	vmov	d0, r2, r3
 800b674:	4770      	bx	lr
	...

0800b678 <scalbn>:
 800b678:	b570      	push	{r4, r5, r6, lr}
 800b67a:	ec55 4b10 	vmov	r4, r5, d0
 800b67e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b682:	4606      	mov	r6, r0
 800b684:	462b      	mov	r3, r5
 800b686:	b999      	cbnz	r1, 800b6b0 <scalbn+0x38>
 800b688:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b68c:	4323      	orrs	r3, r4
 800b68e:	d03f      	beq.n	800b710 <scalbn+0x98>
 800b690:	4b35      	ldr	r3, [pc, #212]	; (800b768 <scalbn+0xf0>)
 800b692:	4629      	mov	r1, r5
 800b694:	ee10 0a10 	vmov	r0, s0
 800b698:	2200      	movs	r2, #0
 800b69a:	f7f4 ffb5 	bl	8000608 <__aeabi_dmul>
 800b69e:	4b33      	ldr	r3, [pc, #204]	; (800b76c <scalbn+0xf4>)
 800b6a0:	429e      	cmp	r6, r3
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	460d      	mov	r5, r1
 800b6a6:	da10      	bge.n	800b6ca <scalbn+0x52>
 800b6a8:	a327      	add	r3, pc, #156	; (adr r3, 800b748 <scalbn+0xd0>)
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	e01f      	b.n	800b6f0 <scalbn+0x78>
 800b6b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b6b4:	4291      	cmp	r1, r2
 800b6b6:	d10c      	bne.n	800b6d2 <scalbn+0x5a>
 800b6b8:	ee10 2a10 	vmov	r2, s0
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f4 fdec 	bl	800029c <__adddf3>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	e022      	b.n	800b710 <scalbn+0x98>
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b6d0:	3936      	subs	r1, #54	; 0x36
 800b6d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b6d6:	4296      	cmp	r6, r2
 800b6d8:	dd0d      	ble.n	800b6f6 <scalbn+0x7e>
 800b6da:	2d00      	cmp	r5, #0
 800b6dc:	a11c      	add	r1, pc, #112	; (adr r1, 800b750 <scalbn+0xd8>)
 800b6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6e2:	da02      	bge.n	800b6ea <scalbn+0x72>
 800b6e4:	a11c      	add	r1, pc, #112	; (adr r1, 800b758 <scalbn+0xe0>)
 800b6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ea:	a319      	add	r3, pc, #100	; (adr r3, 800b750 <scalbn+0xd8>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 ff8a 	bl	8000608 <__aeabi_dmul>
 800b6f4:	e7e6      	b.n	800b6c4 <scalbn+0x4c>
 800b6f6:	1872      	adds	r2, r6, r1
 800b6f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b6fc:	428a      	cmp	r2, r1
 800b6fe:	dcec      	bgt.n	800b6da <scalbn+0x62>
 800b700:	2a00      	cmp	r2, #0
 800b702:	dd08      	ble.n	800b716 <scalbn+0x9e>
 800b704:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b708:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b70c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b710:	ec45 4b10 	vmov	d0, r4, r5
 800b714:	bd70      	pop	{r4, r5, r6, pc}
 800b716:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b71a:	da08      	bge.n	800b72e <scalbn+0xb6>
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	a10a      	add	r1, pc, #40	; (adr r1, 800b748 <scalbn+0xd0>)
 800b720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b724:	dac0      	bge.n	800b6a8 <scalbn+0x30>
 800b726:	a10e      	add	r1, pc, #56	; (adr r1, 800b760 <scalbn+0xe8>)
 800b728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b72c:	e7bc      	b.n	800b6a8 <scalbn+0x30>
 800b72e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b732:	3236      	adds	r2, #54	; 0x36
 800b734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b738:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b73c:	4620      	mov	r0, r4
 800b73e:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <scalbn+0xf8>)
 800b740:	2200      	movs	r2, #0
 800b742:	e7d5      	b.n	800b6f0 <scalbn+0x78>
 800b744:	f3af 8000 	nop.w
 800b748:	c2f8f359 	.word	0xc2f8f359
 800b74c:	01a56e1f 	.word	0x01a56e1f
 800b750:	8800759c 	.word	0x8800759c
 800b754:	7e37e43c 	.word	0x7e37e43c
 800b758:	8800759c 	.word	0x8800759c
 800b75c:	fe37e43c 	.word	0xfe37e43c
 800b760:	c2f8f359 	.word	0xc2f8f359
 800b764:	81a56e1f 	.word	0x81a56e1f
 800b768:	43500000 	.word	0x43500000
 800b76c:	ffff3cb0 	.word	0xffff3cb0
 800b770:	3c900000 	.word	0x3c900000

0800b774 <with_errno>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
 800b77a:	4616      	mov	r6, r2
 800b77c:	f7fb fde2 	bl	8007344 <__errno>
 800b780:	4629      	mov	r1, r5
 800b782:	6006      	str	r6, [r0, #0]
 800b784:	4620      	mov	r0, r4
 800b786:	bd70      	pop	{r4, r5, r6, pc}

0800b788 <xflow>:
 800b788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b78a:	4614      	mov	r4, r2
 800b78c:	461d      	mov	r5, r3
 800b78e:	b108      	cbz	r0, 800b794 <xflow+0xc>
 800b790:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b794:	e9cd 2300 	strd	r2, r3, [sp]
 800b798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b79c:	4620      	mov	r0, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f7f4 ff32 	bl	8000608 <__aeabi_dmul>
 800b7a4:	2222      	movs	r2, #34	; 0x22
 800b7a6:	b003      	add	sp, #12
 800b7a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ac:	f7ff bfe2 	b.w	800b774 <with_errno>

0800b7b0 <__math_uflow>:
 800b7b0:	b508      	push	{r3, lr}
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b7b8:	f7ff ffe6 	bl	800b788 <xflow>
 800b7bc:	ec41 0b10 	vmov	d0, r0, r1
 800b7c0:	bd08      	pop	{r3, pc}

0800b7c2 <__math_oflow>:
 800b7c2:	b508      	push	{r3, lr}
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b7ca:	f7ff ffdd 	bl	800b788 <xflow>
 800b7ce:	ec41 0b10 	vmov	d0, r0, r1
 800b7d2:	bd08      	pop	{r3, pc}

0800b7d4 <__ieee754_sqrt>:
 800b7d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	ec55 4b10 	vmov	r4, r5, d0
 800b7dc:	4e67      	ldr	r6, [pc, #412]	; (800b97c <__ieee754_sqrt+0x1a8>)
 800b7de:	43ae      	bics	r6, r5
 800b7e0:	ee10 0a10 	vmov	r0, s0
 800b7e4:	ee10 2a10 	vmov	r2, s0
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	d10d      	bne.n	800b80a <__ieee754_sqrt+0x36>
 800b7ee:	f7f4 ff0b 	bl	8000608 <__aeabi_dmul>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f7f4 fd4f 	bl	800029c <__adddf3>
 800b7fe:	4604      	mov	r4, r0
 800b800:	460d      	mov	r5, r1
 800b802:	ec45 4b10 	vmov	d0, r4, r5
 800b806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	dc0b      	bgt.n	800b826 <__ieee754_sqrt+0x52>
 800b80e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b812:	4326      	orrs	r6, r4
 800b814:	d0f5      	beq.n	800b802 <__ieee754_sqrt+0x2e>
 800b816:	b135      	cbz	r5, 800b826 <__ieee754_sqrt+0x52>
 800b818:	f7f4 fd3e 	bl	8000298 <__aeabi_dsub>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	f7f5 f81c 	bl	800085c <__aeabi_ddiv>
 800b824:	e7eb      	b.n	800b7fe <__ieee754_sqrt+0x2a>
 800b826:	1509      	asrs	r1, r1, #20
 800b828:	f000 808d 	beq.w	800b946 <__ieee754_sqrt+0x172>
 800b82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b830:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b838:	07c9      	lsls	r1, r1, #31
 800b83a:	bf5c      	itt	pl
 800b83c:	005b      	lslpl	r3, r3, #1
 800b83e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b842:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b846:	bf58      	it	pl
 800b848:	0052      	lslpl	r2, r2, #1
 800b84a:	2500      	movs	r5, #0
 800b84c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b850:	1076      	asrs	r6, r6, #1
 800b852:	0052      	lsls	r2, r2, #1
 800b854:	f04f 0e16 	mov.w	lr, #22
 800b858:	46ac      	mov	ip, r5
 800b85a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b85e:	eb0c 0001 	add.w	r0, ip, r1
 800b862:	4298      	cmp	r0, r3
 800b864:	bfde      	ittt	le
 800b866:	1a1b      	suble	r3, r3, r0
 800b868:	eb00 0c01 	addle.w	ip, r0, r1
 800b86c:	186d      	addle	r5, r5, r1
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	f1be 0e01 	subs.w	lr, lr, #1
 800b874:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b878:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b87c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b880:	d1ed      	bne.n	800b85e <__ieee754_sqrt+0x8a>
 800b882:	4674      	mov	r4, lr
 800b884:	2720      	movs	r7, #32
 800b886:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b88a:	4563      	cmp	r3, ip
 800b88c:	eb01 000e 	add.w	r0, r1, lr
 800b890:	dc02      	bgt.n	800b898 <__ieee754_sqrt+0xc4>
 800b892:	d113      	bne.n	800b8bc <__ieee754_sqrt+0xe8>
 800b894:	4290      	cmp	r0, r2
 800b896:	d811      	bhi.n	800b8bc <__ieee754_sqrt+0xe8>
 800b898:	2800      	cmp	r0, #0
 800b89a:	eb00 0e01 	add.w	lr, r0, r1
 800b89e:	da57      	bge.n	800b950 <__ieee754_sqrt+0x17c>
 800b8a0:	f1be 0f00 	cmp.w	lr, #0
 800b8a4:	db54      	blt.n	800b950 <__ieee754_sqrt+0x17c>
 800b8a6:	f10c 0801 	add.w	r8, ip, #1
 800b8aa:	eba3 030c 	sub.w	r3, r3, ip
 800b8ae:	4290      	cmp	r0, r2
 800b8b0:	bf88      	it	hi
 800b8b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b8b6:	1a12      	subs	r2, r2, r0
 800b8b8:	440c      	add	r4, r1
 800b8ba:	46c4      	mov	ip, r8
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	3f01      	subs	r7, #1
 800b8c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b8c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b8c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b8cc:	d1dd      	bne.n	800b88a <__ieee754_sqrt+0xb6>
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	d01b      	beq.n	800b90a <__ieee754_sqrt+0x136>
 800b8d2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b980 <__ieee754_sqrt+0x1ac>
 800b8d6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b984 <__ieee754_sqrt+0x1b0>
 800b8da:	e9da 0100 	ldrd	r0, r1, [sl]
 800b8de:	e9db 2300 	ldrd	r2, r3, [fp]
 800b8e2:	f7f4 fcd9 	bl	8000298 <__aeabi_dsub>
 800b8e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	4649      	mov	r1, r9
 800b8f2:	f7f5 f905 	bl	8000b00 <__aeabi_dcmple>
 800b8f6:	b140      	cbz	r0, 800b90a <__ieee754_sqrt+0x136>
 800b8f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b8fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800b900:	e9db 2300 	ldrd	r2, r3, [fp]
 800b904:	d126      	bne.n	800b954 <__ieee754_sqrt+0x180>
 800b906:	3501      	adds	r5, #1
 800b908:	463c      	mov	r4, r7
 800b90a:	106a      	asrs	r2, r5, #1
 800b90c:	0863      	lsrs	r3, r4, #1
 800b90e:	07e9      	lsls	r1, r5, #31
 800b910:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b914:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b918:	bf48      	it	mi
 800b91a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b91e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b922:	461c      	mov	r4, r3
 800b924:	e76d      	b.n	800b802 <__ieee754_sqrt+0x2e>
 800b926:	0ad3      	lsrs	r3, r2, #11
 800b928:	3815      	subs	r0, #21
 800b92a:	0552      	lsls	r2, r2, #21
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0fa      	beq.n	800b926 <__ieee754_sqrt+0x152>
 800b930:	02dc      	lsls	r4, r3, #11
 800b932:	d50a      	bpl.n	800b94a <__ieee754_sqrt+0x176>
 800b934:	f1c1 0420 	rsb	r4, r1, #32
 800b938:	fa22 f404 	lsr.w	r4, r2, r4
 800b93c:	1e4d      	subs	r5, r1, #1
 800b93e:	408a      	lsls	r2, r1
 800b940:	4323      	orrs	r3, r4
 800b942:	1b41      	subs	r1, r0, r5
 800b944:	e772      	b.n	800b82c <__ieee754_sqrt+0x58>
 800b946:	4608      	mov	r0, r1
 800b948:	e7f0      	b.n	800b92c <__ieee754_sqrt+0x158>
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	3101      	adds	r1, #1
 800b94e:	e7ef      	b.n	800b930 <__ieee754_sqrt+0x15c>
 800b950:	46e0      	mov	r8, ip
 800b952:	e7aa      	b.n	800b8aa <__ieee754_sqrt+0xd6>
 800b954:	f7f4 fca2 	bl	800029c <__adddf3>
 800b958:	e9da 8900 	ldrd	r8, r9, [sl]
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4640      	mov	r0, r8
 800b962:	4649      	mov	r1, r9
 800b964:	f7f5 f8c2 	bl	8000aec <__aeabi_dcmplt>
 800b968:	b120      	cbz	r0, 800b974 <__ieee754_sqrt+0x1a0>
 800b96a:	1ca0      	adds	r0, r4, #2
 800b96c:	bf08      	it	eq
 800b96e:	3501      	addeq	r5, #1
 800b970:	3402      	adds	r4, #2
 800b972:	e7ca      	b.n	800b90a <__ieee754_sqrt+0x136>
 800b974:	3401      	adds	r4, #1
 800b976:	f024 0401 	bic.w	r4, r4, #1
 800b97a:	e7c6      	b.n	800b90a <__ieee754_sqrt+0x136>
 800b97c:	7ff00000 	.word	0x7ff00000
 800b980:	200001e0 	.word	0x200001e0
 800b984:	200001e8 	.word	0x200001e8

0800b988 <_init>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	bf00      	nop
 800b98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98e:	bc08      	pop	{r3}
 800b990:	469e      	mov	lr, r3
 800b992:	4770      	bx	lr

0800b994 <_fini>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	bf00      	nop
 800b998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99a:	bc08      	pop	{r3}
 800b99c:	469e      	mov	lr, r3
 800b99e:	4770      	bx	lr
