
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800ced0  0800ced0  0001ced0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4e8  0800d4e8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4e8  0800d4e8  0001d4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4f0  0800d4f0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4f0  0800d4f0  0001d4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4f4  0800d4f4  0001d4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d4f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000445c  200001f0  0800d6e8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000464c  0800d6e8  0002464c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151b5  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a7  00000000  00000000  00035418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001043  00000000  00000000  00039980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001961d  00000000  00000000  0003a9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180a4  00000000  00000000  00053fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b827  00000000  00000000  0006c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ff0  00000000  00000000  001078ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0010e89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ceb8 	.word	0x0800ceb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800ceb8 	.word	0x0800ceb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f1 	b.w	800109c <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010ae:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <DWT_Delay_Init+0x58>)
 80010b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ba:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80010da:	bf00      	nop
     __ASM volatile ("NOP");
 80010dc:	bf00      	nop
  __ASM volatile ("NOP");
 80010de:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <DWT_Delay_Init+0x5c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80010e8:	2300      	movs	r3, #0
 80010ea:	e000      	b.n	80010ee <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80010ec:	2301      	movs	r3, #1
  }
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000edf0 	.word	0xe000edf0
 80010fc:	e0001000 	.word	0xe0001000

08001100 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <delay+0x40>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800110e:	f003 ffc5 	bl	800509c <HAL_RCC_GetHCLKFreq>
 8001112:	4603      	mov	r3, r0
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <delay+0x44>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	0c9b      	lsrs	r3, r3, #18
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001124:	bf00      	nop
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <delay+0x40>)
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad2      	subs	r2, r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	d3f8      	bcc.n	8001126 <delay+0x26>
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e0001000 	.word	0xe0001000
 8001144:	431bde83 	.word	0x431bde83

08001148 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f002 f952 	bl	8003420 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f002 f934 	bl	8003420 <HAL_GPIO_Init>
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <DHT_Start>:


void DHT_Start (void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80011c4:	f7ff ff6c 	bl	80010a0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <DHT_Start+0x48>)
 80011ce:	f7ff ffbb 	bl	8001148 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <DHT_Start+0x48>)
 80011da:	f002 fabd 	bl	8003758 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 80011de:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80011e2:	f7ff ff8d 	bl	8001100 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <DHT_Start+0x48>)
 80011ee:	f002 fab3 	bl	8003758 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80011f2:	2014      	movs	r0, #20
 80011f4:	f7ff ff84 	bl	8001100 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DHT_Start+0x48>)
 80011fe:	f7ff ffc1 	bl	8001184 <Set_Pin_Input>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020000 	.word	0x40020000

0800120c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f7ff ff72 	bl	8001100 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800121c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001220:	4811      	ldr	r0, [pc, #68]	; (8001268 <DHT_Check_Response+0x5c>)
 8001222:	f002 fa81 	bl	8003728 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10f      	bne.n	800124c <DHT_Check_Response+0x40>
	{
		delay (80);
 800122c:	2050      	movs	r0, #80	; 0x50
 800122e:	f7ff ff67 	bl	8001100 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <DHT_Check_Response+0x5c>)
 8001238:	f002 fa76 	bl	8003728 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <DHT_Check_Response+0x3c>
 8001242:	2301      	movs	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	e001      	b.n	800124c <DHT_Check_Response+0x40>
		else Response = -1;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800124c:	bf00      	nop
 800124e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <DHT_Check_Response+0x5c>)
 8001254:	f002 fa68 	bl	8003728 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f7      	bne.n	800124e <DHT_Check_Response+0x42>

	return Response;
 800125e:	79fb      	ldrb	r3, [r7, #7]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020000 	.word	0x40020000

0800126c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001272:	2300      	movs	r3, #0
 8001274:	71bb      	strb	r3, [r7, #6]
 8001276:	e03a      	b.n	80012ee <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001278:	bf00      	nop
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	4820      	ldr	r0, [pc, #128]	; (8001300 <DHT_Read+0x94>)
 8001280:	f002 fa52 	bl	8003728 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f7      	beq.n	800127a <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800128a:	2028      	movs	r0, #40	; 0x28
 800128c:	f7ff ff38 	bl	8001100 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001294:	481a      	ldr	r0, [pc, #104]	; (8001300 <DHT_Read+0x94>)
 8001296:	f002 fa47 	bl	8003728 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10e      	bne.n	80012be <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2201      	movs	r2, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	4013      	ands	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	e00b      	b.n	80012d6 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	f1c3 0307 	rsb	r3, r3, #7
 80012c4:	2201      	movs	r2, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	b25a      	sxtb	r2, r3
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80012d6:	bf00      	nop
 80012d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <DHT_Read+0x94>)
 80012de:	f002 fa23 	bl	8003728 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f7      	bne.n	80012d8 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	3301      	adds	r3, #1
 80012ec:	71bb      	strb	r3, [r7, #6]
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d9c1      	bls.n	8001278 <DHT_Read+0xc>
	}
	return i;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020000 	.word	0x40020000

08001304 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800130c:	f7ff ff58 	bl	80011c0 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001310:	f7ff ff7c 	bl	800120c <DHT_Check_Response>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <DHT_GetData+0xb4>)
 800131a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800131c:	f7ff ffa6 	bl	800126c <DHT_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <DHT_GetData+0xb8>)
 8001326:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001328:	f7ff ffa0 	bl	800126c <DHT_Read>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <DHT_GetData+0xbc>)
 8001332:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001334:	f7ff ff9a 	bl	800126c <DHT_Read>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <DHT_GetData+0xc0>)
 800133e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001340:	f7ff ff94 	bl	800126c <DHT_Read>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <DHT_GetData+0xc4>)
 800134a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800134c:	f7ff ff8e 	bl	800126c <DHT_Read>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <DHT_GetData+0xc8>)
 8001356:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <DHT_GetData+0xc8>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <DHT_GetData+0xb8>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <DHT_GetData+0xbc>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4413      	add	r3, r2
 800136a:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <DHT_GetData+0xc0>)
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <DHT_GetData+0xc4>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	4413      	add	r3, r2
 8001376:	4299      	cmp	r1, r3
 8001378:	d119      	bne.n	80013ae <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <DHT_GetData+0xc0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <DHT_GetData+0xc4>)
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	4313      	orrs	r3, r2
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <DHT_GetData+0xb8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <DHT_GetData+0xbc>)
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000212 	.word	0x20000212
 80013bc:	2000020c 	.word	0x2000020c
 80013c0:	2000020d 	.word	0x2000020d
 80013c4:	2000020e 	.word	0x2000020e
 80013c8:	2000020f 	.word	0x2000020f
 80013cc:	20000210 	.word	0x20000210

080013d0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	715a      	strb	r2, [r3, #5]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af04      	add	r7, sp, #16
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	460b      	mov	r3, r1
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001422:	7afb      	ldrb	r3, [r7, #11]
 8001424:	b29a      	uxth	r2, r3
 8001426:	8af9      	ldrh	r1, [r7, #22]
 8001428:	f241 3388 	movw	r3, #5000	; 0x1388
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2302      	movs	r3, #2
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	f002 fbe5 	bl	8003c08 <HAL_I2C_Mem_Read>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001444:	7d7b      	ldrb	r3, [r7, #21]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	7d3b      	ldrb	r3, [r7, #20]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21b      	sxth	r3, r3
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	801a      	strh	r2, [r3, #0]
		return true;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <read_register16+0x56>
	} else
		return false;
 800145c:	2300      	movs	r3, #0

}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001466:	b590      	push	{r4, r7, lr}
 8001468:	b08b      	sub	sp, #44	; 0x2c
 800146a:	af04      	add	r7, sp, #16
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	461a      	mov	r2, r3
 8001472:	460b      	mov	r3, r1
 8001474:	72fb      	strb	r3, [r7, #11]
 8001476:	4613      	mov	r3, r2
 8001478:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	b29a      	uxth	r2, r3
 800148a:	7abb      	ldrb	r3, [r7, #10]
 800148c:	b29b      	uxth	r3, r3
 800148e:	8af9      	ldrh	r1, [r7, #22]
 8001490:	f241 3488 	movw	r4, #5000	; 0x1388
 8001494:	9402      	str	r4, [sp, #8]
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	f002 fbb3 	bl	8003c08 <HAL_I2C_Mem_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <read_data+0x46>
		return 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e000      	b.n	80014ae <read_data+0x48>
	else
		return 1;
 80014ac:	2301      	movs	r3, #1

}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}

080014b6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	461a      	mov	r2, r3
 80014c2:	2188      	movs	r1, #136	; 0x88
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff9f 	bl	8001408 <read_register16>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d06f      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	461a      	mov	r2, r3
 80014d6:	218a      	movs	r1, #138	; 0x8a
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff95 	bl	8001408 <read_register16>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d065      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3304      	adds	r3, #4
 80014e8:	461a      	mov	r2, r3
 80014ea:	218c      	movs	r1, #140	; 0x8c
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff8b 	bl	8001408 <read_register16>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d05b      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3306      	adds	r3, #6
 80014fc:	461a      	mov	r2, r3
 80014fe:	218e      	movs	r1, #142	; 0x8e
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff81 	bl	8001408 <read_register16>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d051      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3308      	adds	r3, #8
 8001510:	461a      	mov	r2, r3
 8001512:	2190      	movs	r1, #144	; 0x90
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff77 	bl	8001408 <read_register16>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d047      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	330a      	adds	r3, #10
 8001524:	461a      	mov	r2, r3
 8001526:	2192      	movs	r1, #146	; 0x92
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff6d 	bl	8001408 <read_register16>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03d      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	330c      	adds	r3, #12
 8001538:	461a      	mov	r2, r3
 800153a:	2194      	movs	r1, #148	; 0x94
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff63 	bl	8001408 <read_register16>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d033      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	330e      	adds	r3, #14
 800154c:	461a      	mov	r2, r3
 800154e:	2196      	movs	r1, #150	; 0x96
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff59 	bl	8001408 <read_register16>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d029      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3310      	adds	r3, #16
 8001560:	461a      	mov	r2, r3
 8001562:	2198      	movs	r1, #152	; 0x98
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff4f 	bl	8001408 <read_register16>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01f      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3312      	adds	r3, #18
 8001574:	461a      	mov	r2, r3
 8001576:	219a      	movs	r1, #154	; 0x9a
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff45 	bl	8001408 <read_register16>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d015      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3314      	adds	r3, #20
 8001588:	461a      	mov	r2, r3
 800158a:	219c      	movs	r1, #156	; 0x9c
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff3b 	bl	8001408 <read_register16>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800159c:	461a      	mov	r2, r3
 800159e:	219e      	movs	r1, #158	; 0x9e
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff31 	bl	8001408 <read_register16>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <read_calibration_data+0xfa>

		return true;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <read_calibration_data+0xfc>
	}

	return false;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f103 0218 	add.w	r2, r3, #24
 80015c8:	2301      	movs	r3, #1
 80015ca:	21a1      	movs	r1, #161	; 0xa1
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff4a 	bl	8001466 <read_data>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14b      	bne.n	8001670 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	331a      	adds	r3, #26
 80015dc:	461a      	mov	r2, r3
 80015de:	21e1      	movs	r1, #225	; 0xe1
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff11 	bl	8001408 <read_register16>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d041      	beq.n	8001670 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f103 021c 	add.w	r2, r3, #28
 80015f2:	2301      	movs	r3, #1
 80015f4:	21e3      	movs	r1, #227	; 0xe3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff35 	bl	8001466 <read_data>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d136      	bne.n	8001670 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001602:	f107 030e 	add.w	r3, r7, #14
 8001606:	461a      	mov	r2, r3
 8001608:	21e4      	movs	r1, #228	; 0xe4
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fefc 	bl	8001408 <read_register16>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d02c      	beq.n	8001670 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	461a      	mov	r2, r3
 800161c:	21e5      	movs	r1, #229	; 0xe5
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fef2 	bl	8001408 <read_register16>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d022      	beq.n	8001670 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001630:	2301      	movs	r3, #1
 8001632:	21e7      	movs	r1, #231	; 0xe7
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff16 	bl	8001466 <read_data>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d117      	bne.n	8001670 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	b21b      	sxth	r3, r3
 8001646:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800164a:	b21a      	sxth	r2, r3
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	121b      	asrs	r3, r3, #8
 8001650:	b21b      	sxth	r3, r3
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21a      	sxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001660:	89bb      	ldrh	r3, [r7, #12]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	b29b      	uxth	r3, r3
 8001666:	b21a      	sxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	841a      	strh	r2, [r3, #32]

		return true;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b088      	sub	sp, #32
 800167e:	af04      	add	r7, sp, #16
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
 8001686:	4613      	mov	r3, r2
 8001688:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	b29a      	uxth	r2, r3
 800169a:	89f9      	ldrh	r1, [r7, #14]
 800169c:	f242 7310 	movw	r3, #10000	; 0x2710
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2301      	movs	r3, #1
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	1cbb      	adds	r3, r7, #2
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	f002 f9b2 	bl	8003a14 <HAL_I2C_Mem_Write>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <write_register8+0x40>
		return false;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <write_register8+0x42>
	else
		return true;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016d2:	2b76      	cmp	r3, #118	; 0x76
 80016d4:	d005      	beq.n	80016e2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016da:	2b77      	cmp	r3, #119	; 0x77
 80016dc:	d001      	beq.n	80016e2 <bmp280_init+0x1e>

		return false;
 80016de:	2300      	movs	r3, #0
 80016e0:	e099      	b.n	8001816 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80016e8:	2301      	movs	r3, #1
 80016ea:	21d0      	movs	r1, #208	; 0xd0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff feba 	bl	8001466 <read_data>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <bmp280_init+0x38>
		return false;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e08c      	b.n	8001816 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001702:	2b58      	cmp	r3, #88	; 0x58
 8001704:	d006      	beq.n	8001714 <bmp280_init+0x50>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800170c:	2b60      	cmp	r3, #96	; 0x60
 800170e:	d001      	beq.n	8001714 <bmp280_init+0x50>

		return false;
 8001710:	2300      	movs	r3, #0
 8001712:	e080      	b.n	8001816 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001714:	22b6      	movs	r2, #182	; 0xb6
 8001716:	21e0      	movs	r1, #224	; 0xe0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffae 	bl	800167a <write_register8>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <bmp280_init+0x64>
		return false;
 8001724:	2300      	movs	r3, #0
 8001726:	e076      	b.n	8001816 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001728:	f107 020c 	add.w	r2, r7, #12
 800172c:	2301      	movs	r3, #1
 800172e:	21f3      	movs	r1, #243	; 0xf3
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fe98 	bl	8001466 <read_data>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f5      	bne.n	8001728 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800173c:	7b3b      	ldrb	r3, [r7, #12]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff feb5 	bl	80014b6 <read_calibration_data>
 800174c:	4603      	mov	r3, r0
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <bmp280_init+0x96>
 8001758:	e001      	b.n	800175e <bmp280_init+0x9a>
		return false;
 800175a:	2300      	movs	r3, #0
 800175c:	e05b      	b.n	8001816 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001764:	2b60      	cmp	r3, #96	; 0x60
 8001766:	d10a      	bne.n	800177e <bmp280_init+0xba>
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff26 	bl	80015ba <read_hum_calibration_data>
 800176e:	4603      	mov	r3, r0
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <bmp280_init+0xba>
		return false;
 800177a:	2300      	movs	r3, #0
 800177c:	e04b      	b.n	8001816 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	795b      	ldrb	r3, [r3, #5]
 8001782:	015b      	lsls	r3, r3, #5
 8001784:	b25a      	sxtb	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	461a      	mov	r2, r3
 8001798:	21f5      	movs	r1, #245	; 0xf5
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff6d 	bl	800167a <write_register8>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <bmp280_init+0xe6>
		return false;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e035      	b.n	8001816 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	78db      	ldrb	r3, [r3, #3]
 80017bc:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80017be:	b25a      	sxtb	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80017d6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017de:	2b60      	cmp	r3, #96	; 0x60
 80017e0:	d10d      	bne.n	80017fe <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80017e8:	7b7b      	ldrb	r3, [r7, #13]
 80017ea:	461a      	mov	r2, r3
 80017ec:	21f2      	movs	r1, #242	; 0xf2
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff43 	bl	800167a <write_register8>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <bmp280_init+0x13a>
			return false;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e00b      	b.n	8001816 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	461a      	mov	r2, r3
 8001802:	21f4      	movs	r1, #244	; 0xf4
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff38 	bl	800167a <write_register8>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <bmp280_init+0x150>
		return false;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <bmp280_init+0x152>
	}

	return true;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	10da      	asrs	r2, r3, #3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800183c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001840:	12db      	asrs	r3, r3, #11
 8001842:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	111b      	asrs	r3, r3, #4
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	8812      	ldrh	r2, [r2, #0]
 800184c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	1112      	asrs	r2, r2, #4
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	8809      	ldrh	r1, [r1, #0]
 8001856:	1a52      	subs	r2, r2, r1
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001864:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001868:	139b      	asrs	r3, r3, #14
 800186a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	441a      	add	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3380      	adds	r3, #128	; 0x80
 8001882:	121b      	asrs	r3, r3, #8
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b0cc      	sub	sp, #304	; 0x130
 8001896:	af00      	add	r7, sp, #0
 8001898:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800189c:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80018a0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80018a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018a8:	17da      	asrs	r2, r3, #31
 80018aa:	461c      	mov	r4, r3
 80018ac:	4615      	mov	r5, r2
 80018ae:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80018b2:	f145 3bff 	adc.w	fp, r5, #4294967295
 80018b6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80018ba:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80018be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018c2:	fb03 f102 	mul.w	r1, r3, r2
 80018c6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80018ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	18ca      	adds	r2, r1, r3
 80018d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018d8:	fba3 8903 	umull	r8, r9, r3, r3
 80018dc:	eb02 0309 	add.w	r3, r2, r9
 80018e0:	4699      	mov	r9, r3
 80018e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	17da      	asrs	r2, r3, #31
 80018ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018f2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80018f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80018fa:	4603      	mov	r3, r0
 80018fc:	fb03 f209 	mul.w	r2, r3, r9
 8001900:	460b      	mov	r3, r1
 8001902:	fb08 f303 	mul.w	r3, r8, r3
 8001906:	4413      	add	r3, r2
 8001908:	4602      	mov	r2, r0
 800190a:	fba8 1202 	umull	r1, r2, r8, r2
 800190e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001912:	460a      	mov	r2, r1
 8001914:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001918:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800191c:	4413      	add	r3, r2
 800191e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001922:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001926:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800192a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800192e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001932:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001936:	b21b      	sxth	r3, r3
 8001938:	17da      	asrs	r2, r3, #31
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800193e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001946:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800194a:	462a      	mov	r2, r5
 800194c:	fb02 f203 	mul.w	r2, r2, r3
 8001950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001954:	4621      	mov	r1, r4
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	441a      	add	r2, r3
 800195c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001960:	4621      	mov	r1, r4
 8001962:	fba3 1301 	umull	r1, r3, r3, r1
 8001966:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800196a:	460b      	mov	r3, r1
 800196c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001986:	462b      	mov	r3, r5
 8001988:	0459      	lsls	r1, r3, #17
 800198a:	4623      	mov	r3, r4
 800198c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001990:	4623      	mov	r3, r4
 8001992:	0458      	lsls	r0, r3, #17
 8001994:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001998:	1814      	adds	r4, r2, r0
 800199a:	643c      	str	r4, [r7, #64]	; 0x40
 800199c:	414b      	adcs	r3, r1
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
 80019a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80019a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80019a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	17da      	asrs	r2, r3, #31
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019c8:	00d9      	lsls	r1, r3, #3
 80019ca:	2000      	movs	r0, #0
 80019cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	63bc      	str	r4, [r7, #56]	; 0x38
 80019d4:	414b      	adcs	r3, r1
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80019dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80019e0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019e8:	fb03 f102 	mul.w	r1, r3, r2
 80019ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	18ca      	adds	r2, r1, r3
 80019fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019fe:	fba3 1303 	umull	r1, r3, r3, r3
 8001a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a06:	460b      	mov	r3, r1
 8001a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	17da      	asrs	r2, r3, #31
 8001a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001a2a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001a2e:	462b      	mov	r3, r5
 8001a30:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001a34:	4642      	mov	r2, r8
 8001a36:	fb02 f203 	mul.w	r2, r2, r3
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	4622      	mov	r2, r4
 8001a46:	4641      	mov	r1, r8
 8001a48:	fba2 1201 	umull	r1, r2, r2, r1
 8001a4c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001a50:	460a      	mov	r2, r1
 8001a52:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001a56:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	0a18      	lsrs	r0, r3, #8
 8001a70:	462b      	mov	r3, r5
 8001a72:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a76:	462b      	mov	r3, r5
 8001a78:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	17da      	asrs	r2, r3, #31
 8001a86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a8a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a92:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001a96:	464a      	mov	r2, r9
 8001a98:	fb02 f203 	mul.w	r2, r2, r3
 8001a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001aa0:	4644      	mov	r4, r8
 8001aa2:	fb04 f303 	mul.w	r3, r4, r3
 8001aa6:	441a      	add	r2, r3
 8001aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001aac:	4644      	mov	r4, r8
 8001aae:	fba3 4304 	umull	r4, r3, r3, r4
 8001ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ac0:	18d3      	adds	r3, r2, r3
 8001ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001ad2:	464c      	mov	r4, r9
 8001ad4:	0323      	lsls	r3, r4, #12
 8001ad6:	4644      	mov	r4, r8
 8001ad8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001adc:	4644      	mov	r4, r8
 8001ade:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001ae0:	1884      	adds	r4, r0, r2
 8001ae2:	633c      	str	r4, [r7, #48]	; 0x30
 8001ae4:	eb41 0303 	adc.w	r3, r1, r3
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001aee:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001af2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001af6:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001afa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001afe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b06:	88db      	ldrh	r3, [r3, #6]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b14:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b18:	462b      	mov	r3, r5
 8001b1a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001b1e:	4642      	mov	r2, r8
 8001b20:	fb02 f203 	mul.w	r2, r2, r3
 8001b24:	464b      	mov	r3, r9
 8001b26:	4621      	mov	r1, r4
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4622      	mov	r2, r4
 8001b30:	4641      	mov	r1, r8
 8001b32:	fba2 1201 	umull	r1, r2, r2, r1
 8001b36:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001b40:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001b44:	4413      	add	r3, r2
 8001b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001b56:	4629      	mov	r1, r5
 8001b58:	104a      	asrs	r2, r1, #1
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	17cb      	asrs	r3, r1, #31
 8001b5e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001b62:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b66:	4313      	orrs	r3, r2
 8001b68:	d101      	bne.n	8001b6e <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e148      	b.n	8001e00 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001b6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b72:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b76:	17da      	asrs	r2, r3, #31
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b7c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001b84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b88:	105b      	asrs	r3, r3, #1
 8001b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b92:	07db      	lsls	r3, r3, #31
 8001b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b98:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b9c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	1a89      	subs	r1, r1, r2
 8001ba4:	67b9      	str	r1, [r7, #120]	; 0x78
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	eb61 0303 	sbc.w	r3, r1, r3
 8001bac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	1891      	adds	r1, r2, r2
 8001bb8:	6239      	str	r1, [r7, #32]
 8001bba:	415b      	adcs	r3, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	1851      	adds	r1, r2, r1
 8001bc6:	61b9      	str	r1, [r7, #24]
 8001bc8:	4629      	mov	r1, r5
 8001bca:	414b      	adcs	r3, r1
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001bda:	4649      	mov	r1, r9
 8001bdc:	018b      	lsls	r3, r1, #6
 8001bde:	4641      	mov	r1, r8
 8001be0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001be4:	4641      	mov	r1, r8
 8001be6:	018a      	lsls	r2, r1, #6
 8001be8:	4641      	mov	r1, r8
 8001bea:	1889      	adds	r1, r1, r2
 8001bec:	6139      	str	r1, [r7, #16]
 8001bee:	4649      	mov	r1, r9
 8001bf0:	eb43 0101 	adc.w	r1, r3, r1
 8001bf4:	6179      	str	r1, [r7, #20]
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c02:	4649      	mov	r1, r9
 8001c04:	008b      	lsls	r3, r1, #2
 8001c06:	4641      	mov	r1, r8
 8001c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c0c:	4641      	mov	r1, r8
 8001c0e:	008a      	lsls	r2, r1, #2
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	4622      	mov	r2, r4
 8001c18:	189b      	adds	r3, r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	462a      	mov	r2, r5
 8001c20:	eb42 0303 	adc.w	r3, r2, r3
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c32:	4649      	mov	r1, r9
 8001c34:	008b      	lsls	r3, r1, #2
 8001c36:	4641      	mov	r1, r8
 8001c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	008a      	lsls	r2, r1, #2
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	4622      	mov	r2, r4
 8001c48:	189b      	adds	r3, r3, r2
 8001c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	460a      	mov	r2, r1
 8001c50:	eb42 0303 	adc.w	r3, r2, r3
 8001c54:	677b      	str	r3, [r7, #116]	; 0x74
 8001c56:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c5a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c5e:	f7ff f81b 	bl	8000c98 <__aeabi_ldivmod>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	17da      	asrs	r2, r3, #31
 8001c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0b50      	lsrs	r0, r2, #13
 8001c88:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c8c:	1359      	asrs	r1, r3, #13
 8001c8e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001c92:	462b      	mov	r3, r5
 8001c94:	fb00 f203 	mul.w	r2, r0, r3
 8001c98:	4623      	mov	r3, r4
 8001c9a:	fb03 f301 	mul.w	r3, r3, r1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001caa:	460a      	mov	r2, r1
 8001cac:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001cb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001cba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0b50      	lsrs	r0, r2, #13
 8001cc8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ccc:	1359      	asrs	r1, r3, #13
 8001cce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	fb00 f203 	mul.w	r2, r0, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	fb03 f301 	mul.w	r3, r3, r1
 8001cde:	4413      	add	r3, r2
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ce6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cea:	460a      	mov	r2, r1
 8001cec:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001cf0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001d06:	4621      	mov	r1, r4
 8001d08:	0e4a      	lsrs	r2, r1, #25
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d10:	4629      	mov	r1, r5
 8001d12:	164b      	asrs	r3, r1, #25
 8001d14:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	17da      	asrs	r2, r3, #31
 8001d24:	663b      	str	r3, [r7, #96]	; 0x60
 8001d26:	667a      	str	r2, [r7, #100]	; 0x64
 8001d28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d30:	462a      	mov	r2, r5
 8001d32:	fb02 f203 	mul.w	r2, r2, r3
 8001d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d46:	4621      	mov	r1, r4
 8001d48:	fba2 1201 	umull	r1, r2, r2, r1
 8001d4c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001d50:	460a      	mov	r2, r1
 8001d52:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001d56:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	0cca      	lsrs	r2, r1, #19
 8001d70:	4629      	mov	r1, r5
 8001d72:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001d76:	4629      	mov	r1, r5
 8001d78:	14cb      	asrs	r3, r1, #19
 8001d7a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001d7e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001d82:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d86:	1884      	adds	r4, r0, r2
 8001d88:	65bc      	str	r4, [r7, #88]	; 0x58
 8001d8a:	eb41 0303 	adc.w	r3, r1, r3
 8001d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d90:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001d94:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001d98:	4621      	mov	r1, r4
 8001d9a:	1889      	adds	r1, r1, r2
 8001d9c:	6539      	str	r1, [r7, #80]	; 0x50
 8001d9e:	4629      	mov	r1, r5
 8001da0:	eb43 0101 	adc.w	r1, r3, r1
 8001da4:	6579      	str	r1, [r7, #84]	; 0x54
 8001da6:	f04f 0000 	mov.w	r0, #0
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001db2:	4623      	mov	r3, r4
 8001db4:	0a18      	lsrs	r0, r3, #8
 8001db6:	462b      	mov	r3, r5
 8001db8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001dbc:	462b      	mov	r3, r5
 8001dbe:	1219      	asrs	r1, r3, #8
 8001dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dc4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	17da      	asrs	r2, r3, #31
 8001dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dce:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001ddc:	464c      	mov	r4, r9
 8001dde:	0123      	lsls	r3, r4, #4
 8001de0:	4644      	mov	r4, r8
 8001de2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001de6:	4644      	mov	r4, r8
 8001de8:	0122      	lsls	r2, r4, #4
 8001dea:	1884      	adds	r4, r0, r2
 8001dec:	603c      	str	r4, [r7, #0]
 8001dee:	eb41 0303 	adc.w	r3, r1, r3
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001df8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001dfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001e06:	46bd      	mov	sp, r7
 8001e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e0c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001e1e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	039a      	lsls	r2, r3, #14
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e2a:	051b      	lsls	r3, r3, #20
 8001e2c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e34:	4619      	mov	r1, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e42:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	fb01 f202 	mul.w	r2, r1, r2
 8001e52:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	7f09      	ldrb	r1, [r1, #28]
 8001e58:	4608      	mov	r0, r1
 8001e5a:	6979      	ldr	r1, [r7, #20]
 8001e5c:	fb00 f101 	mul.w	r1, r0, r1
 8001e60:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001e62:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001e66:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001e6a:	1292      	asrs	r2, r2, #10
 8001e6c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001e76:	fb01 f202 	mul.w	r2, r1, r2
 8001e7a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001e7e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	13db      	asrs	r3, r3, #15
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	13d2      	asrs	r2, r2, #15
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	7e12      	ldrb	r2, [r2, #24]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001eaa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001eb2:	bfa8      	it	ge
 8001eb4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001eb8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	131b      	asrs	r3, r3, #12
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b08c      	sub	sp, #48	; 0x30
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ede:	2b60      	cmp	r3, #96	; 0x60
 8001ee0:	d007      	beq.n	8001ef2 <bmp280_read_fixed+0x28>
		if (humidity)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <bmp280_read_fixed+0x32>
 8001ef8:	2308      	movs	r3, #8
 8001efa:	e000      	b.n	8001efe <bmp280_read_fixed+0x34>
 8001efc:	2306      	movs	r3, #6
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f107 0218 	add.w	r2, r7, #24
 8001f08:	21f7      	movs	r1, #247	; 0xf7
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7ff faab 	bl	8001466 <read_data>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <bmp280_read_fixed+0x50>
		return false;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e038      	b.n	8001f8c <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f1a:	7e3b      	ldrb	r3, [r7, #24]
 8001f1c:	031a      	lsls	r2, r3, #12
 8001f1e:	7e7b      	ldrb	r3, [r7, #25]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4313      	orrs	r3, r2
 8001f24:	7eba      	ldrb	r2, [r7, #26]
 8001f26:	0912      	lsrs	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001f2e:	7efb      	ldrb	r3, [r7, #27]
 8001f30:	031a      	lsls	r2, r3, #12
 8001f32:	7f3b      	ldrb	r3, [r7, #28]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4313      	orrs	r3, r2
 8001f38:	7f7a      	ldrb	r2, [r7, #29]
 8001f3a:	0912      	lsrs	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	461a      	mov	r2, r3
 8001f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff fc67 	bl	800181e <compensate_temperature>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fc97 	bl	8001890 <compensate_pressure>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001f6e:	7fbb      	ldrb	r3, [r7, #30]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	7ffa      	ldrb	r2, [r7, #31]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff ff44 	bl	8001e0c <compensate_humidity>
 8001f84:	4602      	mov	r2, r0
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3730      	adds	r7, #48	; 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <bmp280_read_float+0x1a>
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	e000      	b.n	8001fb0 <bmp280_read_float+0x1c>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f107 0218 	add.w	r2, r7, #24
 8001fb4:	f107 011c 	add.w	r1, r7, #28
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff ff86 	bl	8001eca <bmp280_read_fixed>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d028      	beq.n	8002016 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fce:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002020 <bmp280_read_float+0x8c>
 8001fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002024 <bmp280_read_float+0x90>
 8001fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002004:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002028 <bmp280_read_float+0x94>
 8002008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <bmp280_read_float+0x84>
	}

	return false;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	42c80000 	.word	0x42c80000
 8002024:	43800000 	.word	0x43800000
 8002028:	44800000 	.word	0x44800000

0800202c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <vApplicationGetIdleTaskMemory+0x2c>)
 800203c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <vApplicationGetIdleTaskMemory+0x30>)
 8002042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000214 	.word	0x20000214
 800205c:	20000268 	.word	0x20000268

08002060 <ReadDataFromSensors>:

float cur_pressure, cur_temperature, cur_humidity = 0;
float prev_pressure, prev_temperature, prev_humidity = 0;
uint8_t z; // Prediction value

void ReadDataFromSensors() {
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af02      	add	r7, sp, #8
	// Set LED for Debugging
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	2120      	movs	r1, #32
 800206a:	4868      	ldr	r0, [pc, #416]	; (800220c <ReadDataFromSensors+0x1ac>)
 800206c:	f001 fb74 	bl	8003758 <HAL_GPIO_WritePin>

	// GET DATA FROM DHT22
	sprintf(uartData, "\r\nDHT22 Sensor:\r\n");
 8002070:	4967      	ldr	r1, [pc, #412]	; (8002210 <ReadDataFromSensors+0x1b0>)
 8002072:	4868      	ldr	r0, [pc, #416]	; (8002214 <ReadDataFromSensors+0x1b4>)
 8002074:	f006 fb4a 	bl	800870c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002078:	4866      	ldr	r0, [pc, #408]	; (8002214 <ReadDataFromSensors+0x1b4>)
 800207a:	f7fe f901 	bl	8000280 <strlen>
 800207e:	4603      	mov	r3, r0
 8002080:	b29a      	uxth	r2, r3
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	4963      	ldr	r1, [pc, #396]	; (8002214 <ReadDataFromSensors+0x1b4>)
 8002088:	4863      	ldr	r0, [pc, #396]	; (8002218 <ReadDataFromSensors+0x1b8>)
 800208a:	f003 fddd 	bl	8005c48 <HAL_UART_Transmit>
	DHT_GetData(&DHT22_Data);
 800208e:	4863      	ldr	r0, [pc, #396]	; (800221c <ReadDataFromSensors+0x1bc>)
 8002090:	f7ff f938 	bl	8001304 <DHT_GetData>
	DHT_temperature = DHT22_Data.Temperature / 10;
 8002094:	4b61      	ldr	r3, [pc, #388]	; (800221c <ReadDataFromSensors+0x1bc>)
 8002096:	ed93 7a00 	vldr	s14, [r3]
 800209a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800209e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a2:	4b5f      	ldr	r3, [pc, #380]	; (8002220 <ReadDataFromSensors+0x1c0>)
 80020a4:	edc3 7a00 	vstr	s15, [r3]
	DHT_humidity = DHT22_Data.Humidity / 10;
 80020a8:	4b5c      	ldr	r3, [pc, #368]	; (800221c <ReadDataFromSensors+0x1bc>)
 80020aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80020ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <ReadDataFromSensors+0x1c4>)
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	sprintf(uartData, "Temp (C) =\t %.1f\r\nHumidity (%%) =\t %.1f%%\r\n",
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <ReadDataFromSensors+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa49 	bl	8000558 <__aeabi_f2d>
 80020c6:	4604      	mov	r4, r0
 80020c8:	460d      	mov	r5, r1
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <ReadDataFromSensors+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa42 	bl	8000558 <__aeabi_f2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	e9cd 2300 	strd	r2, r3, [sp]
 80020dc:	4622      	mov	r2, r4
 80020de:	462b      	mov	r3, r5
 80020e0:	4951      	ldr	r1, [pc, #324]	; (8002228 <ReadDataFromSensors+0x1c8>)
 80020e2:	484c      	ldr	r0, [pc, #304]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80020e4:	f006 fb12 	bl	800870c <siprintf>
			DHT_temperature, DHT_humidity);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80020e8:	484a      	ldr	r0, [pc, #296]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80020ea:	f7fe f8c9 	bl	8000280 <strlen>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	4947      	ldr	r1, [pc, #284]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80020f8:	4847      	ldr	r0, [pc, #284]	; (8002218 <ReadDataFromSensors+0x1b8>)
 80020fa:	f003 fda5 	bl	8005c48 <HAL_UART_Transmit>

	HAL_Delay(1000); // WAIT
 80020fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002102:	f001 f883 	bl	800320c <HAL_Delay>

	// GET DATA FROM BMP-280
	sprintf(uartData, "BMP-280 Sensor:\r\n");
 8002106:	4949      	ldr	r1, [pc, #292]	; (800222c <ReadDataFromSensors+0x1cc>)
 8002108:	4842      	ldr	r0, [pc, #264]	; (8002214 <ReadDataFromSensors+0x1b4>)
 800210a:	f006 faff 	bl	800870c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 800210e:	4841      	ldr	r0, [pc, #260]	; (8002214 <ReadDataFromSensors+0x1b4>)
 8002110:	f7fe f8b6 	bl	8000280 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211c:	493d      	ldr	r1, [pc, #244]	; (8002214 <ReadDataFromSensors+0x1b4>)
 800211e:	483e      	ldr	r0, [pc, #248]	; (8002218 <ReadDataFromSensors+0x1b8>)
 8002120:	f003 fd92 	bl	8005c48 <HAL_UART_Transmit>
	while (!bmp280_read_float(&bmp280, &BMP_temperature, &BMP_pressure,
 8002124:	e012      	b.n	800214c <ReadDataFromSensors+0xec>
			&BMP_humidity)) {
		sprintf(uartData, "Temperature/pressure reading failed\r\n");
 8002126:	4942      	ldr	r1, [pc, #264]	; (8002230 <ReadDataFromSensors+0x1d0>)
 8002128:	483a      	ldr	r0, [pc, #232]	; (8002214 <ReadDataFromSensors+0x1b4>)
 800212a:	f006 faef 	bl	800870c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 800212e:	4839      	ldr	r0, [pc, #228]	; (8002214 <ReadDataFromSensors+0x1b4>)
 8002130:	f7fe f8a6 	bl	8000280 <strlen>
 8002134:	4603      	mov	r3, r0
 8002136:	b29a      	uxth	r2, r3
 8002138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213c:	4935      	ldr	r1, [pc, #212]	; (8002214 <ReadDataFromSensors+0x1b4>)
 800213e:	4836      	ldr	r0, [pc, #216]	; (8002218 <ReadDataFromSensors+0x1b8>)
 8002140:	f003 fd82 	bl	8005c48 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8002144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002148:	f001 f860 	bl	800320c <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &BMP_temperature, &BMP_pressure,
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <ReadDataFromSensors+0x1d4>)
 800214e:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <ReadDataFromSensors+0x1d8>)
 8002150:	493a      	ldr	r1, [pc, #232]	; (800223c <ReadDataFromSensors+0x1dc>)
 8002152:	483b      	ldr	r0, [pc, #236]	; (8002240 <ReadDataFromSensors+0x1e0>)
 8002154:	f7ff ff1e 	bl	8001f94 <bmp280_read_float>
 8002158:	4603      	mov	r3, r0
 800215a:	f083 0301 	eor.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e0      	bne.n	8002126 <ReadDataFromSensors+0xc6>
	}

	sprintf(uartData, "Pressure: %.2f Pa, Temperature: %.2f C", BMP_pressure,
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <ReadDataFromSensors+0x1d8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f9f5 	bl	8000558 <__aeabi_f2d>
 800216e:	4604      	mov	r4, r0
 8002170:	460d      	mov	r5, r1
 8002172:	4b32      	ldr	r3, [pc, #200]	; (800223c <ReadDataFromSensors+0x1dc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9ee 	bl	8000558 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	e9cd 2300 	strd	r2, r3, [sp]
 8002184:	4622      	mov	r2, r4
 8002186:	462b      	mov	r3, r5
 8002188:	492e      	ldr	r1, [pc, #184]	; (8002244 <ReadDataFromSensors+0x1e4>)
 800218a:	4822      	ldr	r0, [pc, #136]	; (8002214 <ReadDataFromSensors+0x1b4>)
 800218c:	f006 fabe 	bl	800870c <siprintf>
			BMP_temperature);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002190:	4820      	ldr	r0, [pc, #128]	; (8002214 <ReadDataFromSensors+0x1b4>)
 8002192:	f7fe f875 	bl	8000280 <strlen>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	491d      	ldr	r1, [pc, #116]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80021a0:	481d      	ldr	r0, [pc, #116]	; (8002218 <ReadDataFromSensors+0x1b8>)
 80021a2:	f003 fd51 	bl	8005c48 <HAL_UART_Transmit>
	if (bme280p) {
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <ReadDataFromSensors+0x1e8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <ReadDataFromSensors+0x17c>
		sprintf(uartData, ", Humidity: %.2f\r\n", BMP_humidity);
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <ReadDataFromSensors+0x1d4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9d0 	bl	8000558 <__aeabi_f2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4923      	ldr	r1, [pc, #140]	; (800224c <ReadDataFromSensors+0x1ec>)
 80021be:	4815      	ldr	r0, [pc, #84]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80021c0:	f006 faa4 	bl	800870c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80021c4:	4813      	ldr	r0, [pc, #76]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80021c6:	f7fe f85b 	bl	8000280 <strlen>
 80021ca:	4603      	mov	r3, r0
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	4910      	ldr	r1, [pc, #64]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80021d4:	4810      	ldr	r0, [pc, #64]	; (8002218 <ReadDataFromSensors+0x1b8>)
 80021d6:	f003 fd37 	bl	8005c48 <HAL_UART_Transmit>
 80021da:	e00e      	b.n	80021fa <ReadDataFromSensors+0x19a>
	}

	else {
		sprintf((char*) uartData, "\r\n");
 80021dc:	491c      	ldr	r1, [pc, #112]	; (8002250 <ReadDataFromSensors+0x1f0>)
 80021de:	480d      	ldr	r0, [pc, #52]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80021e0:	f006 fa94 	bl	800870c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80021e4:	480b      	ldr	r0, [pc, #44]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80021e6:	f7fe f84b 	bl	8000280 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <ReadDataFromSensors+0x1b4>)
 80021f4:	4808      	ldr	r0, [pc, #32]	; (8002218 <ReadDataFromSensors+0x1b8>)
 80021f6:	f003 fd27 	bl	8005c48 <HAL_UART_Transmit>
	}

	// Set LED for Debugging
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2120      	movs	r1, #32
 80021fe:	4803      	ldr	r0, [pc, #12]	; (800220c <ReadDataFromSensors+0x1ac>)
 8002200:	f001 faaa 	bl	8003758 <HAL_GPIO_WritePin>
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bdb0      	pop	{r4, r5, r7, pc}
 800220a:	bf00      	nop
 800220c:	40020000 	.word	0x40020000
 8002210:	0800ced0 	.word	0x0800ced0
 8002214:	2000059c 	.word	0x2000059c
 8002218:	2000054c 	.word	0x2000054c
 800221c:	20000778 	.word	0x20000778
 8002220:	20000780 	.word	0x20000780
 8002224:	20000784 	.word	0x20000784
 8002228:	0800cee4 	.word	0x0800cee4
 800222c:	0800cf10 	.word	0x0800cf10
 8002230:	0800cf24 	.word	0x0800cf24
 8002234:	20000774 	.word	0x20000774
 8002238:	2000076c 	.word	0x2000076c
 800223c:	20000770 	.word	0x20000770
 8002240:	20000734 	.word	0x20000734
 8002244:	0800cf4c 	.word	0x0800cf4c
 8002248:	20000768 	.word	0x20000768
 800224c:	0800cf74 	.word	0x0800cf74
 8002250:	0800cf88 	.word	0x0800cf88
 8002254:	00000000 	.word	0x00000000

08002258 <ProcessData>:

void ProcessData() {
 8002258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800225c:	b08a      	sub	sp, #40	; 0x28
 800225e:	af04      	add	r7, sp, #16
	// Choose Data & Calibrate

	// Choose DHT22 over BMP-280 for temperature because it is more accurate
	if (DHT_temperature != 0) {
 8002260:	4b93      	ldr	r3, [pc, #588]	; (80024b0 <ProcessData+0x258>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	eef5 7a40 	vcmp.f32	s15, #0.0
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	d004      	beq.n	800227a <ProcessData+0x22>
		cur_temperature = DHT_temperature;
 8002270:	4b8f      	ldr	r3, [pc, #572]	; (80024b0 <ProcessData+0x258>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a8f      	ldr	r2, [pc, #572]	; (80024b4 <ProcessData+0x25c>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e010      	b.n	800229c <ProcessData+0x44>
	} else if (BMP_temperature != 0) {
 800227a:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <ProcessData+0x260>)
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002288:	d004      	beq.n	8002294 <ProcessData+0x3c>
		cur_temperature = BMP_temperature;
 800228a:	4b8b      	ldr	r3, [pc, #556]	; (80024b8 <ProcessData+0x260>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a89      	ldr	r2, [pc, #548]	; (80024b4 <ProcessData+0x25c>)
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e003      	b.n	800229c <ProcessData+0x44>
	} else {
		cur_temperature = prev_temperature;
 8002294:	4b89      	ldr	r3, [pc, #548]	; (80024bc <ProcessData+0x264>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a86      	ldr	r2, [pc, #536]	; (80024b4 <ProcessData+0x25c>)
 800229a:	6013      	str	r3, [r2, #0]
	}

	// Humidity is DHT22-exclusive
	if (DHT_humidity != 0) {
 800229c:	4b88      	ldr	r3, [pc, #544]	; (80024c0 <ProcessData+0x268>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d00a      	beq.n	80022c2 <ProcessData+0x6a>
		cur_humidity = DHT_humidity - 10; // Calibration
 80022ac:	4b84      	ldr	r3, [pc, #528]	; (80024c0 <ProcessData+0x268>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ba:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <ProcessData+0x26c>)
 80022bc:	edc3 7a00 	vstr	s15, [r3]
 80022c0:	e003      	b.n	80022ca <ProcessData+0x72>
	} else {
		cur_humidity = prev_humidity;
 80022c2:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <ProcessData+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7f      	ldr	r2, [pc, #508]	; (80024c4 <ProcessData+0x26c>)
 80022c8:	6013      	str	r3, [r2, #0]
	}

	// Pressure is BMP-280-exclusive
	if (BMP_pressure != 0) {
 80022ca:	4b80      	ldr	r3, [pc, #512]	; (80024cc <ProcessData+0x274>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d004      	beq.n	80022e4 <ProcessData+0x8c>
		cur_pressure = BMP_pressure;
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <ProcessData+0x274>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7c      	ldr	r2, [pc, #496]	; (80024d0 <ProcessData+0x278>)
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e003      	b.n	80022ec <ProcessData+0x94>
	} else {
		cur_pressure = BMP_pressure;
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <ProcessData+0x274>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a79      	ldr	r2, [pc, #484]	; (80024d0 <ProcessData+0x278>)
 80022ea:	6013      	str	r3, [r2, #0]

	// Process Prediction Algorithm

	// Calculate Pressure at Sea Level
	double temp1 = 1.0
			- (0.0065 * altitude)
 80022ec:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <ProcessData+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f931 	bl	8000558 <__aeabi_f2d>
 80022f6:	a35e      	add	r3, pc, #376	; (adr r3, 8002470 <ProcessData+0x218>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fe f984 	bl	8000608 <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4690      	mov	r8, r2
 8002306:	4699      	mov	r9, r3
					/ (cur_temperature + 0.0065 * altitude + 273.15);
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <ProcessData+0x25c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f923 	bl	8000558 <__aeabi_f2d>
 8002312:	4604      	mov	r4, r0
 8002314:	460d      	mov	r5, r1
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <ProcessData+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f91c 	bl	8000558 <__aeabi_f2d>
 8002320:	a353      	add	r3, pc, #332	; (adr r3, 8002470 <ProcessData+0x218>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fe f96f 	bl	8000608 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fd ffb3 	bl	800029c <__adddf3>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	a34e      	add	r3, pc, #312	; (adr r3, 8002478 <ProcessData+0x220>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fd ffaa 	bl	800029c <__adddf3>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4640      	mov	r0, r8
 800234e:	4649      	mov	r1, r9
 8002350:	f7fe fa84 	bl	800085c <__aeabi_ddiv>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
	double temp1 = 1.0
 8002358:	f04f 0000 	mov.w	r0, #0
 800235c:	495e      	ldr	r1, [pc, #376]	; (80024d8 <ProcessData+0x280>)
 800235e:	f7fd ff9b 	bl	8000298 <__aeabi_dsub>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temp2 = pow(temp1, -5.257);
 800236a:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8002480 <ProcessData+0x228>
 800236e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002372:	f009 fe69 	bl	800c048 <pow>
 8002376:	ed87 0b02 	vstr	d0, [r7, #8]
	double p0 = cur_pressure / 100 * temp2;
 800237a:	4b55      	ldr	r3, [pc, #340]	; (80024d0 <ProcessData+0x278>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80024dc <ProcessData+0x284>
 8002384:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002388:	ee16 0a90 	vmov	r0, s13
 800238c:	f7fe f8e4 	bl	8000558 <__aeabi_f2d>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002398:	f7fe f936 	bl	8000608 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	e9c7 2300 	strd	r2, r3, [r7]

	// Pressure is Rising
	if (cur_pressure > prev_pressure + 1.6) {
 80023a4:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <ProcessData+0x278>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8d5 	bl	8000558 <__aeabi_f2d>
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
 80023b2:	4b4b      	ldr	r3, [pc, #300]	; (80024e0 <ProcessData+0x288>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8ce 	bl	8000558 <__aeabi_f2d>
 80023bc:	a332      	add	r3, pc, #200	; (adr r3, 8002488 <ProcessData+0x230>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fd ff6b 	bl	800029c <__adddf3>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fe fbab 	bl	8000b28 <__aeabi_dcmpgt>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d018      	beq.n	800240a <ProcessData+0x1b2>
		z = 185 - 0.16 * p0;
 80023d8:	a32d      	add	r3, pc, #180	; (adr r3, 8002490 <ProcessData+0x238>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023e2:	f7fe f911 	bl	8000608 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	a12b      	add	r1, pc, #172	; (adr r1, 8002498 <ProcessData+0x240>)
 80023ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023f0:	f7fd ff52 	bl	8000298 <__aeabi_dsub>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fbdc 	bl	8000bb8 <__aeabi_d2uiz>
 8002400:	4603      	mov	r3, r0
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <ProcessData+0x28c>)
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e086      	b.n	8002518 <ProcessData+0x2c0>
	}
	// Pressure is Falling
	else if (cur_pressure < prev_pressure - 1.6) {
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <ProcessData+0x278>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f8a2 	bl	8000558 <__aeabi_f2d>
 8002414:	4604      	mov	r4, r0
 8002416:	460d      	mov	r5, r1
 8002418:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <ProcessData+0x288>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f89b 	bl	8000558 <__aeabi_f2d>
 8002422:	a319      	add	r3, pc, #100	; (adr r3, 8002488 <ProcessData+0x230>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fd ff36 	bl	8000298 <__aeabi_dsub>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4620      	mov	r0, r4
 8002432:	4629      	mov	r1, r5
 8002434:	f7fe fb5a 	bl	8000aec <__aeabi_dcmplt>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d054      	beq.n	80024e8 <ProcessData+0x290>
		z = 127 - 0.12 * p0;
 800243e:	a318      	add	r3, pc, #96	; (adr r3, 80024a0 <ProcessData+0x248>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002448:	f7fe f8de 	bl	8000608 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	a115      	add	r1, pc, #84	; (adr r1, 80024a8 <ProcessData+0x250>)
 8002452:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002456:	f7fd ff1f 	bl	8000298 <__aeabi_dsub>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fba9 	bl	8000bb8 <__aeabi_d2uiz>
 8002466:	4603      	mov	r3, r0
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <ProcessData+0x28c>)
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e053      	b.n	8002518 <ProcessData+0x2c0>
 8002470:	76c8b439 	.word	0x76c8b439
 8002474:	3f7a9fbe 	.word	0x3f7a9fbe
 8002478:	66666666 	.word	0x66666666
 800247c:	40711266 	.word	0x40711266
 8002480:	020c49ba 	.word	0x020c49ba
 8002484:	c015072b 	.word	0xc015072b
 8002488:	9999999a 	.word	0x9999999a
 800248c:	3ff99999 	.word	0x3ff99999
 8002490:	47ae147b 	.word	0x47ae147b
 8002494:	3fc47ae1 	.word	0x3fc47ae1
 8002498:	00000000 	.word	0x00000000
 800249c:	40672000 	.word	0x40672000
 80024a0:	eb851eb8 	.word	0xeb851eb8
 80024a4:	3fbeb851 	.word	0x3fbeb851
 80024a8:	00000000 	.word	0x00000000
 80024ac:	405fc000 	.word	0x405fc000
 80024b0:	20000780 	.word	0x20000780
 80024b4:	2000078c 	.word	0x2000078c
 80024b8:	20000770 	.word	0x20000770
 80024bc:	20000798 	.word	0x20000798
 80024c0:	20000784 	.word	0x20000784
 80024c4:	20000790 	.word	0x20000790
 80024c8:	2000079c 	.word	0x2000079c
 80024cc:	2000076c 	.word	0x2000076c
 80024d0:	20000788 	.word	0x20000788
 80024d4:	20000000 	.word	0x20000000
 80024d8:	3ff00000 	.word	0x3ff00000
 80024dc:	42c80000 	.word	0x42c80000
 80024e0:	20000794 	.word	0x20000794
 80024e4:	200007a0 	.word	0x200007a0
	}
	// Pressure is Steady
	else {
		z = 144 - 0.13 * p0;
 80024e8:	a341      	add	r3, pc, #260	; (adr r3, 80025f0 <ProcessData+0x398>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f2:	f7fe f889 	bl	8000608 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	4930      	ldr	r1, [pc, #192]	; (80025c0 <ProcessData+0x368>)
 8002500:	f7fd feca 	bl	8000298 <__aeabi_dsub>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fb54 	bl	8000bb8 <__aeabi_d2uiz>
 8002510:	4603      	mov	r3, r0
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <ProcessData+0x36c>)
 8002516:	701a      	strb	r2, [r3, #0]
	}

	// TODO Adjust Z value

	sprintf(uartData, "\r\nDEBUG: %f %f %f\r\n", temp1, temp2, p0);
 8002518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800251c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002524:	e9cd 2300 	strd	r2, r3, [sp]
 8002528:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800252c:	4926      	ldr	r1, [pc, #152]	; (80025c8 <ProcessData+0x370>)
 800252e:	4827      	ldr	r0, [pc, #156]	; (80025cc <ProcessData+0x374>)
 8002530:	f006 f8ec 	bl	800870c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002534:	4825      	ldr	r0, [pc, #148]	; (80025cc <ProcessData+0x374>)
 8002536:	f7fd fea3 	bl	8000280 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	b29a      	uxth	r2, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002542:	4922      	ldr	r1, [pc, #136]	; (80025cc <ProcessData+0x374>)
 8002544:	4822      	ldr	r0, [pc, #136]	; (80025d0 <ProcessData+0x378>)
 8002546:	f003 fb7f 	bl	8005c48 <HAL_UART_Transmit>

	sprintf(uartData, "\r\nForecast Number = %d\r\n", z);
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <ProcessData+0x36c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	4920      	ldr	r1, [pc, #128]	; (80025d4 <ProcessData+0x37c>)
 8002552:	481e      	ldr	r0, [pc, #120]	; (80025cc <ProcessData+0x374>)
 8002554:	f006 f8da 	bl	800870c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002558:	481c      	ldr	r0, [pc, #112]	; (80025cc <ProcessData+0x374>)
 800255a:	f7fd fe91 	bl	8000280 <strlen>
 800255e:	4603      	mov	r3, r0
 8002560:	b29a      	uxth	r2, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002566:	4919      	ldr	r1, [pc, #100]	; (80025cc <ProcessData+0x374>)
 8002568:	4819      	ldr	r0, [pc, #100]	; (80025d0 <ProcessData+0x378>)
 800256a:	f003 fb6d 	bl	8005c48 <HAL_UART_Transmit>

	// Set Data History
	if (cur_pressure != 0) {
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <ProcessData+0x380>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	d003      	beq.n	8002586 <ProcessData+0x32e>
		prev_pressure = cur_pressure;
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <ProcessData+0x380>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <ProcessData+0x384>)
 8002584:	6013      	str	r3, [r2, #0]
	}
	if (cur_temperature != 0) {
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <ProcessData+0x388>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d003      	beq.n	800259e <ProcessData+0x346>
		prev_temperature = cur_temperature;
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <ProcessData+0x388>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <ProcessData+0x38c>)
 800259c:	6013      	str	r3, [r2, #0]
	}
	if (cur_humidity != 0) {
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <ProcessData+0x390>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	d003      	beq.n	80025b6 <ProcessData+0x35e>
		prev_humidity = cur_humidity;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <ProcessData+0x390>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <ProcessData+0x394>)
 80025b4:	6013      	str	r3, [r2, #0]
	}
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025c0:	40620000 	.word	0x40620000
 80025c4:	200007a0 	.word	0x200007a0
 80025c8:	0800cf8c 	.word	0x0800cf8c
 80025cc:	2000059c 	.word	0x2000059c
 80025d0:	2000054c 	.word	0x2000054c
 80025d4:	0800cfa0 	.word	0x0800cfa0
 80025d8:	20000788 	.word	0x20000788
 80025dc:	20000794 	.word	0x20000794
 80025e0:	2000078c 	.word	0x2000078c
 80025e4:	20000798 	.word	0x20000798
 80025e8:	20000790 	.word	0x20000790
 80025ec:	2000079c 	.word	0x2000079c
 80025f0:	0a3d70a4 	.word	0x0a3d70a4
 80025f4:	3fc0a3d7 	.word	0x3fc0a3d7

080025f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b08e      	sub	sp, #56	; 0x38
 80025fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025fe:	f000 fd93 	bl	8003128 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002602:	f000 f899 	bl	8002738 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002606:	f000 f9f7 	bl	80029f8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800260a:	f000 f9cb 	bl	80029a4 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800260e:	f000 f99f 	bl	8002950 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8002612:	f000 f927 	bl	8002864 <MX_TIM3_Init>
	MX_I2C2_Init();
 8002616:	f000 f8f7 	bl	8002808 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	bmp280_init_default_params(&bmp280.params);
 800261a:	4839      	ldr	r0, [pc, #228]	; (8002700 <main+0x108>)
 800261c:	f7fe fed8 	bl	80013d0 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <main+0x10c>)
 8002622:	2276      	movs	r2, #118	; 0x76
 8002624:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <main+0x10c>)
 8002628:	4a37      	ldr	r2, [pc, #220]	; (8002708 <main+0x110>)
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800262c:	e012      	b.n	8002654 <main+0x5c>
		sprintf(uartData, "BMP280 initialization failed\r\n");
 800262e:	4937      	ldr	r1, [pc, #220]	; (800270c <main+0x114>)
 8002630:	4837      	ldr	r0, [pc, #220]	; (8002710 <main+0x118>)
 8002632:	f006 f86b 	bl	800870c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002636:	4836      	ldr	r0, [pc, #216]	; (8002710 <main+0x118>)
 8002638:	f7fd fe22 	bl	8000280 <strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	b29a      	uxth	r2, r3
 8002640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002644:	4932      	ldr	r1, [pc, #200]	; (8002710 <main+0x118>)
 8002646:	4833      	ldr	r0, [pc, #204]	; (8002714 <main+0x11c>)
 8002648:	f003 fafe 	bl	8005c48 <HAL_UART_Transmit>
		HAL_Delay(2000);
 800264c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002650:	f000 fddc 	bl	800320c <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002654:	492a      	ldr	r1, [pc, #168]	; (8002700 <main+0x108>)
 8002656:	482b      	ldr	r0, [pc, #172]	; (8002704 <main+0x10c>)
 8002658:	f7ff f834 	bl	80016c4 <bmp280_init>
 800265c:	4603      	mov	r3, r0
 800265e:	f083 0301 	eor.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e2      	bne.n	800262e <main+0x36>
	}
	bme280p = bmp280.id == BME280_CHIP_ID;
 8002668:	4b26      	ldr	r3, [pc, #152]	; (8002704 <main+0x10c>)
 800266a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800266e:	2b60      	cmp	r3, #96	; 0x60
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <main+0x120>)
 800267a:	701a      	strb	r2, [r3, #0]
	sprintf(uartData, "\r\nBMP280: found %s\r\n",
			bme280p ? "BME280" : "BMP280");
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <main+0x120>)
 800267e:	781b      	ldrb	r3, [r3, #0]
	sprintf(uartData, "\r\nBMP280: found %s\r\n",
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <main+0x90>
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <main+0x124>)
 8002686:	e000      	b.n	800268a <main+0x92>
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <main+0x128>)
 800268a:	461a      	mov	r2, r3
 800268c:	4925      	ldr	r1, [pc, #148]	; (8002724 <main+0x12c>)
 800268e:	4820      	ldr	r0, [pc, #128]	; (8002710 <main+0x118>)
 8002690:	f006 f83c 	bl	800870c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002694:	481e      	ldr	r0, [pc, #120]	; (8002710 <main+0x118>)
 8002696:	f7fd fdf3 	bl	8000280 <strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	b29a      	uxth	r2, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	491b      	ldr	r1, [pc, #108]	; (8002710 <main+0x118>)
 80026a4:	481b      	ldr	r0, [pc, #108]	; (8002714 <main+0x11c>)
 80026a6:	f003 facf 	bl	8005c48 <HAL_UART_Transmit>
	HAL_Delay(1000); // WAIT
 80026aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ae:	f000 fdad 	bl	800320c <HAL_Delay>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of UARTToNode */
	osThreadDef(UARTToNode, SendDataToNodeThread, osPriorityNormal, 0, 128);
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <main+0x130>)
 80026b4:	f107 041c 	add.w	r4, r7, #28
 80026b8:	461d      	mov	r5, r3
 80026ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UARTToNodeHandle = osThreadCreate(osThread(UARTToNode), NULL);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fe96 	bl	80063fe <osThreadCreate>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <main+0x134>)
 80026d6:	6013      	str	r3, [r2, #0]

	/* definition and creation of getDataTask */
	osThreadDef(getDataTask, GetDataFromSensor, osPriorityIdle, 0, 128);
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <main+0x138>)
 80026da:	463c      	mov	r4, r7
 80026dc:	461d      	mov	r5, r3
 80026de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	getDataTaskHandle = osThreadCreate(osThread(getDataTask), NULL);
 80026ea:	463b      	mov	r3, r7
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fe85 	bl	80063fe <osThreadCreate>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <main+0x13c>)
 80026f8:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80026fa:	f003 fe79 	bl	80063f0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80026fe:	e7fe      	b.n	80026fe <main+0x106>
 8002700:	20000760 	.word	0x20000760
 8002704:	20000734 	.word	0x20000734
 8002708:	20000468 	.word	0x20000468
 800270c:	0800cfbc 	.word	0x0800cfbc
 8002710:	2000059c 	.word	0x2000059c
 8002714:	2000054c 	.word	0x2000054c
 8002718:	20000768 	.word	0x20000768
 800271c:	0800cfdc 	.word	0x0800cfdc
 8002720:	0800cfe4 	.word	0x0800cfe4
 8002724:	0800cfec 	.word	0x0800cfec
 8002728:	0800d010 	.word	0x0800d010
 800272c:	20000594 	.word	0x20000594
 8002730:	0800d038 	.word	0x0800d038
 8002734:	20000598 	.word	0x20000598

08002738 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b094      	sub	sp, #80	; 0x50
 800273c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	2230      	movs	r2, #48	; 0x30
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f006 f843 	bl	80087d2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <SystemClock_Config+0xc8>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <SystemClock_Config+0xc8>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <SystemClock_Config+0xc8>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <SystemClock_Config+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <SystemClock_Config+0xcc>)
 8002782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <SystemClock_Config+0xcc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002794:	2301      	movs	r3, #1
 8002796:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279e:	2302      	movs	r3, #2
 80027a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80027a8:	2308      	movs	r3, #8
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b0:	2302      	movs	r3, #2
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80027b4:	2304      	movs	r3, #4
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 f809 	bl	80047d4 <HAL_RCC_OscConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x94>
		Error_Handler();
 80027c8:	f000 fa27 	bl	8002c1a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80027cc:	230f      	movs	r3, #15
 80027ce:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027dc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	2101      	movs	r1, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fa6b 	bl	8004cc4 <HAL_RCC_ClockConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0xc0>
		Error_Handler();
 80027f4:	f000 fa11 	bl	8002c1a <Error_Handler>
	}
}
 80027f8:	bf00      	nop
 80027fa:	3750      	adds	r7, #80	; 0x50
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000

08002808 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <MX_I2C2_Init+0x50>)
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <MX_I2C2_Init+0x54>)
 8002810:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_I2C2_Init+0x50>)
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <MX_I2C2_Init+0x58>)
 8002816:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <MX_I2C2_Init+0x50>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_I2C2_Init+0x50>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <MX_I2C2_Init+0x50>)
 8002826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <MX_I2C2_Init+0x50>)
 800282e:	2200      	movs	r2, #0
 8002830:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <MX_I2C2_Init+0x50>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <MX_I2C2_Init+0x50>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <MX_I2C2_Init+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <MX_I2C2_Init+0x50>)
 8002846:	f000 ffa1 	bl	800378c <HAL_I2C_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002850:	f000 f9e3 	bl	8002c1a <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000468 	.word	0x20000468
 800285c:	40005800 	.word	0x40005800
 8002860:	000186a0 	.word	0x000186a0

08002864 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	; 0x38
 8002868:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800286a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002878:	f107 0320 	add.w	r3, r7, #32
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
 8002890:	615a      	str	r2, [r3, #20]
 8002892:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002894:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <MX_TIM3_Init+0xe4>)
 8002896:	4a2d      	ldr	r2, [pc, #180]	; (800294c <MX_TIM3_Init+0xe8>)
 8002898:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100 - 1;
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <MX_TIM3_Init+0xe4>)
 800289c:	2263      	movs	r2, #99	; 0x63
 800289e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <MX_TIM3_Init+0xe4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <MX_TIM3_Init+0xe4>)
 80028a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ac:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <MX_TIM3_Init+0xe4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <MX_TIM3_Init+0xe4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80028ba:	4823      	ldr	r0, [pc, #140]	; (8002948 <MX_TIM3_Init+0xe4>)
 80028bc:	f002 fc22 	bl	8005104 <HAL_TIM_Base_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM3_Init+0x66>
		Error_Handler();
 80028c6:	f000 f9a8 	bl	8002c1a <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80028d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d4:	4619      	mov	r1, r3
 80028d6:	481c      	ldr	r0, [pc, #112]	; (8002948 <MX_TIM3_Init+0xe4>)
 80028d8:	f002 fd7e 	bl	80053d8 <HAL_TIM_ConfigClockSource>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0x82>
		Error_Handler();
 80028e2:	f000 f99a 	bl	8002c1a <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80028e6:	4818      	ldr	r0, [pc, #96]	; (8002948 <MX_TIM3_Init+0xe4>)
 80028e8:	f002 fc5b 	bl	80051a2 <HAL_TIM_PWM_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM3_Init+0x92>
		Error_Handler();
 80028f2:	f000 f992 	bl	8002c1a <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80028fe:	f107 0320 	add.w	r3, r7, #32
 8002902:	4619      	mov	r1, r3
 8002904:	4810      	ldr	r0, [pc, #64]	; (8002948 <MX_TIM3_Init+0xe4>)
 8002906:	f003 f8e1 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002910:	f000 f983 	bl	8002c1a <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002914:	2360      	movs	r3, #96	; 0x60
 8002916:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2200      	movs	r2, #0
 8002928:	4619      	mov	r1, r3
 800292a:	4807      	ldr	r0, [pc, #28]	; (8002948 <MX_TIM3_Init+0xe4>)
 800292c:	f002 fc92 	bl	8005254 <HAL_TIM_PWM_ConfigChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002936:	f000 f970 	bl	8002c1a <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800293a:	4803      	ldr	r0, [pc, #12]	; (8002948 <MX_TIM3_Init+0xe4>)
 800293c:	f000 fa1a 	bl	8002d74 <HAL_TIM_MspPostInit>

}
 8002940:	bf00      	nop
 8002942:	3738      	adds	r7, #56	; 0x38
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	200004bc 	.word	0x200004bc
 800294c:	40000400 	.word	0x40000400

08002950 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_USART1_UART_Init+0x4c>)
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <MX_USART1_UART_Init+0x50>)
 8002958:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <MX_USART1_UART_Init+0x4c>)
 800295c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002960:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_USART1_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_USART1_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MX_USART1_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_USART1_UART_Init+0x4c>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <MX_USART1_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_USART1_UART_Init+0x4c>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_USART1_UART_Init+0x4c>)
 8002988:	f003 f90e 	bl	8005ba8 <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002992:	f000 f942 	bl	8002c1a <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000504 	.word	0x20000504
 80029a0:	40011000 	.word	0x40011000

080029a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <MX_USART2_UART_Init+0x50>)
 80029ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029dc:	f003 f8e4 	bl	8005ba8 <HAL_UART_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80029e6:	f000 f918 	bl	8002c1a <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000054c 	.word	0x2000054c
 80029f4:	40004400 	.word	0x40004400

080029f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <MX_GPIO_Init+0xd4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_8, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002a84:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <MX_GPIO_Init+0xd8>)
 8002a86:	f000 fe67 	bl	8003758 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <MX_GPIO_Init+0xdc>)
 8002aa2:	f000 fcbd 	bl	8003420 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA8 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_8;
 8002aa6:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002aaa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_GPIO_Init+0xd8>)
 8002ac0:	f000 fcae 	bl	8003420 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002ac4:	bf00      	nop
 8002ac6:	3728      	adds	r7, #40	; 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020800 	.word	0x40020800

08002ad8 <SendDataToNodeThread>:
 * @brief  Function implementing the UARTToNode thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_SendDataToNodeThread */
void SendDataToNodeThread(void const *argument) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af06      	add	r7, sp, #24
 8002ade:	6078      	str	r0, [r7, #4]
//		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
		/* Call read_PM25_sensor every 15 seconds */
		/* Then send all datas to ESP8266 is the format "s{dustval},{latval},{latdir},{lonval},{londir}"  (s to indicate the start of the data)*/

		// Decompose dustval to string (sprintf won't work with float)
		int pressure_before_decimal = (int) cur_pressure;
 8002ae0:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <SendDataToNodeThread+0x104>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aea:	ee17 3a90 	vmov	r3, s15
 8002aee:	61fb      	str	r3, [r7, #28]
		int pressure_after_decimal = (int) (100
				* (cur_pressure - pressure_before_decimal));
 8002af0:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <SendDataToNodeThread+0x104>)
 8002af2:	ed93 7a00 	vldr	s14, [r3]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b04:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002be0 <SendDataToNodeThread+0x108>
 8002b08:	ee67 7a87 	vmul.f32	s15, s15, s14
		int pressure_after_decimal = (int) (100
 8002b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b10:	ee17 3a90 	vmov	r3, s15
 8002b14:	61bb      	str	r3, [r7, #24]

		int temperature_before_decimal = (int) cur_temperature;
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <SendDataToNodeThread+0x10c>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b20:	ee17 3a90 	vmov	r3, s15
 8002b24:	617b      	str	r3, [r7, #20]
		int temperature_after_decimal = (int) (100
				* (cur_temperature - temperature_before_decimal));
 8002b26:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <SendDataToNodeThread+0x10c>)
 8002b28:	ed93 7a00 	vldr	s14, [r3]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002be0 <SendDataToNodeThread+0x108>
 8002b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
		int temperature_after_decimal = (int) (100
 8002b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b46:	ee17 3a90 	vmov	r3, s15
 8002b4a:	613b      	str	r3, [r7, #16]

		int humidity_before_decimal = (int) cur_humidity;
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <SendDataToNodeThread+0x110>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b56:	ee17 3a90 	vmov	r3, s15
 8002b5a:	60fb      	str	r3, [r7, #12]
		int humidity_after_decimal = (int) (100
				* (cur_humidity - humidity_before_decimal));
 8002b5c:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <SendDataToNodeThread+0x110>)
 8002b5e:	ed93 7a00 	vldr	s14, [r3]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002be0 <SendDataToNodeThread+0x108>
 8002b74:	ee67 7a87 	vmul.f32	s15, s15, s14
		int humidity_after_decimal = (int) (100
 8002b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	60bb      	str	r3, [r7, #8]

		sprintf(pmbuffer, "s%d.%d,%d.%d,%d.%d,%d\n", pressure_before_decimal,
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <SendDataToNodeThread+0x114>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	9304      	str	r3, [sp, #16]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	9303      	str	r3, [sp, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	4914      	ldr	r1, [pc, #80]	; (8002bf0 <SendDataToNodeThread+0x118>)
 8002b9e:	4815      	ldr	r0, [pc, #84]	; (8002bf4 <SendDataToNodeThread+0x11c>)
 8002ba0:	f005 fdb4 	bl	800870c <siprintf>
				temperature_after_decimal, humidity_before_decimal,
				humidity_after_decimal, z);
		//dummy
//		sprintf(pmbuffer, "s1.2,3.4,5.67,20\n");
		// Transmit the message to ESP8266 in the correct format
		HAL_UART_Transmit(&huart1, (uint8_t*) pmbuffer, strlen(pmbuffer),
 8002ba4:	4813      	ldr	r0, [pc, #76]	; (8002bf4 <SendDataToNodeThread+0x11c>)
 8002ba6:	f7fd fb6b 	bl	8000280 <strlen>
 8002baa:	4603      	mov	r3, r0
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	4910      	ldr	r1, [pc, #64]	; (8002bf4 <SendDataToNodeThread+0x11c>)
 8002bb4:	4810      	ldr	r0, [pc, #64]	; (8002bf8 <SendDataToNodeThread+0x120>)
 8002bb6:	f003 f847 	bl	8005c48 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		// uncomment to debug (print the sent message to console (baudrate=115200))
		HAL_UART_Transmit(&huart2, (uint8_t*) pmbuffer, strlen(pmbuffer),
 8002bba:	480e      	ldr	r0, [pc, #56]	; (8002bf4 <SendDataToNodeThread+0x11c>)
 8002bbc:	f7fd fb60 	bl	8000280 <strlen>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	490a      	ldr	r1, [pc, #40]	; (8002bf4 <SendDataToNodeThread+0x11c>)
 8002bca:	480c      	ldr	r0, [pc, #48]	; (8002bfc <SendDataToNodeThread+0x124>)
 8002bcc:	f003 f83c 	bl	8005c48 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

//		}
		osDelay(20000);
 8002bd0:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002bd4:	f003 fc5f 	bl	8006496 <osDelay>
	for (;;) {
 8002bd8:	e782      	b.n	8002ae0 <SendDataToNodeThread+0x8>
 8002bda:	bf00      	nop
 8002bdc:	20000788 	.word	0x20000788
 8002be0:	42c80000 	.word	0x42c80000
 8002be4:	2000078c 	.word	0x2000078c
 8002be8:	20000790 	.word	0x20000790
 8002bec:	200007a0 	.word	0x200007a0
 8002bf0:	0800d054 	.word	0x0800d054
 8002bf4:	2000069c 	.word	0x2000069c
 8002bf8:	20000504 	.word	0x20000504
 8002bfc:	2000054c 	.word	0x2000054c

08002c00 <GetDataFromSensor>:
 * @brief Function implementing the getDataTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GetDataFromSensor */
void GetDataFromSensor(void const *argument) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN GetDataFromSensor */
/* Infinite loop */
for (;;) {
	ReadDataFromSensors();
 8002c08:	f7ff fa2a 	bl	8002060 <ReadDataFromSensors>
	ProcessData();
 8002c0c:	f7ff fb24 	bl	8002258 <ProcessData>
	osDelay(4000);
 8002c10:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002c14:	f003 fc3f 	bl	8006496 <osDelay>
	ReadDataFromSensors();
 8002c18:	e7f6      	b.n	8002c08 <GetDataFromSensor+0x8>

08002c1a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1e:	b672      	cpsid	i
}
 8002c20:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8002c22:	e7fe      	b.n	8002c22 <Error_Handler+0x8>

08002c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_MspInit+0x54>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <HAL_MspInit+0x54>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_MspInit+0x54>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_MspInit+0x54>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_MspInit+0x54>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_MspInit+0x54>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	210f      	movs	r1, #15
 8002c66:	f06f 0001 	mvn.w	r0, #1
 8002c6a:	f000 fbb0 	bl	80033ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <HAL_I2C_MspInit+0xa8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d13d      	bne.n	8002d1a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_I2C_MspInit+0xac>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <HAL_I2C_MspInit+0xac>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_I2C_MspInit+0xac>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc0:	2312      	movs	r3, #18
 8002cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4815      	ldr	r0, [pc, #84]	; (8002d2c <HAL_I2C_MspInit+0xb0>)
 8002cd8:	f000 fba2 	bl	8003420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce2:	2312      	movs	r3, #18
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002cee:	2309      	movs	r3, #9
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <HAL_I2C_MspInit+0xb0>)
 8002cfa:	f000 fb91 	bl	8003420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_I2C_MspInit+0xac>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <HAL_I2C_MspInit+0xac>)
 8002d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_I2C_MspInit+0xac>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d1a:	bf00      	nop
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40005800 	.word	0x40005800
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020400 	.word	0x40020400

08002d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <HAL_TIM_Base_MspInit+0x3c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10d      	bne.n	8002d5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_TIM_Base_MspInit+0x40>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_TIM_Base_MspInit+0x40>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_TIM_Base_MspInit+0x40>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40023800 	.word	0x40023800

08002d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <HAL_TIM_MspPostInit+0x68>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d11d      	bne.n	8002dd2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_TIM_MspPostInit+0x6c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_TIM_MspPostInit+0x6c>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_TIM_MspPostInit+0x6c>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db2:	2340      	movs	r3, #64	; 0x40
 8002db4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4805      	ldr	r0, [pc, #20]	; (8002de4 <HAL_TIM_MspPostInit+0x70>)
 8002dce:	f000 fb27 	bl	8003420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dd2:	bf00      	nop
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020800 	.word	0x40020800

08002de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a32      	ldr	r2, [pc, #200]	; (8002ed0 <HAL_UART_MspInit+0xe8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12d      	bne.n	8002e66 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e54:	2307      	movs	r3, #7
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	481e      	ldr	r0, [pc, #120]	; (8002ed8 <HAL_UART_MspInit+0xf0>)
 8002e60:	f000 fade 	bl	8003420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e64:	e030      	b.n	8002ec8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_UART_MspInit+0xf4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d12b      	bne.n	8002ec8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_UART_MspInit+0xec>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eb8:	2307      	movs	r3, #7
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <HAL_UART_MspInit+0xf0>)
 8002ec4:	f000 faac 	bl	8003420 <HAL_GPIO_Init>
}
 8002ec8:	bf00      	nop
 8002eca:	3730      	adds	r7, #48	; 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40011000 	.word	0x40011000
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40004400 	.word	0x40004400

08002ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <NMI_Handler+0x4>

08002ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eea:	e7fe      	b.n	8002eea <HardFault_Handler+0x4>

08002eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <MemManage_Handler+0x4>

08002ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef6:	e7fe      	b.n	8002ef6 <BusFault_Handler+0x4>

08002ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002efc:	e7fe      	b.n	8002efc <UsageFault_Handler+0x4>

08002efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f10:	f000 f95c 	bl	80031cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f14:	f004 f842 	bl	8006f9c <xTaskGetSchedulerState>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d001      	beq.n	8002f22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f1e:	f004 fa83 	bl	8007428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  return 1;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_kill>:

int _kill(int pid, int sig)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f40:	f005 fc9a 	bl	8008878 <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2216      	movs	r2, #22
 8002f48:	601a      	str	r2, [r3, #0]
  return -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_exit>:

void _exit (int status)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffe7 	bl	8002f36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f68:	e7fe      	b.n	8002f68 <_exit+0x12>

08002f6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e00a      	b.n	8002f92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f7c:	f3af 8000 	nop.w
 8002f80:	4601      	mov	r1, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	60ba      	str	r2, [r7, #8]
 8002f88:	b2ca      	uxtb	r2, r1
 8002f8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	dbf0      	blt.n	8002f7c <_read+0x12>
  }

  return len;
 8002f9a:	687b      	ldr	r3, [r7, #4]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e009      	b.n	8002fca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	60ba      	str	r2, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dbf1      	blt.n	8002fb6 <_write+0x12>
  }
  return len;
 8002fd2:	687b      	ldr	r3, [r7, #4]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_close>:

int _close(int file)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003004:	605a      	str	r2, [r3, #4]
  return 0;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_isatty>:

int _isatty(int file)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800301c:	2301      	movs	r3, #1
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800304c:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <_sbrk+0x5c>)
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <_sbrk+0x60>)
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <_sbrk+0x64>)
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <_sbrk+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003074:	f005 fc00 	bl	8008878 <__errno>
 8003078:	4603      	mov	r3, r0
 800307a:	220c      	movs	r2, #12
 800307c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e009      	b.n	8003098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <_sbrk+0x64>)
 8003094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20020000 	.word	0x20020000
 80030a4:	00000400 	.word	0x00000400
 80030a8:	200007a4 	.word	0x200007a4
 80030ac:	20004650 	.word	0x20004650

080030b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <SystemInit+0x20>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <SystemInit+0x20>)
 80030bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800310c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030d8:	f7ff ffea 	bl	80030b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030dc:	480c      	ldr	r0, [pc, #48]	; (8003110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030de:	490d      	ldr	r1, [pc, #52]	; (8003114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f4:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003102:	f005 fbbf 	bl	8008884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003106:	f7ff fa77 	bl	80025f8 <main>
  bx  lr    
 800310a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800310c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003114:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003118:	0800d4f8 	.word	0x0800d4f8
  ldr r2, =_sbss
 800311c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003120:	2000464c 	.word	0x2000464c

08003124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC_IRQHandler>
	...

08003128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_Init+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <HAL_Init+0x40>)
 8003132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_Init+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_Init+0x40>)
 800313e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_Init+0x40>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_Init+0x40>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003150:	2003      	movs	r0, #3
 8003152:	f000 f931 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003156:	200f      	movs	r0, #15
 8003158:	f000 f808 	bl	800316c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800315c:	f7ff fd62 	bl	8002c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00

0800316c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_InitTick+0x54>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_InitTick+0x58>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003182:	fbb3 f3f1 	udiv	r3, r3, r1
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f93b 	bl	8003406 <HAL_SYSTICK_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e00e      	b.n	80031b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0f      	cmp	r3, #15
 800319e:	d80a      	bhi.n	80031b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a0:	2200      	movs	r2, #0
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f000 f911 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <HAL_InitTick+0x5c>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000004 	.word	0x20000004
 80031c4:	2000000c 	.word	0x2000000c
 80031c8:	20000008 	.word	0x20000008

080031cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_IncTick+0x20>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_IncTick+0x24>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <HAL_IncTick+0x24>)
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	2000000c 	.word	0x2000000c
 80031f0:	200007a8 	.word	0x200007a8

080031f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return uwTick;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_GetTick+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	200007a8 	.word	0x200007a8

0800320c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7ff ffee 	bl	80031f4 <HAL_GetTick>
 8003218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d005      	beq.n	8003232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_Delay+0x44>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003232:	bf00      	nop
 8003234:	f7ff ffde 	bl	80031f4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	429a      	cmp	r2, r3
 8003242:	d8f7      	bhi.n	8003234 <HAL_Delay+0x28>
  {
  }
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000000c 	.word	0x2000000c

08003254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800327c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003286:	4a04      	ldr	r2, [pc, #16]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	60d3      	str	r3, [r2, #12]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <__NVIC_GetPriorityGrouping+0x18>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 0307 	and.w	r3, r3, #7
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff47 	bl	8003254 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff5c 	bl	800329c <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff8e 	bl	800330c <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5d 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffb0 	bl	8003374 <SysTick_Config>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e159      	b.n	80036f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 8148 	bne.w	80036ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d005      	beq.n	8003472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346e:	2b02      	cmp	r3, #2
 8003470:	d130      	bne.n	80034d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0201 	and.w	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d017      	beq.n	8003510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d123      	bne.n	8003564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	220f      	movs	r2, #15
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a2 	beq.w	80036ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b57      	ldr	r3, [pc, #348]	; (8003708 <HAL_GPIO_Init+0x2e8>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a56      	ldr	r2, [pc, #344]	; (8003708 <HAL_GPIO_Init+0x2e8>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_GPIO_Init+0x2e8>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c2:	4a52      	ldr	r2, [pc, #328]	; (800370c <HAL_GPIO_Init+0x2ec>)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a49      	ldr	r2, [pc, #292]	; (8003710 <HAL_GPIO_Init+0x2f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d019      	beq.n	8003622 <HAL_GPIO_Init+0x202>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a48      	ldr	r2, [pc, #288]	; (8003714 <HAL_GPIO_Init+0x2f4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0x1fe>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a47      	ldr	r2, [pc, #284]	; (8003718 <HAL_GPIO_Init+0x2f8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00d      	beq.n	800361a <HAL_GPIO_Init+0x1fa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_GPIO_Init+0x2fc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x1f6>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <HAL_GPIO_Init+0x300>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_GPIO_Init+0x1f2>
 800360e:	2304      	movs	r3, #4
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x204>
 8003612:	2307      	movs	r3, #7
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x204>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x204>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x204>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x204>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	; (800370c <HAL_GPIO_Init+0x2ec>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b38      	ldr	r3, [pc, #224]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a2f      	ldr	r2, [pc, #188]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_GPIO_Init+0x304>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a24      	ldr	r2, [pc, #144]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f aea2 	bls.w	800343c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40013c00 	.word	0x40013c00

08003728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e001      	b.n	800374a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003768:	787b      	ldrb	r3, [r7, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003774:	e003      	b.n	800377e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	041a      	lsls	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12b      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fa62 	bl	8002c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f001 fc60 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a81      	ldr	r2, [pc, #516]	; (8003a00 <HAL_I2C_Init+0x274>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_I2C_Init+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a7d      	ldr	r2, [pc, #500]	; (8003a08 <HAL_I2C_Init+0x27c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a78      	ldr	r2, [pc, #480]	; (8003a0c <HAL_I2C_Init+0x280>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a6a      	ldr	r2, [pc, #424]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_I2C_Init+0x284>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	495c      	ldr	r1, [pc, #368]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d819      	bhi.n	80038c8 <HAL_I2C_Init+0x13c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038a8:	400b      	ands	r3, r1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_I2C_Init+0x138>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e59      	subs	r1, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	e051      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e04f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <HAL_I2C_Init+0x168>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e012      	b.n	800391a <HAL_I2C_Init+0x18e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x196>
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_I2C_Init+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e58      	subs	r0, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	fbb0 f3f3 	udiv	r3, r0, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003946:	e00f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3

08003a14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	817b      	strh	r3, [r7, #10]
 8003a26:	460b      	mov	r3, r1
 8003a28:	813b      	strh	r3, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a2e:	f7ff fbe1 	bl	80031f4 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	f040 80d9 	bne.w	8003bf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2319      	movs	r3, #25
 8003a48:	2201      	movs	r2, #1
 8003a4a:	496d      	ldr	r1, [pc, #436]	; (8003c00 <HAL_I2C_Mem_Write+0x1ec>)
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fc8b 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0cc      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_Mem_Write+0x56>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0c5      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d007      	beq.n	8003a90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2221      	movs	r2, #33	; 0x21
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2240      	movs	r2, #64	; 0x40
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a4d      	ldr	r2, [pc, #308]	; (8003c04 <HAL_I2C_Mem_Write+0x1f0>)
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ad2:	88f8      	ldrh	r0, [r7, #6]
 8003ad4:	893a      	ldrh	r2, [r7, #8]
 8003ad6:	8979      	ldrh	r1, [r7, #10]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fac2 	bl	800406c <I2C_RequestMemoryWrite>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d052      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e081      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fd50 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06b      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d11b      	bne.n	8003b94 <HAL_I2C_Mem_Write+0x180>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1aa      	bne.n	8003af2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fd43 	bl	800462c <I2C_WaitOnBTFFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d107      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e016      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	00100002 	.word	0x00100002
 8003c04:	ffff0000 	.word	0xffff0000

08003c08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	; 0x30
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c22:	f7ff fae7 	bl	80031f4 <HAL_GetTick>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	f040 8214 	bne.w	800405e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2319      	movs	r3, #25
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	497b      	ldr	r1, [pc, #492]	; (8003e2c <HAL_I2C_Mem_Read+0x224>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fb91 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e207      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2C_Mem_Read+0x56>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e200      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d007      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2222      	movs	r2, #34	; 0x22
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a5b      	ldr	r2, [pc, #364]	; (8003e30 <HAL_I2C_Mem_Read+0x228>)
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cc6:	88f8      	ldrh	r0, [r7, #6]
 8003cc8:	893a      	ldrh	r2, [r7, #8]
 8003cca:	8979      	ldrh	r1, [r7, #10]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fa5e 	bl	8004198 <I2C_RequestMemoryRead>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1bc      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d113      	bne.n	8003d16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	623b      	str	r3, [r7, #32]
 8003d02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e190      	b.n	8004038 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d11b      	bne.n	8003d56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e170      	b.n	8004038 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d11b      	bne.n	8003d96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	e150      	b.n	8004038 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003dac:	e144      	b.n	8004038 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	f200 80f1 	bhi.w	8003f9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d123      	bne.n	8003e08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fc79 	bl	80046bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e145      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e06:	e117      	b.n	8004038 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d14e      	bne.n	8003eae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	2200      	movs	r2, #0
 8003e18:	4906      	ldr	r1, [pc, #24]	; (8003e34 <HAL_I2C_Mem_Read+0x22c>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 faa4 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e11a      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
 8003e2a:	bf00      	nop
 8003e2c:	00100002 	.word	0x00100002
 8003e30:	ffff0000 	.word	0xffff0000
 8003e34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eac:	e0c4      	b.n	8004038 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	496c      	ldr	r1, [pc, #432]	; (8004068 <HAL_I2C_Mem_Read+0x460>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fa55 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0cb      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2200      	movs	r2, #0
 8003f12:	4955      	ldr	r1, [pc, #340]	; (8004068 <HAL_I2C_Mem_Read+0x460>)
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fa27 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e09d      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f98:	e04e      	b.n	8004038 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fb8c 	bl	80046bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e058      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d124      	bne.n	8004038 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d107      	bne.n	8004006 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004004:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	f47f aeb6 	bne.w	8003dae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3728      	adds	r7, #40	; 0x28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	00010004 	.word	0x00010004

0800406c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	2200      	movs	r2, #0
 800409e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f960 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040bc:	d103      	bne.n	80040c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e05f      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ca:	897b      	ldrh	r3, [r7, #10]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	6a3a      	ldr	r2, [r7, #32]
 80040de:	492d      	ldr	r1, [pc, #180]	; (8004194 <I2C_RequestMemoryWrite+0x128>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f9bb 	bl	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04c      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	6a39      	ldr	r1, [r7, #32]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fa46 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d107      	bne.n	800412e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e02b      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004138:	893b      	ldrh	r3, [r7, #8]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	611a      	str	r2, [r3, #16]
 8004142:	e021      	b.n	8004188 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	b29b      	uxth	r3, r3
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	6a39      	ldr	r1, [r7, #32]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fa20 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b04      	cmp	r3, #4
 8004168:	d107      	bne.n	800417a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e005      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800417e:	893b      	ldrh	r3, [r7, #8]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	00010002 	.word	0x00010002

08004198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2200      	movs	r2, #0
 80041da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f8c2 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f8:	d103      	bne.n	8004202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e0aa      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	6a3a      	ldr	r2, [r7, #32]
 800421a:	4952      	ldr	r1, [pc, #328]	; (8004364 <I2C_RequestMemoryRead+0x1cc>)
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f91d 	bl	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e097      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f9a8 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b04      	cmp	r3, #4
 8004258:	d107      	bne.n	800426a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e076      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	e021      	b.n	80042c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004280:	893b      	ldrh	r3, [r7, #8]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	b29b      	uxth	r3, r3
 8004286:	b2da      	uxtb	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	6a39      	ldr	r1, [r7, #32]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f982 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d107      	bne.n	80042b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e050      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ba:	893b      	ldrh	r3, [r7, #8]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c6:	6a39      	ldr	r1, [r7, #32]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f967 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d107      	bne.n	80042ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e035      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2200      	movs	r2, #0
 8004308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f82b 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004326:	d103      	bne.n	8004330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e013      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	4906      	ldr	r1, [pc, #24]	; (8004364 <I2C_RequestMemoryRead+0x1cc>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f886 	bl	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010002 	.word	0x00010002

08004368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004378:	e048      	b.n	800440c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d044      	beq.n	800440c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fe ff37 	bl	80031f4 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d139      	bne.n	800440c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10d      	bne.n	80043be <I2C_WaitOnFlagUntilTimeout+0x56>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	43da      	mvns	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	e00c      	b.n	80043d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d116      	bne.n	800440c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e023      	b.n	8004454 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	0c1b      	lsrs	r3, r3, #16
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10d      	bne.n	8004432 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	43da      	mvns	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	e00c      	b.n	800444c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	43da      	mvns	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	429a      	cmp	r2, r3
 8004450:	d093      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446a:	e071      	b.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d123      	bne.n	80044c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004494:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e067      	b.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d041      	beq.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fe fe92 	bl	80031f4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d136      	bne.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10c      	bne.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e00b      	b.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	43da      	mvns	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e021      	b.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d10c      	bne.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	43da      	mvns	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e00b      	b.n	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	43da      	mvns	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4013      	ands	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f af6d 	bne.w	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a8:	e034      	b.n	8004614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8e3 	bl	8004776 <I2C_IsAcknowledgeFailed>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e034      	b.n	8004624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d028      	beq.n	8004614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c2:	f7fe fe17 	bl	80031f4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11d      	bne.n	8004614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d016      	beq.n	8004614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e007      	b.n	8004624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d1c3      	bne.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004638:	e034      	b.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f89b 	bl	8004776 <I2C_IsAcknowledgeFailed>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e034      	b.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d028      	beq.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fe fdcf 	bl	80031f4 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11d      	bne.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d016      	beq.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e007      	b.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d1c3      	bne.n	800463a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c8:	e049      	b.n	800475e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d119      	bne.n	800470c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0210 	mvn.w	r2, #16
 80046e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e030      	b.n	800476e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fe fd72 	bl	80031f4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11d      	bne.n	800475e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d016      	beq.n	800475e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f043 0220 	orr.w	r2, r3, #32
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e007      	b.n	800476e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d1ae      	bne.n	80046ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d11b      	bne.n	80047c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004796:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0204 	orr.w	r2, r3, #4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e267      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d075      	beq.n	80048de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047f2:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d00c      	beq.n	8004818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fe:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004806:	2b08      	cmp	r3, #8
 8004808:	d112      	bne.n	8004830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480a:	4b82      	ldr	r3, [pc, #520]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004816:	d10b      	bne.n	8004830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	4b7e      	ldr	r3, [pc, #504]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05b      	beq.n	80048dc <HAL_RCC_OscConfig+0x108>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d157      	bne.n	80048dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e242      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d106      	bne.n	8004848 <HAL_RCC_OscConfig+0x74>
 800483a:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a75      	ldr	r2, [pc, #468]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e01d      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x98>
 8004852:	4b70      	ldr	r3, [pc, #448]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6f      	ldr	r2, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6c      	ldr	r2, [pc, #432]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 800486c:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a68      	ldr	r2, [pc, #416]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b66      	ldr	r3, [pc, #408]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a65      	ldr	r2, [pc, #404]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fe fcb2 	bl	80031f4 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004894:	f7fe fcae 	bl	80031f4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e207      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xc0>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fe fc9e 	bl	80031f4 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fe fc9a 	bl	80031f4 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1f3      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	4b51      	ldr	r3, [pc, #324]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0xe8>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d063      	beq.n	80049b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ea:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d11c      	bne.n	800493c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004902:	4b44      	ldr	r3, [pc, #272]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_RCC_OscConfig+0x152>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e1c7      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004926:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4937      	ldr	r1, [pc, #220]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	e03a      	b.n	80049b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004944:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCC_OscConfig+0x244>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fe fc53 	bl	80031f4 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004952:	f7fe fc4f 	bl	80031f4 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e1a8      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4925      	ldr	r1, [pc, #148]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	e015      	b.n	80049b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <HAL_RCC_OscConfig+0x244>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fe fc32 	bl	80031f4 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004994:	f7fe fc2e 	bl	80031f4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e187      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d036      	beq.n	8004a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d016      	beq.n	80049f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <HAL_RCC_OscConfig+0x248>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fe fc12 	bl	80031f4 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d4:	f7fe fc0e 	bl	80031f4 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e167      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_OscConfig+0x240>)
 80049e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x200>
 80049f2:	e01b      	b.n	8004a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_OscConfig+0x248>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fa:	f7fe fbfb 	bl	80031f4 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	e00e      	b.n	8004a20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a02:	f7fe fbf7 	bl	80031f4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d907      	bls.n	8004a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e150      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
 8004a14:	40023800 	.word	0x40023800
 8004a18:	42470000 	.word	0x42470000
 8004a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	4b88      	ldr	r3, [pc, #544]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ea      	bne.n	8004a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8097 	beq.w	8004b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3e:	4b81      	ldr	r3, [pc, #516]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	4b7d      	ldr	r3, [pc, #500]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	4a7c      	ldr	r2, [pc, #496]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5a:	4b7a      	ldr	r3, [pc, #488]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6a:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d118      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a76:	4b74      	ldr	r3, [pc, #464]	; (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a73      	ldr	r2, [pc, #460]	; (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a82:	f7fe fbb7 	bl	80031f4 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8a:	f7fe fbb3 	bl	80031f4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e10c      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	4b6a      	ldr	r3, [pc, #424]	; (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d106      	bne.n	8004abe <HAL_RCC_OscConfig+0x2ea>
 8004ab0:	4b64      	ldr	r3, [pc, #400]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	4a63      	ldr	r2, [pc, #396]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	6713      	str	r3, [r2, #112]	; 0x70
 8004abc:	e01c      	b.n	8004af8 <HAL_RCC_OscConfig+0x324>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x30c>
 8004ac6:	4b5f      	ldr	r3, [pc, #380]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	4a5e      	ldr	r2, [pc, #376]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad2:	4b5c      	ldr	r3, [pc, #368]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	4a5b      	ldr	r2, [pc, #364]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_OscConfig+0x324>
 8004ae0:	4b58      	ldr	r3, [pc, #352]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	4a57      	ldr	r2, [pc, #348]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	6713      	str	r3, [r2, #112]	; 0x70
 8004aec:	4b55      	ldr	r3, [pc, #340]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a54      	ldr	r2, [pc, #336]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004af2:	f023 0304 	bic.w	r3, r3, #4
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b00:	f7fe fb78 	bl	80031f4 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fe fb74 	bl	80031f4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e0cb      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1e:	4b49      	ldr	r3, [pc, #292]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ee      	beq.n	8004b08 <HAL_RCC_OscConfig+0x334>
 8004b2a:	e014      	b.n	8004b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2c:	f7fe fb62 	bl	80031f4 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fe fb5e 	bl	80031f4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e0b5      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ee      	bne.n	8004b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5c:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	4a38      	ldr	r2, [pc, #224]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a1 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b72:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d05c      	beq.n	8004c38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d141      	bne.n	8004c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b31      	ldr	r3, [pc, #196]	; (8004c4c <HAL_RCC_OscConfig+0x478>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fe fb32 	bl	80031f4 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fe fb2e 	bl	80031f4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e087      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	491b      	ldr	r1, [pc, #108]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x478>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be2:	f7fe fb07 	bl	80031f4 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fe fb03 	bl	80031f4 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e05c      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x416>
 8004c08:	e054      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_RCC_OscConfig+0x478>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fe faf0 	bl	80031f4 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fe faec 	bl	80031f4 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e045      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0x444>
 8004c36:	e03d      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d107      	bne.n	8004c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e038      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c50:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_RCC_OscConfig+0x4ec>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d028      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d121      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d11a      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800

08004cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0cc      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd8:	4b68      	ldr	r3, [pc, #416]	; (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d90c      	bls.n	8004d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce6:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b63      	ldr	r3, [pc, #396]	; (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0b8      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d18:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a58      	ldr	r2, [pc, #352]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d30:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4a52      	ldr	r2, [pc, #328]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3c:	4b50      	ldr	r3, [pc, #320]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	494d      	ldr	r1, [pc, #308]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d044      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d119      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e07f      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d82:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e06f      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d92:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e067      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004da2:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 0203 	bic.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4934      	ldr	r1, [pc, #208]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db4:	f7fe fa1e 	bl	80031f4 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dbc:	f7fe fa1a 	bl	80031f4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e04f      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 020c 	and.w	r2, r3, #12
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d1eb      	bne.n	8004dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d20c      	bcs.n	8004e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e032      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4916      	ldr	r1, [pc, #88]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	490e      	ldr	r1, [pc, #56]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e4a:	f000 f821 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	490a      	ldr	r1, [pc, #40]	; (8004e84 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5c:	5ccb      	ldrb	r3, [r1, r3]
 8004e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e62:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_RCC_ClockConfig+0x1c8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe f97e 	bl	800316c <HAL_InitTick>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023c00 	.word	0x40023c00
 8004e80:	40023800 	.word	0x40023800
 8004e84:	0800d074 	.word	0x0800d074
 8004e88:	20000004 	.word	0x20000004
 8004e8c:	20000008 	.word	0x20000008

08004e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b094      	sub	sp, #80	; 0x50
 8004e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ea8:	4b79      	ldr	r3, [pc, #484]	; (8005090 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 030c 	and.w	r3, r3, #12
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	f200 80e1 	bhi.w	800507c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x3a>
 8004ec2:	e0db      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ec4:	4b73      	ldr	r3, [pc, #460]	; (8005094 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ec8:	e0db      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eca:	4b73      	ldr	r3, [pc, #460]	; (8005098 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ece:	e0d8      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed0:	4b6f      	ldr	r3, [pc, #444]	; (8005090 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eda:	4b6d      	ldr	r3, [pc, #436]	; (8005090 <HAL_RCC_GetSysClockFreq+0x200>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d063      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee6:	4b6a      	ldr	r3, [pc, #424]	; (8005090 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	099b      	lsrs	r3, r3, #6
 8004eec:	2200      	movs	r2, #0
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f02:	4622      	mov	r2, r4
 8004f04:	462b      	mov	r3, r5
 8004f06:	f04f 0000 	mov.w	r0, #0
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	0159      	lsls	r1, r3, #5
 8004f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f14:	0150      	lsls	r0, r2, #5
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	1a51      	subs	r1, r2, r1
 8004f1e:	6139      	str	r1, [r7, #16]
 8004f20:	4629      	mov	r1, r5
 8004f22:	eb63 0301 	sbc.w	r3, r3, r1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f34:	4659      	mov	r1, fp
 8004f36:	018b      	lsls	r3, r1, #6
 8004f38:	4651      	mov	r1, sl
 8004f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f3e:	4651      	mov	r1, sl
 8004f40:	018a      	lsls	r2, r1, #6
 8004f42:	4651      	mov	r1, sl
 8004f44:	ebb2 0801 	subs.w	r8, r2, r1
 8004f48:	4659      	mov	r1, fp
 8004f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f62:	4690      	mov	r8, r2
 8004f64:	4699      	mov	r9, r3
 8004f66:	4623      	mov	r3, r4
 8004f68:	eb18 0303 	adds.w	r3, r8, r3
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	462b      	mov	r3, r5
 8004f70:	eb49 0303 	adc.w	r3, r9, r3
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f82:	4629      	mov	r1, r5
 8004f84:	024b      	lsls	r3, r1, #9
 8004f86:	4621      	mov	r1, r4
 8004f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	024a      	lsls	r2, r1, #9
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f96:	2200      	movs	r2, #0
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fa0:	f7fb feca 	bl	8000d38 <__aeabi_uldivmod>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4613      	mov	r3, r2
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fac:	e058      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fae:	4b38      	ldr	r3, [pc, #224]	; (8005090 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	4611      	mov	r1, r2
 8004fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	f04f 0000 	mov.w	r0, #0
 8004fd0:	f04f 0100 	mov.w	r1, #0
 8004fd4:	0159      	lsls	r1, r3, #5
 8004fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fda:	0150      	lsls	r0, r2, #5
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005000:	ebb2 040a 	subs.w	r4, r2, sl
 8005004:	eb63 050b 	sbc.w	r5, r3, fp
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	00eb      	lsls	r3, r5, #3
 8005012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005016:	00e2      	lsls	r2, r4, #3
 8005018:	4614      	mov	r4, r2
 800501a:	461d      	mov	r5, r3
 800501c:	4643      	mov	r3, r8
 800501e:	18e3      	adds	r3, r4, r3
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	464b      	mov	r3, r9
 8005024:	eb45 0303 	adc.w	r3, r5, r3
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005036:	4629      	mov	r1, r5
 8005038:	028b      	lsls	r3, r1, #10
 800503a:	4621      	mov	r1, r4
 800503c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005040:	4621      	mov	r1, r4
 8005042:	028a      	lsls	r2, r1, #10
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504a:	2200      	movs	r2, #0
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	61fa      	str	r2, [r7, #28]
 8005050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005054:	f7fb fe70 	bl	8000d38 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_GetSysClockFreq+0x200>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	3301      	adds	r3, #1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800507a:	e002      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetSysClockFreq+0x204>)
 800507e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005084:	4618      	mov	r0, r3
 8005086:	3750      	adds	r7, #80	; 0x50
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	00f42400 	.word	0x00f42400
 8005098:	007a1200 	.word	0x007a1200

0800509c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000004 	.word	0x20000004

080050b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050b8:	f7ff fff0 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0a9b      	lsrs	r3, r3, #10
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	0800d084 	.word	0x0800d084

080050dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050e0:	f7ff ffdc 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0b5b      	lsrs	r3, r3, #13
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	0800d084 	.word	0x0800d084

08005104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e041      	b.n	800519a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fd fe00 	bl	8002d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f000 fa10 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e041      	b.n	8005238 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f839 	bl	8005240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3304      	adds	r3, #4
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f000 f9c1 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800526e:	2302      	movs	r3, #2
 8005270:	e0ae      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b0c      	cmp	r3, #12
 800527e:	f200 809f 	bhi.w	80053c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052bd 	.word	0x080052bd
 800528c:	080053c1 	.word	0x080053c1
 8005290:	080053c1 	.word	0x080053c1
 8005294:	080053c1 	.word	0x080053c1
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080053c1 	.word	0x080053c1
 80052a0:	080053c1 	.word	0x080053c1
 80052a4:	080053c1 	.word	0x080053c1
 80052a8:	0800533f 	.word	0x0800533f
 80052ac:	080053c1 	.word	0x080053c1
 80052b0:	080053c1 	.word	0x080053c1
 80052b4:	080053c1 	.word	0x080053c1
 80052b8:	0800537f 	.word	0x0800537f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f9dc 	bl	8005680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0208 	orr.w	r2, r2, #8
 80052d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0204 	bic.w	r2, r2, #4
 80052e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	619a      	str	r2, [r3, #24]
      break;
 80052fa:	e064      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa22 	bl	800574c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	619a      	str	r2, [r3, #24]
      break;
 800533c:	e043      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fa6d 	bl	8005824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0208 	orr.w	r2, r2, #8
 8005358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0204 	bic.w	r2, r2, #4
 8005368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69d9      	ldr	r1, [r3, #28]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	61da      	str	r2, [r3, #28]
      break;
 800537c:	e023      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fab7 	bl	80058f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	021a      	lsls	r2, r3, #8
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	61da      	str	r2, [r3, #28]
      break;
 80053be:	e002      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	75fb      	strb	r3, [r7, #23]
      break;
 80053c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_ConfigClockSource+0x1c>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e0b4      	b.n	800555e <HAL_TIM_ConfigClockSource+0x186>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800541a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542c:	d03e      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0xd4>
 800542e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005432:	f200 8087 	bhi.w	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543a:	f000 8086 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x172>
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	d87f      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b70      	cmp	r3, #112	; 0x70
 8005446:	d01a      	beq.n	800547e <HAL_TIM_ConfigClockSource+0xa6>
 8005448:	2b70      	cmp	r3, #112	; 0x70
 800544a:	d87b      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b60      	cmp	r3, #96	; 0x60
 800544e:	d050      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005450:	2b60      	cmp	r3, #96	; 0x60
 8005452:	d877      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	d03c      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005458:	2b50      	cmp	r3, #80	; 0x50
 800545a:	d873      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d058      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x13a>
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d86f      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005464:	2b30      	cmp	r3, #48	; 0x30
 8005466:	d064      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 8005468:	2b30      	cmp	r3, #48	; 0x30
 800546a:	d86b      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d060      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d867      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d05c      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 8005478:	2b10      	cmp	r3, #16
 800547a:	d05a      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	e062      	b.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800548e:	f000 fafd 	bl	8005a8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	609a      	str	r2, [r3, #8]
      break;
 80054aa:	e04f      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054bc:	f000 fae6 	bl	8005a8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ce:	609a      	str	r2, [r3, #8]
      break;
 80054d0:	e03c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 fa5a 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2150      	movs	r1, #80	; 0x50
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fab3 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80054f0:	e02c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fe:	461a      	mov	r2, r3
 8005500:	f000 fa79 	bl	80059f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2160      	movs	r1, #96	; 0x60
 800550a:	4618      	mov	r0, r3
 800550c:	f000 faa3 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005510:	e01c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	461a      	mov	r2, r3
 8005520:	f000 fa3a 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2140      	movs	r1, #64	; 0x40
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fa93 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005530:	e00c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f000 fa8a 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005542:	e003      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e000      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800554a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a3a      	ldr	r2, [pc, #232]	; (8005664 <TIM_Base_SetConfig+0xfc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00f      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d00b      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a37      	ldr	r2, [pc, #220]	; (8005668 <TIM_Base_SetConfig+0x100>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a36      	ldr	r2, [pc, #216]	; (800566c <TIM_Base_SetConfig+0x104>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a35      	ldr	r2, [pc, #212]	; (8005670 <TIM_Base_SetConfig+0x108>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <TIM_Base_SetConfig+0xfc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01b      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d017      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a28      	ldr	r2, [pc, #160]	; (8005668 <TIM_Base_SetConfig+0x100>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a27      	ldr	r2, [pc, #156]	; (800566c <TIM_Base_SetConfig+0x104>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a26      	ldr	r2, [pc, #152]	; (8005670 <TIM_Base_SetConfig+0x108>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a25      	ldr	r2, [pc, #148]	; (8005674 <TIM_Base_SetConfig+0x10c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a24      	ldr	r2, [pc, #144]	; (8005678 <TIM_Base_SetConfig+0x110>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <TIM_Base_SetConfig+0x114>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d108      	bne.n	8005604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0e      	ldr	r2, [pc, #56]	; (8005664 <TIM_Base_SetConfig+0xfc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d103      	bne.n	8005638 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d105      	bne.n	8005656 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	611a      	str	r2, [r3, #16]
  }
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40010000 	.word	0x40010000
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800

08005680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 0201 	bic.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0302 	bic.w	r3, r3, #2
 80056c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <TIM_OC1_SetConfig+0xc8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d10c      	bne.n	80056f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0308 	bic.w	r3, r3, #8
 80056e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a13      	ldr	r2, [pc, #76]	; (8005748 <TIM_OC1_SetConfig+0xc8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d111      	bne.n	8005722 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40010000 	.word	0x40010000

0800574c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f023 0210 	bic.w	r2, r3, #16
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0320 	bic.w	r3, r3, #32
 8005796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <TIM_OC2_SetConfig+0xd4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10d      	bne.n	80057c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <TIM_OC2_SetConfig+0xd4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d113      	bne.n	80057f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000

08005824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800586c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <TIM_OC3_SetConfig+0xd0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10d      	bne.n	800589e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800589c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <TIM_OC3_SetConfig+0xd0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d113      	bne.n	80058ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40010000 	.word	0x40010000

080058f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a10      	ldr	r2, [pc, #64]	; (8005994 <TIM_OC4_SetConfig+0x9c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d109      	bne.n	800596c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	019b      	lsls	r3, r3, #6
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000

08005998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 030a 	bic.w	r3, r3, #10
 80059d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b087      	sub	sp, #28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 0210 	bic.w	r2, r3, #16
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f043 0307 	orr.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e050      	b.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d018      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d013      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a18      	ldr	r2, [pc, #96]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00e      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a16      	ldr	r2, [pc, #88]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d009      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d10c      	bne.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40014000 	.word	0x40014000

08005ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e042      	b.n	8005c40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fd f90a 	bl	8002de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f973 	bl	8005ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d175      	bne.n	8005d54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_UART_Transmit+0x2c>
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e06e      	b.n	8005d56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2221      	movs	r2, #33	; 0x21
 8005c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c86:	f7fd fab5 	bl	80031f4 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	88fa      	ldrh	r2, [r7, #6]
 8005c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca0:	d108      	bne.n	8005cb4 <HAL_UART_Transmit+0x6c>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d104      	bne.n	8005cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	e003      	b.n	8005cbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cbc:	e02e      	b.n	8005d1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2180      	movs	r1, #128	; 0x80
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f848 	bl	8005d5e <UART_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e03a      	b.n	8005d56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	e007      	b.n	8005d0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	781a      	ldrb	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1cb      	bne.n	8005cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2140      	movs	r1, #64	; 0x40
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f814 	bl	8005d5e <UART_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e006      	b.n	8005d56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e000      	b.n	8005d56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3720      	adds	r7, #32
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	603b      	str	r3, [r7, #0]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6e:	e03b      	b.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d037      	beq.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d78:	f7fd fa3c 	bl	80031f4 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d302      	bcc.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e03a      	b.n	8005e08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d023      	beq.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b80      	cmp	r3, #128	; 0x80
 8005da4:	d020      	beq.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d01d      	beq.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d116      	bne.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f81d 	bl	8005e10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e00f      	b.n	8005e08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4013      	ands	r3, r2
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d0b4      	beq.n	8005d70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b095      	sub	sp, #84	; 0x54
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e38:	643a      	str	r2, [r7, #64]	; 0x40
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e5      	bne.n	8005e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3314      	adds	r3, #20
 8005e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d119      	bne.n	8005ebc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f023 0310 	bic.w	r3, r3, #16
 8005e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ea8:	61ba      	str	r2, [r7, #24]
 8005eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6979      	ldr	r1, [r7, #20]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e5      	bne.n	8005e88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005eca:	bf00      	nop
 8005ecc:	3754      	adds	r7, #84	; 0x54
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005edc:	b0c0      	sub	sp, #256	; 0x100
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef4:	68d9      	ldr	r1, [r3, #12]
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	ea40 0301 	orr.w	r3, r0, r1
 8005f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f30:	f021 010c 	bic.w	r1, r1, #12
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f52:	6999      	ldr	r1, [r3, #24]
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	ea40 0301 	orr.w	r3, r0, r1
 8005f5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b8f      	ldr	r3, [pc, #572]	; (80061a4 <UART_SetConfig+0x2cc>)
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d005      	beq.n	8005f78 <UART_SetConfig+0xa0>
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b8d      	ldr	r3, [pc, #564]	; (80061a8 <UART_SetConfig+0x2d0>)
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d104      	bne.n	8005f82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f78:	f7ff f8b0 	bl	80050dc <HAL_RCC_GetPCLK2Freq>
 8005f7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f80:	e003      	b.n	8005f8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f82:	f7ff f897 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8005f86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f94:	f040 810c 	bne.w	80061b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005faa:	4622      	mov	r2, r4
 8005fac:	462b      	mov	r3, r5
 8005fae:	1891      	adds	r1, r2, r2
 8005fb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fb2:	415b      	adcs	r3, r3
 8005fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fba:	4621      	mov	r1, r4
 8005fbc:	eb12 0801 	adds.w	r8, r2, r1
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	eb43 0901 	adc.w	r9, r3, r1
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fda:	4690      	mov	r8, r2
 8005fdc:	4699      	mov	r9, r3
 8005fde:	4623      	mov	r3, r4
 8005fe0:	eb18 0303 	adds.w	r3, r8, r3
 8005fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe8:	462b      	mov	r3, r5
 8005fea:	eb49 0303 	adc.w	r3, r9, r3
 8005fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ffe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006006:	460b      	mov	r3, r1
 8006008:	18db      	adds	r3, r3, r3
 800600a:	653b      	str	r3, [r7, #80]	; 0x50
 800600c:	4613      	mov	r3, r2
 800600e:	eb42 0303 	adc.w	r3, r2, r3
 8006012:	657b      	str	r3, [r7, #84]	; 0x54
 8006014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800601c:	f7fa fe8c 	bl	8000d38 <__aeabi_uldivmod>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4b61      	ldr	r3, [pc, #388]	; (80061ac <UART_SetConfig+0x2d4>)
 8006026:	fba3 2302 	umull	r2, r3, r3, r2
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	011c      	lsls	r4, r3, #4
 800602e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006032:	2200      	movs	r2, #0
 8006034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006038:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800603c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006040:	4642      	mov	r2, r8
 8006042:	464b      	mov	r3, r9
 8006044:	1891      	adds	r1, r2, r2
 8006046:	64b9      	str	r1, [r7, #72]	; 0x48
 8006048:	415b      	adcs	r3, r3
 800604a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800604c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006050:	4641      	mov	r1, r8
 8006052:	eb12 0a01 	adds.w	sl, r2, r1
 8006056:	4649      	mov	r1, r9
 8006058:	eb43 0b01 	adc.w	fp, r3, r1
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800606c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006070:	4692      	mov	sl, r2
 8006072:	469b      	mov	fp, r3
 8006074:	4643      	mov	r3, r8
 8006076:	eb1a 0303 	adds.w	r3, sl, r3
 800607a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800607e:	464b      	mov	r3, r9
 8006080:	eb4b 0303 	adc.w	r3, fp, r3
 8006084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006094:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006098:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800609c:	460b      	mov	r3, r1
 800609e:	18db      	adds	r3, r3, r3
 80060a0:	643b      	str	r3, [r7, #64]	; 0x40
 80060a2:	4613      	mov	r3, r2
 80060a4:	eb42 0303 	adc.w	r3, r2, r3
 80060a8:	647b      	str	r3, [r7, #68]	; 0x44
 80060aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060b2:	f7fa fe41 	bl	8000d38 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <UART_SetConfig+0x2d4>)
 80060be:	fba3 2301 	umull	r2, r3, r3, r1
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	2264      	movs	r2, #100	; 0x64
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	1acb      	subs	r3, r1, r3
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060d2:	4b36      	ldr	r3, [pc, #216]	; (80061ac <UART_SetConfig+0x2d4>)
 80060d4:	fba3 2302 	umull	r2, r3, r3, r2
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060e0:	441c      	add	r4, r3
 80060e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	1891      	adds	r1, r2, r2
 80060fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80060fc:	415b      	adcs	r3, r3
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006104:	4641      	mov	r1, r8
 8006106:	1851      	adds	r1, r2, r1
 8006108:	6339      	str	r1, [r7, #48]	; 0x30
 800610a:	4649      	mov	r1, r9
 800610c:	414b      	adcs	r3, r1
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800611c:	4659      	mov	r1, fp
 800611e:	00cb      	lsls	r3, r1, #3
 8006120:	4651      	mov	r1, sl
 8006122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006126:	4651      	mov	r1, sl
 8006128:	00ca      	lsls	r2, r1, #3
 800612a:	4610      	mov	r0, r2
 800612c:	4619      	mov	r1, r3
 800612e:	4603      	mov	r3, r0
 8006130:	4642      	mov	r2, r8
 8006132:	189b      	adds	r3, r3, r2
 8006134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006138:	464b      	mov	r3, r9
 800613a:	460a      	mov	r2, r1
 800613c:	eb42 0303 	adc.w	r3, r2, r3
 8006140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006150:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006154:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006158:	460b      	mov	r3, r1
 800615a:	18db      	adds	r3, r3, r3
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
 800615e:	4613      	mov	r3, r2
 8006160:	eb42 0303 	adc.w	r3, r2, r3
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800616a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800616e:	f7fa fde3 	bl	8000d38 <__aeabi_uldivmod>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <UART_SetConfig+0x2d4>)
 8006178:	fba3 1302 	umull	r1, r3, r3, r2
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	2164      	movs	r1, #100	; 0x64
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	3332      	adds	r3, #50	; 0x32
 800618a:	4a08      	ldr	r2, [pc, #32]	; (80061ac <UART_SetConfig+0x2d4>)
 800618c:	fba2 2303 	umull	r2, r3, r2, r3
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	f003 0207 	and.w	r2, r3, #7
 8006196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4422      	add	r2, r4
 800619e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061a0:	e106      	b.n	80063b0 <UART_SetConfig+0x4d8>
 80061a2:	bf00      	nop
 80061a4:	40011000 	.word	0x40011000
 80061a8:	40011400 	.word	0x40011400
 80061ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061c2:	4642      	mov	r2, r8
 80061c4:	464b      	mov	r3, r9
 80061c6:	1891      	adds	r1, r2, r2
 80061c8:	6239      	str	r1, [r7, #32]
 80061ca:	415b      	adcs	r3, r3
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
 80061ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061d2:	4641      	mov	r1, r8
 80061d4:	1854      	adds	r4, r2, r1
 80061d6:	4649      	mov	r1, r9
 80061d8:	eb43 0501 	adc.w	r5, r3, r1
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	00eb      	lsls	r3, r5, #3
 80061e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ea:	00e2      	lsls	r2, r4, #3
 80061ec:	4614      	mov	r4, r2
 80061ee:	461d      	mov	r5, r3
 80061f0:	4643      	mov	r3, r8
 80061f2:	18e3      	adds	r3, r4, r3
 80061f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061f8:	464b      	mov	r3, r9
 80061fa:	eb45 0303 	adc.w	r3, r5, r3
 80061fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800620e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800621e:	4629      	mov	r1, r5
 8006220:	008b      	lsls	r3, r1, #2
 8006222:	4621      	mov	r1, r4
 8006224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006228:	4621      	mov	r1, r4
 800622a:	008a      	lsls	r2, r1, #2
 800622c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006230:	f7fa fd82 	bl	8000d38 <__aeabi_uldivmod>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4b60      	ldr	r3, [pc, #384]	; (80063bc <UART_SetConfig+0x4e4>)
 800623a:	fba3 2302 	umull	r2, r3, r3, r2
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	011c      	lsls	r4, r3, #4
 8006242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006246:	2200      	movs	r2, #0
 8006248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800624c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006250:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006254:	4642      	mov	r2, r8
 8006256:	464b      	mov	r3, r9
 8006258:	1891      	adds	r1, r2, r2
 800625a:	61b9      	str	r1, [r7, #24]
 800625c:	415b      	adcs	r3, r3
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006264:	4641      	mov	r1, r8
 8006266:	1851      	adds	r1, r2, r1
 8006268:	6139      	str	r1, [r7, #16]
 800626a:	4649      	mov	r1, r9
 800626c:	414b      	adcs	r3, r1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800627c:	4659      	mov	r1, fp
 800627e:	00cb      	lsls	r3, r1, #3
 8006280:	4651      	mov	r1, sl
 8006282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006286:	4651      	mov	r1, sl
 8006288:	00ca      	lsls	r2, r1, #3
 800628a:	4610      	mov	r0, r2
 800628c:	4619      	mov	r1, r3
 800628e:	4603      	mov	r3, r0
 8006290:	4642      	mov	r2, r8
 8006292:	189b      	adds	r3, r3, r2
 8006294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006298:	464b      	mov	r3, r9
 800629a:	460a      	mov	r2, r1
 800629c:	eb42 0303 	adc.w	r3, r2, r3
 80062a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062bc:	4649      	mov	r1, r9
 80062be:	008b      	lsls	r3, r1, #2
 80062c0:	4641      	mov	r1, r8
 80062c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c6:	4641      	mov	r1, r8
 80062c8:	008a      	lsls	r2, r1, #2
 80062ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062ce:	f7fa fd33 	bl	8000d38 <__aeabi_uldivmod>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	4b38      	ldr	r3, [pc, #224]	; (80063bc <UART_SetConfig+0x4e4>)
 80062da:	fba3 2301 	umull	r2, r3, r3, r1
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	2264      	movs	r2, #100	; 0x64
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	1acb      	subs	r3, r1, r3
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	3332      	adds	r3, #50	; 0x32
 80062ec:	4a33      	ldr	r2, [pc, #204]	; (80063bc <UART_SetConfig+0x4e4>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f8:	441c      	add	r4, r3
 80062fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fe:	2200      	movs	r2, #0
 8006300:	673b      	str	r3, [r7, #112]	; 0x70
 8006302:	677a      	str	r2, [r7, #116]	; 0x74
 8006304:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	415b      	adcs	r3, r3
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006318:	4641      	mov	r1, r8
 800631a:	1851      	adds	r1, r2, r1
 800631c:	6039      	str	r1, [r7, #0]
 800631e:	4649      	mov	r1, r9
 8006320:	414b      	adcs	r3, r1
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006330:	4659      	mov	r1, fp
 8006332:	00cb      	lsls	r3, r1, #3
 8006334:	4651      	mov	r1, sl
 8006336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800633a:	4651      	mov	r1, sl
 800633c:	00ca      	lsls	r2, r1, #3
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	4603      	mov	r3, r0
 8006344:	4642      	mov	r2, r8
 8006346:	189b      	adds	r3, r3, r2
 8006348:	66bb      	str	r3, [r7, #104]	; 0x68
 800634a:	464b      	mov	r3, r9
 800634c:	460a      	mov	r2, r1
 800634e:	eb42 0303 	adc.w	r3, r2, r3
 8006352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	663b      	str	r3, [r7, #96]	; 0x60
 800635e:	667a      	str	r2, [r7, #100]	; 0x64
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800636c:	4649      	mov	r1, r9
 800636e:	008b      	lsls	r3, r1, #2
 8006370:	4641      	mov	r1, r8
 8006372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006376:	4641      	mov	r1, r8
 8006378:	008a      	lsls	r2, r1, #2
 800637a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800637e:	f7fa fcdb 	bl	8000d38 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <UART_SetConfig+0x4e4>)
 8006388:	fba3 1302 	umull	r1, r3, r3, r2
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	2164      	movs	r1, #100	; 0x64
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	3332      	adds	r3, #50	; 0x32
 800639a:	4a08      	ldr	r2, [pc, #32]	; (80063bc <UART_SetConfig+0x4e4>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	f003 020f 	and.w	r2, r3, #15
 80063a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4422      	add	r2, r4
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063b6:	46bd      	mov	sp, r7
 80063b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063bc:	51eb851f 	.word	0x51eb851f

080063c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80063ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063d2:	2b84      	cmp	r3, #132	; 0x84
 80063d4:	d005      	beq.n	80063e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80063d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	3303      	adds	r3, #3
 80063e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063f4:	f000 fade 	bl	80069b4 <vTaskStartScheduler>
  
  return osOK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	bd80      	pop	{r7, pc}

080063fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006400:	b089      	sub	sp, #36	; 0x24
 8006402:	af04      	add	r7, sp, #16
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d020      	beq.n	8006452 <osThreadCreate+0x54>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01c      	beq.n	8006452 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685c      	ldr	r4, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691e      	ldr	r6, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff ffc8 	bl	80063c0 <makeFreeRtosPriority>
 8006430:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	9100      	str	r1, [sp, #0]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	4632      	mov	r2, r6
 8006444:	4629      	mov	r1, r5
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f8ed 	bl	8006626 <xTaskCreateStatic>
 800644c:	4603      	mov	r3, r0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e01c      	b.n	800648c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685c      	ldr	r4, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800645e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ffaa 	bl	80063c0 <makeFreeRtosPriority>
 800646c:	4602      	mov	r2, r0
 800646e:	f107 030c 	add.w	r3, r7, #12
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	9200      	str	r2, [sp, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	4632      	mov	r2, r6
 800647a:	4629      	mov	r1, r5
 800647c:	4620      	mov	r0, r4
 800647e:	f000 f92f 	bl	80066e0 <xTaskCreate>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d001      	beq.n	800648c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	e000      	b.n	800648e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006496 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <osDelay+0x16>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	e000      	b.n	80064ae <osDelay+0x18>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fa4c 	bl	800694c <vTaskDelay>
  
  return osOK;
 80064b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f103 0208 	add.w	r2, r3, #8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295
 80064d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f103 0208 	add.w	r2, r3, #8
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f103 0208 	add.w	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d103      	bne.n	8006580 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e00c      	b.n	800659a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3308      	adds	r3, #8
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e002      	b.n	800658e <vListInsert+0x2e>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	d2f6      	bcs.n	8006588 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6892      	ldr	r2, [r2, #8]
 80065e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6852      	ldr	r2, [r2, #4]
 80065f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d103      	bne.n	8006606 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	1e5a      	subs	r2, r3, #1
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006626:	b580      	push	{r7, lr}
 8006628:	b08e      	sub	sp, #56	; 0x38
 800662a:	af04      	add	r7, sp, #16
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <xTaskCreateStatic+0x46>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61fb      	str	r3, [r7, #28]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800666c:	2354      	movs	r3, #84	; 0x54
 800666e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	2b54      	cmp	r3, #84	; 0x54
 8006674:	d00a      	beq.n	800668c <xTaskCreateStatic+0x66>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	61bb      	str	r3, [r7, #24]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800668c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01e      	beq.n	80066d2 <xTaskCreateStatic+0xac>
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066ac:	2300      	movs	r3, #0
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	9302      	str	r3, [sp, #8]
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f850 	bl	800676a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066cc:	f000 f8d4 	bl	8006878 <prvAddNewTaskToReadyList>
 80066d0:	e001      	b.n	80066d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066d6:	697b      	ldr	r3, [r7, #20]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	3728      	adds	r7, #40	; 0x28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08c      	sub	sp, #48	; 0x30
 80066e4:	af04      	add	r7, sp, #16
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fee7 	bl	80074c8 <pvPortMalloc>
 80066fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00e      	beq.n	8006720 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006702:	2054      	movs	r0, #84	; 0x54
 8006704:	f000 fee0 	bl	80074c8 <pvPortMalloc>
 8006708:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
 8006716:	e005      	b.n	8006724 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006718:	6978      	ldr	r0, [r7, #20]
 800671a:	f000 ffa1 	bl	8007660 <vPortFree>
 800671e:	e001      	b.n	8006724 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d017      	beq.n	800675a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	2300      	movs	r3, #0
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	9302      	str	r3, [sp, #8]
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f80e 	bl	800676a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800674e:	69f8      	ldr	r0, [r7, #28]
 8006750:	f000 f892 	bl	8006878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006754:	2301      	movs	r3, #1
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	e002      	b.n	8006760 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800675a:	f04f 33ff 	mov.w	r3, #4294967295
 800675e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006760:	69bb      	ldr	r3, [r7, #24]
	}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006782:	3b01      	subs	r3, #1
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f023 0307 	bic.w	r3, r3, #7
 8006790:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	617b      	str	r3, [r7, #20]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01f      	beq.n	80067f8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	e012      	b.n	80067e4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	7819      	ldrb	r1, [r3, #0]
 80067c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	3334      	adds	r3, #52	; 0x34
 80067ce:	460a      	mov	r2, r1
 80067d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d006      	beq.n	80067ec <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	3301      	adds	r3, #1
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d9e9      	bls.n	80067be <prvInitialiseNewTask+0x54>
 80067ea:	e000      	b.n	80067ee <prvInitialiseNewTask+0x84>
			{
				break;
 80067ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f6:	e003      	b.n	8006800 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2b06      	cmp	r3, #6
 8006804:	d901      	bls.n	800680a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006806:	2306      	movs	r3, #6
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006814:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	2200      	movs	r2, #0
 800681a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	3304      	adds	r3, #4
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fe6c 	bl	80064fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	3318      	adds	r3, #24
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fe67 	bl	80064fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006834:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	f1c3 0207 	rsb	r2, r3, #7
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006844:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2200      	movs	r2, #0
 800684a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	69b8      	ldr	r0, [r7, #24]
 800685a:	f000 fc23 	bl	80070a4 <pxPortInitialiseStack>
 800685e:	4602      	mov	r2, r0
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006870:	bf00      	nop
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006880:	f000 fd40 	bl	8007304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006884:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <prvAddNewTaskToReadyList+0xb8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	4a29      	ldr	r2, [pc, #164]	; (8006930 <prvAddNewTaskToReadyList+0xb8>)
 800688c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800688e:	4b29      	ldr	r3, [pc, #164]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006896:	4a27      	ldr	r2, [pc, #156]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <prvAddNewTaskToReadyList+0xb8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d110      	bne.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068a4:	f000 fabc 	bl	8006e20 <prvInitialiseTaskLists>
 80068a8:	e00d      	b.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068aa:	4b23      	ldr	r3, [pc, #140]	; (8006938 <prvAddNewTaskToReadyList+0xc0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	429a      	cmp	r2, r3
 80068be:	d802      	bhi.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068c0:	4a1c      	ldr	r2, [pc, #112]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <prvAddNewTaskToReadyList+0xc4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <prvAddNewTaskToReadyList+0xc4>)
 80068ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	2201      	movs	r2, #1
 80068d6:	409a      	lsls	r2, r3
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <prvAddNewTaskToReadyList+0xc8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4313      	orrs	r3, r2
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <prvAddNewTaskToReadyList+0xc8>)
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4a15      	ldr	r2, [pc, #84]	; (8006944 <prvAddNewTaskToReadyList+0xcc>)
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7ff fe0d 	bl	8006518 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068fe:	f000 fd31 	bl	8007364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <prvAddNewTaskToReadyList+0xc0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00e      	beq.n	8006928 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d207      	bcs.n	8006928 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006918:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <prvAddNewTaskToReadyList+0xd0>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	200008ac 	.word	0x200008ac
 8006934:	200007ac 	.word	0x200007ac
 8006938:	200008b8 	.word	0x200008b8
 800693c:	200008c8 	.word	0x200008c8
 8006940:	200008b4 	.word	0x200008b4
 8006944:	200007b0 	.word	0x200007b0
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d017      	beq.n	800698e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <vTaskDelay+0x60>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <vTaskDelay+0x30>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60bb      	str	r3, [r7, #8]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800697c:	f000 f87a 	bl	8006a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fb28 	bl	8006fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006988:	f000 f882 	bl	8006a90 <xTaskResumeAll>
 800698c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d107      	bne.n	80069a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <vTaskDelay+0x64>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200008d4 	.word	0x200008d4
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	; 0x28
 80069b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069c2:	463a      	mov	r2, r7
 80069c4:	1d39      	adds	r1, r7, #4
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fb fb2e 	bl	800202c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	9202      	str	r2, [sp, #8]
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	2300      	movs	r3, #0
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2300      	movs	r3, #0
 80069e0:	460a      	mov	r2, r1
 80069e2:	491e      	ldr	r1, [pc, #120]	; (8006a5c <vTaskStartScheduler+0xa8>)
 80069e4:	481e      	ldr	r0, [pc, #120]	; (8006a60 <vTaskStartScheduler+0xac>)
 80069e6:	f7ff fe1e 	bl	8006626 <xTaskCreateStatic>
 80069ea:	4603      	mov	r3, r0
 80069ec:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <vTaskStartScheduler+0xb0>)
 80069ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069f0:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <vTaskStartScheduler+0xb0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e001      	b.n	8006a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d116      	bne.n	8006a36 <vTaskStartScheduler+0x82>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	613b      	str	r3, [r7, #16]
}
 8006a1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <vTaskStartScheduler+0xb4>)
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a24:	4b11      	ldr	r3, [pc, #68]	; (8006a6c <vTaskStartScheduler+0xb8>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <vTaskStartScheduler+0xbc>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a30:	f000 fbc6 	bl	80071c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a34:	e00e      	b.n	8006a54 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d10a      	bne.n	8006a54 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	60fb      	str	r3, [r7, #12]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <vTaskStartScheduler+0x9e>
}
 8006a54:	bf00      	nop
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	0800d06c 	.word	0x0800d06c
 8006a60:	08006df1 	.word	0x08006df1
 8006a64:	200008d0 	.word	0x200008d0
 8006a68:	200008cc 	.word	0x200008cc
 8006a6c:	200008b8 	.word	0x200008b8
 8006a70:	200008b0 	.word	0x200008b0

08006a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <vTaskSuspendAll+0x18>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	4a03      	ldr	r2, [pc, #12]	; (8006a8c <vTaskSuspendAll+0x18>)
 8006a80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	200008d4 	.word	0x200008d4

08006a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a9e:	4b41      	ldr	r3, [pc, #260]	; (8006ba4 <xTaskResumeAll+0x114>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <xTaskResumeAll+0x2c>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	603b      	str	r3, [r7, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	e7fe      	b.n	8006aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006abc:	f000 fc22 	bl	8007304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ac0:	4b38      	ldr	r3, [pc, #224]	; (8006ba4 <xTaskResumeAll+0x114>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	4a37      	ldr	r2, [pc, #220]	; (8006ba4 <xTaskResumeAll+0x114>)
 8006ac8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b36      	ldr	r3, [pc, #216]	; (8006ba4 <xTaskResumeAll+0x114>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d161      	bne.n	8006b96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ad2:	4b35      	ldr	r3, [pc, #212]	; (8006ba8 <xTaskResumeAll+0x118>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d05d      	beq.n	8006b96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ada:	e02e      	b.n	8006b3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006adc:	4b33      	ldr	r3, [pc, #204]	; (8006bac <xTaskResumeAll+0x11c>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fd72 	bl	80065d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3304      	adds	r3, #4
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fd6d 	bl	80065d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	2201      	movs	r2, #1
 8006afe:	409a      	lsls	r2, r3
 8006b00:	4b2b      	ldr	r3, [pc, #172]	; (8006bb0 <xTaskResumeAll+0x120>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <xTaskResumeAll+0x120>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <xTaskResumeAll+0x124>)
 8006b18:	441a      	add	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7ff fcf9 	bl	8006518 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2a:	4b23      	ldr	r3, [pc, #140]	; (8006bb8 <xTaskResumeAll+0x128>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006b34:	4b21      	ldr	r3, [pc, #132]	; (8006bbc <xTaskResumeAll+0x12c>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b3a:	4b1c      	ldr	r3, [pc, #112]	; (8006bac <xTaskResumeAll+0x11c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1cc      	bne.n	8006adc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b48:	f000 fa08 	bl	8006f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b4c:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <xTaskResumeAll+0x130>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b58:	f000 f836 	bl	8006bc8 <xTaskIncrementTick>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b62:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <xTaskResumeAll+0x12c>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f1      	bne.n	8006b58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006b74:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <xTaskResumeAll+0x130>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <xTaskResumeAll+0x12c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <xTaskResumeAll+0x134>)
 8006b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b96:	f000 fbe5 	bl	8007364 <vPortExitCritical>

	return xAlreadyYielded;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	200008d4 	.word	0x200008d4
 8006ba8:	200008ac 	.word	0x200008ac
 8006bac:	2000086c 	.word	0x2000086c
 8006bb0:	200008b4 	.word	0x200008b4
 8006bb4:	200007b0 	.word	0x200007b0
 8006bb8:	200007ac 	.word	0x200007ac
 8006bbc:	200008c0 	.word	0x200008c0
 8006bc0:	200008bc 	.word	0x200008bc
 8006bc4:	e000ed04 	.word	0xe000ed04

08006bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd2:	4b4e      	ldr	r3, [pc, #312]	; (8006d0c <xTaskIncrementTick+0x144>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f040 808e 	bne.w	8006cf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bdc:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <xTaskIncrementTick+0x148>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006be4:	4a4a      	ldr	r2, [pc, #296]	; (8006d10 <xTaskIncrementTick+0x148>)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d120      	bne.n	8006c32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bf0:	4b48      	ldr	r3, [pc, #288]	; (8006d14 <xTaskIncrementTick+0x14c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <xTaskIncrementTick+0x48>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	603b      	str	r3, [r7, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <xTaskIncrementTick+0x46>
 8006c10:	4b40      	ldr	r3, [pc, #256]	; (8006d14 <xTaskIncrementTick+0x14c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <xTaskIncrementTick+0x150>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a3e      	ldr	r2, [pc, #248]	; (8006d14 <xTaskIncrementTick+0x14c>)
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4a3e      	ldr	r2, [pc, #248]	; (8006d18 <xTaskIncrementTick+0x150>)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	4b3d      	ldr	r3, [pc, #244]	; (8006d1c <xTaskIncrementTick+0x154>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	4a3c      	ldr	r2, [pc, #240]	; (8006d1c <xTaskIncrementTick+0x154>)
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	f000 f995 	bl	8006f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c32:	4b3b      	ldr	r3, [pc, #236]	; (8006d20 <xTaskIncrementTick+0x158>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d348      	bcc.n	8006cce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c3c:	4b35      	ldr	r3, [pc, #212]	; (8006d14 <xTaskIncrementTick+0x14c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <xTaskIncrementTick+0x158>)
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4c:	601a      	str	r2, [r3, #0]
					break;
 8006c4e:	e03e      	b.n	8006cce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c50:	4b30      	ldr	r3, [pc, #192]	; (8006d14 <xTaskIncrementTick+0x14c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d203      	bcs.n	8006c70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c68:	4a2d      	ldr	r2, [pc, #180]	; (8006d20 <xTaskIncrementTick+0x158>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c6e:	e02e      	b.n	8006cce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fcac 	bl	80065d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	3318      	adds	r3, #24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fca3 	bl	80065d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	2201      	movs	r2, #1
 8006c92:	409a      	lsls	r2, r3
 8006c94:	4b23      	ldr	r3, [pc, #140]	; (8006d24 <xTaskIncrementTick+0x15c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <xTaskIncrementTick+0x15c>)
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <xTaskIncrementTick+0x160>)
 8006cac:	441a      	add	r2, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f7ff fc2f 	bl	8006518 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	4b1b      	ldr	r3, [pc, #108]	; (8006d2c <xTaskIncrementTick+0x164>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d3b9      	bcc.n	8006c3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ccc:	e7b6      	b.n	8006c3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cce:	4b17      	ldr	r3, [pc, #92]	; (8006d2c <xTaskIncrementTick+0x164>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	4914      	ldr	r1, [pc, #80]	; (8006d28 <xTaskIncrementTick+0x160>)
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d901      	bls.n	8006cea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cea:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <xTaskIncrementTick+0x168>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e004      	b.n	8006d02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cf8:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <xTaskIncrementTick+0x16c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	4a0d      	ldr	r2, [pc, #52]	; (8006d34 <xTaskIncrementTick+0x16c>)
 8006d00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d02:	697b      	ldr	r3, [r7, #20]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	200008d4 	.word	0x200008d4
 8006d10:	200008b0 	.word	0x200008b0
 8006d14:	20000864 	.word	0x20000864
 8006d18:	20000868 	.word	0x20000868
 8006d1c:	200008c4 	.word	0x200008c4
 8006d20:	200008cc 	.word	0x200008cc
 8006d24:	200008b4 	.word	0x200008b4
 8006d28:	200007b0 	.word	0x200007b0
 8006d2c:	200007ac 	.word	0x200007ac
 8006d30:	200008c0 	.word	0x200008c0
 8006d34:	200008bc 	.word	0x200008bc

08006d38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d3e:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <vTaskSwitchContext+0xa4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d46:	4b26      	ldr	r3, [pc, #152]	; (8006de0 <vTaskSwitchContext+0xa8>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d4c:	e03f      	b.n	8006dce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006d4e:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <vTaskSwitchContext+0xa8>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d54:	4b23      	ldr	r3, [pc, #140]	; (8006de4 <vTaskSwitchContext+0xac>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	fab3 f383 	clz	r3, r3
 8006d60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	f1c3 031f 	rsb	r3, r3, #31
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	491f      	ldr	r1, [pc, #124]	; (8006de8 <vTaskSwitchContext+0xb0>)
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10a      	bne.n	8006d94 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <vTaskSwitchContext+0x5a>
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <vTaskSwitchContext+0xb0>)
 8006da0:	4413      	add	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	3308      	adds	r3, #8
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d104      	bne.n	8006dc4 <vTaskSwitchContext+0x8c>
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	605a      	str	r2, [r3, #4]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	4a08      	ldr	r2, [pc, #32]	; (8006dec <vTaskSwitchContext+0xb4>)
 8006dcc:	6013      	str	r3, [r2, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	200008d4 	.word	0x200008d4
 8006de0:	200008c0 	.word	0x200008c0
 8006de4:	200008b4 	.word	0x200008b4
 8006de8:	200007b0 	.word	0x200007b0
 8006dec:	200007ac 	.word	0x200007ac

08006df0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006df8:	f000 f852 	bl	8006ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <prvIdleTask+0x28>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d9f9      	bls.n	8006df8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <prvIdleTask+0x2c>)
 8006e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e14:	e7f0      	b.n	8006df8 <prvIdleTask+0x8>
 8006e16:	bf00      	nop
 8006e18:	200007b0 	.word	0x200007b0
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e26:	2300      	movs	r3, #0
 8006e28:	607b      	str	r3, [r7, #4]
 8006e2a:	e00c      	b.n	8006e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <prvInitialiseTaskLists+0x60>)
 8006e38:	4413      	add	r3, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fb3f 	bl	80064be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3301      	adds	r3, #1
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b06      	cmp	r3, #6
 8006e4a:	d9ef      	bls.n	8006e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e4c:	480d      	ldr	r0, [pc, #52]	; (8006e84 <prvInitialiseTaskLists+0x64>)
 8006e4e:	f7ff fb36 	bl	80064be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e52:	480d      	ldr	r0, [pc, #52]	; (8006e88 <prvInitialiseTaskLists+0x68>)
 8006e54:	f7ff fb33 	bl	80064be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e58:	480c      	ldr	r0, [pc, #48]	; (8006e8c <prvInitialiseTaskLists+0x6c>)
 8006e5a:	f7ff fb30 	bl	80064be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e5e:	480c      	ldr	r0, [pc, #48]	; (8006e90 <prvInitialiseTaskLists+0x70>)
 8006e60:	f7ff fb2d 	bl	80064be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e64:	480b      	ldr	r0, [pc, #44]	; (8006e94 <prvInitialiseTaskLists+0x74>)
 8006e66:	f7ff fb2a 	bl	80064be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <prvInitialiseTaskLists+0x78>)
 8006e6c:	4a05      	ldr	r2, [pc, #20]	; (8006e84 <prvInitialiseTaskLists+0x64>)
 8006e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <prvInitialiseTaskLists+0x7c>)
 8006e72:	4a05      	ldr	r2, [pc, #20]	; (8006e88 <prvInitialiseTaskLists+0x68>)
 8006e74:	601a      	str	r2, [r3, #0]
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200007b0 	.word	0x200007b0
 8006e84:	2000083c 	.word	0x2000083c
 8006e88:	20000850 	.word	0x20000850
 8006e8c:	2000086c 	.word	0x2000086c
 8006e90:	20000880 	.word	0x20000880
 8006e94:	20000898 	.word	0x20000898
 8006e98:	20000864 	.word	0x20000864
 8006e9c:	20000868 	.word	0x20000868

08006ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ea6:	e019      	b.n	8006edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ea8:	f000 fa2c 	bl	8007304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eac:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <prvCheckTasksWaitingTermination+0x50>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fb8a 	bl	80065d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <prvCheckTasksWaitingTermination+0x54>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	4a0b      	ldr	r2, [pc, #44]	; (8006ef4 <prvCheckTasksWaitingTermination+0x54>)
 8006ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <prvCheckTasksWaitingTermination+0x58>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <prvCheckTasksWaitingTermination+0x58>)
 8006ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ed2:	f000 fa47 	bl	8007364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f810 	bl	8006efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <prvCheckTasksWaitingTermination+0x58>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e1      	bne.n	8006ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000880 	.word	0x20000880
 8006ef4:	200008ac 	.word	0x200008ac
 8006ef8:	20000894 	.word	0x20000894

08006efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d108      	bne.n	8006f20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fba4 	bl	8007660 <vPortFree>
				vPortFree( pxTCB );
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fba1 	bl	8007660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f1e:	e018      	b.n	8006f52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d103      	bne.n	8006f32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fb98 	bl	8007660 <vPortFree>
	}
 8006f30:	e00f      	b.n	8006f52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d00a      	beq.n	8006f52 <prvDeleteTCB+0x56>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <prvDeleteTCB+0x54>
	}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <prvResetNextTaskUnblockTime+0x38>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <prvResetNextTaskUnblockTime+0x3c>)
 8006f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f74:	e008      	b.n	8006f88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <prvResetNextTaskUnblockTime+0x38>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <prvResetNextTaskUnblockTime+0x3c>)
 8006f86:	6013      	str	r3, [r2, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000864 	.word	0x20000864
 8006f98:	200008cc 	.word	0x200008cc

08006f9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fa2:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <xTaskGetSchedulerState+0x34>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006faa:	2301      	movs	r3, #1
 8006fac:	607b      	str	r3, [r7, #4]
 8006fae:	e008      	b.n	8006fc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb0:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <xTaskGetSchedulerState+0x38>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	e001      	b.n	8006fc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fc2:	687b      	ldr	r3, [r7, #4]
	}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	200008b8 	.word	0x200008b8
 8006fd4:	200008d4 	.word	0x200008d4

08006fd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fe2:	4b29      	ldr	r3, [pc, #164]	; (8007088 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe8:	4b28      	ldr	r3, [pc, #160]	; (800708c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3304      	adds	r3, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff faef 	bl	80065d2 <uxListRemove>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ffa:	4b24      	ldr	r3, [pc, #144]	; (800708c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	2201      	movs	r2, #1
 8007002:	fa02 f303 	lsl.w	r3, r2, r3
 8007006:	43da      	mvns	r2, r3
 8007008:	4b21      	ldr	r3, [pc, #132]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4013      	ands	r3, r2
 800700e:	4a20      	ldr	r2, [pc, #128]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007010:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d10a      	bne.n	8007030 <prvAddCurrentTaskToDelayedList+0x58>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007020:	4b1a      	ldr	r3, [pc, #104]	; (800708c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3304      	adds	r3, #4
 8007026:	4619      	mov	r1, r3
 8007028:	481a      	ldr	r0, [pc, #104]	; (8007094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800702a:	f7ff fa75 	bl	8006518 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800702e:	e026      	b.n	800707e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007038:	4b14      	ldr	r3, [pc, #80]	; (800708c <prvAddCurrentTaskToDelayedList+0xb4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	429a      	cmp	r2, r3
 8007046:	d209      	bcs.n	800705c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007048:	4b13      	ldr	r3, [pc, #76]	; (8007098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <prvAddCurrentTaskToDelayedList+0xb4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7ff fa83 	bl	8006560 <vListInsert>
}
 800705a:	e010      	b.n	800707e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800705c:	4b0f      	ldr	r3, [pc, #60]	; (800709c <prvAddCurrentTaskToDelayedList+0xc4>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f7ff fa79 	bl	8006560 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	429a      	cmp	r2, r3
 8007076:	d202      	bcs.n	800707e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007078:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6013      	str	r3, [r2, #0]
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200008b0 	.word	0x200008b0
 800708c:	200007ac 	.word	0x200007ac
 8007090:	200008b4 	.word	0x200008b4
 8007094:	20000898 	.word	0x20000898
 8007098:	20000868 	.word	0x20000868
 800709c:	20000864 	.word	0x20000864
 80070a0:	200008cc 	.word	0x200008cc

080070a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3b04      	subs	r3, #4
 80070b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3b04      	subs	r3, #4
 80070c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f023 0201 	bic.w	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3b04      	subs	r3, #4
 80070d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070d4:	4a0c      	ldr	r2, [pc, #48]	; (8007108 <pxPortInitialiseStack+0x64>)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3b14      	subs	r3, #20
 80070de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3b04      	subs	r3, #4
 80070ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f06f 0202 	mvn.w	r2, #2
 80070f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3b20      	subs	r3, #32
 80070f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070fa:	68fb      	ldr	r3, [r7, #12]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	0800710d 	.word	0x0800710d

0800710c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007116:	4b12      	ldr	r3, [pc, #72]	; (8007160 <prvTaskExitError+0x54>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711e:	d00a      	beq.n	8007136 <prvTaskExitError+0x2a>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <prvTaskExitError+0x28>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	60bb      	str	r3, [r7, #8]
}
 8007148:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800714a:	bf00      	nop
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0fc      	beq.n	800714c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	20000010 	.word	0x20000010
	...

08007170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <pxCurrentTCBConst2>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	f380 8809 	msr	PSP, r0
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	4770      	bx	lr
 800718c:	f3af 8000 	nop.w

08007190 <pxCurrentTCBConst2>:
 8007190:	200007ac 	.word	0x200007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop

08007198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007198:	4808      	ldr	r0, [pc, #32]	; (80071bc <prvPortStartFirstTask+0x24>)
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	6800      	ldr	r0, [r0, #0]
 800719e:	f380 8808 	msr	MSP, r0
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f380 8814 	msr	CONTROL, r0
 80071aa:	b662      	cpsie	i
 80071ac:	b661      	cpsie	f
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	df00      	svc	0
 80071b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ba:	bf00      	nop
 80071bc:	e000ed08 	.word	0xe000ed08

080071c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071c6:	4b46      	ldr	r3, [pc, #280]	; (80072e0 <xPortStartScheduler+0x120>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a46      	ldr	r2, [pc, #280]	; (80072e4 <xPortStartScheduler+0x124>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d10a      	bne.n	80071e6 <xPortStartScheduler+0x26>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071e6:	4b3e      	ldr	r3, [pc, #248]	; (80072e0 <xPortStartScheduler+0x120>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a3f      	ldr	r2, [pc, #252]	; (80072e8 <xPortStartScheduler+0x128>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d10a      	bne.n	8007206 <xPortStartScheduler+0x46>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	60fb      	str	r3, [r7, #12]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007206:	4b39      	ldr	r3, [pc, #228]	; (80072ec <xPortStartScheduler+0x12c>)
 8007208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	22ff      	movs	r2, #255	; 0xff
 8007216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007228:	b2da      	uxtb	r2, r3
 800722a:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <xPortStartScheduler+0x130>)
 800722c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800722e:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <xPortStartScheduler+0x134>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007234:	e009      	b.n	800724a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007236:	4b2f      	ldr	r3, [pc, #188]	; (80072f4 <xPortStartScheduler+0x134>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3b01      	subs	r3, #1
 800723c:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <xPortStartScheduler+0x134>)
 800723e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	b2db      	uxtb	r3, r3
 8007248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d0ef      	beq.n	8007236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007256:	4b27      	ldr	r3, [pc, #156]	; (80072f4 <xPortStartScheduler+0x134>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f1c3 0307 	rsb	r3, r3, #7
 800725e:	2b04      	cmp	r3, #4
 8007260:	d00a      	beq.n	8007278 <xPortStartScheduler+0xb8>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60bb      	str	r3, [r7, #8]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007278:	4b1e      	ldr	r3, [pc, #120]	; (80072f4 <xPortStartScheduler+0x134>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <xPortStartScheduler+0x134>)
 8007280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007282:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <xPortStartScheduler+0x134>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800728a:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <xPortStartScheduler+0x134>)
 800728c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007296:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <xPortStartScheduler+0x138>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <xPortStartScheduler+0x138>)
 800729c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <xPortStartScheduler+0x138>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <xPortStartScheduler+0x138>)
 80072a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072ae:	f000 f8dd 	bl	800746c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072b2:	4b12      	ldr	r3, [pc, #72]	; (80072fc <xPortStartScheduler+0x13c>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072b8:	f000 f8fc 	bl	80074b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072bc:	4b10      	ldr	r3, [pc, #64]	; (8007300 <xPortStartScheduler+0x140>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <xPortStartScheduler+0x140>)
 80072c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072c8:	f7ff ff66 	bl	8007198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072cc:	f7ff fd34 	bl	8006d38 <vTaskSwitchContext>
	prvTaskExitError();
 80072d0:	f7ff ff1c 	bl	800710c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	e000ed00 	.word	0xe000ed00
 80072e4:	410fc271 	.word	0x410fc271
 80072e8:	410fc270 	.word	0x410fc270
 80072ec:	e000e400 	.word	0xe000e400
 80072f0:	200008d8 	.word	0x200008d8
 80072f4:	200008dc 	.word	0x200008dc
 80072f8:	e000ed20 	.word	0xe000ed20
 80072fc:	20000010 	.word	0x20000010
 8007300:	e000ef34 	.word	0xe000ef34

08007304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	607b      	str	r3, [r7, #4]
}
 800731c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800731e:	4b0f      	ldr	r3, [pc, #60]	; (800735c <vPortEnterCritical+0x58>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	4a0d      	ldr	r2, [pc, #52]	; (800735c <vPortEnterCritical+0x58>)
 8007326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <vPortEnterCritical+0x58>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d10f      	bne.n	8007350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007330:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <vPortEnterCritical+0x5c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <vPortEnterCritical+0x4c>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	603b      	str	r3, [r7, #0]
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <vPortEnterCritical+0x4a>
	}
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000010 	.word	0x20000010
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800736a:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <vPortExitCritical+0x50>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <vPortExitCritical+0x24>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	607b      	str	r3, [r7, #4]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007388:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <vPortExitCritical+0x50>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3b01      	subs	r3, #1
 800738e:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <vPortExitCritical+0x50>)
 8007390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <vPortExitCritical+0x50>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <vPortExitCritical+0x42>
 800739a:	2300      	movs	r3, #0
 800739c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000010 	.word	0x20000010
	...

080073c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073c0:	f3ef 8009 	mrs	r0, PSP
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4b15      	ldr	r3, [pc, #84]	; (8007420 <pxCurrentTCBConst>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	f01e 0f10 	tst.w	lr, #16
 80073d0:	bf08      	it	eq
 80073d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	6010      	str	r0, [r2, #0]
 80073dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073e4:	f380 8811 	msr	BASEPRI, r0
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f7ff fca2 	bl	8006d38 <vTaskSwitchContext>
 80073f4:	f04f 0000 	mov.w	r0, #0
 80073f8:	f380 8811 	msr	BASEPRI, r0
 80073fc:	bc09      	pop	{r0, r3}
 80073fe:	6819      	ldr	r1, [r3, #0]
 8007400:	6808      	ldr	r0, [r1, #0]
 8007402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007406:	f01e 0f10 	tst.w	lr, #16
 800740a:	bf08      	it	eq
 800740c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007410:	f380 8809 	msr	PSP, r0
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst>:
 8007420:	200007ac 	.word	0x200007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007442:	f7ff fbc1 	bl	8006bc8 <xTaskIncrementTick>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <xPortSysTickHandler+0x40>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f383 8811 	msr	BASEPRI, r3
}
 800745e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <vPortSetupTimerInterrupt+0x38>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <vPortSetupTimerInterrupt+0x3c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <vPortSetupTimerInterrupt+0x40>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	099b      	lsrs	r3, r3, #6
 8007488:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <vPortSetupTimerInterrupt+0x44>)
 800748a:	3b01      	subs	r3, #1
 800748c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800748e:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007490:	2207      	movs	r2, #7
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	e000e010 	.word	0xe000e010
 80074a4:	e000e018 	.word	0xe000e018
 80074a8:	20000004 	.word	0x20000004
 80074ac:	10624dd3 	.word	0x10624dd3
 80074b0:	e000e014 	.word	0xe000e014

080074b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074c4 <vPortEnableVFP+0x10>
 80074b8:	6801      	ldr	r1, [r0, #0]
 80074ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074be:	6001      	str	r1, [r0, #0]
 80074c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074c2:	bf00      	nop
 80074c4:	e000ed88 	.word	0xe000ed88

080074c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074d4:	f7ff face 	bl	8006a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074d8:	4b5b      	ldr	r3, [pc, #364]	; (8007648 <pvPortMalloc+0x180>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e0:	f000 f920 	bl	8007724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074e4:	4b59      	ldr	r3, [pc, #356]	; (800764c <pvPortMalloc+0x184>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 8093 	bne.w	8007618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01d      	beq.n	8007534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d014      	beq.n	8007534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <pvPortMalloc+0x6c>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	617b      	str	r3, [r7, #20]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d06e      	beq.n	8007618 <pvPortMalloc+0x150>
 800753a:	4b45      	ldr	r3, [pc, #276]	; (8007650 <pvPortMalloc+0x188>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d869      	bhi.n	8007618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007544:	4b43      	ldr	r3, [pc, #268]	; (8007654 <pvPortMalloc+0x18c>)
 8007546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007548:	4b42      	ldr	r3, [pc, #264]	; (8007654 <pvPortMalloc+0x18c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754e:	e004      	b.n	800755a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d903      	bls.n	800756c <pvPortMalloc+0xa4>
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f1      	bne.n	8007550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800756c:	4b36      	ldr	r3, [pc, #216]	; (8007648 <pvPortMalloc+0x180>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007572:	429a      	cmp	r2, r3
 8007574:	d050      	beq.n	8007618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2208      	movs	r2, #8
 800757c:	4413      	add	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	2308      	movs	r3, #8
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	429a      	cmp	r2, r3
 8007596:	d91f      	bls.n	80075d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <pvPortMalloc+0xf8>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	613b      	str	r3, [r7, #16]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075d2:	69b8      	ldr	r0, [r7, #24]
 80075d4:	f000 f908 	bl	80077e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075d8:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <pvPortMalloc+0x188>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <pvPortMalloc+0x188>)
 80075e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <pvPortMalloc+0x188>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <pvPortMalloc+0x190>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d203      	bcs.n	80075fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <pvPortMalloc+0x188>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a18      	ldr	r2, [pc, #96]	; (8007658 <pvPortMalloc+0x190>)
 80075f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	4b13      	ldr	r3, [pc, #76]	; (800764c <pvPortMalloc+0x184>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	431a      	orrs	r2, r3
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <pvPortMalloc+0x194>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <pvPortMalloc+0x194>)
 8007616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007618:	f7ff fa3a 	bl	8006a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <pvPortMalloc+0x174>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <pvPortMalloc+0x172>
	return pvReturn;
 800763c:	69fb      	ldr	r3, [r7, #28]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	; 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200044e8 	.word	0x200044e8
 800764c:	200044fc 	.word	0x200044fc
 8007650:	200044ec 	.word	0x200044ec
 8007654:	200044e0 	.word	0x200044e0
 8007658:	200044f0 	.word	0x200044f0
 800765c:	200044f4 	.word	0x200044f4

08007660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d04d      	beq.n	800770e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007672:	2308      	movs	r3, #8
 8007674:	425b      	negs	r3, r3
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4413      	add	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	4b24      	ldr	r3, [pc, #144]	; (8007718 <vPortFree+0xb8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <vPortFree+0x44>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60fb      	str	r3, [r7, #12]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <vPortFree+0x62>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60bb      	str	r3, [r7, #8]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <vPortFree+0xb8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01e      	beq.n	800770e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11a      	bne.n	800770e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <vPortFree+0xb8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	401a      	ands	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076e8:	f7ff f9c4 	bl	8006a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <vPortFree+0xbc>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	4a09      	ldr	r2, [pc, #36]	; (800771c <vPortFree+0xbc>)
 80076f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076fa:	6938      	ldr	r0, [r7, #16]
 80076fc:	f000 f874 	bl	80077e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <vPortFree+0xc0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	4a06      	ldr	r2, [pc, #24]	; (8007720 <vPortFree+0xc0>)
 8007708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800770a:	f7ff f9c1 	bl	8006a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800770e:	bf00      	nop
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	200044fc 	.word	0x200044fc
 800771c:	200044ec 	.word	0x200044ec
 8007720:	200044f8 	.word	0x200044f8

08007724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800772a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800772e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007730:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <prvHeapInit+0xac>)
 8007732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3307      	adds	r3, #7
 8007742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0307 	bic.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <prvHeapInit+0xac>)
 8007754:	4413      	add	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <prvHeapInit+0xb0>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <prvHeapInit+0xb0>)
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007770:	2208      	movs	r2, #8
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <prvHeapInit+0xb4>)
 8007784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <prvHeapInit+0xb4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <prvHeapInit+0xb4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077a4:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <prvHeapInit+0xb4>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <prvHeapInit+0xb8>)
 80077b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <prvHeapInit+0xbc>)
 80077ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <prvHeapInit+0xc0>)
 80077be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	200008e0 	.word	0x200008e0
 80077d4:	200044e0 	.word	0x200044e0
 80077d8:	200044e8 	.word	0x200044e8
 80077dc:	200044f0 	.word	0x200044f0
 80077e0:	200044ec 	.word	0x200044ec
 80077e4:	200044fc 	.word	0x200044fc

080077e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077f0:	4b28      	ldr	r3, [pc, #160]	; (8007894 <prvInsertBlockIntoFreeList+0xac>)
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e002      	b.n	80077fc <prvInsertBlockIntoFreeList+0x14>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	d8f7      	bhi.n	80077f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4413      	add	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d108      	bne.n	800782a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d118      	bne.n	8007870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4b15      	ldr	r3, [pc, #84]	; (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d00d      	beq.n	8007866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e008      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e003      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	429a      	cmp	r2, r3
 800787e:	d002      	beq.n	8007886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	200044e0 	.word	0x200044e0
 8007898:	200044e8 	.word	0x200044e8

0800789c <__cvt>:
 800789c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	ec55 4b10 	vmov	r4, r5, d0
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	460e      	mov	r6, r1
 80078a8:	4619      	mov	r1, r3
 80078aa:	462b      	mov	r3, r5
 80078ac:	bfbb      	ittet	lt
 80078ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078b2:	461d      	movlt	r5, r3
 80078b4:	2300      	movge	r3, #0
 80078b6:	232d      	movlt	r3, #45	; 0x2d
 80078b8:	700b      	strb	r3, [r1, #0]
 80078ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078c0:	4691      	mov	r9, r2
 80078c2:	f023 0820 	bic.w	r8, r3, #32
 80078c6:	bfbc      	itt	lt
 80078c8:	4622      	movlt	r2, r4
 80078ca:	4614      	movlt	r4, r2
 80078cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078d0:	d005      	beq.n	80078de <__cvt+0x42>
 80078d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078d6:	d100      	bne.n	80078da <__cvt+0x3e>
 80078d8:	3601      	adds	r6, #1
 80078da:	2102      	movs	r1, #2
 80078dc:	e000      	b.n	80078e0 <__cvt+0x44>
 80078de:	2103      	movs	r1, #3
 80078e0:	ab03      	add	r3, sp, #12
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	ab02      	add	r3, sp, #8
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	ec45 4b10 	vmov	d0, r4, r5
 80078ec:	4653      	mov	r3, sl
 80078ee:	4632      	mov	r2, r6
 80078f0:	f001 f88e 	bl	8008a10 <_dtoa_r>
 80078f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078f8:	4607      	mov	r7, r0
 80078fa:	d102      	bne.n	8007902 <__cvt+0x66>
 80078fc:	f019 0f01 	tst.w	r9, #1
 8007900:	d022      	beq.n	8007948 <__cvt+0xac>
 8007902:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007906:	eb07 0906 	add.w	r9, r7, r6
 800790a:	d110      	bne.n	800792e <__cvt+0x92>
 800790c:	783b      	ldrb	r3, [r7, #0]
 800790e:	2b30      	cmp	r3, #48	; 0x30
 8007910:	d10a      	bne.n	8007928 <__cvt+0x8c>
 8007912:	2200      	movs	r2, #0
 8007914:	2300      	movs	r3, #0
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	f7f9 f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800791e:	b918      	cbnz	r0, 8007928 <__cvt+0x8c>
 8007920:	f1c6 0601 	rsb	r6, r6, #1
 8007924:	f8ca 6000 	str.w	r6, [sl]
 8007928:	f8da 3000 	ldr.w	r3, [sl]
 800792c:	4499      	add	r9, r3
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	4620      	mov	r0, r4
 8007934:	4629      	mov	r1, r5
 8007936:	f7f9 f8cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800793a:	b108      	cbz	r0, 8007940 <__cvt+0xa4>
 800793c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007940:	2230      	movs	r2, #48	; 0x30
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	454b      	cmp	r3, r9
 8007946:	d307      	bcc.n	8007958 <__cvt+0xbc>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800794c:	1bdb      	subs	r3, r3, r7
 800794e:	4638      	mov	r0, r7
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	b004      	add	sp, #16
 8007954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007958:	1c59      	adds	r1, r3, #1
 800795a:	9103      	str	r1, [sp, #12]
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	e7f0      	b.n	8007942 <__cvt+0xa6>

08007960 <__exponent>:
 8007960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007962:	4603      	mov	r3, r0
 8007964:	2900      	cmp	r1, #0
 8007966:	bfb8      	it	lt
 8007968:	4249      	neglt	r1, r1
 800796a:	f803 2b02 	strb.w	r2, [r3], #2
 800796e:	bfb4      	ite	lt
 8007970:	222d      	movlt	r2, #45	; 0x2d
 8007972:	222b      	movge	r2, #43	; 0x2b
 8007974:	2909      	cmp	r1, #9
 8007976:	7042      	strb	r2, [r0, #1]
 8007978:	dd2a      	ble.n	80079d0 <__exponent+0x70>
 800797a:	f10d 0207 	add.w	r2, sp, #7
 800797e:	4617      	mov	r7, r2
 8007980:	260a      	movs	r6, #10
 8007982:	4694      	mov	ip, r2
 8007984:	fb91 f5f6 	sdiv	r5, r1, r6
 8007988:	fb06 1415 	mls	r4, r6, r5, r1
 800798c:	3430      	adds	r4, #48	; 0x30
 800798e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007992:	460c      	mov	r4, r1
 8007994:	2c63      	cmp	r4, #99	; 0x63
 8007996:	f102 32ff 	add.w	r2, r2, #4294967295
 800799a:	4629      	mov	r1, r5
 800799c:	dcf1      	bgt.n	8007982 <__exponent+0x22>
 800799e:	3130      	adds	r1, #48	; 0x30
 80079a0:	f1ac 0402 	sub.w	r4, ip, #2
 80079a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079a8:	1c41      	adds	r1, r0, #1
 80079aa:	4622      	mov	r2, r4
 80079ac:	42ba      	cmp	r2, r7
 80079ae:	d30a      	bcc.n	80079c6 <__exponent+0x66>
 80079b0:	f10d 0209 	add.w	r2, sp, #9
 80079b4:	eba2 020c 	sub.w	r2, r2, ip
 80079b8:	42bc      	cmp	r4, r7
 80079ba:	bf88      	it	hi
 80079bc:	2200      	movhi	r2, #0
 80079be:	4413      	add	r3, r2
 80079c0:	1a18      	subs	r0, r3, r0
 80079c2:	b003      	add	sp, #12
 80079c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80079ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80079ce:	e7ed      	b.n	80079ac <__exponent+0x4c>
 80079d0:	2330      	movs	r3, #48	; 0x30
 80079d2:	3130      	adds	r1, #48	; 0x30
 80079d4:	7083      	strb	r3, [r0, #2]
 80079d6:	70c1      	strb	r1, [r0, #3]
 80079d8:	1d03      	adds	r3, r0, #4
 80079da:	e7f1      	b.n	80079c0 <__exponent+0x60>

080079dc <_printf_float>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	ed2d 8b02 	vpush	{d8}
 80079e4:	b08d      	sub	sp, #52	; 0x34
 80079e6:	460c      	mov	r4, r1
 80079e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079ec:	4616      	mov	r6, r2
 80079ee:	461f      	mov	r7, r3
 80079f0:	4605      	mov	r5, r0
 80079f2:	f000 fef7 	bl	80087e4 <_localeconv_r>
 80079f6:	f8d0 a000 	ldr.w	sl, [r0]
 80079fa:	4650      	mov	r0, sl
 80079fc:	f7f8 fc40 	bl	8000280 <strlen>
 8007a00:	2300      	movs	r3, #0
 8007a02:	930a      	str	r3, [sp, #40]	; 0x28
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	9305      	str	r3, [sp, #20]
 8007a08:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a10:	3307      	adds	r3, #7
 8007a12:	f023 0307 	bic.w	r3, r3, #7
 8007a16:	f103 0208 	add.w	r2, r3, #8
 8007a1a:	f8c8 2000 	str.w	r2, [r8]
 8007a1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a26:	9307      	str	r3, [sp, #28]
 8007a28:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a2c:	ee08 0a10 	vmov	s16, r0
 8007a30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a38:	4b9e      	ldr	r3, [pc, #632]	; (8007cb4 <_printf_float+0x2d8>)
 8007a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3e:	f7f9 f87d 	bl	8000b3c <__aeabi_dcmpun>
 8007a42:	bb88      	cbnz	r0, 8007aa8 <_printf_float+0xcc>
 8007a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a48:	4b9a      	ldr	r3, [pc, #616]	; (8007cb4 <_printf_float+0x2d8>)
 8007a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4e:	f7f9 f857 	bl	8000b00 <__aeabi_dcmple>
 8007a52:	bb48      	cbnz	r0, 8007aa8 <_printf_float+0xcc>
 8007a54:	2200      	movs	r2, #0
 8007a56:	2300      	movs	r3, #0
 8007a58:	4640      	mov	r0, r8
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	f7f9 f846 	bl	8000aec <__aeabi_dcmplt>
 8007a60:	b110      	cbz	r0, 8007a68 <_printf_float+0x8c>
 8007a62:	232d      	movs	r3, #45	; 0x2d
 8007a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a68:	4a93      	ldr	r2, [pc, #588]	; (8007cb8 <_printf_float+0x2dc>)
 8007a6a:	4b94      	ldr	r3, [pc, #592]	; (8007cbc <_printf_float+0x2e0>)
 8007a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a70:	bf94      	ite	ls
 8007a72:	4690      	movls	r8, r2
 8007a74:	4698      	movhi	r8, r3
 8007a76:	2303      	movs	r3, #3
 8007a78:	6123      	str	r3, [r4, #16]
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	f023 0304 	bic.w	r3, r3, #4
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	f04f 0900 	mov.w	r9, #0
 8007a86:	9700      	str	r7, [sp, #0]
 8007a88:	4633      	mov	r3, r6
 8007a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 f9da 	bl	8007e48 <_printf_common>
 8007a94:	3001      	adds	r0, #1
 8007a96:	f040 8090 	bne.w	8007bba <_printf_float+0x1de>
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	b00d      	add	sp, #52	; 0x34
 8007aa0:	ecbd 8b02 	vpop	{d8}
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	4640      	mov	r0, r8
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f9 f844 	bl	8000b3c <__aeabi_dcmpun>
 8007ab4:	b140      	cbz	r0, 8007ac8 <_printf_float+0xec>
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfbc      	itt	lt
 8007abc:	232d      	movlt	r3, #45	; 0x2d
 8007abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ac2:	4a7f      	ldr	r2, [pc, #508]	; (8007cc0 <_printf_float+0x2e4>)
 8007ac4:	4b7f      	ldr	r3, [pc, #508]	; (8007cc4 <_printf_float+0x2e8>)
 8007ac6:	e7d1      	b.n	8007a6c <_printf_float+0x90>
 8007ac8:	6863      	ldr	r3, [r4, #4]
 8007aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ace:	9206      	str	r2, [sp, #24]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	d13f      	bne.n	8007b54 <_printf_float+0x178>
 8007ad4:	2306      	movs	r3, #6
 8007ad6:	6063      	str	r3, [r4, #4]
 8007ad8:	9b05      	ldr	r3, [sp, #20]
 8007ada:	6861      	ldr	r1, [r4, #4]
 8007adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007aea:	ab09      	add	r3, sp, #36	; 0x24
 8007aec:	ec49 8b10 	vmov	d0, r8, r9
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	6022      	str	r2, [r4, #0]
 8007af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007af8:	4628      	mov	r0, r5
 8007afa:	f7ff fecf 	bl	800789c <__cvt>
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b02:	2b47      	cmp	r3, #71	; 0x47
 8007b04:	4680      	mov	r8, r0
 8007b06:	d108      	bne.n	8007b1a <_printf_float+0x13e>
 8007b08:	1cc8      	adds	r0, r1, #3
 8007b0a:	db02      	blt.n	8007b12 <_printf_float+0x136>
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	dd41      	ble.n	8007b96 <_printf_float+0x1ba>
 8007b12:	f1ab 0302 	sub.w	r3, fp, #2
 8007b16:	fa5f fb83 	uxtb.w	fp, r3
 8007b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b1e:	d820      	bhi.n	8007b62 <_printf_float+0x186>
 8007b20:	3901      	subs	r1, #1
 8007b22:	465a      	mov	r2, fp
 8007b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b28:	9109      	str	r1, [sp, #36]	; 0x24
 8007b2a:	f7ff ff19 	bl	8007960 <__exponent>
 8007b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b30:	1813      	adds	r3, r2, r0
 8007b32:	2a01      	cmp	r2, #1
 8007b34:	4681      	mov	r9, r0
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	dc02      	bgt.n	8007b40 <_printf_float+0x164>
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	07d2      	lsls	r2, r2, #31
 8007b3e:	d501      	bpl.n	8007b44 <_printf_float+0x168>
 8007b40:	3301      	adds	r3, #1
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d09c      	beq.n	8007a86 <_printf_float+0xaa>
 8007b4c:	232d      	movs	r3, #45	; 0x2d
 8007b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b52:	e798      	b.n	8007a86 <_printf_float+0xaa>
 8007b54:	9a06      	ldr	r2, [sp, #24]
 8007b56:	2a47      	cmp	r2, #71	; 0x47
 8007b58:	d1be      	bne.n	8007ad8 <_printf_float+0xfc>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1bc      	bne.n	8007ad8 <_printf_float+0xfc>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e7b9      	b.n	8007ad6 <_printf_float+0xfa>
 8007b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b66:	d118      	bne.n	8007b9a <_printf_float+0x1be>
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	6863      	ldr	r3, [r4, #4]
 8007b6c:	dd0b      	ble.n	8007b86 <_printf_float+0x1aa>
 8007b6e:	6121      	str	r1, [r4, #16]
 8007b70:	b913      	cbnz	r3, 8007b78 <_printf_float+0x19c>
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	07d0      	lsls	r0, r2, #31
 8007b76:	d502      	bpl.n	8007b7e <_printf_float+0x1a2>
 8007b78:	3301      	adds	r3, #1
 8007b7a:	440b      	add	r3, r1
 8007b7c:	6123      	str	r3, [r4, #16]
 8007b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b80:	f04f 0900 	mov.w	r9, #0
 8007b84:	e7de      	b.n	8007b44 <_printf_float+0x168>
 8007b86:	b913      	cbnz	r3, 8007b8e <_printf_float+0x1b2>
 8007b88:	6822      	ldr	r2, [r4, #0]
 8007b8a:	07d2      	lsls	r2, r2, #31
 8007b8c:	d501      	bpl.n	8007b92 <_printf_float+0x1b6>
 8007b8e:	3302      	adds	r3, #2
 8007b90:	e7f4      	b.n	8007b7c <_printf_float+0x1a0>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e7f2      	b.n	8007b7c <_printf_float+0x1a0>
 8007b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	db05      	blt.n	8007bac <_printf_float+0x1d0>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	6121      	str	r1, [r4, #16]
 8007ba4:	07d8      	lsls	r0, r3, #31
 8007ba6:	d5ea      	bpl.n	8007b7e <_printf_float+0x1a2>
 8007ba8:	1c4b      	adds	r3, r1, #1
 8007baa:	e7e7      	b.n	8007b7c <_printf_float+0x1a0>
 8007bac:	2900      	cmp	r1, #0
 8007bae:	bfd4      	ite	le
 8007bb0:	f1c1 0202 	rsble	r2, r1, #2
 8007bb4:	2201      	movgt	r2, #1
 8007bb6:	4413      	add	r3, r2
 8007bb8:	e7e0      	b.n	8007b7c <_printf_float+0x1a0>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	055a      	lsls	r2, r3, #21
 8007bbe:	d407      	bmi.n	8007bd0 <_printf_float+0x1f4>
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	4642      	mov	r2, r8
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d12c      	bne.n	8007c28 <_printf_float+0x24c>
 8007bce:	e764      	b.n	8007a9a <_printf_float+0xbe>
 8007bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bd4:	f240 80e0 	bls.w	8007d98 <_printf_float+0x3bc>
 8007bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	f7f8 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d034      	beq.n	8007c52 <_printf_float+0x276>
 8007be8:	4a37      	ldr	r2, [pc, #220]	; (8007cc8 <_printf_float+0x2ec>)
 8007bea:	2301      	movs	r3, #1
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f af51 	beq.w	8007a9a <_printf_float+0xbe>
 8007bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	db02      	blt.n	8007c06 <_printf_float+0x22a>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	07d8      	lsls	r0, r3, #31
 8007c04:	d510      	bpl.n	8007c28 <_printf_float+0x24c>
 8007c06:	ee18 3a10 	vmov	r3, s16
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b8      	blx	r7
 8007c12:	3001      	adds	r0, #1
 8007c14:	f43f af41 	beq.w	8007a9a <_printf_float+0xbe>
 8007c18:	f04f 0800 	mov.w	r8, #0
 8007c1c:	f104 091a 	add.w	r9, r4, #26
 8007c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c22:	3b01      	subs	r3, #1
 8007c24:	4543      	cmp	r3, r8
 8007c26:	dc09      	bgt.n	8007c3c <_printf_float+0x260>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	079b      	lsls	r3, r3, #30
 8007c2c:	f100 8107 	bmi.w	8007e3e <_printf_float+0x462>
 8007c30:	68e0      	ldr	r0, [r4, #12]
 8007c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c34:	4298      	cmp	r0, r3
 8007c36:	bfb8      	it	lt
 8007c38:	4618      	movlt	r0, r3
 8007c3a:	e730      	b.n	8007a9e <_printf_float+0xc2>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	464a      	mov	r2, r9
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f af27 	beq.w	8007a9a <_printf_float+0xbe>
 8007c4c:	f108 0801 	add.w	r8, r8, #1
 8007c50:	e7e6      	b.n	8007c20 <_printf_float+0x244>
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dc39      	bgt.n	8007ccc <_printf_float+0x2f0>
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <_printf_float+0x2ec>)
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f af19 	beq.w	8007a9a <_printf_float+0xbe>
 8007c68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	d102      	bne.n	8007c76 <_printf_float+0x29a>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	07d9      	lsls	r1, r3, #31
 8007c74:	d5d8      	bpl.n	8007c28 <_printf_float+0x24c>
 8007c76:	ee18 3a10 	vmov	r3, s16
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f af09 	beq.w	8007a9a <_printf_float+0xbe>
 8007c88:	f04f 0900 	mov.w	r9, #0
 8007c8c:	f104 0a1a 	add.w	sl, r4, #26
 8007c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c92:	425b      	negs	r3, r3
 8007c94:	454b      	cmp	r3, r9
 8007c96:	dc01      	bgt.n	8007c9c <_printf_float+0x2c0>
 8007c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9a:	e792      	b.n	8007bc2 <_printf_float+0x1e6>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4652      	mov	r2, sl
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f aef7 	beq.w	8007a9a <_printf_float+0xbe>
 8007cac:	f109 0901 	add.w	r9, r9, #1
 8007cb0:	e7ee      	b.n	8007c90 <_printf_float+0x2b4>
 8007cb2:	bf00      	nop
 8007cb4:	7fefffff 	.word	0x7fefffff
 8007cb8:	0800d08c 	.word	0x0800d08c
 8007cbc:	0800d090 	.word	0x0800d090
 8007cc0:	0800d094 	.word	0x0800d094
 8007cc4:	0800d098 	.word	0x0800d098
 8007cc8:	0800d09c 	.word	0x0800d09c
 8007ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	bfa8      	it	ge
 8007cd4:	461a      	movge	r2, r3
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	4691      	mov	r9, r2
 8007cda:	dc37      	bgt.n	8007d4c <_printf_float+0x370>
 8007cdc:	f04f 0b00 	mov.w	fp, #0
 8007ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ce4:	f104 021a 	add.w	r2, r4, #26
 8007ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	eba3 0309 	sub.w	r3, r3, r9
 8007cf0:	455b      	cmp	r3, fp
 8007cf2:	dc33      	bgt.n	8007d5c <_printf_float+0x380>
 8007cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	db3b      	blt.n	8007d74 <_printf_float+0x398>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	07da      	lsls	r2, r3, #31
 8007d00:	d438      	bmi.n	8007d74 <_printf_float+0x398>
 8007d02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d06:	eba2 0903 	sub.w	r9, r2, r3
 8007d0a:	9b05      	ldr	r3, [sp, #20]
 8007d0c:	1ad2      	subs	r2, r2, r3
 8007d0e:	4591      	cmp	r9, r2
 8007d10:	bfa8      	it	ge
 8007d12:	4691      	movge	r9, r2
 8007d14:	f1b9 0f00 	cmp.w	r9, #0
 8007d18:	dc35      	bgt.n	8007d86 <_printf_float+0x3aa>
 8007d1a:	f04f 0800 	mov.w	r8, #0
 8007d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d22:	f104 0a1a 	add.w	sl, r4, #26
 8007d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	eba3 0309 	sub.w	r3, r3, r9
 8007d30:	4543      	cmp	r3, r8
 8007d32:	f77f af79 	ble.w	8007c28 <_printf_float+0x24c>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4652      	mov	r2, sl
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f aeaa 	beq.w	8007a9a <_printf_float+0xbe>
 8007d46:	f108 0801 	add.w	r8, r8, #1
 8007d4a:	e7ec      	b.n	8007d26 <_printf_float+0x34a>
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4642      	mov	r2, r8
 8007d52:	4628      	mov	r0, r5
 8007d54:	47b8      	blx	r7
 8007d56:	3001      	adds	r0, #1
 8007d58:	d1c0      	bne.n	8007cdc <_printf_float+0x300>
 8007d5a:	e69e      	b.n	8007a9a <_printf_float+0xbe>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	9205      	str	r2, [sp, #20]
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f ae97 	beq.w	8007a9a <_printf_float+0xbe>
 8007d6c:	9a05      	ldr	r2, [sp, #20]
 8007d6e:	f10b 0b01 	add.w	fp, fp, #1
 8007d72:	e7b9      	b.n	8007ce8 <_printf_float+0x30c>
 8007d74:	ee18 3a10 	vmov	r3, s16
 8007d78:	4652      	mov	r2, sl
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b8      	blx	r7
 8007d80:	3001      	adds	r0, #1
 8007d82:	d1be      	bne.n	8007d02 <_printf_float+0x326>
 8007d84:	e689      	b.n	8007a9a <_printf_float+0xbe>
 8007d86:	9a05      	ldr	r2, [sp, #20]
 8007d88:	464b      	mov	r3, r9
 8007d8a:	4442      	add	r2, r8
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	d1c1      	bne.n	8007d1a <_printf_float+0x33e>
 8007d96:	e680      	b.n	8007a9a <_printf_float+0xbe>
 8007d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d9a:	2a01      	cmp	r2, #1
 8007d9c:	dc01      	bgt.n	8007da2 <_printf_float+0x3c6>
 8007d9e:	07db      	lsls	r3, r3, #31
 8007da0:	d53a      	bpl.n	8007e18 <_printf_float+0x43c>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4642      	mov	r2, r8
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f ae74 	beq.w	8007a9a <_printf_float+0xbe>
 8007db2:	ee18 3a10 	vmov	r3, s16
 8007db6:	4652      	mov	r2, sl
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f43f ae6b 	beq.w	8007a9a <_printf_float+0xbe>
 8007dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007dd0:	f7f8 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dd4:	b9d8      	cbnz	r0, 8007e0e <_printf_float+0x432>
 8007dd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007dda:	f108 0201 	add.w	r2, r8, #1
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	d10e      	bne.n	8007e06 <_printf_float+0x42a>
 8007de8:	e657      	b.n	8007a9a <_printf_float+0xbe>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4652      	mov	r2, sl
 8007dee:	4631      	mov	r1, r6
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b8      	blx	r7
 8007df4:	3001      	adds	r0, #1
 8007df6:	f43f ae50 	beq.w	8007a9a <_printf_float+0xbe>
 8007dfa:	f108 0801 	add.w	r8, r8, #1
 8007dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e00:	3b01      	subs	r3, #1
 8007e02:	4543      	cmp	r3, r8
 8007e04:	dcf1      	bgt.n	8007dea <_printf_float+0x40e>
 8007e06:	464b      	mov	r3, r9
 8007e08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e0c:	e6da      	b.n	8007bc4 <_printf_float+0x1e8>
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	f104 0a1a 	add.w	sl, r4, #26
 8007e16:	e7f2      	b.n	8007dfe <_printf_float+0x422>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4642      	mov	r2, r8
 8007e1c:	e7df      	b.n	8007dde <_printf_float+0x402>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	464a      	mov	r2, r9
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f ae36 	beq.w	8007a9a <_printf_float+0xbe>
 8007e2e:	f108 0801 	add.w	r8, r8, #1
 8007e32:	68e3      	ldr	r3, [r4, #12]
 8007e34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e36:	1a5b      	subs	r3, r3, r1
 8007e38:	4543      	cmp	r3, r8
 8007e3a:	dcf0      	bgt.n	8007e1e <_printf_float+0x442>
 8007e3c:	e6f8      	b.n	8007c30 <_printf_float+0x254>
 8007e3e:	f04f 0800 	mov.w	r8, #0
 8007e42:	f104 0919 	add.w	r9, r4, #25
 8007e46:	e7f4      	b.n	8007e32 <_printf_float+0x456>

08007e48 <_printf_common>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	4699      	mov	r9, r3
 8007e50:	688a      	ldr	r2, [r1, #8]
 8007e52:	690b      	ldr	r3, [r1, #16]
 8007e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	bfb8      	it	lt
 8007e5c:	4613      	movlt	r3, r2
 8007e5e:	6033      	str	r3, [r6, #0]
 8007e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e64:	4607      	mov	r7, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	b10a      	cbz	r2, 8007e6e <_printf_common+0x26>
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	0699      	lsls	r1, r3, #26
 8007e72:	bf42      	ittt	mi
 8007e74:	6833      	ldrmi	r3, [r6, #0]
 8007e76:	3302      	addmi	r3, #2
 8007e78:	6033      	strmi	r3, [r6, #0]
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	f015 0506 	ands.w	r5, r5, #6
 8007e80:	d106      	bne.n	8007e90 <_printf_common+0x48>
 8007e82:	f104 0a19 	add.w	sl, r4, #25
 8007e86:	68e3      	ldr	r3, [r4, #12]
 8007e88:	6832      	ldr	r2, [r6, #0]
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	42ab      	cmp	r3, r5
 8007e8e:	dc26      	bgt.n	8007ede <_printf_common+0x96>
 8007e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e94:	1e13      	subs	r3, r2, #0
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	bf18      	it	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	0692      	lsls	r2, r2, #26
 8007e9e:	d42b      	bmi.n	8007ef8 <_printf_common+0xb0>
 8007ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	47c0      	blx	r8
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d01e      	beq.n	8007eec <_printf_common+0xa4>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	f003 0306 	and.w	r3, r3, #6
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	bf02      	ittt	eq
 8007eba:	68e5      	ldreq	r5, [r4, #12]
 8007ebc:	6833      	ldreq	r3, [r6, #0]
 8007ebe:	1aed      	subeq	r5, r5, r3
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	bf0c      	ite	eq
 8007ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec8:	2500      	movne	r5, #0
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	bfc4      	itt	gt
 8007ece:	1a9b      	subgt	r3, r3, r2
 8007ed0:	18ed      	addgt	r5, r5, r3
 8007ed2:	2600      	movs	r6, #0
 8007ed4:	341a      	adds	r4, #26
 8007ed6:	42b5      	cmp	r5, r6
 8007ed8:	d11a      	bne.n	8007f10 <_printf_common+0xc8>
 8007eda:	2000      	movs	r0, #0
 8007edc:	e008      	b.n	8007ef0 <_printf_common+0xa8>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	47c0      	blx	r8
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d103      	bne.n	8007ef4 <_printf_common+0xac>
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	e7c6      	b.n	8007e86 <_printf_common+0x3e>
 8007ef8:	18e1      	adds	r1, r4, r3
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	2030      	movs	r0, #48	; 0x30
 8007efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f02:	4422      	add	r2, r4
 8007f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	e7c7      	b.n	8007ea0 <_printf_common+0x58>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4622      	mov	r2, r4
 8007f14:	4649      	mov	r1, r9
 8007f16:	4638      	mov	r0, r7
 8007f18:	47c0      	blx	r8
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d0e6      	beq.n	8007eec <_printf_common+0xa4>
 8007f1e:	3601      	adds	r6, #1
 8007f20:	e7d9      	b.n	8007ed6 <_printf_common+0x8e>
	...

08007f24 <_printf_i>:
 8007f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	7e0f      	ldrb	r7, [r1, #24]
 8007f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f2c:	2f78      	cmp	r7, #120	; 0x78
 8007f2e:	4691      	mov	r9, r2
 8007f30:	4680      	mov	r8, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	469a      	mov	sl, r3
 8007f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f3a:	d807      	bhi.n	8007f4c <_printf_i+0x28>
 8007f3c:	2f62      	cmp	r7, #98	; 0x62
 8007f3e:	d80a      	bhi.n	8007f56 <_printf_i+0x32>
 8007f40:	2f00      	cmp	r7, #0
 8007f42:	f000 80d4 	beq.w	80080ee <_printf_i+0x1ca>
 8007f46:	2f58      	cmp	r7, #88	; 0x58
 8007f48:	f000 80c0 	beq.w	80080cc <_printf_i+0x1a8>
 8007f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f54:	e03a      	b.n	8007fcc <_printf_i+0xa8>
 8007f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f5a:	2b15      	cmp	r3, #21
 8007f5c:	d8f6      	bhi.n	8007f4c <_printf_i+0x28>
 8007f5e:	a101      	add	r1, pc, #4	; (adr r1, 8007f64 <_printf_i+0x40>)
 8007f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f64:	08007fbd 	.word	0x08007fbd
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	08007f4d 	.word	0x08007f4d
 8007f70:	08007f4d 	.word	0x08007f4d
 8007f74:	08007f4d 	.word	0x08007f4d
 8007f78:	08007f4d 	.word	0x08007f4d
 8007f7c:	08007fd1 	.word	0x08007fd1
 8007f80:	08007f4d 	.word	0x08007f4d
 8007f84:	08007f4d 	.word	0x08007f4d
 8007f88:	08007f4d 	.word	0x08007f4d
 8007f8c:	08007f4d 	.word	0x08007f4d
 8007f90:	080080d5 	.word	0x080080d5
 8007f94:	08007ffd 	.word	0x08007ffd
 8007f98:	0800808f 	.word	0x0800808f
 8007f9c:	08007f4d 	.word	0x08007f4d
 8007fa0:	08007f4d 	.word	0x08007f4d
 8007fa4:	080080f7 	.word	0x080080f7
 8007fa8:	08007f4d 	.word	0x08007f4d
 8007fac:	08007ffd 	.word	0x08007ffd
 8007fb0:	08007f4d 	.word	0x08007f4d
 8007fb4:	08007f4d 	.word	0x08007f4d
 8007fb8:	08008097 	.word	0x08008097
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	1d1a      	adds	r2, r3, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	602a      	str	r2, [r5, #0]
 8007fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e09f      	b.n	8008110 <_printf_i+0x1ec>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	682b      	ldr	r3, [r5, #0]
 8007fd4:	0607      	lsls	r7, r0, #24
 8007fd6:	f103 0104 	add.w	r1, r3, #4
 8007fda:	6029      	str	r1, [r5, #0]
 8007fdc:	d501      	bpl.n	8007fe2 <_printf_i+0xbe>
 8007fde:	681e      	ldr	r6, [r3, #0]
 8007fe0:	e003      	b.n	8007fea <_printf_i+0xc6>
 8007fe2:	0646      	lsls	r6, r0, #25
 8007fe4:	d5fb      	bpl.n	8007fde <_printf_i+0xba>
 8007fe6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	da03      	bge.n	8007ff6 <_printf_i+0xd2>
 8007fee:	232d      	movs	r3, #45	; 0x2d
 8007ff0:	4276      	negs	r6, r6
 8007ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff6:	485a      	ldr	r0, [pc, #360]	; (8008160 <_printf_i+0x23c>)
 8007ff8:	230a      	movs	r3, #10
 8007ffa:	e012      	b.n	8008022 <_printf_i+0xfe>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	6029      	str	r1, [r5, #0]
 8008004:	0605      	lsls	r5, r0, #24
 8008006:	d501      	bpl.n	800800c <_printf_i+0xe8>
 8008008:	681e      	ldr	r6, [r3, #0]
 800800a:	e002      	b.n	8008012 <_printf_i+0xee>
 800800c:	0641      	lsls	r1, r0, #25
 800800e:	d5fb      	bpl.n	8008008 <_printf_i+0xe4>
 8008010:	881e      	ldrh	r6, [r3, #0]
 8008012:	4853      	ldr	r0, [pc, #332]	; (8008160 <_printf_i+0x23c>)
 8008014:	2f6f      	cmp	r7, #111	; 0x6f
 8008016:	bf0c      	ite	eq
 8008018:	2308      	moveq	r3, #8
 800801a:	230a      	movne	r3, #10
 800801c:	2100      	movs	r1, #0
 800801e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008022:	6865      	ldr	r5, [r4, #4]
 8008024:	60a5      	str	r5, [r4, #8]
 8008026:	2d00      	cmp	r5, #0
 8008028:	bfa2      	ittt	ge
 800802a:	6821      	ldrge	r1, [r4, #0]
 800802c:	f021 0104 	bicge.w	r1, r1, #4
 8008030:	6021      	strge	r1, [r4, #0]
 8008032:	b90e      	cbnz	r6, 8008038 <_printf_i+0x114>
 8008034:	2d00      	cmp	r5, #0
 8008036:	d04b      	beq.n	80080d0 <_printf_i+0x1ac>
 8008038:	4615      	mov	r5, r2
 800803a:	fbb6 f1f3 	udiv	r1, r6, r3
 800803e:	fb03 6711 	mls	r7, r3, r1, r6
 8008042:	5dc7      	ldrb	r7, [r0, r7]
 8008044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008048:	4637      	mov	r7, r6
 800804a:	42bb      	cmp	r3, r7
 800804c:	460e      	mov	r6, r1
 800804e:	d9f4      	bls.n	800803a <_printf_i+0x116>
 8008050:	2b08      	cmp	r3, #8
 8008052:	d10b      	bne.n	800806c <_printf_i+0x148>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	07de      	lsls	r6, r3, #31
 8008058:	d508      	bpl.n	800806c <_printf_i+0x148>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4299      	cmp	r1, r3
 8008060:	bfde      	ittt	le
 8008062:	2330      	movle	r3, #48	; 0x30
 8008064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800806c:	1b52      	subs	r2, r2, r5
 800806e:	6122      	str	r2, [r4, #16]
 8008070:	f8cd a000 	str.w	sl, [sp]
 8008074:	464b      	mov	r3, r9
 8008076:	aa03      	add	r2, sp, #12
 8008078:	4621      	mov	r1, r4
 800807a:	4640      	mov	r0, r8
 800807c:	f7ff fee4 	bl	8007e48 <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	d14a      	bne.n	800811a <_printf_i+0x1f6>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	b004      	add	sp, #16
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	4833      	ldr	r0, [pc, #204]	; (8008164 <_printf_i+0x240>)
 8008098:	2778      	movs	r7, #120	; 0x78
 800809a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6829      	ldr	r1, [r5, #0]
 80080a2:	061f      	lsls	r7, r3, #24
 80080a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80080a8:	d402      	bmi.n	80080b0 <_printf_i+0x18c>
 80080aa:	065f      	lsls	r7, r3, #25
 80080ac:	bf48      	it	mi
 80080ae:	b2b6      	uxthmi	r6, r6
 80080b0:	07df      	lsls	r7, r3, #31
 80080b2:	bf48      	it	mi
 80080b4:	f043 0320 	orrmi.w	r3, r3, #32
 80080b8:	6029      	str	r1, [r5, #0]
 80080ba:	bf48      	it	mi
 80080bc:	6023      	strmi	r3, [r4, #0]
 80080be:	b91e      	cbnz	r6, 80080c8 <_printf_i+0x1a4>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	f023 0320 	bic.w	r3, r3, #32
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	2310      	movs	r3, #16
 80080ca:	e7a7      	b.n	800801c <_printf_i+0xf8>
 80080cc:	4824      	ldr	r0, [pc, #144]	; (8008160 <_printf_i+0x23c>)
 80080ce:	e7e4      	b.n	800809a <_printf_i+0x176>
 80080d0:	4615      	mov	r5, r2
 80080d2:	e7bd      	b.n	8008050 <_printf_i+0x12c>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	6826      	ldr	r6, [r4, #0]
 80080d8:	6961      	ldr	r1, [r4, #20]
 80080da:	1d18      	adds	r0, r3, #4
 80080dc:	6028      	str	r0, [r5, #0]
 80080de:	0635      	lsls	r5, r6, #24
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	d501      	bpl.n	80080e8 <_printf_i+0x1c4>
 80080e4:	6019      	str	r1, [r3, #0]
 80080e6:	e002      	b.n	80080ee <_printf_i+0x1ca>
 80080e8:	0670      	lsls	r0, r6, #25
 80080ea:	d5fb      	bpl.n	80080e4 <_printf_i+0x1c0>
 80080ec:	8019      	strh	r1, [r3, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	4615      	mov	r5, r2
 80080f4:	e7bc      	b.n	8008070 <_printf_i+0x14c>
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	602a      	str	r2, [r5, #0]
 80080fc:	681d      	ldr	r5, [r3, #0]
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	2100      	movs	r1, #0
 8008102:	4628      	mov	r0, r5
 8008104:	f7f8 f86c 	bl	80001e0 <memchr>
 8008108:	b108      	cbz	r0, 800810e <_printf_i+0x1ea>
 800810a:	1b40      	subs	r0, r0, r5
 800810c:	6060      	str	r0, [r4, #4]
 800810e:	6863      	ldr	r3, [r4, #4]
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	2300      	movs	r3, #0
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008118:	e7aa      	b.n	8008070 <_printf_i+0x14c>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	462a      	mov	r2, r5
 800811e:	4649      	mov	r1, r9
 8008120:	4640      	mov	r0, r8
 8008122:	47d0      	blx	sl
 8008124:	3001      	adds	r0, #1
 8008126:	d0ad      	beq.n	8008084 <_printf_i+0x160>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	d413      	bmi.n	8008156 <_printf_i+0x232>
 800812e:	68e0      	ldr	r0, [r4, #12]
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	4298      	cmp	r0, r3
 8008134:	bfb8      	it	lt
 8008136:	4618      	movlt	r0, r3
 8008138:	e7a6      	b.n	8008088 <_printf_i+0x164>
 800813a:	2301      	movs	r3, #1
 800813c:	4632      	mov	r2, r6
 800813e:	4649      	mov	r1, r9
 8008140:	4640      	mov	r0, r8
 8008142:	47d0      	blx	sl
 8008144:	3001      	adds	r0, #1
 8008146:	d09d      	beq.n	8008084 <_printf_i+0x160>
 8008148:	3501      	adds	r5, #1
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	9903      	ldr	r1, [sp, #12]
 800814e:	1a5b      	subs	r3, r3, r1
 8008150:	42ab      	cmp	r3, r5
 8008152:	dcf2      	bgt.n	800813a <_printf_i+0x216>
 8008154:	e7eb      	b.n	800812e <_printf_i+0x20a>
 8008156:	2500      	movs	r5, #0
 8008158:	f104 0619 	add.w	r6, r4, #25
 800815c:	e7f5      	b.n	800814a <_printf_i+0x226>
 800815e:	bf00      	nop
 8008160:	0800d09e 	.word	0x0800d09e
 8008164:	0800d0af 	.word	0x0800d0af

08008168 <_scanf_float>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	b087      	sub	sp, #28
 800816e:	4617      	mov	r7, r2
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	688b      	ldr	r3, [r1, #8]
 8008174:	1e5a      	subs	r2, r3, #1
 8008176:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800817a:	bf83      	ittte	hi
 800817c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008180:	195b      	addhi	r3, r3, r5
 8008182:	9302      	strhi	r3, [sp, #8]
 8008184:	2300      	movls	r3, #0
 8008186:	bf86      	itte	hi
 8008188:	f240 135d 	movwhi	r3, #349	; 0x15d
 800818c:	608b      	strhi	r3, [r1, #8]
 800818e:	9302      	strls	r3, [sp, #8]
 8008190:	680b      	ldr	r3, [r1, #0]
 8008192:	468b      	mov	fp, r1
 8008194:	2500      	movs	r5, #0
 8008196:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800819a:	f84b 3b1c 	str.w	r3, [fp], #28
 800819e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081a2:	4680      	mov	r8, r0
 80081a4:	460c      	mov	r4, r1
 80081a6:	465e      	mov	r6, fp
 80081a8:	46aa      	mov	sl, r5
 80081aa:	46a9      	mov	r9, r5
 80081ac:	9501      	str	r5, [sp, #4]
 80081ae:	68a2      	ldr	r2, [r4, #8]
 80081b0:	b152      	cbz	r2, 80081c8 <_scanf_float+0x60>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b4e      	cmp	r3, #78	; 0x4e
 80081b8:	d864      	bhi.n	8008284 <_scanf_float+0x11c>
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d83c      	bhi.n	8008238 <_scanf_float+0xd0>
 80081be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80081c2:	b2c8      	uxtb	r0, r1
 80081c4:	280e      	cmp	r0, #14
 80081c6:	d93a      	bls.n	800823e <_scanf_float+0xd6>
 80081c8:	f1b9 0f00 	cmp.w	r9, #0
 80081cc:	d003      	beq.n	80081d6 <_scanf_float+0x6e>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081da:	f1ba 0f01 	cmp.w	sl, #1
 80081de:	f200 8113 	bhi.w	8008408 <_scanf_float+0x2a0>
 80081e2:	455e      	cmp	r6, fp
 80081e4:	f200 8105 	bhi.w	80083f2 <_scanf_float+0x28a>
 80081e8:	2501      	movs	r5, #1
 80081ea:	4628      	mov	r0, r5
 80081ec:	b007      	add	sp, #28
 80081ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081f6:	2a0d      	cmp	r2, #13
 80081f8:	d8e6      	bhi.n	80081c8 <_scanf_float+0x60>
 80081fa:	a101      	add	r1, pc, #4	; (adr r1, 8008200 <_scanf_float+0x98>)
 80081fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008200:	0800833f 	.word	0x0800833f
 8008204:	080081c9 	.word	0x080081c9
 8008208:	080081c9 	.word	0x080081c9
 800820c:	080081c9 	.word	0x080081c9
 8008210:	0800839f 	.word	0x0800839f
 8008214:	08008377 	.word	0x08008377
 8008218:	080081c9 	.word	0x080081c9
 800821c:	080081c9 	.word	0x080081c9
 8008220:	0800834d 	.word	0x0800834d
 8008224:	080081c9 	.word	0x080081c9
 8008228:	080081c9 	.word	0x080081c9
 800822c:	080081c9 	.word	0x080081c9
 8008230:	080081c9 	.word	0x080081c9
 8008234:	08008305 	.word	0x08008305
 8008238:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800823c:	e7db      	b.n	80081f6 <_scanf_float+0x8e>
 800823e:	290e      	cmp	r1, #14
 8008240:	d8c2      	bhi.n	80081c8 <_scanf_float+0x60>
 8008242:	a001      	add	r0, pc, #4	; (adr r0, 8008248 <_scanf_float+0xe0>)
 8008244:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008248:	080082f7 	.word	0x080082f7
 800824c:	080081c9 	.word	0x080081c9
 8008250:	080082f7 	.word	0x080082f7
 8008254:	0800838b 	.word	0x0800838b
 8008258:	080081c9 	.word	0x080081c9
 800825c:	080082a5 	.word	0x080082a5
 8008260:	080082e1 	.word	0x080082e1
 8008264:	080082e1 	.word	0x080082e1
 8008268:	080082e1 	.word	0x080082e1
 800826c:	080082e1 	.word	0x080082e1
 8008270:	080082e1 	.word	0x080082e1
 8008274:	080082e1 	.word	0x080082e1
 8008278:	080082e1 	.word	0x080082e1
 800827c:	080082e1 	.word	0x080082e1
 8008280:	080082e1 	.word	0x080082e1
 8008284:	2b6e      	cmp	r3, #110	; 0x6e
 8008286:	d809      	bhi.n	800829c <_scanf_float+0x134>
 8008288:	2b60      	cmp	r3, #96	; 0x60
 800828a:	d8b2      	bhi.n	80081f2 <_scanf_float+0x8a>
 800828c:	2b54      	cmp	r3, #84	; 0x54
 800828e:	d077      	beq.n	8008380 <_scanf_float+0x218>
 8008290:	2b59      	cmp	r3, #89	; 0x59
 8008292:	d199      	bne.n	80081c8 <_scanf_float+0x60>
 8008294:	2d07      	cmp	r5, #7
 8008296:	d197      	bne.n	80081c8 <_scanf_float+0x60>
 8008298:	2508      	movs	r5, #8
 800829a:	e029      	b.n	80082f0 <_scanf_float+0x188>
 800829c:	2b74      	cmp	r3, #116	; 0x74
 800829e:	d06f      	beq.n	8008380 <_scanf_float+0x218>
 80082a0:	2b79      	cmp	r3, #121	; 0x79
 80082a2:	e7f6      	b.n	8008292 <_scanf_float+0x12a>
 80082a4:	6821      	ldr	r1, [r4, #0]
 80082a6:	05c8      	lsls	r0, r1, #23
 80082a8:	d51a      	bpl.n	80082e0 <_scanf_float+0x178>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80082b0:	6021      	str	r1, [r4, #0]
 80082b2:	f109 0901 	add.w	r9, r9, #1
 80082b6:	b11b      	cbz	r3, 80082c0 <_scanf_float+0x158>
 80082b8:	3b01      	subs	r3, #1
 80082ba:	3201      	adds	r2, #1
 80082bc:	9302      	str	r3, [sp, #8]
 80082be:	60a2      	str	r2, [r4, #8]
 80082c0:	68a3      	ldr	r3, [r4, #8]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	3301      	adds	r3, #1
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	f340 8084 	ble.w	80083e0 <_scanf_float+0x278>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	3301      	adds	r3, #1
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	e766      	b.n	80081ae <_scanf_float+0x46>
 80082e0:	eb1a 0f05 	cmn.w	sl, r5
 80082e4:	f47f af70 	bne.w	80081c8 <_scanf_float+0x60>
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	f806 3b01 	strb.w	r3, [r6], #1
 80082f4:	e7e4      	b.n	80082c0 <_scanf_float+0x158>
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	0610      	lsls	r0, r2, #24
 80082fa:	f57f af65 	bpl.w	80081c8 <_scanf_float+0x60>
 80082fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008302:	e7f4      	b.n	80082ee <_scanf_float+0x186>
 8008304:	f1ba 0f00 	cmp.w	sl, #0
 8008308:	d10e      	bne.n	8008328 <_scanf_float+0x1c0>
 800830a:	f1b9 0f00 	cmp.w	r9, #0
 800830e:	d10e      	bne.n	800832e <_scanf_float+0x1c6>
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008316:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800831a:	d108      	bne.n	800832e <_scanf_float+0x1c6>
 800831c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008320:	6022      	str	r2, [r4, #0]
 8008322:	f04f 0a01 	mov.w	sl, #1
 8008326:	e7e3      	b.n	80082f0 <_scanf_float+0x188>
 8008328:	f1ba 0f02 	cmp.w	sl, #2
 800832c:	d055      	beq.n	80083da <_scanf_float+0x272>
 800832e:	2d01      	cmp	r5, #1
 8008330:	d002      	beq.n	8008338 <_scanf_float+0x1d0>
 8008332:	2d04      	cmp	r5, #4
 8008334:	f47f af48 	bne.w	80081c8 <_scanf_float+0x60>
 8008338:	3501      	adds	r5, #1
 800833a:	b2ed      	uxtb	r5, r5
 800833c:	e7d8      	b.n	80082f0 <_scanf_float+0x188>
 800833e:	f1ba 0f01 	cmp.w	sl, #1
 8008342:	f47f af41 	bne.w	80081c8 <_scanf_float+0x60>
 8008346:	f04f 0a02 	mov.w	sl, #2
 800834a:	e7d1      	b.n	80082f0 <_scanf_float+0x188>
 800834c:	b97d      	cbnz	r5, 800836e <_scanf_float+0x206>
 800834e:	f1b9 0f00 	cmp.w	r9, #0
 8008352:	f47f af3c 	bne.w	80081ce <_scanf_float+0x66>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800835c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008360:	f47f af39 	bne.w	80081d6 <_scanf_float+0x6e>
 8008364:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008368:	6022      	str	r2, [r4, #0]
 800836a:	2501      	movs	r5, #1
 800836c:	e7c0      	b.n	80082f0 <_scanf_float+0x188>
 800836e:	2d03      	cmp	r5, #3
 8008370:	d0e2      	beq.n	8008338 <_scanf_float+0x1d0>
 8008372:	2d05      	cmp	r5, #5
 8008374:	e7de      	b.n	8008334 <_scanf_float+0x1cc>
 8008376:	2d02      	cmp	r5, #2
 8008378:	f47f af26 	bne.w	80081c8 <_scanf_float+0x60>
 800837c:	2503      	movs	r5, #3
 800837e:	e7b7      	b.n	80082f0 <_scanf_float+0x188>
 8008380:	2d06      	cmp	r5, #6
 8008382:	f47f af21 	bne.w	80081c8 <_scanf_float+0x60>
 8008386:	2507      	movs	r5, #7
 8008388:	e7b2      	b.n	80082f0 <_scanf_float+0x188>
 800838a:	6822      	ldr	r2, [r4, #0]
 800838c:	0591      	lsls	r1, r2, #22
 800838e:	f57f af1b 	bpl.w	80081c8 <_scanf_float+0x60>
 8008392:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008396:	6022      	str	r2, [r4, #0]
 8008398:	f8cd 9004 	str.w	r9, [sp, #4]
 800839c:	e7a8      	b.n	80082f0 <_scanf_float+0x188>
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80083a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80083a8:	d006      	beq.n	80083b8 <_scanf_float+0x250>
 80083aa:	0550      	lsls	r0, r2, #21
 80083ac:	f57f af0c 	bpl.w	80081c8 <_scanf_float+0x60>
 80083b0:	f1b9 0f00 	cmp.w	r9, #0
 80083b4:	f43f af0f 	beq.w	80081d6 <_scanf_float+0x6e>
 80083b8:	0591      	lsls	r1, r2, #22
 80083ba:	bf58      	it	pl
 80083bc:	9901      	ldrpl	r1, [sp, #4]
 80083be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083c2:	bf58      	it	pl
 80083c4:	eba9 0101 	subpl.w	r1, r9, r1
 80083c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80083cc:	bf58      	it	pl
 80083ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083d2:	6022      	str	r2, [r4, #0]
 80083d4:	f04f 0900 	mov.w	r9, #0
 80083d8:	e78a      	b.n	80082f0 <_scanf_float+0x188>
 80083da:	f04f 0a03 	mov.w	sl, #3
 80083de:	e787      	b.n	80082f0 <_scanf_float+0x188>
 80083e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083e4:	4639      	mov	r1, r7
 80083e6:	4640      	mov	r0, r8
 80083e8:	4798      	blx	r3
 80083ea:	2800      	cmp	r0, #0
 80083ec:	f43f aedf 	beq.w	80081ae <_scanf_float+0x46>
 80083f0:	e6ea      	b.n	80081c8 <_scanf_float+0x60>
 80083f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083fa:	463a      	mov	r2, r7
 80083fc:	4640      	mov	r0, r8
 80083fe:	4798      	blx	r3
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	3b01      	subs	r3, #1
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	e6ec      	b.n	80081e2 <_scanf_float+0x7a>
 8008408:	1e6b      	subs	r3, r5, #1
 800840a:	2b06      	cmp	r3, #6
 800840c:	d825      	bhi.n	800845a <_scanf_float+0x2f2>
 800840e:	2d02      	cmp	r5, #2
 8008410:	d836      	bhi.n	8008480 <_scanf_float+0x318>
 8008412:	455e      	cmp	r6, fp
 8008414:	f67f aee8 	bls.w	80081e8 <_scanf_float+0x80>
 8008418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800841c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008420:	463a      	mov	r2, r7
 8008422:	4640      	mov	r0, r8
 8008424:	4798      	blx	r3
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	3b01      	subs	r3, #1
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	e7f1      	b.n	8008412 <_scanf_float+0x2aa>
 800842e:	9802      	ldr	r0, [sp, #8]
 8008430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008434:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008438:	9002      	str	r0, [sp, #8]
 800843a:	463a      	mov	r2, r7
 800843c:	4640      	mov	r0, r8
 800843e:	4798      	blx	r3
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	3b01      	subs	r3, #1
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800844a:	fa5f fa8a 	uxtb.w	sl, sl
 800844e:	f1ba 0f02 	cmp.w	sl, #2
 8008452:	d1ec      	bne.n	800842e <_scanf_float+0x2c6>
 8008454:	3d03      	subs	r5, #3
 8008456:	b2ed      	uxtb	r5, r5
 8008458:	1b76      	subs	r6, r6, r5
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	05da      	lsls	r2, r3, #23
 800845e:	d52f      	bpl.n	80084c0 <_scanf_float+0x358>
 8008460:	055b      	lsls	r3, r3, #21
 8008462:	d510      	bpl.n	8008486 <_scanf_float+0x31e>
 8008464:	455e      	cmp	r6, fp
 8008466:	f67f aebf 	bls.w	80081e8 <_scanf_float+0x80>
 800846a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800846e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008472:	463a      	mov	r2, r7
 8008474:	4640      	mov	r0, r8
 8008476:	4798      	blx	r3
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	3b01      	subs	r3, #1
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	e7f1      	b.n	8008464 <_scanf_float+0x2fc>
 8008480:	46aa      	mov	sl, r5
 8008482:	9602      	str	r6, [sp, #8]
 8008484:	e7df      	b.n	8008446 <_scanf_float+0x2de>
 8008486:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	2965      	cmp	r1, #101	; 0x65
 800848e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008492:	f106 35ff 	add.w	r5, r6, #4294967295
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	d00c      	beq.n	80084b4 <_scanf_float+0x34c>
 800849a:	2945      	cmp	r1, #69	; 0x45
 800849c:	d00a      	beq.n	80084b4 <_scanf_float+0x34c>
 800849e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084a2:	463a      	mov	r2, r7
 80084a4:	4640      	mov	r0, r8
 80084a6:	4798      	blx	r3
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	1eb5      	subs	r5, r6, #2
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084b8:	463a      	mov	r2, r7
 80084ba:	4640      	mov	r0, r8
 80084bc:	4798      	blx	r3
 80084be:	462e      	mov	r6, r5
 80084c0:	6825      	ldr	r5, [r4, #0]
 80084c2:	f015 0510 	ands.w	r5, r5, #16
 80084c6:	d158      	bne.n	800857a <_scanf_float+0x412>
 80084c8:	7035      	strb	r5, [r6, #0]
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d11c      	bne.n	8008510 <_scanf_float+0x3a8>
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	454b      	cmp	r3, r9
 80084da:	eba3 0209 	sub.w	r2, r3, r9
 80084de:	d124      	bne.n	800852a <_scanf_float+0x3c2>
 80084e0:	2200      	movs	r2, #0
 80084e2:	4659      	mov	r1, fp
 80084e4:	4640      	mov	r0, r8
 80084e6:	f002 fc3f 	bl	800ad68 <_strtod_r>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	6821      	ldr	r1, [r4, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f011 0f02 	tst.w	r1, #2
 80084f4:	ec57 6b10 	vmov	r6, r7, d0
 80084f8:	f103 0204 	add.w	r2, r3, #4
 80084fc:	d020      	beq.n	8008540 <_scanf_float+0x3d8>
 80084fe:	9903      	ldr	r1, [sp, #12]
 8008500:	600a      	str	r2, [r1, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	e9c3 6700 	strd	r6, r7, [r3]
 8008508:	68e3      	ldr	r3, [r4, #12]
 800850a:	3301      	adds	r3, #1
 800850c:	60e3      	str	r3, [r4, #12]
 800850e:	e66c      	b.n	80081ea <_scanf_float+0x82>
 8008510:	9b04      	ldr	r3, [sp, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0e4      	beq.n	80084e0 <_scanf_float+0x378>
 8008516:	9905      	ldr	r1, [sp, #20]
 8008518:	230a      	movs	r3, #10
 800851a:	462a      	mov	r2, r5
 800851c:	3101      	adds	r1, #1
 800851e:	4640      	mov	r0, r8
 8008520:	f002 fcaa 	bl	800ae78 <_strtol_r>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	9e05      	ldr	r6, [sp, #20]
 8008528:	1ac2      	subs	r2, r0, r3
 800852a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800852e:	429e      	cmp	r6, r3
 8008530:	bf28      	it	cs
 8008532:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008536:	4912      	ldr	r1, [pc, #72]	; (8008580 <_scanf_float+0x418>)
 8008538:	4630      	mov	r0, r6
 800853a:	f000 f8e7 	bl	800870c <siprintf>
 800853e:	e7cf      	b.n	80084e0 <_scanf_float+0x378>
 8008540:	f011 0f04 	tst.w	r1, #4
 8008544:	9903      	ldr	r1, [sp, #12]
 8008546:	600a      	str	r2, [r1, #0]
 8008548:	d1db      	bne.n	8008502 <_scanf_float+0x39a>
 800854a:	f8d3 8000 	ldr.w	r8, [r3]
 800854e:	ee10 2a10 	vmov	r2, s0
 8008552:	ee10 0a10 	vmov	r0, s0
 8008556:	463b      	mov	r3, r7
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 faef 	bl	8000b3c <__aeabi_dcmpun>
 800855e:	b128      	cbz	r0, 800856c <_scanf_float+0x404>
 8008560:	4808      	ldr	r0, [pc, #32]	; (8008584 <_scanf_float+0x41c>)
 8008562:	f000 f9c5 	bl	80088f0 <nanf>
 8008566:	ed88 0a00 	vstr	s0, [r8]
 800856a:	e7cd      	b.n	8008508 <_scanf_float+0x3a0>
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f8 fb42 	bl	8000bf8 <__aeabi_d2f>
 8008574:	f8c8 0000 	str.w	r0, [r8]
 8008578:	e7c6      	b.n	8008508 <_scanf_float+0x3a0>
 800857a:	2500      	movs	r5, #0
 800857c:	e635      	b.n	80081ea <_scanf_float+0x82>
 800857e:	bf00      	nop
 8008580:	0800d0c0 	.word	0x0800d0c0
 8008584:	0800d455 	.word	0x0800d455

08008588 <std>:
 8008588:	2300      	movs	r3, #0
 800858a:	b510      	push	{r4, lr}
 800858c:	4604      	mov	r4, r0
 800858e:	e9c0 3300 	strd	r3, r3, [r0]
 8008592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008596:	6083      	str	r3, [r0, #8]
 8008598:	8181      	strh	r1, [r0, #12]
 800859a:	6643      	str	r3, [r0, #100]	; 0x64
 800859c:	81c2      	strh	r2, [r0, #14]
 800859e:	6183      	str	r3, [r0, #24]
 80085a0:	4619      	mov	r1, r3
 80085a2:	2208      	movs	r2, #8
 80085a4:	305c      	adds	r0, #92	; 0x5c
 80085a6:	f000 f914 	bl	80087d2 <memset>
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <std+0x58>)
 80085ac:	6263      	str	r3, [r4, #36]	; 0x24
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <std+0x5c>)
 80085b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b2:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <std+0x60>)
 80085b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085b6:	4b0d      	ldr	r3, [pc, #52]	; (80085ec <std+0x64>)
 80085b8:	6323      	str	r3, [r4, #48]	; 0x30
 80085ba:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <std+0x68>)
 80085bc:	6224      	str	r4, [r4, #32]
 80085be:	429c      	cmp	r4, r3
 80085c0:	d006      	beq.n	80085d0 <std+0x48>
 80085c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80085c6:	4294      	cmp	r4, r2
 80085c8:	d002      	beq.n	80085d0 <std+0x48>
 80085ca:	33d0      	adds	r3, #208	; 0xd0
 80085cc:	429c      	cmp	r4, r3
 80085ce:	d105      	bne.n	80085dc <std+0x54>
 80085d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d8:	f000 b978 	b.w	80088cc <__retarget_lock_init_recursive>
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	bf00      	nop
 80085e0:	0800874d 	.word	0x0800874d
 80085e4:	0800876f 	.word	0x0800876f
 80085e8:	080087a7 	.word	0x080087a7
 80085ec:	080087cb 	.word	0x080087cb
 80085f0:	20004500 	.word	0x20004500

080085f4 <stdio_exit_handler>:
 80085f4:	4a02      	ldr	r2, [pc, #8]	; (8008600 <stdio_exit_handler+0xc>)
 80085f6:	4903      	ldr	r1, [pc, #12]	; (8008604 <stdio_exit_handler+0x10>)
 80085f8:	4803      	ldr	r0, [pc, #12]	; (8008608 <stdio_exit_handler+0x14>)
 80085fa:	f000 b869 	b.w	80086d0 <_fwalk_sglue>
 80085fe:	bf00      	nop
 8008600:	20000014 	.word	0x20000014
 8008604:	0800b239 	.word	0x0800b239
 8008608:	20000020 	.word	0x20000020

0800860c <cleanup_stdio>:
 800860c:	6841      	ldr	r1, [r0, #4]
 800860e:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <cleanup_stdio+0x34>)
 8008610:	4299      	cmp	r1, r3
 8008612:	b510      	push	{r4, lr}
 8008614:	4604      	mov	r4, r0
 8008616:	d001      	beq.n	800861c <cleanup_stdio+0x10>
 8008618:	f002 fe0e 	bl	800b238 <_fflush_r>
 800861c:	68a1      	ldr	r1, [r4, #8]
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <cleanup_stdio+0x38>)
 8008620:	4299      	cmp	r1, r3
 8008622:	d002      	beq.n	800862a <cleanup_stdio+0x1e>
 8008624:	4620      	mov	r0, r4
 8008626:	f002 fe07 	bl	800b238 <_fflush_r>
 800862a:	68e1      	ldr	r1, [r4, #12]
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <cleanup_stdio+0x3c>)
 800862e:	4299      	cmp	r1, r3
 8008630:	d004      	beq.n	800863c <cleanup_stdio+0x30>
 8008632:	4620      	mov	r0, r4
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f002 bdfe 	b.w	800b238 <_fflush_r>
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	20004500 	.word	0x20004500
 8008644:	20004568 	.word	0x20004568
 8008648:	200045d0 	.word	0x200045d0

0800864c <global_stdio_init.part.0>:
 800864c:	b510      	push	{r4, lr}
 800864e:	4b0b      	ldr	r3, [pc, #44]	; (800867c <global_stdio_init.part.0+0x30>)
 8008650:	4c0b      	ldr	r4, [pc, #44]	; (8008680 <global_stdio_init.part.0+0x34>)
 8008652:	4a0c      	ldr	r2, [pc, #48]	; (8008684 <global_stdio_init.part.0+0x38>)
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	4620      	mov	r0, r4
 8008658:	2200      	movs	r2, #0
 800865a:	2104      	movs	r1, #4
 800865c:	f7ff ff94 	bl	8008588 <std>
 8008660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008664:	2201      	movs	r2, #1
 8008666:	2109      	movs	r1, #9
 8008668:	f7ff ff8e 	bl	8008588 <std>
 800866c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008670:	2202      	movs	r2, #2
 8008672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008676:	2112      	movs	r1, #18
 8008678:	f7ff bf86 	b.w	8008588 <std>
 800867c:	20004638 	.word	0x20004638
 8008680:	20004500 	.word	0x20004500
 8008684:	080085f5 	.word	0x080085f5

08008688 <__sfp_lock_acquire>:
 8008688:	4801      	ldr	r0, [pc, #4]	; (8008690 <__sfp_lock_acquire+0x8>)
 800868a:	f000 b920 	b.w	80088ce <__retarget_lock_acquire_recursive>
 800868e:	bf00      	nop
 8008690:	20004641 	.word	0x20004641

08008694 <__sfp_lock_release>:
 8008694:	4801      	ldr	r0, [pc, #4]	; (800869c <__sfp_lock_release+0x8>)
 8008696:	f000 b91b 	b.w	80088d0 <__retarget_lock_release_recursive>
 800869a:	bf00      	nop
 800869c:	20004641 	.word	0x20004641

080086a0 <__sinit>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	4604      	mov	r4, r0
 80086a4:	f7ff fff0 	bl	8008688 <__sfp_lock_acquire>
 80086a8:	6a23      	ldr	r3, [r4, #32]
 80086aa:	b11b      	cbz	r3, 80086b4 <__sinit+0x14>
 80086ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b0:	f7ff bff0 	b.w	8008694 <__sfp_lock_release>
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <__sinit+0x28>)
 80086b6:	6223      	str	r3, [r4, #32]
 80086b8:	4b04      	ldr	r3, [pc, #16]	; (80086cc <__sinit+0x2c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1f5      	bne.n	80086ac <__sinit+0xc>
 80086c0:	f7ff ffc4 	bl	800864c <global_stdio_init.part.0>
 80086c4:	e7f2      	b.n	80086ac <__sinit+0xc>
 80086c6:	bf00      	nop
 80086c8:	0800860d 	.word	0x0800860d
 80086cc:	20004638 	.word	0x20004638

080086d0 <_fwalk_sglue>:
 80086d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d4:	4607      	mov	r7, r0
 80086d6:	4688      	mov	r8, r1
 80086d8:	4614      	mov	r4, r2
 80086da:	2600      	movs	r6, #0
 80086dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086e0:	f1b9 0901 	subs.w	r9, r9, #1
 80086e4:	d505      	bpl.n	80086f2 <_fwalk_sglue+0x22>
 80086e6:	6824      	ldr	r4, [r4, #0]
 80086e8:	2c00      	cmp	r4, #0
 80086ea:	d1f7      	bne.n	80086dc <_fwalk_sglue+0xc>
 80086ec:	4630      	mov	r0, r6
 80086ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f2:	89ab      	ldrh	r3, [r5, #12]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d907      	bls.n	8008708 <_fwalk_sglue+0x38>
 80086f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086fc:	3301      	adds	r3, #1
 80086fe:	d003      	beq.n	8008708 <_fwalk_sglue+0x38>
 8008700:	4629      	mov	r1, r5
 8008702:	4638      	mov	r0, r7
 8008704:	47c0      	blx	r8
 8008706:	4306      	orrs	r6, r0
 8008708:	3568      	adds	r5, #104	; 0x68
 800870a:	e7e9      	b.n	80086e0 <_fwalk_sglue+0x10>

0800870c <siprintf>:
 800870c:	b40e      	push	{r1, r2, r3}
 800870e:	b500      	push	{lr}
 8008710:	b09c      	sub	sp, #112	; 0x70
 8008712:	ab1d      	add	r3, sp, #116	; 0x74
 8008714:	9002      	str	r0, [sp, #8]
 8008716:	9006      	str	r0, [sp, #24]
 8008718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800871c:	4809      	ldr	r0, [pc, #36]	; (8008744 <siprintf+0x38>)
 800871e:	9107      	str	r1, [sp, #28]
 8008720:	9104      	str	r1, [sp, #16]
 8008722:	4909      	ldr	r1, [pc, #36]	; (8008748 <siprintf+0x3c>)
 8008724:	f853 2b04 	ldr.w	r2, [r3], #4
 8008728:	9105      	str	r1, [sp, #20]
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	a902      	add	r1, sp, #8
 8008730:	f002 fbfe 	bl	800af30 <_svfiprintf_r>
 8008734:	9b02      	ldr	r3, [sp, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	b01c      	add	sp, #112	; 0x70
 800873c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008740:	b003      	add	sp, #12
 8008742:	4770      	bx	lr
 8008744:	2000006c 	.word	0x2000006c
 8008748:	ffff0208 	.word	0xffff0208

0800874c <__sread>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	f000 f86c 	bl	8008830 <_read_r>
 8008758:	2800      	cmp	r0, #0
 800875a:	bfab      	itete	ge
 800875c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800875e:	89a3      	ldrhlt	r3, [r4, #12]
 8008760:	181b      	addge	r3, r3, r0
 8008762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008766:	bfac      	ite	ge
 8008768:	6563      	strge	r3, [r4, #84]	; 0x54
 800876a:	81a3      	strhlt	r3, [r4, #12]
 800876c:	bd10      	pop	{r4, pc}

0800876e <__swrite>:
 800876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	461f      	mov	r7, r3
 8008774:	898b      	ldrh	r3, [r1, #12]
 8008776:	05db      	lsls	r3, r3, #23
 8008778:	4605      	mov	r5, r0
 800877a:	460c      	mov	r4, r1
 800877c:	4616      	mov	r6, r2
 800877e:	d505      	bpl.n	800878c <__swrite+0x1e>
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2302      	movs	r3, #2
 8008786:	2200      	movs	r2, #0
 8008788:	f000 f840 	bl	800880c <_lseek_r>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	4628      	mov	r0, r5
 800879e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a2:	f000 b857 	b.w	8008854 <_write_r>

080087a6 <__sseek>:
 80087a6:	b510      	push	{r4, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ae:	f000 f82d 	bl	800880c <_lseek_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	bf15      	itete	ne
 80087b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087c2:	81a3      	strheq	r3, [r4, #12]
 80087c4:	bf18      	it	ne
 80087c6:	81a3      	strhne	r3, [r4, #12]
 80087c8:	bd10      	pop	{r4, pc}

080087ca <__sclose>:
 80087ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ce:	f000 b80d 	b.w	80087ec <_close_r>

080087d2 <memset>:
 80087d2:	4402      	add	r2, r0
 80087d4:	4603      	mov	r3, r0
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d100      	bne.n	80087dc <memset+0xa>
 80087da:	4770      	bx	lr
 80087dc:	f803 1b01 	strb.w	r1, [r3], #1
 80087e0:	e7f9      	b.n	80087d6 <memset+0x4>
	...

080087e4 <_localeconv_r>:
 80087e4:	4800      	ldr	r0, [pc, #0]	; (80087e8 <_localeconv_r+0x4>)
 80087e6:	4770      	bx	lr
 80087e8:	20000160 	.word	0x20000160

080087ec <_close_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d06      	ldr	r5, [pc, #24]	; (8008808 <_close_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7fa fbf0 	bl	8002fdc <_close>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_close_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_close_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	2000463c 	.word	0x2000463c

0800880c <_lseek_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	; (800882c <_lseek_r+0x20>)
 8008810:	4604      	mov	r4, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7fa fc05 	bl	800302a <_lseek>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_lseek_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_lseek_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	2000463c 	.word	0x2000463c

08008830 <_read_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	; (8008850 <_read_r+0x20>)
 8008834:	4604      	mov	r4, r0
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	2200      	movs	r2, #0
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7fa fb93 	bl	8002f6a <_read>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_read_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_read_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	2000463c 	.word	0x2000463c

08008854 <_write_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	; (8008874 <_write_r+0x20>)
 8008858:	4604      	mov	r4, r0
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	2200      	movs	r2, #0
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	f7fa fb9e 	bl	8002fa4 <_write>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_write_r+0x1e>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_write_r+0x1e>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	2000463c 	.word	0x2000463c

08008878 <__errno>:
 8008878:	4b01      	ldr	r3, [pc, #4]	; (8008880 <__errno+0x8>)
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	2000006c 	.word	0x2000006c

08008884 <__libc_init_array>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4d0d      	ldr	r5, [pc, #52]	; (80088bc <__libc_init_array+0x38>)
 8008888:	4c0d      	ldr	r4, [pc, #52]	; (80088c0 <__libc_init_array+0x3c>)
 800888a:	1b64      	subs	r4, r4, r5
 800888c:	10a4      	asrs	r4, r4, #2
 800888e:	2600      	movs	r6, #0
 8008890:	42a6      	cmp	r6, r4
 8008892:	d109      	bne.n	80088a8 <__libc_init_array+0x24>
 8008894:	4d0b      	ldr	r5, [pc, #44]	; (80088c4 <__libc_init_array+0x40>)
 8008896:	4c0c      	ldr	r4, [pc, #48]	; (80088c8 <__libc_init_array+0x44>)
 8008898:	f004 fb0e 	bl	800ceb8 <_init>
 800889c:	1b64      	subs	r4, r4, r5
 800889e:	10a4      	asrs	r4, r4, #2
 80088a0:	2600      	movs	r6, #0
 80088a2:	42a6      	cmp	r6, r4
 80088a4:	d105      	bne.n	80088b2 <__libc_init_array+0x2e>
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ac:	4798      	blx	r3
 80088ae:	3601      	adds	r6, #1
 80088b0:	e7ee      	b.n	8008890 <__libc_init_array+0xc>
 80088b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b6:	4798      	blx	r3
 80088b8:	3601      	adds	r6, #1
 80088ba:	e7f2      	b.n	80088a2 <__libc_init_array+0x1e>
 80088bc:	0800d4f0 	.word	0x0800d4f0
 80088c0:	0800d4f0 	.word	0x0800d4f0
 80088c4:	0800d4f0 	.word	0x0800d4f0
 80088c8:	0800d4f4 	.word	0x0800d4f4

080088cc <__retarget_lock_init_recursive>:
 80088cc:	4770      	bx	lr

080088ce <__retarget_lock_acquire_recursive>:
 80088ce:	4770      	bx	lr

080088d0 <__retarget_lock_release_recursive>:
 80088d0:	4770      	bx	lr

080088d2 <memcpy>:
 80088d2:	440a      	add	r2, r1
 80088d4:	4291      	cmp	r1, r2
 80088d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80088da:	d100      	bne.n	80088de <memcpy+0xc>
 80088dc:	4770      	bx	lr
 80088de:	b510      	push	{r4, lr}
 80088e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e8:	4291      	cmp	r1, r2
 80088ea:	d1f9      	bne.n	80088e0 <memcpy+0xe>
 80088ec:	bd10      	pop	{r4, pc}
	...

080088f0 <nanf>:
 80088f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088f8 <nanf+0x8>
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	7fc00000 	.word	0x7fc00000

080088fc <quorem>:
 80088fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	6903      	ldr	r3, [r0, #16]
 8008902:	690c      	ldr	r4, [r1, #16]
 8008904:	42a3      	cmp	r3, r4
 8008906:	4607      	mov	r7, r0
 8008908:	db7e      	blt.n	8008a08 <quorem+0x10c>
 800890a:	3c01      	subs	r4, #1
 800890c:	f101 0814 	add.w	r8, r1, #20
 8008910:	f100 0514 	add.w	r5, r0, #20
 8008914:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800891e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008922:	3301      	adds	r3, #1
 8008924:	429a      	cmp	r2, r3
 8008926:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800892a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800892e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008932:	d331      	bcc.n	8008998 <quorem+0x9c>
 8008934:	f04f 0e00 	mov.w	lr, #0
 8008938:	4640      	mov	r0, r8
 800893a:	46ac      	mov	ip, r5
 800893c:	46f2      	mov	sl, lr
 800893e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008942:	b293      	uxth	r3, r2
 8008944:	fb06 e303 	mla	r3, r6, r3, lr
 8008948:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800894c:	0c1a      	lsrs	r2, r3, #16
 800894e:	b29b      	uxth	r3, r3
 8008950:	ebaa 0303 	sub.w	r3, sl, r3
 8008954:	f8dc a000 	ldr.w	sl, [ip]
 8008958:	fa13 f38a 	uxtah	r3, r3, sl
 800895c:	fb06 220e 	mla	r2, r6, lr, r2
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	9b00      	ldr	r3, [sp, #0]
 8008964:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008968:	b292      	uxth	r2, r2
 800896a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800896e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008972:	f8bd 3000 	ldrh.w	r3, [sp]
 8008976:	4581      	cmp	r9, r0
 8008978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800897c:	f84c 3b04 	str.w	r3, [ip], #4
 8008980:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008984:	d2db      	bcs.n	800893e <quorem+0x42>
 8008986:	f855 300b 	ldr.w	r3, [r5, fp]
 800898a:	b92b      	cbnz	r3, 8008998 <quorem+0x9c>
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	3b04      	subs	r3, #4
 8008990:	429d      	cmp	r5, r3
 8008992:	461a      	mov	r2, r3
 8008994:	d32c      	bcc.n	80089f0 <quorem+0xf4>
 8008996:	613c      	str	r4, [r7, #16]
 8008998:	4638      	mov	r0, r7
 800899a:	f001 f9f1 	bl	8009d80 <__mcmp>
 800899e:	2800      	cmp	r0, #0
 80089a0:	db22      	blt.n	80089e8 <quorem+0xec>
 80089a2:	3601      	adds	r6, #1
 80089a4:	4629      	mov	r1, r5
 80089a6:	2000      	movs	r0, #0
 80089a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80089ac:	f8d1 c000 	ldr.w	ip, [r1]
 80089b0:	b293      	uxth	r3, r2
 80089b2:	1ac3      	subs	r3, r0, r3
 80089b4:	0c12      	lsrs	r2, r2, #16
 80089b6:	fa13 f38c 	uxtah	r3, r3, ip
 80089ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80089be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c8:	45c1      	cmp	r9, r8
 80089ca:	f841 3b04 	str.w	r3, [r1], #4
 80089ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089d2:	d2e9      	bcs.n	80089a8 <quorem+0xac>
 80089d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089dc:	b922      	cbnz	r2, 80089e8 <quorem+0xec>
 80089de:	3b04      	subs	r3, #4
 80089e0:	429d      	cmp	r5, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	d30a      	bcc.n	80089fc <quorem+0x100>
 80089e6:	613c      	str	r4, [r7, #16]
 80089e8:	4630      	mov	r0, r6
 80089ea:	b003      	add	sp, #12
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	3b04      	subs	r3, #4
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	d1ce      	bne.n	8008996 <quorem+0x9a>
 80089f8:	3c01      	subs	r4, #1
 80089fa:	e7c9      	b.n	8008990 <quorem+0x94>
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	3b04      	subs	r3, #4
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	d1f0      	bne.n	80089e6 <quorem+0xea>
 8008a04:	3c01      	subs	r4, #1
 8008a06:	e7eb      	b.n	80089e0 <quorem+0xe4>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	e7ee      	b.n	80089ea <quorem+0xee>
 8008a0c:	0000      	movs	r0, r0
	...

08008a10 <_dtoa_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ed2d 8b04 	vpush	{d8-d9}
 8008a18:	69c5      	ldr	r5, [r0, #28]
 8008a1a:	b093      	sub	sp, #76	; 0x4c
 8008a1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a20:	ec57 6b10 	vmov	r6, r7, d0
 8008a24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a28:	9107      	str	r1, [sp, #28]
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a2e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a30:	b975      	cbnz	r5, 8008a50 <_dtoa_r+0x40>
 8008a32:	2010      	movs	r0, #16
 8008a34:	f000 fe2a 	bl	800968c <malloc>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	61e0      	str	r0, [r4, #28]
 8008a3c:	b920      	cbnz	r0, 8008a48 <_dtoa_r+0x38>
 8008a3e:	4bae      	ldr	r3, [pc, #696]	; (8008cf8 <_dtoa_r+0x2e8>)
 8008a40:	21ef      	movs	r1, #239	; 0xef
 8008a42:	48ae      	ldr	r0, [pc, #696]	; (8008cfc <_dtoa_r+0x2ec>)
 8008a44:	f002 fc64 	bl	800b310 <__assert_func>
 8008a48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a4c:	6005      	str	r5, [r0, #0]
 8008a4e:	60c5      	str	r5, [r0, #12]
 8008a50:	69e3      	ldr	r3, [r4, #28]
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	b151      	cbz	r1, 8008a6c <_dtoa_r+0x5c>
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	604a      	str	r2, [r1, #4]
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4093      	lsls	r3, r2
 8008a5e:	608b      	str	r3, [r1, #8]
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 ff07 	bl	8009874 <_Bfree>
 8008a66:	69e3      	ldr	r3, [r4, #28]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	1e3b      	subs	r3, r7, #0
 8008a6e:	bfbb      	ittet	lt
 8008a70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a74:	9303      	strlt	r3, [sp, #12]
 8008a76:	2300      	movge	r3, #0
 8008a78:	2201      	movlt	r2, #1
 8008a7a:	bfac      	ite	ge
 8008a7c:	f8c8 3000 	strge.w	r3, [r8]
 8008a80:	f8c8 2000 	strlt.w	r2, [r8]
 8008a84:	4b9e      	ldr	r3, [pc, #632]	; (8008d00 <_dtoa_r+0x2f0>)
 8008a86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a8a:	ea33 0308 	bics.w	r3, r3, r8
 8008a8e:	d11b      	bne.n	8008ac8 <_dtoa_r+0xb8>
 8008a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a92:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a9c:	4333      	orrs	r3, r6
 8008a9e:	f000 8593 	beq.w	80095c8 <_dtoa_r+0xbb8>
 8008aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa4:	b963      	cbnz	r3, 8008ac0 <_dtoa_r+0xb0>
 8008aa6:	4b97      	ldr	r3, [pc, #604]	; (8008d04 <_dtoa_r+0x2f4>)
 8008aa8:	e027      	b.n	8008afa <_dtoa_r+0xea>
 8008aaa:	4b97      	ldr	r3, [pc, #604]	; (8008d08 <_dtoa_r+0x2f8>)
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	9800      	ldr	r0, [sp, #0]
 8008ab6:	b013      	add	sp, #76	; 0x4c
 8008ab8:	ecbd 8b04 	vpop	{d8-d9}
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	4b90      	ldr	r3, [pc, #576]	; (8008d04 <_dtoa_r+0x2f4>)
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	3303      	adds	r3, #3
 8008ac6:	e7f3      	b.n	8008ab0 <_dtoa_r+0xa0>
 8008ac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	ec51 0b17 	vmov	r0, r1, d7
 8008ad2:	eeb0 8a47 	vmov.f32	s16, s14
 8008ad6:	eef0 8a67 	vmov.f32	s17, s15
 8008ada:	2300      	movs	r3, #0
 8008adc:	f7f7 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ae0:	4681      	mov	r9, r0
 8008ae2:	b160      	cbz	r0, 8008afe <_dtoa_r+0xee>
 8008ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8568 	beq.w	80095c2 <_dtoa_r+0xbb2>
 8008af2:	4b86      	ldr	r3, [pc, #536]	; (8008d0c <_dtoa_r+0x2fc>)
 8008af4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	e7da      	b.n	8008ab4 <_dtoa_r+0xa4>
 8008afe:	aa10      	add	r2, sp, #64	; 0x40
 8008b00:	a911      	add	r1, sp, #68	; 0x44
 8008b02:	4620      	mov	r0, r4
 8008b04:	eeb0 0a48 	vmov.f32	s0, s16
 8008b08:	eef0 0a68 	vmov.f32	s1, s17
 8008b0c:	f001 fa4e 	bl	8009fac <__d2b>
 8008b10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b14:	4682      	mov	sl, r0
 8008b16:	2d00      	cmp	r5, #0
 8008b18:	d07f      	beq.n	8008c1a <_dtoa_r+0x20a>
 8008b1a:	ee18 3a90 	vmov	r3, s17
 8008b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b26:	ec51 0b18 	vmov	r0, r1, d8
 8008b2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b36:	4619      	mov	r1, r3
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4b75      	ldr	r3, [pc, #468]	; (8008d10 <_dtoa_r+0x300>)
 8008b3c:	f7f7 fbac 	bl	8000298 <__aeabi_dsub>
 8008b40:	a367      	add	r3, pc, #412	; (adr r3, 8008ce0 <_dtoa_r+0x2d0>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fd5f 	bl	8000608 <__aeabi_dmul>
 8008b4a:	a367      	add	r3, pc, #412	; (adr r3, 8008ce8 <_dtoa_r+0x2d8>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fba4 	bl	800029c <__adddf3>
 8008b54:	4606      	mov	r6, r0
 8008b56:	4628      	mov	r0, r5
 8008b58:	460f      	mov	r7, r1
 8008b5a:	f7f7 fceb 	bl	8000534 <__aeabi_i2d>
 8008b5e:	a364      	add	r3, pc, #400	; (adr r3, 8008cf0 <_dtoa_r+0x2e0>)
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	f7f7 fd50 	bl	8000608 <__aeabi_dmul>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f7f7 fb94 	bl	800029c <__adddf3>
 8008b74:	4606      	mov	r6, r0
 8008b76:	460f      	mov	r7, r1
 8008b78:	f7f7 fff6 	bl	8000b68 <__aeabi_d2iz>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4683      	mov	fp, r0
 8008b80:	2300      	movs	r3, #0
 8008b82:	4630      	mov	r0, r6
 8008b84:	4639      	mov	r1, r7
 8008b86:	f7f7 ffb1 	bl	8000aec <__aeabi_dcmplt>
 8008b8a:	b148      	cbz	r0, 8008ba0 <_dtoa_r+0x190>
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	f7f7 fcd1 	bl	8000534 <__aeabi_i2d>
 8008b92:	4632      	mov	r2, r6
 8008b94:	463b      	mov	r3, r7
 8008b96:	f7f7 ff9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b9a:	b908      	cbnz	r0, 8008ba0 <_dtoa_r+0x190>
 8008b9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ba0:	f1bb 0f16 	cmp.w	fp, #22
 8008ba4:	d857      	bhi.n	8008c56 <_dtoa_r+0x246>
 8008ba6:	4b5b      	ldr	r3, [pc, #364]	; (8008d14 <_dtoa_r+0x304>)
 8008ba8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	ec51 0b18 	vmov	r0, r1, d8
 8008bb4:	f7f7 ff9a 	bl	8000aec <__aeabi_dcmplt>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d04e      	beq.n	8008c5a <_dtoa_r+0x24a>
 8008bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8008bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bc6:	1b5b      	subs	r3, r3, r5
 8008bc8:	1e5a      	subs	r2, r3, #1
 8008bca:	bf45      	ittet	mi
 8008bcc:	f1c3 0301 	rsbmi	r3, r3, #1
 8008bd0:	9305      	strmi	r3, [sp, #20]
 8008bd2:	2300      	movpl	r3, #0
 8008bd4:	2300      	movmi	r3, #0
 8008bd6:	9206      	str	r2, [sp, #24]
 8008bd8:	bf54      	ite	pl
 8008bda:	9305      	strpl	r3, [sp, #20]
 8008bdc:	9306      	strmi	r3, [sp, #24]
 8008bde:	f1bb 0f00 	cmp.w	fp, #0
 8008be2:	db3c      	blt.n	8008c5e <_dtoa_r+0x24e>
 8008be4:	9b06      	ldr	r3, [sp, #24]
 8008be6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008bea:	445b      	add	r3, fp
 8008bec:	9306      	str	r3, [sp, #24]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9308      	str	r3, [sp, #32]
 8008bf2:	9b07      	ldr	r3, [sp, #28]
 8008bf4:	2b09      	cmp	r3, #9
 8008bf6:	d868      	bhi.n	8008cca <_dtoa_r+0x2ba>
 8008bf8:	2b05      	cmp	r3, #5
 8008bfa:	bfc4      	itt	gt
 8008bfc:	3b04      	subgt	r3, #4
 8008bfe:	9307      	strgt	r3, [sp, #28]
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	f1a3 0302 	sub.w	r3, r3, #2
 8008c06:	bfcc      	ite	gt
 8008c08:	2500      	movgt	r5, #0
 8008c0a:	2501      	movle	r5, #1
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	f200 8085 	bhi.w	8008d1c <_dtoa_r+0x30c>
 8008c12:	e8df f003 	tbb	[pc, r3]
 8008c16:	3b2e      	.short	0x3b2e
 8008c18:	5839      	.short	0x5839
 8008c1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c1e:	441d      	add	r5, r3
 8008c20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c24:	2b20      	cmp	r3, #32
 8008c26:	bfc1      	itttt	gt
 8008c28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008c34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008c38:	bfd6      	itet	le
 8008c3a:	f1c3 0320 	rsble	r3, r3, #32
 8008c3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c42:	fa06 f003 	lslle.w	r0, r6, r3
 8008c46:	f7f7 fc65 	bl	8000514 <__aeabi_ui2d>
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008c50:	3d01      	subs	r5, #1
 8008c52:	920e      	str	r2, [sp, #56]	; 0x38
 8008c54:	e76f      	b.n	8008b36 <_dtoa_r+0x126>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e7b3      	b.n	8008bc2 <_dtoa_r+0x1b2>
 8008c5a:	900c      	str	r0, [sp, #48]	; 0x30
 8008c5c:	e7b2      	b.n	8008bc4 <_dtoa_r+0x1b4>
 8008c5e:	9b05      	ldr	r3, [sp, #20]
 8008c60:	eba3 030b 	sub.w	r3, r3, fp
 8008c64:	9305      	str	r3, [sp, #20]
 8008c66:	f1cb 0300 	rsb	r3, fp, #0
 8008c6a:	9308      	str	r3, [sp, #32]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c70:	e7bf      	b.n	8008bf2 <_dtoa_r+0x1e2>
 8008c72:	2300      	movs	r3, #0
 8008c74:	9309      	str	r3, [sp, #36]	; 0x24
 8008c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dc52      	bgt.n	8008d22 <_dtoa_r+0x312>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	461a      	mov	r2, r3
 8008c84:	920a      	str	r2, [sp, #40]	; 0x28
 8008c86:	e00b      	b.n	8008ca0 <_dtoa_r+0x290>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e7f3      	b.n	8008c74 <_dtoa_r+0x264>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c92:	445b      	add	r3, fp
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	3301      	adds	r3, #1
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	9304      	str	r3, [sp, #16]
 8008c9c:	bfb8      	it	lt
 8008c9e:	2301      	movlt	r3, #1
 8008ca0:	69e0      	ldr	r0, [r4, #28]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	f102 0614 	add.w	r6, r2, #20
 8008caa:	429e      	cmp	r6, r3
 8008cac:	d93d      	bls.n	8008d2a <_dtoa_r+0x31a>
 8008cae:	6041      	str	r1, [r0, #4]
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 fd9f 	bl	80097f4 <_Balloc>
 8008cb6:	9000      	str	r0, [sp, #0]
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d139      	bne.n	8008d30 <_dtoa_r+0x320>
 8008cbc:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <_dtoa_r+0x308>)
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	f240 11af 	movw	r1, #431	; 0x1af
 8008cc4:	e6bd      	b.n	8008a42 <_dtoa_r+0x32>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e7e1      	b.n	8008c8e <_dtoa_r+0x27e>
 8008cca:	2501      	movs	r5, #1
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9307      	str	r3, [sp, #28]
 8008cd0:	9509      	str	r5, [sp, #36]	; 0x24
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2312      	movs	r3, #18
 8008cde:	e7d1      	b.n	8008c84 <_dtoa_r+0x274>
 8008ce0:	636f4361 	.word	0x636f4361
 8008ce4:	3fd287a7 	.word	0x3fd287a7
 8008ce8:	8b60c8b3 	.word	0x8b60c8b3
 8008cec:	3fc68a28 	.word	0x3fc68a28
 8008cf0:	509f79fb 	.word	0x509f79fb
 8008cf4:	3fd34413 	.word	0x3fd34413
 8008cf8:	0800d0d2 	.word	0x0800d0d2
 8008cfc:	0800d0e9 	.word	0x0800d0e9
 8008d00:	7ff00000 	.word	0x7ff00000
 8008d04:	0800d0ce 	.word	0x0800d0ce
 8008d08:	0800d0c5 	.word	0x0800d0c5
 8008d0c:	0800d09d 	.word	0x0800d09d
 8008d10:	3ff80000 	.word	0x3ff80000
 8008d14:	0800d1d8 	.word	0x0800d1d8
 8008d18:	0800d141 	.word	0x0800d141
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d20:	e7d7      	b.n	8008cd2 <_dtoa_r+0x2c2>
 8008d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	9304      	str	r3, [sp, #16]
 8008d28:	e7ba      	b.n	8008ca0 <_dtoa_r+0x290>
 8008d2a:	3101      	adds	r1, #1
 8008d2c:	0052      	lsls	r2, r2, #1
 8008d2e:	e7ba      	b.n	8008ca6 <_dtoa_r+0x296>
 8008d30:	69e3      	ldr	r3, [r4, #28]
 8008d32:	9a00      	ldr	r2, [sp, #0]
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	2b0e      	cmp	r3, #14
 8008d3a:	f200 80a8 	bhi.w	8008e8e <_dtoa_r+0x47e>
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	f000 80a5 	beq.w	8008e8e <_dtoa_r+0x47e>
 8008d44:	f1bb 0f00 	cmp.w	fp, #0
 8008d48:	dd38      	ble.n	8008dbc <_dtoa_r+0x3ac>
 8008d4a:	4bc0      	ldr	r3, [pc, #768]	; (800904c <_dtoa_r+0x63c>)
 8008d4c:	f00b 020f 	and.w	r2, fp, #15
 8008d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008d58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008d5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008d60:	d019      	beq.n	8008d96 <_dtoa_r+0x386>
 8008d62:	4bbb      	ldr	r3, [pc, #748]	; (8009050 <_dtoa_r+0x640>)
 8008d64:	ec51 0b18 	vmov	r0, r1, d8
 8008d68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d6c:	f7f7 fd76 	bl	800085c <__aeabi_ddiv>
 8008d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d74:	f008 080f 	and.w	r8, r8, #15
 8008d78:	2503      	movs	r5, #3
 8008d7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009050 <_dtoa_r+0x640>
 8008d7e:	f1b8 0f00 	cmp.w	r8, #0
 8008d82:	d10a      	bne.n	8008d9a <_dtoa_r+0x38a>
 8008d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d88:	4632      	mov	r2, r6
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	f7f7 fd66 	bl	800085c <__aeabi_ddiv>
 8008d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d94:	e02b      	b.n	8008dee <_dtoa_r+0x3de>
 8008d96:	2502      	movs	r5, #2
 8008d98:	e7ef      	b.n	8008d7a <_dtoa_r+0x36a>
 8008d9a:	f018 0f01 	tst.w	r8, #1
 8008d9e:	d008      	beq.n	8008db2 <_dtoa_r+0x3a2>
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008da8:	f7f7 fc2e 	bl	8000608 <__aeabi_dmul>
 8008dac:	3501      	adds	r5, #1
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008db6:	f109 0908 	add.w	r9, r9, #8
 8008dba:	e7e0      	b.n	8008d7e <_dtoa_r+0x36e>
 8008dbc:	f000 809f 	beq.w	8008efe <_dtoa_r+0x4ee>
 8008dc0:	f1cb 0600 	rsb	r6, fp, #0
 8008dc4:	4ba1      	ldr	r3, [pc, #644]	; (800904c <_dtoa_r+0x63c>)
 8008dc6:	4fa2      	ldr	r7, [pc, #648]	; (8009050 <_dtoa_r+0x640>)
 8008dc8:	f006 020f 	and.w	r2, r6, #15
 8008dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	ec51 0b18 	vmov	r0, r1, d8
 8008dd8:	f7f7 fc16 	bl	8000608 <__aeabi_dmul>
 8008ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de0:	1136      	asrs	r6, r6, #4
 8008de2:	2300      	movs	r3, #0
 8008de4:	2502      	movs	r5, #2
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	d17e      	bne.n	8008ee8 <_dtoa_r+0x4d8>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1d0      	bne.n	8008d90 <_dtoa_r+0x380>
 8008dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008df0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8084 	beq.w	8008f02 <_dtoa_r+0x4f2>
 8008dfa:	4b96      	ldr	r3, [pc, #600]	; (8009054 <_dtoa_r+0x644>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fe73 	bl	8000aec <__aeabi_dcmplt>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d07b      	beq.n	8008f02 <_dtoa_r+0x4f2>
 8008e0a:	9b04      	ldr	r3, [sp, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d078      	beq.n	8008f02 <_dtoa_r+0x4f2>
 8008e10:	9b01      	ldr	r3, [sp, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dd39      	ble.n	8008e8a <_dtoa_r+0x47a>
 8008e16:	4b90      	ldr	r3, [pc, #576]	; (8009058 <_dtoa_r+0x648>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	f7f7 fbf3 	bl	8000608 <__aeabi_dmul>
 8008e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e26:	9e01      	ldr	r6, [sp, #4]
 8008e28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e32:	4628      	mov	r0, r5
 8008e34:	f7f7 fb7e 	bl	8000534 <__aeabi_i2d>
 8008e38:	4642      	mov	r2, r8
 8008e3a:	464b      	mov	r3, r9
 8008e3c:	f7f7 fbe4 	bl	8000608 <__aeabi_dmul>
 8008e40:	4b86      	ldr	r3, [pc, #536]	; (800905c <_dtoa_r+0x64c>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f7f7 fa2a 	bl	800029c <__adddf3>
 8008e48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	2e00      	cmp	r6, #0
 8008e54:	d158      	bne.n	8008f08 <_dtoa_r+0x4f8>
 8008e56:	4b82      	ldr	r3, [pc, #520]	; (8009060 <_dtoa_r+0x650>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fa1b 	bl	8000298 <__aeabi_dsub>
 8008e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e66:	4680      	mov	r8, r0
 8008e68:	4689      	mov	r9, r1
 8008e6a:	f7f7 fe5d 	bl	8000b28 <__aeabi_dcmpgt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f040 8296 	bne.w	80093a0 <_dtoa_r+0x990>
 8008e74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e78:	4640      	mov	r0, r8
 8008e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e7e:	4649      	mov	r1, r9
 8008e80:	f7f7 fe34 	bl	8000aec <__aeabi_dcmplt>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f040 8289 	bne.w	800939c <_dtoa_r+0x98c>
 8008e8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f2c0 814e 	blt.w	8009132 <_dtoa_r+0x722>
 8008e96:	f1bb 0f0e 	cmp.w	fp, #14
 8008e9a:	f300 814a 	bgt.w	8009132 <_dtoa_r+0x722>
 8008e9e:	4b6b      	ldr	r3, [pc, #428]	; (800904c <_dtoa_r+0x63c>)
 8008ea0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f280 80dc 	bge.w	8009068 <_dtoa_r+0x658>
 8008eb0:	9b04      	ldr	r3, [sp, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f300 80d8 	bgt.w	8009068 <_dtoa_r+0x658>
 8008eb8:	f040 826f 	bne.w	800939a <_dtoa_r+0x98a>
 8008ebc:	4b68      	ldr	r3, [pc, #416]	; (8009060 <_dtoa_r+0x650>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7f7 fba0 	bl	8000608 <__aeabi_dmul>
 8008ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ecc:	f7f7 fe22 	bl	8000b14 <__aeabi_dcmpge>
 8008ed0:	9e04      	ldr	r6, [sp, #16]
 8008ed2:	4637      	mov	r7, r6
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 8245 	bne.w	8009364 <_dtoa_r+0x954>
 8008eda:	9d00      	ldr	r5, [sp, #0]
 8008edc:	2331      	movs	r3, #49	; 0x31
 8008ede:	f805 3b01 	strb.w	r3, [r5], #1
 8008ee2:	f10b 0b01 	add.w	fp, fp, #1
 8008ee6:	e241      	b.n	800936c <_dtoa_r+0x95c>
 8008ee8:	07f2      	lsls	r2, r6, #31
 8008eea:	d505      	bpl.n	8008ef8 <_dtoa_r+0x4e8>
 8008eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef0:	f7f7 fb8a 	bl	8000608 <__aeabi_dmul>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	1076      	asrs	r6, r6, #1
 8008efa:	3708      	adds	r7, #8
 8008efc:	e773      	b.n	8008de6 <_dtoa_r+0x3d6>
 8008efe:	2502      	movs	r5, #2
 8008f00:	e775      	b.n	8008dee <_dtoa_r+0x3de>
 8008f02:	9e04      	ldr	r6, [sp, #16]
 8008f04:	465f      	mov	r7, fp
 8008f06:	e792      	b.n	8008e2e <_dtoa_r+0x41e>
 8008f08:	9900      	ldr	r1, [sp, #0]
 8008f0a:	4b50      	ldr	r3, [pc, #320]	; (800904c <_dtoa_r+0x63c>)
 8008f0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f10:	4431      	add	r1, r6
 8008f12:	9102      	str	r1, [sp, #8]
 8008f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f16:	eeb0 9a47 	vmov.f32	s18, s14
 8008f1a:	eef0 9a67 	vmov.f32	s19, s15
 8008f1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f26:	2900      	cmp	r1, #0
 8008f28:	d044      	beq.n	8008fb4 <_dtoa_r+0x5a4>
 8008f2a:	494e      	ldr	r1, [pc, #312]	; (8009064 <_dtoa_r+0x654>)
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f7f7 fc95 	bl	800085c <__aeabi_ddiv>
 8008f32:	ec53 2b19 	vmov	r2, r3, d9
 8008f36:	f7f7 f9af 	bl	8000298 <__aeabi_dsub>
 8008f3a:	9d00      	ldr	r5, [sp, #0]
 8008f3c:	ec41 0b19 	vmov	d9, r0, r1
 8008f40:	4649      	mov	r1, r9
 8008f42:	4640      	mov	r0, r8
 8008f44:	f7f7 fe10 	bl	8000b68 <__aeabi_d2iz>
 8008f48:	4606      	mov	r6, r0
 8008f4a:	f7f7 faf3 	bl	8000534 <__aeabi_i2d>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 f99f 	bl	8000298 <__aeabi_dsub>
 8008f5a:	3630      	adds	r6, #48	; 0x30
 8008f5c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f60:	ec53 2b19 	vmov	r2, r3, d9
 8008f64:	4680      	mov	r8, r0
 8008f66:	4689      	mov	r9, r1
 8008f68:	f7f7 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d164      	bne.n	800903a <_dtoa_r+0x62a>
 8008f70:	4642      	mov	r2, r8
 8008f72:	464b      	mov	r3, r9
 8008f74:	4937      	ldr	r1, [pc, #220]	; (8009054 <_dtoa_r+0x644>)
 8008f76:	2000      	movs	r0, #0
 8008f78:	f7f7 f98e 	bl	8000298 <__aeabi_dsub>
 8008f7c:	ec53 2b19 	vmov	r2, r3, d9
 8008f80:	f7f7 fdb4 	bl	8000aec <__aeabi_dcmplt>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f040 80b6 	bne.w	80090f6 <_dtoa_r+0x6e6>
 8008f8a:	9b02      	ldr	r3, [sp, #8]
 8008f8c:	429d      	cmp	r5, r3
 8008f8e:	f43f af7c 	beq.w	8008e8a <_dtoa_r+0x47a>
 8008f92:	4b31      	ldr	r3, [pc, #196]	; (8009058 <_dtoa_r+0x648>)
 8008f94:	ec51 0b19 	vmov	r0, r1, d9
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 fb35 	bl	8000608 <__aeabi_dmul>
 8008f9e:	4b2e      	ldr	r3, [pc, #184]	; (8009058 <_dtoa_r+0x648>)
 8008fa0:	ec41 0b19 	vmov	d9, r0, r1
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 fb2d 	bl	8000608 <__aeabi_dmul>
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	e7c5      	b.n	8008f40 <_dtoa_r+0x530>
 8008fb4:	ec51 0b17 	vmov	r0, r1, d7
 8008fb8:	f7f7 fb26 	bl	8000608 <__aeabi_dmul>
 8008fbc:	9b02      	ldr	r3, [sp, #8]
 8008fbe:	9d00      	ldr	r5, [sp, #0]
 8008fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc2:	ec41 0b19 	vmov	d9, r0, r1
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4640      	mov	r0, r8
 8008fca:	f7f7 fdcd 	bl	8000b68 <__aeabi_d2iz>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	f7f7 fab0 	bl	8000534 <__aeabi_i2d>
 8008fd4:	3630      	adds	r6, #48	; 0x30
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4649      	mov	r1, r9
 8008fde:	f7f7 f95b 	bl	8000298 <__aeabi_dsub>
 8008fe2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	429d      	cmp	r5, r3
 8008fea:	4680      	mov	r8, r0
 8008fec:	4689      	mov	r9, r1
 8008fee:	f04f 0200 	mov.w	r2, #0
 8008ff2:	d124      	bne.n	800903e <_dtoa_r+0x62e>
 8008ff4:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <_dtoa_r+0x654>)
 8008ff6:	ec51 0b19 	vmov	r0, r1, d9
 8008ffa:	f7f7 f94f 	bl	800029c <__adddf3>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 fd8f 	bl	8000b28 <__aeabi_dcmpgt>
 800900a:	2800      	cmp	r0, #0
 800900c:	d173      	bne.n	80090f6 <_dtoa_r+0x6e6>
 800900e:	ec53 2b19 	vmov	r2, r3, d9
 8009012:	4914      	ldr	r1, [pc, #80]	; (8009064 <_dtoa_r+0x654>)
 8009014:	2000      	movs	r0, #0
 8009016:	f7f7 f93f 	bl	8000298 <__aeabi_dsub>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4640      	mov	r0, r8
 8009020:	4649      	mov	r1, r9
 8009022:	f7f7 fd63 	bl	8000aec <__aeabi_dcmplt>
 8009026:	2800      	cmp	r0, #0
 8009028:	f43f af2f 	beq.w	8008e8a <_dtoa_r+0x47a>
 800902c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800902e:	1e6b      	subs	r3, r5, #1
 8009030:	930f      	str	r3, [sp, #60]	; 0x3c
 8009032:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009036:	2b30      	cmp	r3, #48	; 0x30
 8009038:	d0f8      	beq.n	800902c <_dtoa_r+0x61c>
 800903a:	46bb      	mov	fp, r7
 800903c:	e04a      	b.n	80090d4 <_dtoa_r+0x6c4>
 800903e:	4b06      	ldr	r3, [pc, #24]	; (8009058 <_dtoa_r+0x648>)
 8009040:	f7f7 fae2 	bl	8000608 <__aeabi_dmul>
 8009044:	4680      	mov	r8, r0
 8009046:	4689      	mov	r9, r1
 8009048:	e7bd      	b.n	8008fc6 <_dtoa_r+0x5b6>
 800904a:	bf00      	nop
 800904c:	0800d1d8 	.word	0x0800d1d8
 8009050:	0800d1b0 	.word	0x0800d1b0
 8009054:	3ff00000 	.word	0x3ff00000
 8009058:	40240000 	.word	0x40240000
 800905c:	401c0000 	.word	0x401c0000
 8009060:	40140000 	.word	0x40140000
 8009064:	3fe00000 	.word	0x3fe00000
 8009068:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800906c:	9d00      	ldr	r5, [sp, #0]
 800906e:	4642      	mov	r2, r8
 8009070:	464b      	mov	r3, r9
 8009072:	4630      	mov	r0, r6
 8009074:	4639      	mov	r1, r7
 8009076:	f7f7 fbf1 	bl	800085c <__aeabi_ddiv>
 800907a:	f7f7 fd75 	bl	8000b68 <__aeabi_d2iz>
 800907e:	9001      	str	r0, [sp, #4]
 8009080:	f7f7 fa58 	bl	8000534 <__aeabi_i2d>
 8009084:	4642      	mov	r2, r8
 8009086:	464b      	mov	r3, r9
 8009088:	f7f7 fabe 	bl	8000608 <__aeabi_dmul>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 f900 	bl	8000298 <__aeabi_dsub>
 8009098:	9e01      	ldr	r6, [sp, #4]
 800909a:	9f04      	ldr	r7, [sp, #16]
 800909c:	3630      	adds	r6, #48	; 0x30
 800909e:	f805 6b01 	strb.w	r6, [r5], #1
 80090a2:	9e00      	ldr	r6, [sp, #0]
 80090a4:	1bae      	subs	r6, r5, r6
 80090a6:	42b7      	cmp	r7, r6
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	d134      	bne.n	8009118 <_dtoa_r+0x708>
 80090ae:	f7f7 f8f5 	bl	800029c <__adddf3>
 80090b2:	4642      	mov	r2, r8
 80090b4:	464b      	mov	r3, r9
 80090b6:	4606      	mov	r6, r0
 80090b8:	460f      	mov	r7, r1
 80090ba:	f7f7 fd35 	bl	8000b28 <__aeabi_dcmpgt>
 80090be:	b9c8      	cbnz	r0, 80090f4 <_dtoa_r+0x6e4>
 80090c0:	4642      	mov	r2, r8
 80090c2:	464b      	mov	r3, r9
 80090c4:	4630      	mov	r0, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	f7f7 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 80090cc:	b110      	cbz	r0, 80090d4 <_dtoa_r+0x6c4>
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	07db      	lsls	r3, r3, #31
 80090d2:	d40f      	bmi.n	80090f4 <_dtoa_r+0x6e4>
 80090d4:	4651      	mov	r1, sl
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fbcc 	bl	8009874 <_Bfree>
 80090dc:	2300      	movs	r3, #0
 80090de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090e0:	702b      	strb	r3, [r5, #0]
 80090e2:	f10b 0301 	add.w	r3, fp, #1
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f43f ace2 	beq.w	8008ab4 <_dtoa_r+0xa4>
 80090f0:	601d      	str	r5, [r3, #0]
 80090f2:	e4df      	b.n	8008ab4 <_dtoa_r+0xa4>
 80090f4:	465f      	mov	r7, fp
 80090f6:	462b      	mov	r3, r5
 80090f8:	461d      	mov	r5, r3
 80090fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090fe:	2a39      	cmp	r2, #57	; 0x39
 8009100:	d106      	bne.n	8009110 <_dtoa_r+0x700>
 8009102:	9a00      	ldr	r2, [sp, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d1f7      	bne.n	80090f8 <_dtoa_r+0x6e8>
 8009108:	9900      	ldr	r1, [sp, #0]
 800910a:	2230      	movs	r2, #48	; 0x30
 800910c:	3701      	adds	r7, #1
 800910e:	700a      	strb	r2, [r1, #0]
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	3201      	adds	r2, #1
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	e790      	b.n	800903a <_dtoa_r+0x62a>
 8009118:	4ba3      	ldr	r3, [pc, #652]	; (80093a8 <_dtoa_r+0x998>)
 800911a:	2200      	movs	r2, #0
 800911c:	f7f7 fa74 	bl	8000608 <__aeabi_dmul>
 8009120:	2200      	movs	r2, #0
 8009122:	2300      	movs	r3, #0
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	f7f7 fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800912c:	2800      	cmp	r0, #0
 800912e:	d09e      	beq.n	800906e <_dtoa_r+0x65e>
 8009130:	e7d0      	b.n	80090d4 <_dtoa_r+0x6c4>
 8009132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009134:	2a00      	cmp	r2, #0
 8009136:	f000 80ca 	beq.w	80092ce <_dtoa_r+0x8be>
 800913a:	9a07      	ldr	r2, [sp, #28]
 800913c:	2a01      	cmp	r2, #1
 800913e:	f300 80ad 	bgt.w	800929c <_dtoa_r+0x88c>
 8009142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009144:	2a00      	cmp	r2, #0
 8009146:	f000 80a5 	beq.w	8009294 <_dtoa_r+0x884>
 800914a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800914e:	9e08      	ldr	r6, [sp, #32]
 8009150:	9d05      	ldr	r5, [sp, #20]
 8009152:	9a05      	ldr	r2, [sp, #20]
 8009154:	441a      	add	r2, r3
 8009156:	9205      	str	r2, [sp, #20]
 8009158:	9a06      	ldr	r2, [sp, #24]
 800915a:	2101      	movs	r1, #1
 800915c:	441a      	add	r2, r3
 800915e:	4620      	mov	r0, r4
 8009160:	9206      	str	r2, [sp, #24]
 8009162:	f000 fc87 	bl	8009a74 <__i2b>
 8009166:	4607      	mov	r7, r0
 8009168:	b165      	cbz	r5, 8009184 <_dtoa_r+0x774>
 800916a:	9b06      	ldr	r3, [sp, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd09      	ble.n	8009184 <_dtoa_r+0x774>
 8009170:	42ab      	cmp	r3, r5
 8009172:	9a05      	ldr	r2, [sp, #20]
 8009174:	bfa8      	it	ge
 8009176:	462b      	movge	r3, r5
 8009178:	1ad2      	subs	r2, r2, r3
 800917a:	9205      	str	r2, [sp, #20]
 800917c:	9a06      	ldr	r2, [sp, #24]
 800917e:	1aed      	subs	r5, r5, r3
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	9306      	str	r3, [sp, #24]
 8009184:	9b08      	ldr	r3, [sp, #32]
 8009186:	b1f3      	cbz	r3, 80091c6 <_dtoa_r+0x7b6>
 8009188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 80a3 	beq.w	80092d6 <_dtoa_r+0x8c6>
 8009190:	2e00      	cmp	r6, #0
 8009192:	dd10      	ble.n	80091b6 <_dtoa_r+0x7a6>
 8009194:	4639      	mov	r1, r7
 8009196:	4632      	mov	r2, r6
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fd2b 	bl	8009bf4 <__pow5mult>
 800919e:	4652      	mov	r2, sl
 80091a0:	4601      	mov	r1, r0
 80091a2:	4607      	mov	r7, r0
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fc7b 	bl	8009aa0 <__multiply>
 80091aa:	4651      	mov	r1, sl
 80091ac:	4680      	mov	r8, r0
 80091ae:	4620      	mov	r0, r4
 80091b0:	f000 fb60 	bl	8009874 <_Bfree>
 80091b4:	46c2      	mov	sl, r8
 80091b6:	9b08      	ldr	r3, [sp, #32]
 80091b8:	1b9a      	subs	r2, r3, r6
 80091ba:	d004      	beq.n	80091c6 <_dtoa_r+0x7b6>
 80091bc:	4651      	mov	r1, sl
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fd18 	bl	8009bf4 <__pow5mult>
 80091c4:	4682      	mov	sl, r0
 80091c6:	2101      	movs	r1, #1
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fc53 	bl	8009a74 <__i2b>
 80091ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	4606      	mov	r6, r0
 80091d4:	f340 8081 	ble.w	80092da <_dtoa_r+0x8ca>
 80091d8:	461a      	mov	r2, r3
 80091da:	4601      	mov	r1, r0
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 fd09 	bl	8009bf4 <__pow5mult>
 80091e2:	9b07      	ldr	r3, [sp, #28]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	4606      	mov	r6, r0
 80091e8:	dd7a      	ble.n	80092e0 <_dtoa_r+0x8d0>
 80091ea:	f04f 0800 	mov.w	r8, #0
 80091ee:	6933      	ldr	r3, [r6, #16]
 80091f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091f4:	6918      	ldr	r0, [r3, #16]
 80091f6:	f000 fbef 	bl	80099d8 <__hi0bits>
 80091fa:	f1c0 0020 	rsb	r0, r0, #32
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	4418      	add	r0, r3
 8009202:	f010 001f 	ands.w	r0, r0, #31
 8009206:	f000 8094 	beq.w	8009332 <_dtoa_r+0x922>
 800920a:	f1c0 0320 	rsb	r3, r0, #32
 800920e:	2b04      	cmp	r3, #4
 8009210:	f340 8085 	ble.w	800931e <_dtoa_r+0x90e>
 8009214:	9b05      	ldr	r3, [sp, #20]
 8009216:	f1c0 001c 	rsb	r0, r0, #28
 800921a:	4403      	add	r3, r0
 800921c:	9305      	str	r3, [sp, #20]
 800921e:	9b06      	ldr	r3, [sp, #24]
 8009220:	4403      	add	r3, r0
 8009222:	4405      	add	r5, r0
 8009224:	9306      	str	r3, [sp, #24]
 8009226:	9b05      	ldr	r3, [sp, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	dd05      	ble.n	8009238 <_dtoa_r+0x828>
 800922c:	4651      	mov	r1, sl
 800922e:	461a      	mov	r2, r3
 8009230:	4620      	mov	r0, r4
 8009232:	f000 fd39 	bl	8009ca8 <__lshift>
 8009236:	4682      	mov	sl, r0
 8009238:	9b06      	ldr	r3, [sp, #24]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dd05      	ble.n	800924a <_dtoa_r+0x83a>
 800923e:	4631      	mov	r1, r6
 8009240:	461a      	mov	r2, r3
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fd30 	bl	8009ca8 <__lshift>
 8009248:	4606      	mov	r6, r0
 800924a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800924c:	2b00      	cmp	r3, #0
 800924e:	d072      	beq.n	8009336 <_dtoa_r+0x926>
 8009250:	4631      	mov	r1, r6
 8009252:	4650      	mov	r0, sl
 8009254:	f000 fd94 	bl	8009d80 <__mcmp>
 8009258:	2800      	cmp	r0, #0
 800925a:	da6c      	bge.n	8009336 <_dtoa_r+0x926>
 800925c:	2300      	movs	r3, #0
 800925e:	4651      	mov	r1, sl
 8009260:	220a      	movs	r2, #10
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fb28 	bl	80098b8 <__multadd>
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800926e:	4682      	mov	sl, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 81b0 	beq.w	80095d6 <_dtoa_r+0xbc6>
 8009276:	2300      	movs	r3, #0
 8009278:	4639      	mov	r1, r7
 800927a:	220a      	movs	r2, #10
 800927c:	4620      	mov	r0, r4
 800927e:	f000 fb1b 	bl	80098b8 <__multadd>
 8009282:	9b01      	ldr	r3, [sp, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	4607      	mov	r7, r0
 8009288:	f300 8096 	bgt.w	80093b8 <_dtoa_r+0x9a8>
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	2b02      	cmp	r3, #2
 8009290:	dc59      	bgt.n	8009346 <_dtoa_r+0x936>
 8009292:	e091      	b.n	80093b8 <_dtoa_r+0x9a8>
 8009294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800929a:	e758      	b.n	800914e <_dtoa_r+0x73e>
 800929c:	9b04      	ldr	r3, [sp, #16]
 800929e:	1e5e      	subs	r6, r3, #1
 80092a0:	9b08      	ldr	r3, [sp, #32]
 80092a2:	42b3      	cmp	r3, r6
 80092a4:	bfbf      	itttt	lt
 80092a6:	9b08      	ldrlt	r3, [sp, #32]
 80092a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80092aa:	9608      	strlt	r6, [sp, #32]
 80092ac:	1af3      	sublt	r3, r6, r3
 80092ae:	bfb4      	ite	lt
 80092b0:	18d2      	addlt	r2, r2, r3
 80092b2:	1b9e      	subge	r6, r3, r6
 80092b4:	9b04      	ldr	r3, [sp, #16]
 80092b6:	bfbc      	itt	lt
 80092b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80092ba:	2600      	movlt	r6, #0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bfb7      	itett	lt
 80092c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80092c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80092c8:	1a9d      	sublt	r5, r3, r2
 80092ca:	2300      	movlt	r3, #0
 80092cc:	e741      	b.n	8009152 <_dtoa_r+0x742>
 80092ce:	9e08      	ldr	r6, [sp, #32]
 80092d0:	9d05      	ldr	r5, [sp, #20]
 80092d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092d4:	e748      	b.n	8009168 <_dtoa_r+0x758>
 80092d6:	9a08      	ldr	r2, [sp, #32]
 80092d8:	e770      	b.n	80091bc <_dtoa_r+0x7ac>
 80092da:	9b07      	ldr	r3, [sp, #28]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	dc19      	bgt.n	8009314 <_dtoa_r+0x904>
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	b9bb      	cbnz	r3, 8009314 <_dtoa_r+0x904>
 80092e4:	9b03      	ldr	r3, [sp, #12]
 80092e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ea:	b99b      	cbnz	r3, 8009314 <_dtoa_r+0x904>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092f2:	0d1b      	lsrs	r3, r3, #20
 80092f4:	051b      	lsls	r3, r3, #20
 80092f6:	b183      	cbz	r3, 800931a <_dtoa_r+0x90a>
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	3301      	adds	r3, #1
 80092fc:	9305      	str	r3, [sp, #20]
 80092fe:	9b06      	ldr	r3, [sp, #24]
 8009300:	3301      	adds	r3, #1
 8009302:	9306      	str	r3, [sp, #24]
 8009304:	f04f 0801 	mov.w	r8, #1
 8009308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800930a:	2b00      	cmp	r3, #0
 800930c:	f47f af6f 	bne.w	80091ee <_dtoa_r+0x7de>
 8009310:	2001      	movs	r0, #1
 8009312:	e774      	b.n	80091fe <_dtoa_r+0x7ee>
 8009314:	f04f 0800 	mov.w	r8, #0
 8009318:	e7f6      	b.n	8009308 <_dtoa_r+0x8f8>
 800931a:	4698      	mov	r8, r3
 800931c:	e7f4      	b.n	8009308 <_dtoa_r+0x8f8>
 800931e:	d082      	beq.n	8009226 <_dtoa_r+0x816>
 8009320:	9a05      	ldr	r2, [sp, #20]
 8009322:	331c      	adds	r3, #28
 8009324:	441a      	add	r2, r3
 8009326:	9205      	str	r2, [sp, #20]
 8009328:	9a06      	ldr	r2, [sp, #24]
 800932a:	441a      	add	r2, r3
 800932c:	441d      	add	r5, r3
 800932e:	9206      	str	r2, [sp, #24]
 8009330:	e779      	b.n	8009226 <_dtoa_r+0x816>
 8009332:	4603      	mov	r3, r0
 8009334:	e7f4      	b.n	8009320 <_dtoa_r+0x910>
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	dc37      	bgt.n	80093ac <_dtoa_r+0x99c>
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	2b02      	cmp	r3, #2
 8009340:	dd34      	ble.n	80093ac <_dtoa_r+0x99c>
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	9b01      	ldr	r3, [sp, #4]
 8009348:	b963      	cbnz	r3, 8009364 <_dtoa_r+0x954>
 800934a:	4631      	mov	r1, r6
 800934c:	2205      	movs	r2, #5
 800934e:	4620      	mov	r0, r4
 8009350:	f000 fab2 	bl	80098b8 <__multadd>
 8009354:	4601      	mov	r1, r0
 8009356:	4606      	mov	r6, r0
 8009358:	4650      	mov	r0, sl
 800935a:	f000 fd11 	bl	8009d80 <__mcmp>
 800935e:	2800      	cmp	r0, #0
 8009360:	f73f adbb 	bgt.w	8008eda <_dtoa_r+0x4ca>
 8009364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009366:	9d00      	ldr	r5, [sp, #0]
 8009368:	ea6f 0b03 	mvn.w	fp, r3
 800936c:	f04f 0800 	mov.w	r8, #0
 8009370:	4631      	mov	r1, r6
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fa7e 	bl	8009874 <_Bfree>
 8009378:	2f00      	cmp	r7, #0
 800937a:	f43f aeab 	beq.w	80090d4 <_dtoa_r+0x6c4>
 800937e:	f1b8 0f00 	cmp.w	r8, #0
 8009382:	d005      	beq.n	8009390 <_dtoa_r+0x980>
 8009384:	45b8      	cmp	r8, r7
 8009386:	d003      	beq.n	8009390 <_dtoa_r+0x980>
 8009388:	4641      	mov	r1, r8
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fa72 	bl	8009874 <_Bfree>
 8009390:	4639      	mov	r1, r7
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fa6e 	bl	8009874 <_Bfree>
 8009398:	e69c      	b.n	80090d4 <_dtoa_r+0x6c4>
 800939a:	2600      	movs	r6, #0
 800939c:	4637      	mov	r7, r6
 800939e:	e7e1      	b.n	8009364 <_dtoa_r+0x954>
 80093a0:	46bb      	mov	fp, r7
 80093a2:	4637      	mov	r7, r6
 80093a4:	e599      	b.n	8008eda <_dtoa_r+0x4ca>
 80093a6:	bf00      	nop
 80093a8:	40240000 	.word	0x40240000
 80093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 80c8 	beq.w	8009544 <_dtoa_r+0xb34>
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	dd05      	ble.n	80093c8 <_dtoa_r+0x9b8>
 80093bc:	4639      	mov	r1, r7
 80093be:	462a      	mov	r2, r5
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 fc71 	bl	8009ca8 <__lshift>
 80093c6:	4607      	mov	r7, r0
 80093c8:	f1b8 0f00 	cmp.w	r8, #0
 80093cc:	d05b      	beq.n	8009486 <_dtoa_r+0xa76>
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4620      	mov	r0, r4
 80093d2:	f000 fa0f 	bl	80097f4 <_Balloc>
 80093d6:	4605      	mov	r5, r0
 80093d8:	b928      	cbnz	r0, 80093e6 <_dtoa_r+0x9d6>
 80093da:	4b83      	ldr	r3, [pc, #524]	; (80095e8 <_dtoa_r+0xbd8>)
 80093dc:	4602      	mov	r2, r0
 80093de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80093e2:	f7ff bb2e 	b.w	8008a42 <_dtoa_r+0x32>
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	3202      	adds	r2, #2
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	f107 010c 	add.w	r1, r7, #12
 80093f0:	300c      	adds	r0, #12
 80093f2:	f7ff fa6e 	bl	80088d2 <memcpy>
 80093f6:	2201      	movs	r2, #1
 80093f8:	4629      	mov	r1, r5
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 fc54 	bl	8009ca8 <__lshift>
 8009400:	9b00      	ldr	r3, [sp, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800940a:	4413      	add	r3, r2
 800940c:	9308      	str	r3, [sp, #32]
 800940e:	9b02      	ldr	r3, [sp, #8]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	46b8      	mov	r8, r7
 8009416:	9306      	str	r3, [sp, #24]
 8009418:	4607      	mov	r7, r0
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	4631      	mov	r1, r6
 800941e:	3b01      	subs	r3, #1
 8009420:	4650      	mov	r0, sl
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	f7ff fa6a 	bl	80088fc <quorem>
 8009428:	4641      	mov	r1, r8
 800942a:	9002      	str	r0, [sp, #8]
 800942c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009430:	4650      	mov	r0, sl
 8009432:	f000 fca5 	bl	8009d80 <__mcmp>
 8009436:	463a      	mov	r2, r7
 8009438:	9005      	str	r0, [sp, #20]
 800943a:	4631      	mov	r1, r6
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fcbb 	bl	8009db8 <__mdiff>
 8009442:	68c2      	ldr	r2, [r0, #12]
 8009444:	4605      	mov	r5, r0
 8009446:	bb02      	cbnz	r2, 800948a <_dtoa_r+0xa7a>
 8009448:	4601      	mov	r1, r0
 800944a:	4650      	mov	r0, sl
 800944c:	f000 fc98 	bl	8009d80 <__mcmp>
 8009450:	4602      	mov	r2, r0
 8009452:	4629      	mov	r1, r5
 8009454:	4620      	mov	r0, r4
 8009456:	9209      	str	r2, [sp, #36]	; 0x24
 8009458:	f000 fa0c 	bl	8009874 <_Bfree>
 800945c:	9b07      	ldr	r3, [sp, #28]
 800945e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009460:	9d04      	ldr	r5, [sp, #16]
 8009462:	ea43 0102 	orr.w	r1, r3, r2
 8009466:	9b06      	ldr	r3, [sp, #24]
 8009468:	4319      	orrs	r1, r3
 800946a:	d110      	bne.n	800948e <_dtoa_r+0xa7e>
 800946c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009470:	d029      	beq.n	80094c6 <_dtoa_r+0xab6>
 8009472:	9b05      	ldr	r3, [sp, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dd02      	ble.n	800947e <_dtoa_r+0xa6e>
 8009478:	9b02      	ldr	r3, [sp, #8]
 800947a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800947e:	9b01      	ldr	r3, [sp, #4]
 8009480:	f883 9000 	strb.w	r9, [r3]
 8009484:	e774      	b.n	8009370 <_dtoa_r+0x960>
 8009486:	4638      	mov	r0, r7
 8009488:	e7ba      	b.n	8009400 <_dtoa_r+0x9f0>
 800948a:	2201      	movs	r2, #1
 800948c:	e7e1      	b.n	8009452 <_dtoa_r+0xa42>
 800948e:	9b05      	ldr	r3, [sp, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	db04      	blt.n	800949e <_dtoa_r+0xa8e>
 8009494:	9907      	ldr	r1, [sp, #28]
 8009496:	430b      	orrs	r3, r1
 8009498:	9906      	ldr	r1, [sp, #24]
 800949a:	430b      	orrs	r3, r1
 800949c:	d120      	bne.n	80094e0 <_dtoa_r+0xad0>
 800949e:	2a00      	cmp	r2, #0
 80094a0:	dded      	ble.n	800947e <_dtoa_r+0xa6e>
 80094a2:	4651      	mov	r1, sl
 80094a4:	2201      	movs	r2, #1
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 fbfe 	bl	8009ca8 <__lshift>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4682      	mov	sl, r0
 80094b0:	f000 fc66 	bl	8009d80 <__mcmp>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	dc03      	bgt.n	80094c0 <_dtoa_r+0xab0>
 80094b8:	d1e1      	bne.n	800947e <_dtoa_r+0xa6e>
 80094ba:	f019 0f01 	tst.w	r9, #1
 80094be:	d0de      	beq.n	800947e <_dtoa_r+0xa6e>
 80094c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094c4:	d1d8      	bne.n	8009478 <_dtoa_r+0xa68>
 80094c6:	9a01      	ldr	r2, [sp, #4]
 80094c8:	2339      	movs	r3, #57	; 0x39
 80094ca:	7013      	strb	r3, [r2, #0]
 80094cc:	462b      	mov	r3, r5
 80094ce:	461d      	mov	r5, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094d6:	2a39      	cmp	r2, #57	; 0x39
 80094d8:	d06c      	beq.n	80095b4 <_dtoa_r+0xba4>
 80094da:	3201      	adds	r2, #1
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	e747      	b.n	8009370 <_dtoa_r+0x960>
 80094e0:	2a00      	cmp	r2, #0
 80094e2:	dd07      	ble.n	80094f4 <_dtoa_r+0xae4>
 80094e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094e8:	d0ed      	beq.n	80094c6 <_dtoa_r+0xab6>
 80094ea:	9a01      	ldr	r2, [sp, #4]
 80094ec:	f109 0301 	add.w	r3, r9, #1
 80094f0:	7013      	strb	r3, [r2, #0]
 80094f2:	e73d      	b.n	8009370 <_dtoa_r+0x960>
 80094f4:	9b04      	ldr	r3, [sp, #16]
 80094f6:	9a08      	ldr	r2, [sp, #32]
 80094f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d043      	beq.n	8009588 <_dtoa_r+0xb78>
 8009500:	4651      	mov	r1, sl
 8009502:	2300      	movs	r3, #0
 8009504:	220a      	movs	r2, #10
 8009506:	4620      	mov	r0, r4
 8009508:	f000 f9d6 	bl	80098b8 <__multadd>
 800950c:	45b8      	cmp	r8, r7
 800950e:	4682      	mov	sl, r0
 8009510:	f04f 0300 	mov.w	r3, #0
 8009514:	f04f 020a 	mov.w	r2, #10
 8009518:	4641      	mov	r1, r8
 800951a:	4620      	mov	r0, r4
 800951c:	d107      	bne.n	800952e <_dtoa_r+0xb1e>
 800951e:	f000 f9cb 	bl	80098b8 <__multadd>
 8009522:	4680      	mov	r8, r0
 8009524:	4607      	mov	r7, r0
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	3301      	adds	r3, #1
 800952a:	9304      	str	r3, [sp, #16]
 800952c:	e775      	b.n	800941a <_dtoa_r+0xa0a>
 800952e:	f000 f9c3 	bl	80098b8 <__multadd>
 8009532:	4639      	mov	r1, r7
 8009534:	4680      	mov	r8, r0
 8009536:	2300      	movs	r3, #0
 8009538:	220a      	movs	r2, #10
 800953a:	4620      	mov	r0, r4
 800953c:	f000 f9bc 	bl	80098b8 <__multadd>
 8009540:	4607      	mov	r7, r0
 8009542:	e7f0      	b.n	8009526 <_dtoa_r+0xb16>
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	9d00      	ldr	r5, [sp, #0]
 800954a:	4631      	mov	r1, r6
 800954c:	4650      	mov	r0, sl
 800954e:	f7ff f9d5 	bl	80088fc <quorem>
 8009552:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	f805 9b01 	strb.w	r9, [r5], #1
 800955c:	1aea      	subs	r2, r5, r3
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	4293      	cmp	r3, r2
 8009562:	dd07      	ble.n	8009574 <_dtoa_r+0xb64>
 8009564:	4651      	mov	r1, sl
 8009566:	2300      	movs	r3, #0
 8009568:	220a      	movs	r2, #10
 800956a:	4620      	mov	r0, r4
 800956c:	f000 f9a4 	bl	80098b8 <__multadd>
 8009570:	4682      	mov	sl, r0
 8009572:	e7ea      	b.n	800954a <_dtoa_r+0xb3a>
 8009574:	9b01      	ldr	r3, [sp, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfc8      	it	gt
 800957a:	461d      	movgt	r5, r3
 800957c:	9b00      	ldr	r3, [sp, #0]
 800957e:	bfd8      	it	le
 8009580:	2501      	movle	r5, #1
 8009582:	441d      	add	r5, r3
 8009584:	f04f 0800 	mov.w	r8, #0
 8009588:	4651      	mov	r1, sl
 800958a:	2201      	movs	r2, #1
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fb8b 	bl	8009ca8 <__lshift>
 8009592:	4631      	mov	r1, r6
 8009594:	4682      	mov	sl, r0
 8009596:	f000 fbf3 	bl	8009d80 <__mcmp>
 800959a:	2800      	cmp	r0, #0
 800959c:	dc96      	bgt.n	80094cc <_dtoa_r+0xabc>
 800959e:	d102      	bne.n	80095a6 <_dtoa_r+0xb96>
 80095a0:	f019 0f01 	tst.w	r9, #1
 80095a4:	d192      	bne.n	80094cc <_dtoa_r+0xabc>
 80095a6:	462b      	mov	r3, r5
 80095a8:	461d      	mov	r5, r3
 80095aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ae:	2a30      	cmp	r2, #48	; 0x30
 80095b0:	d0fa      	beq.n	80095a8 <_dtoa_r+0xb98>
 80095b2:	e6dd      	b.n	8009370 <_dtoa_r+0x960>
 80095b4:	9a00      	ldr	r2, [sp, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d189      	bne.n	80094ce <_dtoa_r+0xabe>
 80095ba:	f10b 0b01 	add.w	fp, fp, #1
 80095be:	2331      	movs	r3, #49	; 0x31
 80095c0:	e796      	b.n	80094f0 <_dtoa_r+0xae0>
 80095c2:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <_dtoa_r+0xbdc>)
 80095c4:	f7ff ba99 	b.w	8008afa <_dtoa_r+0xea>
 80095c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f47f aa6d 	bne.w	8008aaa <_dtoa_r+0x9a>
 80095d0:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <_dtoa_r+0xbe0>)
 80095d2:	f7ff ba92 	b.w	8008afa <_dtoa_r+0xea>
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dcb5      	bgt.n	8009548 <_dtoa_r+0xb38>
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	f73f aeb1 	bgt.w	8009346 <_dtoa_r+0x936>
 80095e4:	e7b0      	b.n	8009548 <_dtoa_r+0xb38>
 80095e6:	bf00      	nop
 80095e8:	0800d141 	.word	0x0800d141
 80095ec:	0800d09c 	.word	0x0800d09c
 80095f0:	0800d0c5 	.word	0x0800d0c5

080095f4 <_free_r>:
 80095f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095f6:	2900      	cmp	r1, #0
 80095f8:	d044      	beq.n	8009684 <_free_r+0x90>
 80095fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095fe:	9001      	str	r0, [sp, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f1a1 0404 	sub.w	r4, r1, #4
 8009606:	bfb8      	it	lt
 8009608:	18e4      	addlt	r4, r4, r3
 800960a:	f000 f8e7 	bl	80097dc <__malloc_lock>
 800960e:	4a1e      	ldr	r2, [pc, #120]	; (8009688 <_free_r+0x94>)
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	6813      	ldr	r3, [r2, #0]
 8009614:	b933      	cbnz	r3, 8009624 <_free_r+0x30>
 8009616:	6063      	str	r3, [r4, #4]
 8009618:	6014      	str	r4, [r2, #0]
 800961a:	b003      	add	sp, #12
 800961c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009620:	f000 b8e2 	b.w	80097e8 <__malloc_unlock>
 8009624:	42a3      	cmp	r3, r4
 8009626:	d908      	bls.n	800963a <_free_r+0x46>
 8009628:	6825      	ldr	r5, [r4, #0]
 800962a:	1961      	adds	r1, r4, r5
 800962c:	428b      	cmp	r3, r1
 800962e:	bf01      	itttt	eq
 8009630:	6819      	ldreq	r1, [r3, #0]
 8009632:	685b      	ldreq	r3, [r3, #4]
 8009634:	1949      	addeq	r1, r1, r5
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	e7ed      	b.n	8009616 <_free_r+0x22>
 800963a:	461a      	mov	r2, r3
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	b10b      	cbz	r3, 8009644 <_free_r+0x50>
 8009640:	42a3      	cmp	r3, r4
 8009642:	d9fa      	bls.n	800963a <_free_r+0x46>
 8009644:	6811      	ldr	r1, [r2, #0]
 8009646:	1855      	adds	r5, r2, r1
 8009648:	42a5      	cmp	r5, r4
 800964a:	d10b      	bne.n	8009664 <_free_r+0x70>
 800964c:	6824      	ldr	r4, [r4, #0]
 800964e:	4421      	add	r1, r4
 8009650:	1854      	adds	r4, r2, r1
 8009652:	42a3      	cmp	r3, r4
 8009654:	6011      	str	r1, [r2, #0]
 8009656:	d1e0      	bne.n	800961a <_free_r+0x26>
 8009658:	681c      	ldr	r4, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	6053      	str	r3, [r2, #4]
 800965e:	440c      	add	r4, r1
 8009660:	6014      	str	r4, [r2, #0]
 8009662:	e7da      	b.n	800961a <_free_r+0x26>
 8009664:	d902      	bls.n	800966c <_free_r+0x78>
 8009666:	230c      	movs	r3, #12
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	e7d6      	b.n	800961a <_free_r+0x26>
 800966c:	6825      	ldr	r5, [r4, #0]
 800966e:	1961      	adds	r1, r4, r5
 8009670:	428b      	cmp	r3, r1
 8009672:	bf04      	itt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	bf04      	itt	eq
 800967c:	1949      	addeq	r1, r1, r5
 800967e:	6021      	streq	r1, [r4, #0]
 8009680:	6054      	str	r4, [r2, #4]
 8009682:	e7ca      	b.n	800961a <_free_r+0x26>
 8009684:	b003      	add	sp, #12
 8009686:	bd30      	pop	{r4, r5, pc}
 8009688:	20004644 	.word	0x20004644

0800968c <malloc>:
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <malloc+0xc>)
 800968e:	4601      	mov	r1, r0
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f000 b823 	b.w	80096dc <_malloc_r>
 8009696:	bf00      	nop
 8009698:	2000006c 	.word	0x2000006c

0800969c <sbrk_aligned>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4e0e      	ldr	r6, [pc, #56]	; (80096d8 <sbrk_aligned+0x3c>)
 80096a0:	460c      	mov	r4, r1
 80096a2:	6831      	ldr	r1, [r6, #0]
 80096a4:	4605      	mov	r5, r0
 80096a6:	b911      	cbnz	r1, 80096ae <sbrk_aligned+0x12>
 80096a8:	f001 fe1a 	bl	800b2e0 <_sbrk_r>
 80096ac:	6030      	str	r0, [r6, #0]
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f001 fe15 	bl	800b2e0 <_sbrk_r>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d00a      	beq.n	80096d0 <sbrk_aligned+0x34>
 80096ba:	1cc4      	adds	r4, r0, #3
 80096bc:	f024 0403 	bic.w	r4, r4, #3
 80096c0:	42a0      	cmp	r0, r4
 80096c2:	d007      	beq.n	80096d4 <sbrk_aligned+0x38>
 80096c4:	1a21      	subs	r1, r4, r0
 80096c6:	4628      	mov	r0, r5
 80096c8:	f001 fe0a 	bl	800b2e0 <_sbrk_r>
 80096cc:	3001      	adds	r0, #1
 80096ce:	d101      	bne.n	80096d4 <sbrk_aligned+0x38>
 80096d0:	f04f 34ff 	mov.w	r4, #4294967295
 80096d4:	4620      	mov	r0, r4
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	20004648 	.word	0x20004648

080096dc <_malloc_r>:
 80096dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e0:	1ccd      	adds	r5, r1, #3
 80096e2:	f025 0503 	bic.w	r5, r5, #3
 80096e6:	3508      	adds	r5, #8
 80096e8:	2d0c      	cmp	r5, #12
 80096ea:	bf38      	it	cc
 80096ec:	250c      	movcc	r5, #12
 80096ee:	2d00      	cmp	r5, #0
 80096f0:	4607      	mov	r7, r0
 80096f2:	db01      	blt.n	80096f8 <_malloc_r+0x1c>
 80096f4:	42a9      	cmp	r1, r5
 80096f6:	d905      	bls.n	8009704 <_malloc_r+0x28>
 80096f8:	230c      	movs	r3, #12
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	2600      	movs	r6, #0
 80096fe:	4630      	mov	r0, r6
 8009700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097d8 <_malloc_r+0xfc>
 8009708:	f000 f868 	bl	80097dc <__malloc_lock>
 800970c:	f8d8 3000 	ldr.w	r3, [r8]
 8009710:	461c      	mov	r4, r3
 8009712:	bb5c      	cbnz	r4, 800976c <_malloc_r+0x90>
 8009714:	4629      	mov	r1, r5
 8009716:	4638      	mov	r0, r7
 8009718:	f7ff ffc0 	bl	800969c <sbrk_aligned>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	4604      	mov	r4, r0
 8009720:	d155      	bne.n	80097ce <_malloc_r+0xf2>
 8009722:	f8d8 4000 	ldr.w	r4, [r8]
 8009726:	4626      	mov	r6, r4
 8009728:	2e00      	cmp	r6, #0
 800972a:	d145      	bne.n	80097b8 <_malloc_r+0xdc>
 800972c:	2c00      	cmp	r4, #0
 800972e:	d048      	beq.n	80097c2 <_malloc_r+0xe6>
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	4631      	mov	r1, r6
 8009734:	4638      	mov	r0, r7
 8009736:	eb04 0903 	add.w	r9, r4, r3
 800973a:	f001 fdd1 	bl	800b2e0 <_sbrk_r>
 800973e:	4581      	cmp	r9, r0
 8009740:	d13f      	bne.n	80097c2 <_malloc_r+0xe6>
 8009742:	6821      	ldr	r1, [r4, #0]
 8009744:	1a6d      	subs	r5, r5, r1
 8009746:	4629      	mov	r1, r5
 8009748:	4638      	mov	r0, r7
 800974a:	f7ff ffa7 	bl	800969c <sbrk_aligned>
 800974e:	3001      	adds	r0, #1
 8009750:	d037      	beq.n	80097c2 <_malloc_r+0xe6>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	442b      	add	r3, r5
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	f8d8 3000 	ldr.w	r3, [r8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d038      	beq.n	80097d2 <_malloc_r+0xf6>
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	42a2      	cmp	r2, r4
 8009764:	d12b      	bne.n	80097be <_malloc_r+0xe2>
 8009766:	2200      	movs	r2, #0
 8009768:	605a      	str	r2, [r3, #4]
 800976a:	e00f      	b.n	800978c <_malloc_r+0xb0>
 800976c:	6822      	ldr	r2, [r4, #0]
 800976e:	1b52      	subs	r2, r2, r5
 8009770:	d41f      	bmi.n	80097b2 <_malloc_r+0xd6>
 8009772:	2a0b      	cmp	r2, #11
 8009774:	d917      	bls.n	80097a6 <_malloc_r+0xca>
 8009776:	1961      	adds	r1, r4, r5
 8009778:	42a3      	cmp	r3, r4
 800977a:	6025      	str	r5, [r4, #0]
 800977c:	bf18      	it	ne
 800977e:	6059      	strne	r1, [r3, #4]
 8009780:	6863      	ldr	r3, [r4, #4]
 8009782:	bf08      	it	eq
 8009784:	f8c8 1000 	streq.w	r1, [r8]
 8009788:	5162      	str	r2, [r4, r5]
 800978a:	604b      	str	r3, [r1, #4]
 800978c:	4638      	mov	r0, r7
 800978e:	f104 060b 	add.w	r6, r4, #11
 8009792:	f000 f829 	bl	80097e8 <__malloc_unlock>
 8009796:	f026 0607 	bic.w	r6, r6, #7
 800979a:	1d23      	adds	r3, r4, #4
 800979c:	1af2      	subs	r2, r6, r3
 800979e:	d0ae      	beq.n	80096fe <_malloc_r+0x22>
 80097a0:	1b9b      	subs	r3, r3, r6
 80097a2:	50a3      	str	r3, [r4, r2]
 80097a4:	e7ab      	b.n	80096fe <_malloc_r+0x22>
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	6862      	ldr	r2, [r4, #4]
 80097aa:	d1dd      	bne.n	8009768 <_malloc_r+0x8c>
 80097ac:	f8c8 2000 	str.w	r2, [r8]
 80097b0:	e7ec      	b.n	800978c <_malloc_r+0xb0>
 80097b2:	4623      	mov	r3, r4
 80097b4:	6864      	ldr	r4, [r4, #4]
 80097b6:	e7ac      	b.n	8009712 <_malloc_r+0x36>
 80097b8:	4634      	mov	r4, r6
 80097ba:	6876      	ldr	r6, [r6, #4]
 80097bc:	e7b4      	b.n	8009728 <_malloc_r+0x4c>
 80097be:	4613      	mov	r3, r2
 80097c0:	e7cc      	b.n	800975c <_malloc_r+0x80>
 80097c2:	230c      	movs	r3, #12
 80097c4:	603b      	str	r3, [r7, #0]
 80097c6:	4638      	mov	r0, r7
 80097c8:	f000 f80e 	bl	80097e8 <__malloc_unlock>
 80097cc:	e797      	b.n	80096fe <_malloc_r+0x22>
 80097ce:	6025      	str	r5, [r4, #0]
 80097d0:	e7dc      	b.n	800978c <_malloc_r+0xb0>
 80097d2:	605b      	str	r3, [r3, #4]
 80097d4:	deff      	udf	#255	; 0xff
 80097d6:	bf00      	nop
 80097d8:	20004644 	.word	0x20004644

080097dc <__malloc_lock>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__malloc_lock+0x8>)
 80097de:	f7ff b876 	b.w	80088ce <__retarget_lock_acquire_recursive>
 80097e2:	bf00      	nop
 80097e4:	20004640 	.word	0x20004640

080097e8 <__malloc_unlock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_unlock+0x8>)
 80097ea:	f7ff b871 	b.w	80088d0 <__retarget_lock_release_recursive>
 80097ee:	bf00      	nop
 80097f0:	20004640 	.word	0x20004640

080097f4 <_Balloc>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	69c6      	ldr	r6, [r0, #28]
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	b976      	cbnz	r6, 800981c <_Balloc+0x28>
 80097fe:	2010      	movs	r0, #16
 8009800:	f7ff ff44 	bl	800968c <malloc>
 8009804:	4602      	mov	r2, r0
 8009806:	61e0      	str	r0, [r4, #28]
 8009808:	b920      	cbnz	r0, 8009814 <_Balloc+0x20>
 800980a:	4b18      	ldr	r3, [pc, #96]	; (800986c <_Balloc+0x78>)
 800980c:	4818      	ldr	r0, [pc, #96]	; (8009870 <_Balloc+0x7c>)
 800980e:	216b      	movs	r1, #107	; 0x6b
 8009810:	f001 fd7e 	bl	800b310 <__assert_func>
 8009814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009818:	6006      	str	r6, [r0, #0]
 800981a:	60c6      	str	r6, [r0, #12]
 800981c:	69e6      	ldr	r6, [r4, #28]
 800981e:	68f3      	ldr	r3, [r6, #12]
 8009820:	b183      	cbz	r3, 8009844 <_Balloc+0x50>
 8009822:	69e3      	ldr	r3, [r4, #28]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800982a:	b9b8      	cbnz	r0, 800985c <_Balloc+0x68>
 800982c:	2101      	movs	r1, #1
 800982e:	fa01 f605 	lsl.w	r6, r1, r5
 8009832:	1d72      	adds	r2, r6, #5
 8009834:	0092      	lsls	r2, r2, #2
 8009836:	4620      	mov	r0, r4
 8009838:	f001 fd88 	bl	800b34c <_calloc_r>
 800983c:	b160      	cbz	r0, 8009858 <_Balloc+0x64>
 800983e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009842:	e00e      	b.n	8009862 <_Balloc+0x6e>
 8009844:	2221      	movs	r2, #33	; 0x21
 8009846:	2104      	movs	r1, #4
 8009848:	4620      	mov	r0, r4
 800984a:	f001 fd7f 	bl	800b34c <_calloc_r>
 800984e:	69e3      	ldr	r3, [r4, #28]
 8009850:	60f0      	str	r0, [r6, #12]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e4      	bne.n	8009822 <_Balloc+0x2e>
 8009858:	2000      	movs	r0, #0
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	6802      	ldr	r2, [r0, #0]
 800985e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009862:	2300      	movs	r3, #0
 8009864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009868:	e7f7      	b.n	800985a <_Balloc+0x66>
 800986a:	bf00      	nop
 800986c:	0800d0d2 	.word	0x0800d0d2
 8009870:	0800d152 	.word	0x0800d152

08009874 <_Bfree>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	69c6      	ldr	r6, [r0, #28]
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	b976      	cbnz	r6, 800989c <_Bfree+0x28>
 800987e:	2010      	movs	r0, #16
 8009880:	f7ff ff04 	bl	800968c <malloc>
 8009884:	4602      	mov	r2, r0
 8009886:	61e8      	str	r0, [r5, #28]
 8009888:	b920      	cbnz	r0, 8009894 <_Bfree+0x20>
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <_Bfree+0x3c>)
 800988c:	4809      	ldr	r0, [pc, #36]	; (80098b4 <_Bfree+0x40>)
 800988e:	218f      	movs	r1, #143	; 0x8f
 8009890:	f001 fd3e 	bl	800b310 <__assert_func>
 8009894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009898:	6006      	str	r6, [r0, #0]
 800989a:	60c6      	str	r6, [r0, #12]
 800989c:	b13c      	cbz	r4, 80098ae <_Bfree+0x3a>
 800989e:	69eb      	ldr	r3, [r5, #28]
 80098a0:	6862      	ldr	r2, [r4, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098a8:	6021      	str	r1, [r4, #0]
 80098aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	0800d0d2 	.word	0x0800d0d2
 80098b4:	0800d152 	.word	0x0800d152

080098b8 <__multadd>:
 80098b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098bc:	690d      	ldr	r5, [r1, #16]
 80098be:	4607      	mov	r7, r0
 80098c0:	460c      	mov	r4, r1
 80098c2:	461e      	mov	r6, r3
 80098c4:	f101 0c14 	add.w	ip, r1, #20
 80098c8:	2000      	movs	r0, #0
 80098ca:	f8dc 3000 	ldr.w	r3, [ip]
 80098ce:	b299      	uxth	r1, r3
 80098d0:	fb02 6101 	mla	r1, r2, r1, r6
 80098d4:	0c1e      	lsrs	r6, r3, #16
 80098d6:	0c0b      	lsrs	r3, r1, #16
 80098d8:	fb02 3306 	mla	r3, r2, r6, r3
 80098dc:	b289      	uxth	r1, r1
 80098de:	3001      	adds	r0, #1
 80098e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098e4:	4285      	cmp	r5, r0
 80098e6:	f84c 1b04 	str.w	r1, [ip], #4
 80098ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098ee:	dcec      	bgt.n	80098ca <__multadd+0x12>
 80098f0:	b30e      	cbz	r6, 8009936 <__multadd+0x7e>
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dc19      	bgt.n	800992c <__multadd+0x74>
 80098f8:	6861      	ldr	r1, [r4, #4]
 80098fa:	4638      	mov	r0, r7
 80098fc:	3101      	adds	r1, #1
 80098fe:	f7ff ff79 	bl	80097f4 <_Balloc>
 8009902:	4680      	mov	r8, r0
 8009904:	b928      	cbnz	r0, 8009912 <__multadd+0x5a>
 8009906:	4602      	mov	r2, r0
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <__multadd+0x84>)
 800990a:	480d      	ldr	r0, [pc, #52]	; (8009940 <__multadd+0x88>)
 800990c:	21ba      	movs	r1, #186	; 0xba
 800990e:	f001 fcff 	bl	800b310 <__assert_func>
 8009912:	6922      	ldr	r2, [r4, #16]
 8009914:	3202      	adds	r2, #2
 8009916:	f104 010c 	add.w	r1, r4, #12
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	300c      	adds	r0, #12
 800991e:	f7fe ffd8 	bl	80088d2 <memcpy>
 8009922:	4621      	mov	r1, r4
 8009924:	4638      	mov	r0, r7
 8009926:	f7ff ffa5 	bl	8009874 <_Bfree>
 800992a:	4644      	mov	r4, r8
 800992c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009930:	3501      	adds	r5, #1
 8009932:	615e      	str	r6, [r3, #20]
 8009934:	6125      	str	r5, [r4, #16]
 8009936:	4620      	mov	r0, r4
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	0800d141 	.word	0x0800d141
 8009940:	0800d152 	.word	0x0800d152

08009944 <__s2b>:
 8009944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	4615      	mov	r5, r2
 800994c:	461f      	mov	r7, r3
 800994e:	2209      	movs	r2, #9
 8009950:	3308      	adds	r3, #8
 8009952:	4606      	mov	r6, r0
 8009954:	fb93 f3f2 	sdiv	r3, r3, r2
 8009958:	2100      	movs	r1, #0
 800995a:	2201      	movs	r2, #1
 800995c:	429a      	cmp	r2, r3
 800995e:	db09      	blt.n	8009974 <__s2b+0x30>
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff ff47 	bl	80097f4 <_Balloc>
 8009966:	b940      	cbnz	r0, 800997a <__s2b+0x36>
 8009968:	4602      	mov	r2, r0
 800996a:	4b19      	ldr	r3, [pc, #100]	; (80099d0 <__s2b+0x8c>)
 800996c:	4819      	ldr	r0, [pc, #100]	; (80099d4 <__s2b+0x90>)
 800996e:	21d3      	movs	r1, #211	; 0xd3
 8009970:	f001 fcce 	bl	800b310 <__assert_func>
 8009974:	0052      	lsls	r2, r2, #1
 8009976:	3101      	adds	r1, #1
 8009978:	e7f0      	b.n	800995c <__s2b+0x18>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	6143      	str	r3, [r0, #20]
 800997e:	2d09      	cmp	r5, #9
 8009980:	f04f 0301 	mov.w	r3, #1
 8009984:	6103      	str	r3, [r0, #16]
 8009986:	dd16      	ble.n	80099b6 <__s2b+0x72>
 8009988:	f104 0909 	add.w	r9, r4, #9
 800998c:	46c8      	mov	r8, r9
 800998e:	442c      	add	r4, r5
 8009990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009994:	4601      	mov	r1, r0
 8009996:	3b30      	subs	r3, #48	; 0x30
 8009998:	220a      	movs	r2, #10
 800999a:	4630      	mov	r0, r6
 800999c:	f7ff ff8c 	bl	80098b8 <__multadd>
 80099a0:	45a0      	cmp	r8, r4
 80099a2:	d1f5      	bne.n	8009990 <__s2b+0x4c>
 80099a4:	f1a5 0408 	sub.w	r4, r5, #8
 80099a8:	444c      	add	r4, r9
 80099aa:	1b2d      	subs	r5, r5, r4
 80099ac:	1963      	adds	r3, r4, r5
 80099ae:	42bb      	cmp	r3, r7
 80099b0:	db04      	blt.n	80099bc <__s2b+0x78>
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	340a      	adds	r4, #10
 80099b8:	2509      	movs	r5, #9
 80099ba:	e7f6      	b.n	80099aa <__s2b+0x66>
 80099bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099c0:	4601      	mov	r1, r0
 80099c2:	3b30      	subs	r3, #48	; 0x30
 80099c4:	220a      	movs	r2, #10
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7ff ff76 	bl	80098b8 <__multadd>
 80099cc:	e7ee      	b.n	80099ac <__s2b+0x68>
 80099ce:	bf00      	nop
 80099d0:	0800d141 	.word	0x0800d141
 80099d4:	0800d152 	.word	0x0800d152

080099d8 <__hi0bits>:
 80099d8:	0c03      	lsrs	r3, r0, #16
 80099da:	041b      	lsls	r3, r3, #16
 80099dc:	b9d3      	cbnz	r3, 8009a14 <__hi0bits+0x3c>
 80099de:	0400      	lsls	r0, r0, #16
 80099e0:	2310      	movs	r3, #16
 80099e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099e6:	bf04      	itt	eq
 80099e8:	0200      	lsleq	r0, r0, #8
 80099ea:	3308      	addeq	r3, #8
 80099ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099f0:	bf04      	itt	eq
 80099f2:	0100      	lsleq	r0, r0, #4
 80099f4:	3304      	addeq	r3, #4
 80099f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099fa:	bf04      	itt	eq
 80099fc:	0080      	lsleq	r0, r0, #2
 80099fe:	3302      	addeq	r3, #2
 8009a00:	2800      	cmp	r0, #0
 8009a02:	db05      	blt.n	8009a10 <__hi0bits+0x38>
 8009a04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a08:	f103 0301 	add.w	r3, r3, #1
 8009a0c:	bf08      	it	eq
 8009a0e:	2320      	moveq	r3, #32
 8009a10:	4618      	mov	r0, r3
 8009a12:	4770      	bx	lr
 8009a14:	2300      	movs	r3, #0
 8009a16:	e7e4      	b.n	80099e2 <__hi0bits+0xa>

08009a18 <__lo0bits>:
 8009a18:	6803      	ldr	r3, [r0, #0]
 8009a1a:	f013 0207 	ands.w	r2, r3, #7
 8009a1e:	d00c      	beq.n	8009a3a <__lo0bits+0x22>
 8009a20:	07d9      	lsls	r1, r3, #31
 8009a22:	d422      	bmi.n	8009a6a <__lo0bits+0x52>
 8009a24:	079a      	lsls	r2, r3, #30
 8009a26:	bf49      	itett	mi
 8009a28:	085b      	lsrmi	r3, r3, #1
 8009a2a:	089b      	lsrpl	r3, r3, #2
 8009a2c:	6003      	strmi	r3, [r0, #0]
 8009a2e:	2201      	movmi	r2, #1
 8009a30:	bf5c      	itt	pl
 8009a32:	6003      	strpl	r3, [r0, #0]
 8009a34:	2202      	movpl	r2, #2
 8009a36:	4610      	mov	r0, r2
 8009a38:	4770      	bx	lr
 8009a3a:	b299      	uxth	r1, r3
 8009a3c:	b909      	cbnz	r1, 8009a42 <__lo0bits+0x2a>
 8009a3e:	0c1b      	lsrs	r3, r3, #16
 8009a40:	2210      	movs	r2, #16
 8009a42:	b2d9      	uxtb	r1, r3
 8009a44:	b909      	cbnz	r1, 8009a4a <__lo0bits+0x32>
 8009a46:	3208      	adds	r2, #8
 8009a48:	0a1b      	lsrs	r3, r3, #8
 8009a4a:	0719      	lsls	r1, r3, #28
 8009a4c:	bf04      	itt	eq
 8009a4e:	091b      	lsreq	r3, r3, #4
 8009a50:	3204      	addeq	r2, #4
 8009a52:	0799      	lsls	r1, r3, #30
 8009a54:	bf04      	itt	eq
 8009a56:	089b      	lsreq	r3, r3, #2
 8009a58:	3202      	addeq	r2, #2
 8009a5a:	07d9      	lsls	r1, r3, #31
 8009a5c:	d403      	bmi.n	8009a66 <__lo0bits+0x4e>
 8009a5e:	085b      	lsrs	r3, r3, #1
 8009a60:	f102 0201 	add.w	r2, r2, #1
 8009a64:	d003      	beq.n	8009a6e <__lo0bits+0x56>
 8009a66:	6003      	str	r3, [r0, #0]
 8009a68:	e7e5      	b.n	8009a36 <__lo0bits+0x1e>
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	e7e3      	b.n	8009a36 <__lo0bits+0x1e>
 8009a6e:	2220      	movs	r2, #32
 8009a70:	e7e1      	b.n	8009a36 <__lo0bits+0x1e>
	...

08009a74 <__i2b>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	460c      	mov	r4, r1
 8009a78:	2101      	movs	r1, #1
 8009a7a:	f7ff febb 	bl	80097f4 <_Balloc>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	b928      	cbnz	r0, 8009a8e <__i2b+0x1a>
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <__i2b+0x24>)
 8009a84:	4805      	ldr	r0, [pc, #20]	; (8009a9c <__i2b+0x28>)
 8009a86:	f240 1145 	movw	r1, #325	; 0x145
 8009a8a:	f001 fc41 	bl	800b310 <__assert_func>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	6144      	str	r4, [r0, #20]
 8009a92:	6103      	str	r3, [r0, #16]
 8009a94:	bd10      	pop	{r4, pc}
 8009a96:	bf00      	nop
 8009a98:	0800d141 	.word	0x0800d141
 8009a9c:	0800d152 	.word	0x0800d152

08009aa0 <__multiply>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	4691      	mov	r9, r2
 8009aa6:	690a      	ldr	r2, [r1, #16]
 8009aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	bfb8      	it	lt
 8009ab0:	460b      	movlt	r3, r1
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	bfbc      	itt	lt
 8009ab6:	464c      	movlt	r4, r9
 8009ab8:	4699      	movlt	r9, r3
 8009aba:	6927      	ldr	r7, [r4, #16]
 8009abc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ac0:	68a3      	ldr	r3, [r4, #8]
 8009ac2:	6861      	ldr	r1, [r4, #4]
 8009ac4:	eb07 060a 	add.w	r6, r7, sl
 8009ac8:	42b3      	cmp	r3, r6
 8009aca:	b085      	sub	sp, #20
 8009acc:	bfb8      	it	lt
 8009ace:	3101      	addlt	r1, #1
 8009ad0:	f7ff fe90 	bl	80097f4 <_Balloc>
 8009ad4:	b930      	cbnz	r0, 8009ae4 <__multiply+0x44>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	4b44      	ldr	r3, [pc, #272]	; (8009bec <__multiply+0x14c>)
 8009ada:	4845      	ldr	r0, [pc, #276]	; (8009bf0 <__multiply+0x150>)
 8009adc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009ae0:	f001 fc16 	bl	800b310 <__assert_func>
 8009ae4:	f100 0514 	add.w	r5, r0, #20
 8009ae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009aec:	462b      	mov	r3, r5
 8009aee:	2200      	movs	r2, #0
 8009af0:	4543      	cmp	r3, r8
 8009af2:	d321      	bcc.n	8009b38 <__multiply+0x98>
 8009af4:	f104 0314 	add.w	r3, r4, #20
 8009af8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009afc:	f109 0314 	add.w	r3, r9, #20
 8009b00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b04:	9202      	str	r2, [sp, #8]
 8009b06:	1b3a      	subs	r2, r7, r4
 8009b08:	3a15      	subs	r2, #21
 8009b0a:	f022 0203 	bic.w	r2, r2, #3
 8009b0e:	3204      	adds	r2, #4
 8009b10:	f104 0115 	add.w	r1, r4, #21
 8009b14:	428f      	cmp	r7, r1
 8009b16:	bf38      	it	cc
 8009b18:	2204      	movcc	r2, #4
 8009b1a:	9201      	str	r2, [sp, #4]
 8009b1c:	9a02      	ldr	r2, [sp, #8]
 8009b1e:	9303      	str	r3, [sp, #12]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d80c      	bhi.n	8009b3e <__multiply+0x9e>
 8009b24:	2e00      	cmp	r6, #0
 8009b26:	dd03      	ble.n	8009b30 <__multiply+0x90>
 8009b28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d05b      	beq.n	8009be8 <__multiply+0x148>
 8009b30:	6106      	str	r6, [r0, #16]
 8009b32:	b005      	add	sp, #20
 8009b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b38:	f843 2b04 	str.w	r2, [r3], #4
 8009b3c:	e7d8      	b.n	8009af0 <__multiply+0x50>
 8009b3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b42:	f1ba 0f00 	cmp.w	sl, #0
 8009b46:	d024      	beq.n	8009b92 <__multiply+0xf2>
 8009b48:	f104 0e14 	add.w	lr, r4, #20
 8009b4c:	46a9      	mov	r9, r5
 8009b4e:	f04f 0c00 	mov.w	ip, #0
 8009b52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b56:	f8d9 1000 	ldr.w	r1, [r9]
 8009b5a:	fa1f fb82 	uxth.w	fp, r2
 8009b5e:	b289      	uxth	r1, r1
 8009b60:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b68:	f8d9 2000 	ldr.w	r2, [r9]
 8009b6c:	4461      	add	r1, ip
 8009b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b72:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b7a:	b289      	uxth	r1, r1
 8009b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b80:	4577      	cmp	r7, lr
 8009b82:	f849 1b04 	str.w	r1, [r9], #4
 8009b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b8a:	d8e2      	bhi.n	8009b52 <__multiply+0xb2>
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	f845 c002 	str.w	ip, [r5, r2]
 8009b92:	9a03      	ldr	r2, [sp, #12]
 8009b94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	f1b9 0f00 	cmp.w	r9, #0
 8009b9e:	d021      	beq.n	8009be4 <__multiply+0x144>
 8009ba0:	6829      	ldr	r1, [r5, #0]
 8009ba2:	f104 0c14 	add.w	ip, r4, #20
 8009ba6:	46ae      	mov	lr, r5
 8009ba8:	f04f 0a00 	mov.w	sl, #0
 8009bac:	f8bc b000 	ldrh.w	fp, [ip]
 8009bb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bb4:	fb09 220b 	mla	r2, r9, fp, r2
 8009bb8:	4452      	add	r2, sl
 8009bba:	b289      	uxth	r1, r1
 8009bbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bc0:	f84e 1b04 	str.w	r1, [lr], #4
 8009bc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009bc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bcc:	f8be 1000 	ldrh.w	r1, [lr]
 8009bd0:	fb09 110a 	mla	r1, r9, sl, r1
 8009bd4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009bd8:	4567      	cmp	r7, ip
 8009bda:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bde:	d8e5      	bhi.n	8009bac <__multiply+0x10c>
 8009be0:	9a01      	ldr	r2, [sp, #4]
 8009be2:	50a9      	str	r1, [r5, r2]
 8009be4:	3504      	adds	r5, #4
 8009be6:	e799      	b.n	8009b1c <__multiply+0x7c>
 8009be8:	3e01      	subs	r6, #1
 8009bea:	e79b      	b.n	8009b24 <__multiply+0x84>
 8009bec:	0800d141 	.word	0x0800d141
 8009bf0:	0800d152 	.word	0x0800d152

08009bf4 <__pow5mult>:
 8009bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	f012 0203 	ands.w	r2, r2, #3
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	d007      	beq.n	8009c14 <__pow5mult+0x20>
 8009c04:	4c25      	ldr	r4, [pc, #148]	; (8009c9c <__pow5mult+0xa8>)
 8009c06:	3a01      	subs	r2, #1
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c0e:	f7ff fe53 	bl	80098b8 <__multadd>
 8009c12:	4607      	mov	r7, r0
 8009c14:	10ad      	asrs	r5, r5, #2
 8009c16:	d03d      	beq.n	8009c94 <__pow5mult+0xa0>
 8009c18:	69f4      	ldr	r4, [r6, #28]
 8009c1a:	b97c      	cbnz	r4, 8009c3c <__pow5mult+0x48>
 8009c1c:	2010      	movs	r0, #16
 8009c1e:	f7ff fd35 	bl	800968c <malloc>
 8009c22:	4602      	mov	r2, r0
 8009c24:	61f0      	str	r0, [r6, #28]
 8009c26:	b928      	cbnz	r0, 8009c34 <__pow5mult+0x40>
 8009c28:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <__pow5mult+0xac>)
 8009c2a:	481e      	ldr	r0, [pc, #120]	; (8009ca4 <__pow5mult+0xb0>)
 8009c2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009c30:	f001 fb6e 	bl	800b310 <__assert_func>
 8009c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c38:	6004      	str	r4, [r0, #0]
 8009c3a:	60c4      	str	r4, [r0, #12]
 8009c3c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c44:	b94c      	cbnz	r4, 8009c5a <__pow5mult+0x66>
 8009c46:	f240 2171 	movw	r1, #625	; 0x271
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ff12 	bl	8009a74 <__i2b>
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c56:	4604      	mov	r4, r0
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	07eb      	lsls	r3, r5, #31
 8009c60:	d50a      	bpl.n	8009c78 <__pow5mult+0x84>
 8009c62:	4639      	mov	r1, r7
 8009c64:	4622      	mov	r2, r4
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ff1a 	bl	8009aa0 <__multiply>
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4680      	mov	r8, r0
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff fdff 	bl	8009874 <_Bfree>
 8009c76:	4647      	mov	r7, r8
 8009c78:	106d      	asrs	r5, r5, #1
 8009c7a:	d00b      	beq.n	8009c94 <__pow5mult+0xa0>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	b938      	cbnz	r0, 8009c90 <__pow5mult+0x9c>
 8009c80:	4622      	mov	r2, r4
 8009c82:	4621      	mov	r1, r4
 8009c84:	4630      	mov	r0, r6
 8009c86:	f7ff ff0b 	bl	8009aa0 <__multiply>
 8009c8a:	6020      	str	r0, [r4, #0]
 8009c8c:	f8c0 9000 	str.w	r9, [r0]
 8009c90:	4604      	mov	r4, r0
 8009c92:	e7e4      	b.n	8009c5e <__pow5mult+0x6a>
 8009c94:	4638      	mov	r0, r7
 8009c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0800d2a0 	.word	0x0800d2a0
 8009ca0:	0800d0d2 	.word	0x0800d0d2
 8009ca4:	0800d152 	.word	0x0800d152

08009ca8 <__lshift>:
 8009ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cac:	460c      	mov	r4, r1
 8009cae:	6849      	ldr	r1, [r1, #4]
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	4607      	mov	r7, r0
 8009cba:	4691      	mov	r9, r2
 8009cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cc0:	f108 0601 	add.w	r6, r8, #1
 8009cc4:	42b3      	cmp	r3, r6
 8009cc6:	db0b      	blt.n	8009ce0 <__lshift+0x38>
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f7ff fd93 	bl	80097f4 <_Balloc>
 8009cce:	4605      	mov	r5, r0
 8009cd0:	b948      	cbnz	r0, 8009ce6 <__lshift+0x3e>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4b28      	ldr	r3, [pc, #160]	; (8009d78 <__lshift+0xd0>)
 8009cd6:	4829      	ldr	r0, [pc, #164]	; (8009d7c <__lshift+0xd4>)
 8009cd8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009cdc:	f001 fb18 	bl	800b310 <__assert_func>
 8009ce0:	3101      	adds	r1, #1
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	e7ee      	b.n	8009cc4 <__lshift+0x1c>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f100 0114 	add.w	r1, r0, #20
 8009cec:	f100 0210 	add.w	r2, r0, #16
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	4553      	cmp	r3, sl
 8009cf4:	db33      	blt.n	8009d5e <__lshift+0xb6>
 8009cf6:	6920      	ldr	r0, [r4, #16]
 8009cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cfc:	f104 0314 	add.w	r3, r4, #20
 8009d00:	f019 091f 	ands.w	r9, r9, #31
 8009d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d0c:	d02b      	beq.n	8009d66 <__lshift+0xbe>
 8009d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d12:	468a      	mov	sl, r1
 8009d14:	2200      	movs	r2, #0
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	fa00 f009 	lsl.w	r0, r0, r9
 8009d1c:	4310      	orrs	r0, r2
 8009d1e:	f84a 0b04 	str.w	r0, [sl], #4
 8009d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d26:	459c      	cmp	ip, r3
 8009d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d2c:	d8f3      	bhi.n	8009d16 <__lshift+0x6e>
 8009d2e:	ebac 0304 	sub.w	r3, ip, r4
 8009d32:	3b15      	subs	r3, #21
 8009d34:	f023 0303 	bic.w	r3, r3, #3
 8009d38:	3304      	adds	r3, #4
 8009d3a:	f104 0015 	add.w	r0, r4, #21
 8009d3e:	4584      	cmp	ip, r0
 8009d40:	bf38      	it	cc
 8009d42:	2304      	movcc	r3, #4
 8009d44:	50ca      	str	r2, [r1, r3]
 8009d46:	b10a      	cbz	r2, 8009d4c <__lshift+0xa4>
 8009d48:	f108 0602 	add.w	r6, r8, #2
 8009d4c:	3e01      	subs	r6, #1
 8009d4e:	4638      	mov	r0, r7
 8009d50:	612e      	str	r6, [r5, #16]
 8009d52:	4621      	mov	r1, r4
 8009d54:	f7ff fd8e 	bl	8009874 <_Bfree>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d62:	3301      	adds	r3, #1
 8009d64:	e7c5      	b.n	8009cf2 <__lshift+0x4a>
 8009d66:	3904      	subs	r1, #4
 8009d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d70:	459c      	cmp	ip, r3
 8009d72:	d8f9      	bhi.n	8009d68 <__lshift+0xc0>
 8009d74:	e7ea      	b.n	8009d4c <__lshift+0xa4>
 8009d76:	bf00      	nop
 8009d78:	0800d141 	.word	0x0800d141
 8009d7c:	0800d152 	.word	0x0800d152

08009d80 <__mcmp>:
 8009d80:	b530      	push	{r4, r5, lr}
 8009d82:	6902      	ldr	r2, [r0, #16]
 8009d84:	690c      	ldr	r4, [r1, #16]
 8009d86:	1b12      	subs	r2, r2, r4
 8009d88:	d10e      	bne.n	8009da8 <__mcmp+0x28>
 8009d8a:	f100 0314 	add.w	r3, r0, #20
 8009d8e:	3114      	adds	r1, #20
 8009d90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009da0:	42a5      	cmp	r5, r4
 8009da2:	d003      	beq.n	8009dac <__mcmp+0x2c>
 8009da4:	d305      	bcc.n	8009db2 <__mcmp+0x32>
 8009da6:	2201      	movs	r2, #1
 8009da8:	4610      	mov	r0, r2
 8009daa:	bd30      	pop	{r4, r5, pc}
 8009dac:	4283      	cmp	r3, r0
 8009dae:	d3f3      	bcc.n	8009d98 <__mcmp+0x18>
 8009db0:	e7fa      	b.n	8009da8 <__mcmp+0x28>
 8009db2:	f04f 32ff 	mov.w	r2, #4294967295
 8009db6:	e7f7      	b.n	8009da8 <__mcmp+0x28>

08009db8 <__mdiff>:
 8009db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4690      	mov	r8, r2
 8009dc6:	f7ff ffdb 	bl	8009d80 <__mcmp>
 8009dca:	1e05      	subs	r5, r0, #0
 8009dcc:	d110      	bne.n	8009df0 <__mdiff+0x38>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7ff fd0f 	bl	80097f4 <_Balloc>
 8009dd6:	b930      	cbnz	r0, 8009de6 <__mdiff+0x2e>
 8009dd8:	4b3a      	ldr	r3, [pc, #232]	; (8009ec4 <__mdiff+0x10c>)
 8009dda:	4602      	mov	r2, r0
 8009ddc:	f240 2137 	movw	r1, #567	; 0x237
 8009de0:	4839      	ldr	r0, [pc, #228]	; (8009ec8 <__mdiff+0x110>)
 8009de2:	f001 fa95 	bl	800b310 <__assert_func>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	bfa4      	itt	ge
 8009df2:	4643      	movge	r3, r8
 8009df4:	46a0      	movge	r8, r4
 8009df6:	4630      	mov	r0, r6
 8009df8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009dfc:	bfa6      	itte	ge
 8009dfe:	461c      	movge	r4, r3
 8009e00:	2500      	movge	r5, #0
 8009e02:	2501      	movlt	r5, #1
 8009e04:	f7ff fcf6 	bl	80097f4 <_Balloc>
 8009e08:	b920      	cbnz	r0, 8009e14 <__mdiff+0x5c>
 8009e0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ec4 <__mdiff+0x10c>)
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	f240 2145 	movw	r1, #581	; 0x245
 8009e12:	e7e5      	b.n	8009de0 <__mdiff+0x28>
 8009e14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e18:	6926      	ldr	r6, [r4, #16]
 8009e1a:	60c5      	str	r5, [r0, #12]
 8009e1c:	f104 0914 	add.w	r9, r4, #20
 8009e20:	f108 0514 	add.w	r5, r8, #20
 8009e24:	f100 0e14 	add.w	lr, r0, #20
 8009e28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e30:	f108 0210 	add.w	r2, r8, #16
 8009e34:	46f2      	mov	sl, lr
 8009e36:	2100      	movs	r1, #0
 8009e38:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e40:	fa11 f88b 	uxtah	r8, r1, fp
 8009e44:	b299      	uxth	r1, r3
 8009e46:	0c1b      	lsrs	r3, r3, #16
 8009e48:	eba8 0801 	sub.w	r8, r8, r1
 8009e4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e50:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e54:	fa1f f888 	uxth.w	r8, r8
 8009e58:	1419      	asrs	r1, r3, #16
 8009e5a:	454e      	cmp	r6, r9
 8009e5c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e60:	f84a 3b04 	str.w	r3, [sl], #4
 8009e64:	d8e8      	bhi.n	8009e38 <__mdiff+0x80>
 8009e66:	1b33      	subs	r3, r6, r4
 8009e68:	3b15      	subs	r3, #21
 8009e6a:	f023 0303 	bic.w	r3, r3, #3
 8009e6e:	3304      	adds	r3, #4
 8009e70:	3415      	adds	r4, #21
 8009e72:	42a6      	cmp	r6, r4
 8009e74:	bf38      	it	cc
 8009e76:	2304      	movcc	r3, #4
 8009e78:	441d      	add	r5, r3
 8009e7a:	4473      	add	r3, lr
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	462e      	mov	r6, r5
 8009e80:	4566      	cmp	r6, ip
 8009e82:	d30e      	bcc.n	8009ea2 <__mdiff+0xea>
 8009e84:	f10c 0203 	add.w	r2, ip, #3
 8009e88:	1b52      	subs	r2, r2, r5
 8009e8a:	f022 0203 	bic.w	r2, r2, #3
 8009e8e:	3d03      	subs	r5, #3
 8009e90:	45ac      	cmp	ip, r5
 8009e92:	bf38      	it	cc
 8009e94:	2200      	movcc	r2, #0
 8009e96:	4413      	add	r3, r2
 8009e98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e9c:	b17a      	cbz	r2, 8009ebe <__mdiff+0x106>
 8009e9e:	6107      	str	r7, [r0, #16]
 8009ea0:	e7a4      	b.n	8009dec <__mdiff+0x34>
 8009ea2:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ea6:	fa11 f288 	uxtah	r2, r1, r8
 8009eaa:	1414      	asrs	r4, r2, #16
 8009eac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009eb0:	b292      	uxth	r2, r2
 8009eb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009eb6:	f84e 2b04 	str.w	r2, [lr], #4
 8009eba:	1421      	asrs	r1, r4, #16
 8009ebc:	e7e0      	b.n	8009e80 <__mdiff+0xc8>
 8009ebe:	3f01      	subs	r7, #1
 8009ec0:	e7ea      	b.n	8009e98 <__mdiff+0xe0>
 8009ec2:	bf00      	nop
 8009ec4:	0800d141 	.word	0x0800d141
 8009ec8:	0800d152 	.word	0x0800d152

08009ecc <__ulp>:
 8009ecc:	b082      	sub	sp, #8
 8009ece:	ed8d 0b00 	vstr	d0, [sp]
 8009ed2:	9a01      	ldr	r2, [sp, #4]
 8009ed4:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <__ulp+0x48>)
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dc08      	bgt.n	8009ef2 <__ulp+0x26>
 8009ee0:	425b      	negs	r3, r3
 8009ee2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009ee6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009eea:	da04      	bge.n	8009ef6 <__ulp+0x2a>
 8009eec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ef0:	4113      	asrs	r3, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	e008      	b.n	8009f08 <__ulp+0x3c>
 8009ef6:	f1a2 0314 	sub.w	r3, r2, #20
 8009efa:	2b1e      	cmp	r3, #30
 8009efc:	bfda      	itte	le
 8009efe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009f02:	40da      	lsrle	r2, r3
 8009f04:	2201      	movgt	r2, #1
 8009f06:	2300      	movs	r3, #0
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	ec41 0b10 	vmov	d0, r0, r1
 8009f10:	b002      	add	sp, #8
 8009f12:	4770      	bx	lr
 8009f14:	7ff00000 	.word	0x7ff00000

08009f18 <__b2d>:
 8009f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1c:	6906      	ldr	r6, [r0, #16]
 8009f1e:	f100 0814 	add.w	r8, r0, #20
 8009f22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009f26:	1f37      	subs	r7, r6, #4
 8009f28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f7ff fd53 	bl	80099d8 <__hi0bits>
 8009f32:	f1c0 0320 	rsb	r3, r0, #32
 8009f36:	280a      	cmp	r0, #10
 8009f38:	600b      	str	r3, [r1, #0]
 8009f3a:	491b      	ldr	r1, [pc, #108]	; (8009fa8 <__b2d+0x90>)
 8009f3c:	dc15      	bgt.n	8009f6a <__b2d+0x52>
 8009f3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f42:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f46:	45b8      	cmp	r8, r7
 8009f48:	ea43 0501 	orr.w	r5, r3, r1
 8009f4c:	bf34      	ite	cc
 8009f4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f52:	2300      	movcs	r3, #0
 8009f54:	3015      	adds	r0, #21
 8009f56:	fa02 f000 	lsl.w	r0, r2, r0
 8009f5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f5e:	4303      	orrs	r3, r0
 8009f60:	461c      	mov	r4, r3
 8009f62:	ec45 4b10 	vmov	d0, r4, r5
 8009f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6a:	45b8      	cmp	r8, r7
 8009f6c:	bf3a      	itte	cc
 8009f6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f72:	f1a6 0708 	subcc.w	r7, r6, #8
 8009f76:	2300      	movcs	r3, #0
 8009f78:	380b      	subs	r0, #11
 8009f7a:	d012      	beq.n	8009fa2 <__b2d+0x8a>
 8009f7c:	f1c0 0120 	rsb	r1, r0, #32
 8009f80:	fa23 f401 	lsr.w	r4, r3, r1
 8009f84:	4082      	lsls	r2, r0
 8009f86:	4322      	orrs	r2, r4
 8009f88:	4547      	cmp	r7, r8
 8009f8a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009f8e:	bf8c      	ite	hi
 8009f90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f94:	2200      	movls	r2, #0
 8009f96:	4083      	lsls	r3, r0
 8009f98:	40ca      	lsrs	r2, r1
 8009f9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	e7de      	b.n	8009f60 <__b2d+0x48>
 8009fa2:	ea42 0501 	orr.w	r5, r2, r1
 8009fa6:	e7db      	b.n	8009f60 <__b2d+0x48>
 8009fa8:	3ff00000 	.word	0x3ff00000

08009fac <__d2b>:
 8009fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fb0:	460f      	mov	r7, r1
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	ec59 8b10 	vmov	r8, r9, d0
 8009fb8:	4616      	mov	r6, r2
 8009fba:	f7ff fc1b 	bl	80097f4 <_Balloc>
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	b930      	cbnz	r0, 8009fd0 <__d2b+0x24>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	4b24      	ldr	r3, [pc, #144]	; (800a058 <__d2b+0xac>)
 8009fc6:	4825      	ldr	r0, [pc, #148]	; (800a05c <__d2b+0xb0>)
 8009fc8:	f240 310f 	movw	r1, #783	; 0x30f
 8009fcc:	f001 f9a0 	bl	800b310 <__assert_func>
 8009fd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fd8:	bb2d      	cbnz	r5, 800a026 <__d2b+0x7a>
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	f1b8 0300 	subs.w	r3, r8, #0
 8009fe0:	d026      	beq.n	800a030 <__d2b+0x84>
 8009fe2:	4668      	mov	r0, sp
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	f7ff fd17 	bl	8009a18 <__lo0bits>
 8009fea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fee:	b1e8      	cbz	r0, 800a02c <__d2b+0x80>
 8009ff0:	f1c0 0320 	rsb	r3, r0, #32
 8009ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	40c2      	lsrs	r2, r0
 8009ffc:	6163      	str	r3, [r4, #20]
 8009ffe:	9201      	str	r2, [sp, #4]
 800a000:	9b01      	ldr	r3, [sp, #4]
 800a002:	61a3      	str	r3, [r4, #24]
 800a004:	2b00      	cmp	r3, #0
 800a006:	bf14      	ite	ne
 800a008:	2202      	movne	r2, #2
 800a00a:	2201      	moveq	r2, #1
 800a00c:	6122      	str	r2, [r4, #16]
 800a00e:	b1bd      	cbz	r5, 800a040 <__d2b+0x94>
 800a010:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a014:	4405      	add	r5, r0
 800a016:	603d      	str	r5, [r7, #0]
 800a018:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a01c:	6030      	str	r0, [r6, #0]
 800a01e:	4620      	mov	r0, r4
 800a020:	b003      	add	sp, #12
 800a022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a02a:	e7d6      	b.n	8009fda <__d2b+0x2e>
 800a02c:	6161      	str	r1, [r4, #20]
 800a02e:	e7e7      	b.n	800a000 <__d2b+0x54>
 800a030:	a801      	add	r0, sp, #4
 800a032:	f7ff fcf1 	bl	8009a18 <__lo0bits>
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	6163      	str	r3, [r4, #20]
 800a03a:	3020      	adds	r0, #32
 800a03c:	2201      	movs	r2, #1
 800a03e:	e7e5      	b.n	800a00c <__d2b+0x60>
 800a040:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a044:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a048:	6038      	str	r0, [r7, #0]
 800a04a:	6918      	ldr	r0, [r3, #16]
 800a04c:	f7ff fcc4 	bl	80099d8 <__hi0bits>
 800a050:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a054:	e7e2      	b.n	800a01c <__d2b+0x70>
 800a056:	bf00      	nop
 800a058:	0800d141 	.word	0x0800d141
 800a05c:	0800d152 	.word	0x0800d152

0800a060 <__ratio>:
 800a060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	4688      	mov	r8, r1
 800a066:	4669      	mov	r1, sp
 800a068:	4681      	mov	r9, r0
 800a06a:	f7ff ff55 	bl	8009f18 <__b2d>
 800a06e:	a901      	add	r1, sp, #4
 800a070:	4640      	mov	r0, r8
 800a072:	ec55 4b10 	vmov	r4, r5, d0
 800a076:	f7ff ff4f 	bl	8009f18 <__b2d>
 800a07a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a07e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a082:	eba3 0c02 	sub.w	ip, r3, r2
 800a086:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a08a:	1a9b      	subs	r3, r3, r2
 800a08c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a090:	ec51 0b10 	vmov	r0, r1, d0
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfd6      	itet	le
 800a098:	460a      	movle	r2, r1
 800a09a:	462a      	movgt	r2, r5
 800a09c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0a0:	468b      	mov	fp, r1
 800a0a2:	462f      	mov	r7, r5
 800a0a4:	bfd4      	ite	le
 800a0a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a0aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	ee10 2a10 	vmov	r2, s0
 800a0b4:	465b      	mov	r3, fp
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	f7f6 fbd0 	bl	800085c <__aeabi_ddiv>
 800a0bc:	ec41 0b10 	vmov	d0, r0, r1
 800a0c0:	b003      	add	sp, #12
 800a0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0c6 <__copybits>:
 800a0c6:	3901      	subs	r1, #1
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	1149      	asrs	r1, r1, #5
 800a0cc:	6914      	ldr	r4, [r2, #16]
 800a0ce:	3101      	adds	r1, #1
 800a0d0:	f102 0314 	add.w	r3, r2, #20
 800a0d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a0d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a0dc:	1f05      	subs	r5, r0, #4
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	d30c      	bcc.n	800a0fc <__copybits+0x36>
 800a0e2:	1aa3      	subs	r3, r4, r2
 800a0e4:	3b11      	subs	r3, #17
 800a0e6:	f023 0303 	bic.w	r3, r3, #3
 800a0ea:	3211      	adds	r2, #17
 800a0ec:	42a2      	cmp	r2, r4
 800a0ee:	bf88      	it	hi
 800a0f0:	2300      	movhi	r3, #0
 800a0f2:	4418      	add	r0, r3
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4288      	cmp	r0, r1
 800a0f8:	d305      	bcc.n	800a106 <__copybits+0x40>
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a100:	f845 6f04 	str.w	r6, [r5, #4]!
 800a104:	e7eb      	b.n	800a0de <__copybits+0x18>
 800a106:	f840 3b04 	str.w	r3, [r0], #4
 800a10a:	e7f4      	b.n	800a0f6 <__copybits+0x30>

0800a10c <__any_on>:
 800a10c:	f100 0214 	add.w	r2, r0, #20
 800a110:	6900      	ldr	r0, [r0, #16]
 800a112:	114b      	asrs	r3, r1, #5
 800a114:	4298      	cmp	r0, r3
 800a116:	b510      	push	{r4, lr}
 800a118:	db11      	blt.n	800a13e <__any_on+0x32>
 800a11a:	dd0a      	ble.n	800a132 <__any_on+0x26>
 800a11c:	f011 011f 	ands.w	r1, r1, #31
 800a120:	d007      	beq.n	800a132 <__any_on+0x26>
 800a122:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a126:	fa24 f001 	lsr.w	r0, r4, r1
 800a12a:	fa00 f101 	lsl.w	r1, r0, r1
 800a12e:	428c      	cmp	r4, r1
 800a130:	d10b      	bne.n	800a14a <__any_on+0x3e>
 800a132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a136:	4293      	cmp	r3, r2
 800a138:	d803      	bhi.n	800a142 <__any_on+0x36>
 800a13a:	2000      	movs	r0, #0
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	4603      	mov	r3, r0
 800a140:	e7f7      	b.n	800a132 <__any_on+0x26>
 800a142:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a146:	2900      	cmp	r1, #0
 800a148:	d0f5      	beq.n	800a136 <__any_on+0x2a>
 800a14a:	2001      	movs	r0, #1
 800a14c:	e7f6      	b.n	800a13c <__any_on+0x30>

0800a14e <sulp>:
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	4604      	mov	r4, r0
 800a152:	460d      	mov	r5, r1
 800a154:	ec45 4b10 	vmov	d0, r4, r5
 800a158:	4616      	mov	r6, r2
 800a15a:	f7ff feb7 	bl	8009ecc <__ulp>
 800a15e:	ec51 0b10 	vmov	r0, r1, d0
 800a162:	b17e      	cbz	r6, 800a184 <sulp+0x36>
 800a164:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a168:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	dd09      	ble.n	800a184 <sulp+0x36>
 800a170:	051b      	lsls	r3, r3, #20
 800a172:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a176:	2400      	movs	r4, #0
 800a178:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a17c:	4622      	mov	r2, r4
 800a17e:	462b      	mov	r3, r5
 800a180:	f7f6 fa42 	bl	8000608 <__aeabi_dmul>
 800a184:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a188 <_strtod_l>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ed2d 8b02 	vpush	{d8}
 800a190:	b09b      	sub	sp, #108	; 0x6c
 800a192:	4604      	mov	r4, r0
 800a194:	9213      	str	r2, [sp, #76]	; 0x4c
 800a196:	2200      	movs	r2, #0
 800a198:	9216      	str	r2, [sp, #88]	; 0x58
 800a19a:	460d      	mov	r5, r1
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	f04f 0900 	mov.w	r9, #0
 800a1a4:	460a      	mov	r2, r1
 800a1a6:	9215      	str	r2, [sp, #84]	; 0x54
 800a1a8:	7811      	ldrb	r1, [r2, #0]
 800a1aa:	292b      	cmp	r1, #43	; 0x2b
 800a1ac:	d04c      	beq.n	800a248 <_strtod_l+0xc0>
 800a1ae:	d83a      	bhi.n	800a226 <_strtod_l+0x9e>
 800a1b0:	290d      	cmp	r1, #13
 800a1b2:	d834      	bhi.n	800a21e <_strtod_l+0x96>
 800a1b4:	2908      	cmp	r1, #8
 800a1b6:	d834      	bhi.n	800a222 <_strtod_l+0x9a>
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d03d      	beq.n	800a238 <_strtod_l+0xb0>
 800a1bc:	2200      	movs	r2, #0
 800a1be:	920a      	str	r2, [sp, #40]	; 0x28
 800a1c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a1c2:	7832      	ldrb	r2, [r6, #0]
 800a1c4:	2a30      	cmp	r2, #48	; 0x30
 800a1c6:	f040 80b4 	bne.w	800a332 <_strtod_l+0x1aa>
 800a1ca:	7872      	ldrb	r2, [r6, #1]
 800a1cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a1d0:	2a58      	cmp	r2, #88	; 0x58
 800a1d2:	d170      	bne.n	800a2b6 <_strtod_l+0x12e>
 800a1d4:	9302      	str	r3, [sp, #8]
 800a1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	ab16      	add	r3, sp, #88	; 0x58
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	4a8e      	ldr	r2, [pc, #568]	; (800a418 <_strtod_l+0x290>)
 800a1e0:	ab17      	add	r3, sp, #92	; 0x5c
 800a1e2:	a915      	add	r1, sp, #84	; 0x54
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f001 f92f 	bl	800b448 <__gethex>
 800a1ea:	f010 070f 	ands.w	r7, r0, #15
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	d005      	beq.n	800a1fe <_strtod_l+0x76>
 800a1f2:	2f06      	cmp	r7, #6
 800a1f4:	d12a      	bne.n	800a24c <_strtod_l+0xc4>
 800a1f6:	3601      	adds	r6, #1
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9615      	str	r6, [sp, #84]	; 0x54
 800a1fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a1fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 857f 	bne.w	800ad04 <_strtod_l+0xb7c>
 800a206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a208:	b1db      	cbz	r3, 800a242 <_strtod_l+0xba>
 800a20a:	4642      	mov	r2, r8
 800a20c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a210:	ec43 2b10 	vmov	d0, r2, r3
 800a214:	b01b      	add	sp, #108	; 0x6c
 800a216:	ecbd 8b02 	vpop	{d8}
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	2920      	cmp	r1, #32
 800a220:	d1cc      	bne.n	800a1bc <_strtod_l+0x34>
 800a222:	3201      	adds	r2, #1
 800a224:	e7bf      	b.n	800a1a6 <_strtod_l+0x1e>
 800a226:	292d      	cmp	r1, #45	; 0x2d
 800a228:	d1c8      	bne.n	800a1bc <_strtod_l+0x34>
 800a22a:	2101      	movs	r1, #1
 800a22c:	910a      	str	r1, [sp, #40]	; 0x28
 800a22e:	1c51      	adds	r1, r2, #1
 800a230:	9115      	str	r1, [sp, #84]	; 0x54
 800a232:	7852      	ldrb	r2, [r2, #1]
 800a234:	2a00      	cmp	r2, #0
 800a236:	d1c3      	bne.n	800a1c0 <_strtod_l+0x38>
 800a238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a23a:	9515      	str	r5, [sp, #84]	; 0x54
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f040 855f 	bne.w	800ad00 <_strtod_l+0xb78>
 800a242:	4642      	mov	r2, r8
 800a244:	464b      	mov	r3, r9
 800a246:	e7e3      	b.n	800a210 <_strtod_l+0x88>
 800a248:	2100      	movs	r1, #0
 800a24a:	e7ef      	b.n	800a22c <_strtod_l+0xa4>
 800a24c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a24e:	b13a      	cbz	r2, 800a260 <_strtod_l+0xd8>
 800a250:	2135      	movs	r1, #53	; 0x35
 800a252:	a818      	add	r0, sp, #96	; 0x60
 800a254:	f7ff ff37 	bl	800a0c6 <__copybits>
 800a258:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff fb0a 	bl	8009874 <_Bfree>
 800a260:	3f01      	subs	r7, #1
 800a262:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a264:	2f04      	cmp	r7, #4
 800a266:	d806      	bhi.n	800a276 <_strtod_l+0xee>
 800a268:	e8df f007 	tbb	[pc, r7]
 800a26c:	201d0314 	.word	0x201d0314
 800a270:	14          	.byte	0x14
 800a271:	00          	.byte	0x00
 800a272:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a276:	05e9      	lsls	r1, r5, #23
 800a278:	bf48      	it	mi
 800a27a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a27e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a282:	0d1b      	lsrs	r3, r3, #20
 800a284:	051b      	lsls	r3, r3, #20
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1b9      	bne.n	800a1fe <_strtod_l+0x76>
 800a28a:	f7fe faf5 	bl	8008878 <__errno>
 800a28e:	2322      	movs	r3, #34	; 0x22
 800a290:	6003      	str	r3, [r0, #0]
 800a292:	e7b4      	b.n	800a1fe <_strtod_l+0x76>
 800a294:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a298:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a29c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a2a4:	e7e7      	b.n	800a276 <_strtod_l+0xee>
 800a2a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a420 <_strtod_l+0x298>
 800a2aa:	e7e4      	b.n	800a276 <_strtod_l+0xee>
 800a2ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a2b0:	f04f 38ff 	mov.w	r8, #4294967295
 800a2b4:	e7df      	b.n	800a276 <_strtod_l+0xee>
 800a2b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	9215      	str	r2, [sp, #84]	; 0x54
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b30      	cmp	r3, #48	; 0x30
 800a2c0:	d0f9      	beq.n	800a2b6 <_strtod_l+0x12e>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d09b      	beq.n	800a1fe <_strtod_l+0x76>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f04f 0a00 	mov.w	sl, #0
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a2d6:	46d3      	mov	fp, sl
 800a2d8:	220a      	movs	r2, #10
 800a2da:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a2dc:	7806      	ldrb	r6, [r0, #0]
 800a2de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a2e2:	b2d9      	uxtb	r1, r3
 800a2e4:	2909      	cmp	r1, #9
 800a2e6:	d926      	bls.n	800a336 <_strtod_l+0x1ae>
 800a2e8:	494c      	ldr	r1, [pc, #304]	; (800a41c <_strtod_l+0x294>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f000 ffe6 	bl	800b2bc <strncmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d030      	beq.n	800a356 <_strtod_l+0x1ce>
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	4632      	mov	r2, r6
 800a2f8:	9005      	str	r0, [sp, #20]
 800a2fa:	465e      	mov	r6, fp
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2a65      	cmp	r2, #101	; 0x65
 800a300:	d001      	beq.n	800a306 <_strtod_l+0x17e>
 800a302:	2a45      	cmp	r2, #69	; 0x45
 800a304:	d113      	bne.n	800a32e <_strtod_l+0x1a6>
 800a306:	b91e      	cbnz	r6, 800a310 <_strtod_l+0x188>
 800a308:	9a04      	ldr	r2, [sp, #16]
 800a30a:	4302      	orrs	r2, r0
 800a30c:	d094      	beq.n	800a238 <_strtod_l+0xb0>
 800a30e:	2600      	movs	r6, #0
 800a310:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a312:	1c6a      	adds	r2, r5, #1
 800a314:	9215      	str	r2, [sp, #84]	; 0x54
 800a316:	786a      	ldrb	r2, [r5, #1]
 800a318:	2a2b      	cmp	r2, #43	; 0x2b
 800a31a:	d074      	beq.n	800a406 <_strtod_l+0x27e>
 800a31c:	2a2d      	cmp	r2, #45	; 0x2d
 800a31e:	d078      	beq.n	800a412 <_strtod_l+0x28a>
 800a320:	f04f 0c00 	mov.w	ip, #0
 800a324:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a328:	2909      	cmp	r1, #9
 800a32a:	d97f      	bls.n	800a42c <_strtod_l+0x2a4>
 800a32c:	9515      	str	r5, [sp, #84]	; 0x54
 800a32e:	2700      	movs	r7, #0
 800a330:	e09e      	b.n	800a470 <_strtod_l+0x2e8>
 800a332:	2300      	movs	r3, #0
 800a334:	e7c8      	b.n	800a2c8 <_strtod_l+0x140>
 800a336:	f1bb 0f08 	cmp.w	fp, #8
 800a33a:	bfd8      	it	le
 800a33c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a33e:	f100 0001 	add.w	r0, r0, #1
 800a342:	bfda      	itte	le
 800a344:	fb02 3301 	mlale	r3, r2, r1, r3
 800a348:	9309      	strle	r3, [sp, #36]	; 0x24
 800a34a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a34e:	f10b 0b01 	add.w	fp, fp, #1
 800a352:	9015      	str	r0, [sp, #84]	; 0x54
 800a354:	e7c1      	b.n	800a2da <_strtod_l+0x152>
 800a356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	9215      	str	r2, [sp, #84]	; 0x54
 800a35c:	785a      	ldrb	r2, [r3, #1]
 800a35e:	f1bb 0f00 	cmp.w	fp, #0
 800a362:	d037      	beq.n	800a3d4 <_strtod_l+0x24c>
 800a364:	9005      	str	r0, [sp, #20]
 800a366:	465e      	mov	r6, fp
 800a368:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a36c:	2b09      	cmp	r3, #9
 800a36e:	d912      	bls.n	800a396 <_strtod_l+0x20e>
 800a370:	2301      	movs	r3, #1
 800a372:	e7c4      	b.n	800a2fe <_strtod_l+0x176>
 800a374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	9215      	str	r2, [sp, #84]	; 0x54
 800a37a:	785a      	ldrb	r2, [r3, #1]
 800a37c:	3001      	adds	r0, #1
 800a37e:	2a30      	cmp	r2, #48	; 0x30
 800a380:	d0f8      	beq.n	800a374 <_strtod_l+0x1ec>
 800a382:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a386:	2b08      	cmp	r3, #8
 800a388:	f200 84c1 	bhi.w	800ad0e <_strtod_l+0xb86>
 800a38c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a38e:	9005      	str	r0, [sp, #20]
 800a390:	2000      	movs	r0, #0
 800a392:	930b      	str	r3, [sp, #44]	; 0x2c
 800a394:	4606      	mov	r6, r0
 800a396:	3a30      	subs	r2, #48	; 0x30
 800a398:	f100 0301 	add.w	r3, r0, #1
 800a39c:	d014      	beq.n	800a3c8 <_strtod_l+0x240>
 800a39e:	9905      	ldr	r1, [sp, #20]
 800a3a0:	4419      	add	r1, r3
 800a3a2:	9105      	str	r1, [sp, #20]
 800a3a4:	4633      	mov	r3, r6
 800a3a6:	eb00 0c06 	add.w	ip, r0, r6
 800a3aa:	210a      	movs	r1, #10
 800a3ac:	4563      	cmp	r3, ip
 800a3ae:	d113      	bne.n	800a3d8 <_strtod_l+0x250>
 800a3b0:	1833      	adds	r3, r6, r0
 800a3b2:	2b08      	cmp	r3, #8
 800a3b4:	f106 0601 	add.w	r6, r6, #1
 800a3b8:	4406      	add	r6, r0
 800a3ba:	dc1a      	bgt.n	800a3f2 <_strtod_l+0x26a>
 800a3bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3be:	230a      	movs	r3, #10
 800a3c0:	fb03 2301 	mla	r3, r3, r1, r2
 800a3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a3ca:	1c51      	adds	r1, r2, #1
 800a3cc:	9115      	str	r1, [sp, #84]	; 0x54
 800a3ce:	7852      	ldrb	r2, [r2, #1]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	e7c9      	b.n	800a368 <_strtod_l+0x1e0>
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	e7d2      	b.n	800a37e <_strtod_l+0x1f6>
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	f103 0301 	add.w	r3, r3, #1
 800a3de:	dc03      	bgt.n	800a3e8 <_strtod_l+0x260>
 800a3e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3e2:	434f      	muls	r7, r1
 800a3e4:	9709      	str	r7, [sp, #36]	; 0x24
 800a3e6:	e7e1      	b.n	800a3ac <_strtod_l+0x224>
 800a3e8:	2b10      	cmp	r3, #16
 800a3ea:	bfd8      	it	le
 800a3ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a3f0:	e7dc      	b.n	800a3ac <_strtod_l+0x224>
 800a3f2:	2e10      	cmp	r6, #16
 800a3f4:	bfdc      	itt	le
 800a3f6:	230a      	movle	r3, #10
 800a3f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a3fc:	e7e3      	b.n	800a3c6 <_strtod_l+0x23e>
 800a3fe:	2300      	movs	r3, #0
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	2301      	movs	r3, #1
 800a404:	e780      	b.n	800a308 <_strtod_l+0x180>
 800a406:	f04f 0c00 	mov.w	ip, #0
 800a40a:	1caa      	adds	r2, r5, #2
 800a40c:	9215      	str	r2, [sp, #84]	; 0x54
 800a40e:	78aa      	ldrb	r2, [r5, #2]
 800a410:	e788      	b.n	800a324 <_strtod_l+0x19c>
 800a412:	f04f 0c01 	mov.w	ip, #1
 800a416:	e7f8      	b.n	800a40a <_strtod_l+0x282>
 800a418:	0800d2b0 	.word	0x0800d2b0
 800a41c:	0800d2ac 	.word	0x0800d2ac
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a426:	1c51      	adds	r1, r2, #1
 800a428:	9115      	str	r1, [sp, #84]	; 0x54
 800a42a:	7852      	ldrb	r2, [r2, #1]
 800a42c:	2a30      	cmp	r2, #48	; 0x30
 800a42e:	d0f9      	beq.n	800a424 <_strtod_l+0x29c>
 800a430:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a434:	2908      	cmp	r1, #8
 800a436:	f63f af7a 	bhi.w	800a32e <_strtod_l+0x1a6>
 800a43a:	3a30      	subs	r2, #48	; 0x30
 800a43c:	9208      	str	r2, [sp, #32]
 800a43e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a440:	920c      	str	r2, [sp, #48]	; 0x30
 800a442:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a444:	1c57      	adds	r7, r2, #1
 800a446:	9715      	str	r7, [sp, #84]	; 0x54
 800a448:	7852      	ldrb	r2, [r2, #1]
 800a44a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a44e:	f1be 0f09 	cmp.w	lr, #9
 800a452:	d938      	bls.n	800a4c6 <_strtod_l+0x33e>
 800a454:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a456:	1a7f      	subs	r7, r7, r1
 800a458:	2f08      	cmp	r7, #8
 800a45a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a45e:	dc03      	bgt.n	800a468 <_strtod_l+0x2e0>
 800a460:	9908      	ldr	r1, [sp, #32]
 800a462:	428f      	cmp	r7, r1
 800a464:	bfa8      	it	ge
 800a466:	460f      	movge	r7, r1
 800a468:	f1bc 0f00 	cmp.w	ip, #0
 800a46c:	d000      	beq.n	800a470 <_strtod_l+0x2e8>
 800a46e:	427f      	negs	r7, r7
 800a470:	2e00      	cmp	r6, #0
 800a472:	d14f      	bne.n	800a514 <_strtod_l+0x38c>
 800a474:	9904      	ldr	r1, [sp, #16]
 800a476:	4301      	orrs	r1, r0
 800a478:	f47f aec1 	bne.w	800a1fe <_strtod_l+0x76>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f47f aedb 	bne.w	800a238 <_strtod_l+0xb0>
 800a482:	2a69      	cmp	r2, #105	; 0x69
 800a484:	d029      	beq.n	800a4da <_strtod_l+0x352>
 800a486:	dc26      	bgt.n	800a4d6 <_strtod_l+0x34e>
 800a488:	2a49      	cmp	r2, #73	; 0x49
 800a48a:	d026      	beq.n	800a4da <_strtod_l+0x352>
 800a48c:	2a4e      	cmp	r2, #78	; 0x4e
 800a48e:	f47f aed3 	bne.w	800a238 <_strtod_l+0xb0>
 800a492:	499b      	ldr	r1, [pc, #620]	; (800a700 <_strtod_l+0x578>)
 800a494:	a815      	add	r0, sp, #84	; 0x54
 800a496:	f001 fa17 	bl	800b8c8 <__match>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	f43f aecc 	beq.w	800a238 <_strtod_l+0xb0>
 800a4a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b28      	cmp	r3, #40	; 0x28
 800a4a6:	d12f      	bne.n	800a508 <_strtod_l+0x380>
 800a4a8:	4996      	ldr	r1, [pc, #600]	; (800a704 <_strtod_l+0x57c>)
 800a4aa:	aa18      	add	r2, sp, #96	; 0x60
 800a4ac:	a815      	add	r0, sp, #84	; 0x54
 800a4ae:	f001 fa1f 	bl	800b8f0 <__hexnan>
 800a4b2:	2805      	cmp	r0, #5
 800a4b4:	d128      	bne.n	800a508 <_strtod_l+0x380>
 800a4b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a4c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a4c4:	e69b      	b.n	800a1fe <_strtod_l+0x76>
 800a4c6:	9f08      	ldr	r7, [sp, #32]
 800a4c8:	210a      	movs	r1, #10
 800a4ca:	fb01 2107 	mla	r1, r1, r7, r2
 800a4ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a4d2:	9208      	str	r2, [sp, #32]
 800a4d4:	e7b5      	b.n	800a442 <_strtod_l+0x2ba>
 800a4d6:	2a6e      	cmp	r2, #110	; 0x6e
 800a4d8:	e7d9      	b.n	800a48e <_strtod_l+0x306>
 800a4da:	498b      	ldr	r1, [pc, #556]	; (800a708 <_strtod_l+0x580>)
 800a4dc:	a815      	add	r0, sp, #84	; 0x54
 800a4de:	f001 f9f3 	bl	800b8c8 <__match>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	f43f aea8 	beq.w	800a238 <_strtod_l+0xb0>
 800a4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4ea:	4988      	ldr	r1, [pc, #544]	; (800a70c <_strtod_l+0x584>)
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	a815      	add	r0, sp, #84	; 0x54
 800a4f0:	9315      	str	r3, [sp, #84]	; 0x54
 800a4f2:	f001 f9e9 	bl	800b8c8 <__match>
 800a4f6:	b910      	cbnz	r0, 800a4fe <_strtod_l+0x376>
 800a4f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	9315      	str	r3, [sp, #84]	; 0x54
 800a4fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a71c <_strtod_l+0x594>
 800a502:	f04f 0800 	mov.w	r8, #0
 800a506:	e67a      	b.n	800a1fe <_strtod_l+0x76>
 800a508:	4881      	ldr	r0, [pc, #516]	; (800a710 <_strtod_l+0x588>)
 800a50a:	f000 fef9 	bl	800b300 <nan>
 800a50e:	ec59 8b10 	vmov	r8, r9, d0
 800a512:	e674      	b.n	800a1fe <_strtod_l+0x76>
 800a514:	9b05      	ldr	r3, [sp, #20]
 800a516:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a518:	1afb      	subs	r3, r7, r3
 800a51a:	f1bb 0f00 	cmp.w	fp, #0
 800a51e:	bf08      	it	eq
 800a520:	46b3      	moveq	fp, r6
 800a522:	2e10      	cmp	r6, #16
 800a524:	9308      	str	r3, [sp, #32]
 800a526:	4635      	mov	r5, r6
 800a528:	bfa8      	it	ge
 800a52a:	2510      	movge	r5, #16
 800a52c:	f7f5 fff2 	bl	8000514 <__aeabi_ui2d>
 800a530:	2e09      	cmp	r6, #9
 800a532:	4680      	mov	r8, r0
 800a534:	4689      	mov	r9, r1
 800a536:	dd13      	ble.n	800a560 <_strtod_l+0x3d8>
 800a538:	4b76      	ldr	r3, [pc, #472]	; (800a714 <_strtod_l+0x58c>)
 800a53a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a53e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a542:	f7f6 f861 	bl	8000608 <__aeabi_dmul>
 800a546:	4680      	mov	r8, r0
 800a548:	4650      	mov	r0, sl
 800a54a:	4689      	mov	r9, r1
 800a54c:	f7f5 ffe2 	bl	8000514 <__aeabi_ui2d>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4640      	mov	r0, r8
 800a556:	4649      	mov	r1, r9
 800a558:	f7f5 fea0 	bl	800029c <__adddf3>
 800a55c:	4680      	mov	r8, r0
 800a55e:	4689      	mov	r9, r1
 800a560:	2e0f      	cmp	r6, #15
 800a562:	dc38      	bgt.n	800a5d6 <_strtod_l+0x44e>
 800a564:	9b08      	ldr	r3, [sp, #32]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f43f ae49 	beq.w	800a1fe <_strtod_l+0x76>
 800a56c:	dd24      	ble.n	800a5b8 <_strtod_l+0x430>
 800a56e:	2b16      	cmp	r3, #22
 800a570:	dc0b      	bgt.n	800a58a <_strtod_l+0x402>
 800a572:	4968      	ldr	r1, [pc, #416]	; (800a714 <_strtod_l+0x58c>)
 800a574:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	f7f6 f842 	bl	8000608 <__aeabi_dmul>
 800a584:	4680      	mov	r8, r0
 800a586:	4689      	mov	r9, r1
 800a588:	e639      	b.n	800a1fe <_strtod_l+0x76>
 800a58a:	9a08      	ldr	r2, [sp, #32]
 800a58c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a590:	4293      	cmp	r3, r2
 800a592:	db20      	blt.n	800a5d6 <_strtod_l+0x44e>
 800a594:	4c5f      	ldr	r4, [pc, #380]	; (800a714 <_strtod_l+0x58c>)
 800a596:	f1c6 060f 	rsb	r6, r6, #15
 800a59a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a59e:	4642      	mov	r2, r8
 800a5a0:	464b      	mov	r3, r9
 800a5a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a6:	f7f6 f82f 	bl	8000608 <__aeabi_dmul>
 800a5aa:	9b08      	ldr	r3, [sp, #32]
 800a5ac:	1b9e      	subs	r6, r3, r6
 800a5ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a5b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5b6:	e7e3      	b.n	800a580 <_strtod_l+0x3f8>
 800a5b8:	9b08      	ldr	r3, [sp, #32]
 800a5ba:	3316      	adds	r3, #22
 800a5bc:	db0b      	blt.n	800a5d6 <_strtod_l+0x44e>
 800a5be:	9b05      	ldr	r3, [sp, #20]
 800a5c0:	1bdf      	subs	r7, r3, r7
 800a5c2:	4b54      	ldr	r3, [pc, #336]	; (800a714 <_strtod_l+0x58c>)
 800a5c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f6 f944 	bl	800085c <__aeabi_ddiv>
 800a5d4:	e7d6      	b.n	800a584 <_strtod_l+0x3fc>
 800a5d6:	9b08      	ldr	r3, [sp, #32]
 800a5d8:	1b75      	subs	r5, r6, r5
 800a5da:	441d      	add	r5, r3
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	dd70      	ble.n	800a6c2 <_strtod_l+0x53a>
 800a5e0:	f015 030f 	ands.w	r3, r5, #15
 800a5e4:	d00a      	beq.n	800a5fc <_strtod_l+0x474>
 800a5e6:	494b      	ldr	r1, [pc, #300]	; (800a714 <_strtod_l+0x58c>)
 800a5e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f4:	f7f6 f808 	bl	8000608 <__aeabi_dmul>
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	4689      	mov	r9, r1
 800a5fc:	f035 050f 	bics.w	r5, r5, #15
 800a600:	d04d      	beq.n	800a69e <_strtod_l+0x516>
 800a602:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a606:	dd22      	ble.n	800a64e <_strtod_l+0x4c6>
 800a608:	2500      	movs	r5, #0
 800a60a:	46ab      	mov	fp, r5
 800a60c:	9509      	str	r5, [sp, #36]	; 0x24
 800a60e:	9505      	str	r5, [sp, #20]
 800a610:	2322      	movs	r3, #34	; 0x22
 800a612:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a71c <_strtod_l+0x594>
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	f04f 0800 	mov.w	r8, #0
 800a61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f43f aded 	beq.w	800a1fe <_strtod_l+0x76>
 800a624:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a626:	4620      	mov	r0, r4
 800a628:	f7ff f924 	bl	8009874 <_Bfree>
 800a62c:	9905      	ldr	r1, [sp, #20]
 800a62e:	4620      	mov	r0, r4
 800a630:	f7ff f920 	bl	8009874 <_Bfree>
 800a634:	4659      	mov	r1, fp
 800a636:	4620      	mov	r0, r4
 800a638:	f7ff f91c 	bl	8009874 <_Bfree>
 800a63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a63e:	4620      	mov	r0, r4
 800a640:	f7ff f918 	bl	8009874 <_Bfree>
 800a644:	4629      	mov	r1, r5
 800a646:	4620      	mov	r0, r4
 800a648:	f7ff f914 	bl	8009874 <_Bfree>
 800a64c:	e5d7      	b.n	800a1fe <_strtod_l+0x76>
 800a64e:	4b32      	ldr	r3, [pc, #200]	; (800a718 <_strtod_l+0x590>)
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	2300      	movs	r3, #0
 800a654:	112d      	asrs	r5, r5, #4
 800a656:	4640      	mov	r0, r8
 800a658:	4649      	mov	r1, r9
 800a65a:	469a      	mov	sl, r3
 800a65c:	2d01      	cmp	r5, #1
 800a65e:	dc21      	bgt.n	800a6a4 <_strtod_l+0x51c>
 800a660:	b10b      	cbz	r3, 800a666 <_strtod_l+0x4de>
 800a662:	4680      	mov	r8, r0
 800a664:	4689      	mov	r9, r1
 800a666:	492c      	ldr	r1, [pc, #176]	; (800a718 <_strtod_l+0x590>)
 800a668:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a66c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a678:	f7f5 ffc6 	bl	8000608 <__aeabi_dmul>
 800a67c:	4b27      	ldr	r3, [pc, #156]	; (800a71c <_strtod_l+0x594>)
 800a67e:	460a      	mov	r2, r1
 800a680:	400b      	ands	r3, r1
 800a682:	4927      	ldr	r1, [pc, #156]	; (800a720 <_strtod_l+0x598>)
 800a684:	428b      	cmp	r3, r1
 800a686:	4680      	mov	r8, r0
 800a688:	d8be      	bhi.n	800a608 <_strtod_l+0x480>
 800a68a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a68e:	428b      	cmp	r3, r1
 800a690:	bf86      	itte	hi
 800a692:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a724 <_strtod_l+0x59c>
 800a696:	f04f 38ff 	movhi.w	r8, #4294967295
 800a69a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	e07b      	b.n	800a79c <_strtod_l+0x614>
 800a6a4:	07ea      	lsls	r2, r5, #31
 800a6a6:	d505      	bpl.n	800a6b4 <_strtod_l+0x52c>
 800a6a8:	9b04      	ldr	r3, [sp, #16]
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f7f5 ffab 	bl	8000608 <__aeabi_dmul>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	3208      	adds	r2, #8
 800a6b8:	f10a 0a01 	add.w	sl, sl, #1
 800a6bc:	106d      	asrs	r5, r5, #1
 800a6be:	9204      	str	r2, [sp, #16]
 800a6c0:	e7cc      	b.n	800a65c <_strtod_l+0x4d4>
 800a6c2:	d0ec      	beq.n	800a69e <_strtod_l+0x516>
 800a6c4:	426d      	negs	r5, r5
 800a6c6:	f015 020f 	ands.w	r2, r5, #15
 800a6ca:	d00a      	beq.n	800a6e2 <_strtod_l+0x55a>
 800a6cc:	4b11      	ldr	r3, [pc, #68]	; (800a714 <_strtod_l+0x58c>)
 800a6ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f6 f8bf 	bl	800085c <__aeabi_ddiv>
 800a6de:	4680      	mov	r8, r0
 800a6e0:	4689      	mov	r9, r1
 800a6e2:	112d      	asrs	r5, r5, #4
 800a6e4:	d0db      	beq.n	800a69e <_strtod_l+0x516>
 800a6e6:	2d1f      	cmp	r5, #31
 800a6e8:	dd1e      	ble.n	800a728 <_strtod_l+0x5a0>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	46ab      	mov	fp, r5
 800a6ee:	9509      	str	r5, [sp, #36]	; 0x24
 800a6f0:	9505      	str	r5, [sp, #20]
 800a6f2:	2322      	movs	r3, #34	; 0x22
 800a6f4:	f04f 0800 	mov.w	r8, #0
 800a6f8:	f04f 0900 	mov.w	r9, #0
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	e78d      	b.n	800a61c <_strtod_l+0x494>
 800a700:	0800d099 	.word	0x0800d099
 800a704:	0800d2c4 	.word	0x0800d2c4
 800a708:	0800d091 	.word	0x0800d091
 800a70c:	0800d0c8 	.word	0x0800d0c8
 800a710:	0800d455 	.word	0x0800d455
 800a714:	0800d1d8 	.word	0x0800d1d8
 800a718:	0800d1b0 	.word	0x0800d1b0
 800a71c:	7ff00000 	.word	0x7ff00000
 800a720:	7ca00000 	.word	0x7ca00000
 800a724:	7fefffff 	.word	0x7fefffff
 800a728:	f015 0310 	ands.w	r3, r5, #16
 800a72c:	bf18      	it	ne
 800a72e:	236a      	movne	r3, #106	; 0x6a
 800a730:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800aad4 <_strtod_l+0x94c>
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	4640      	mov	r0, r8
 800a738:	4649      	mov	r1, r9
 800a73a:	2300      	movs	r3, #0
 800a73c:	07ea      	lsls	r2, r5, #31
 800a73e:	d504      	bpl.n	800a74a <_strtod_l+0x5c2>
 800a740:	e9da 2300 	ldrd	r2, r3, [sl]
 800a744:	f7f5 ff60 	bl	8000608 <__aeabi_dmul>
 800a748:	2301      	movs	r3, #1
 800a74a:	106d      	asrs	r5, r5, #1
 800a74c:	f10a 0a08 	add.w	sl, sl, #8
 800a750:	d1f4      	bne.n	800a73c <_strtod_l+0x5b4>
 800a752:	b10b      	cbz	r3, 800a758 <_strtod_l+0x5d0>
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	9b04      	ldr	r3, [sp, #16]
 800a75a:	b1bb      	cbz	r3, 800a78c <_strtod_l+0x604>
 800a75c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a760:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a764:	2b00      	cmp	r3, #0
 800a766:	4649      	mov	r1, r9
 800a768:	dd10      	ble.n	800a78c <_strtod_l+0x604>
 800a76a:	2b1f      	cmp	r3, #31
 800a76c:	f340 811e 	ble.w	800a9ac <_strtod_l+0x824>
 800a770:	2b34      	cmp	r3, #52	; 0x34
 800a772:	bfde      	ittt	le
 800a774:	f04f 33ff 	movle.w	r3, #4294967295
 800a778:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a77c:	4093      	lslle	r3, r2
 800a77e:	f04f 0800 	mov.w	r8, #0
 800a782:	bfcc      	ite	gt
 800a784:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a788:	ea03 0901 	andle.w	r9, r3, r1
 800a78c:	2200      	movs	r2, #0
 800a78e:	2300      	movs	r3, #0
 800a790:	4640      	mov	r0, r8
 800a792:	4649      	mov	r1, r9
 800a794:	f7f6 f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d1a6      	bne.n	800a6ea <_strtod_l+0x562>
 800a79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7a2:	4633      	mov	r3, r6
 800a7a4:	465a      	mov	r2, fp
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f7ff f8cc 	bl	8009944 <__s2b>
 800a7ac:	9009      	str	r0, [sp, #36]	; 0x24
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f43f af2a 	beq.w	800a608 <_strtod_l+0x480>
 800a7b4:	9a08      	ldr	r2, [sp, #32]
 800a7b6:	9b05      	ldr	r3, [sp, #20]
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	eba3 0307 	sub.w	r3, r3, r7
 800a7be:	bfa8      	it	ge
 800a7c0:	2300      	movge	r3, #0
 800a7c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a7cc:	46ab      	mov	fp, r5
 800a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	6859      	ldr	r1, [r3, #4]
 800a7d4:	f7ff f80e 	bl	80097f4 <_Balloc>
 800a7d8:	9005      	str	r0, [sp, #20]
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f43f af18 	beq.w	800a610 <_strtod_l+0x488>
 800a7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	3202      	adds	r2, #2
 800a7e6:	f103 010c 	add.w	r1, r3, #12
 800a7ea:	0092      	lsls	r2, r2, #2
 800a7ec:	300c      	adds	r0, #12
 800a7ee:	f7fe f870 	bl	80088d2 <memcpy>
 800a7f2:	ec49 8b10 	vmov	d0, r8, r9
 800a7f6:	aa18      	add	r2, sp, #96	; 0x60
 800a7f8:	a917      	add	r1, sp, #92	; 0x5c
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f7ff fbd6 	bl	8009fac <__d2b>
 800a800:	ec49 8b18 	vmov	d8, r8, r9
 800a804:	9016      	str	r0, [sp, #88]	; 0x58
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f af02 	beq.w	800a610 <_strtod_l+0x488>
 800a80c:	2101      	movs	r1, #1
 800a80e:	4620      	mov	r0, r4
 800a810:	f7ff f930 	bl	8009a74 <__i2b>
 800a814:	4683      	mov	fp, r0
 800a816:	2800      	cmp	r0, #0
 800a818:	f43f aefa 	beq.w	800a610 <_strtod_l+0x488>
 800a81c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a81e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a820:	2e00      	cmp	r6, #0
 800a822:	bfab      	itete	ge
 800a824:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a826:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a828:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a82a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a82e:	bfac      	ite	ge
 800a830:	eb06 0a03 	addge.w	sl, r6, r3
 800a834:	1b9f      	sublt	r7, r3, r6
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	1af6      	subs	r6, r6, r3
 800a83a:	4416      	add	r6, r2
 800a83c:	4ba0      	ldr	r3, [pc, #640]	; (800aac0 <_strtod_l+0x938>)
 800a83e:	3e01      	subs	r6, #1
 800a840:	429e      	cmp	r6, r3
 800a842:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a846:	f280 80c4 	bge.w	800a9d2 <_strtod_l+0x84a>
 800a84a:	1b9b      	subs	r3, r3, r6
 800a84c:	2b1f      	cmp	r3, #31
 800a84e:	eba2 0203 	sub.w	r2, r2, r3
 800a852:	f04f 0101 	mov.w	r1, #1
 800a856:	f300 80b0 	bgt.w	800a9ba <_strtod_l+0x832>
 800a85a:	fa01 f303 	lsl.w	r3, r1, r3
 800a85e:	930e      	str	r3, [sp, #56]	; 0x38
 800a860:	2300      	movs	r3, #0
 800a862:	930d      	str	r3, [sp, #52]	; 0x34
 800a864:	eb0a 0602 	add.w	r6, sl, r2
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	45b2      	cmp	sl, r6
 800a86c:	4417      	add	r7, r2
 800a86e:	441f      	add	r7, r3
 800a870:	4653      	mov	r3, sl
 800a872:	bfa8      	it	ge
 800a874:	4633      	movge	r3, r6
 800a876:	42bb      	cmp	r3, r7
 800a878:	bfa8      	it	ge
 800a87a:	463b      	movge	r3, r7
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bfc2      	ittt	gt
 800a880:	1af6      	subgt	r6, r6, r3
 800a882:	1aff      	subgt	r7, r7, r3
 800a884:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dd17      	ble.n	800a8be <_strtod_l+0x736>
 800a88e:	4659      	mov	r1, fp
 800a890:	461a      	mov	r2, r3
 800a892:	4620      	mov	r0, r4
 800a894:	f7ff f9ae 	bl	8009bf4 <__pow5mult>
 800a898:	4683      	mov	fp, r0
 800a89a:	2800      	cmp	r0, #0
 800a89c:	f43f aeb8 	beq.w	800a610 <_strtod_l+0x488>
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f7ff f8fb 	bl	8009aa0 <__multiply>
 800a8aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f43f aeaf 	beq.w	800a610 <_strtod_l+0x488>
 800a8b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f7fe ffdd 	bl	8009874 <_Bfree>
 800a8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8bc:	9316      	str	r3, [sp, #88]	; 0x58
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	f300 808c 	bgt.w	800a9dc <_strtod_l+0x854>
 800a8c4:	9b08      	ldr	r3, [sp, #32]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dd08      	ble.n	800a8dc <_strtod_l+0x754>
 800a8ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8cc:	9905      	ldr	r1, [sp, #20]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f7ff f990 	bl	8009bf4 <__pow5mult>
 800a8d4:	9005      	str	r0, [sp, #20]
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f43f ae9a 	beq.w	800a610 <_strtod_l+0x488>
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	dd08      	ble.n	800a8f2 <_strtod_l+0x76a>
 800a8e0:	9905      	ldr	r1, [sp, #20]
 800a8e2:	463a      	mov	r2, r7
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f7ff f9df 	bl	8009ca8 <__lshift>
 800a8ea:	9005      	str	r0, [sp, #20]
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	f43f ae8f 	beq.w	800a610 <_strtod_l+0x488>
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	dd08      	ble.n	800a90a <_strtod_l+0x782>
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7ff f9d3 	bl	8009ca8 <__lshift>
 800a902:	4683      	mov	fp, r0
 800a904:	2800      	cmp	r0, #0
 800a906:	f43f ae83 	beq.w	800a610 <_strtod_l+0x488>
 800a90a:	9a05      	ldr	r2, [sp, #20]
 800a90c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a90e:	4620      	mov	r0, r4
 800a910:	f7ff fa52 	bl	8009db8 <__mdiff>
 800a914:	4605      	mov	r5, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f ae7a 	beq.w	800a610 <_strtod_l+0x488>
 800a91c:	68c3      	ldr	r3, [r0, #12]
 800a91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a920:	2300      	movs	r3, #0
 800a922:	60c3      	str	r3, [r0, #12]
 800a924:	4659      	mov	r1, fp
 800a926:	f7ff fa2b 	bl	8009d80 <__mcmp>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	da60      	bge.n	800a9f0 <_strtod_l+0x868>
 800a92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a930:	ea53 0308 	orrs.w	r3, r3, r8
 800a934:	f040 8084 	bne.w	800aa40 <_strtod_l+0x8b8>
 800a938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d17f      	bne.n	800aa40 <_strtod_l+0x8b8>
 800a940:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a944:	0d1b      	lsrs	r3, r3, #20
 800a946:	051b      	lsls	r3, r3, #20
 800a948:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a94c:	d978      	bls.n	800aa40 <_strtod_l+0x8b8>
 800a94e:	696b      	ldr	r3, [r5, #20]
 800a950:	b913      	cbnz	r3, 800a958 <_strtod_l+0x7d0>
 800a952:	692b      	ldr	r3, [r5, #16]
 800a954:	2b01      	cmp	r3, #1
 800a956:	dd73      	ble.n	800aa40 <_strtod_l+0x8b8>
 800a958:	4629      	mov	r1, r5
 800a95a:	2201      	movs	r2, #1
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7ff f9a3 	bl	8009ca8 <__lshift>
 800a962:	4659      	mov	r1, fp
 800a964:	4605      	mov	r5, r0
 800a966:	f7ff fa0b 	bl	8009d80 <__mcmp>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	dd68      	ble.n	800aa40 <_strtod_l+0x8b8>
 800a96e:	9904      	ldr	r1, [sp, #16]
 800a970:	4a54      	ldr	r2, [pc, #336]	; (800aac4 <_strtod_l+0x93c>)
 800a972:	464b      	mov	r3, r9
 800a974:	2900      	cmp	r1, #0
 800a976:	f000 8084 	beq.w	800aa82 <_strtod_l+0x8fa>
 800a97a:	ea02 0109 	and.w	r1, r2, r9
 800a97e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a982:	dc7e      	bgt.n	800aa82 <_strtod_l+0x8fa>
 800a984:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a988:	f77f aeb3 	ble.w	800a6f2 <_strtod_l+0x56a>
 800a98c:	4b4e      	ldr	r3, [pc, #312]	; (800aac8 <_strtod_l+0x940>)
 800a98e:	4640      	mov	r0, r8
 800a990:	4649      	mov	r1, r9
 800a992:	2200      	movs	r2, #0
 800a994:	f7f5 fe38 	bl	8000608 <__aeabi_dmul>
 800a998:	4b4a      	ldr	r3, [pc, #296]	; (800aac4 <_strtod_l+0x93c>)
 800a99a:	400b      	ands	r3, r1
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f47f ae3f 	bne.w	800a624 <_strtod_l+0x49c>
 800a9a6:	2322      	movs	r3, #34	; 0x22
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	e63b      	b.n	800a624 <_strtod_l+0x49c>
 800a9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b4:	ea03 0808 	and.w	r8, r3, r8
 800a9b8:	e6e8      	b.n	800a78c <_strtod_l+0x604>
 800a9ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a9be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a9c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a9c6:	36e2      	adds	r6, #226	; 0xe2
 800a9c8:	fa01 f306 	lsl.w	r3, r1, r6
 800a9cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a9d0:	e748      	b.n	800a864 <_strtod_l+0x6dc>
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a9da:	e743      	b.n	800a864 <_strtod_l+0x6dc>
 800a9dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9de:	4632      	mov	r2, r6
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7ff f961 	bl	8009ca8 <__lshift>
 800a9e6:	9016      	str	r0, [sp, #88]	; 0x58
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f47f af6b 	bne.w	800a8c4 <_strtod_l+0x73c>
 800a9ee:	e60f      	b.n	800a610 <_strtod_l+0x488>
 800a9f0:	46ca      	mov	sl, r9
 800a9f2:	d171      	bne.n	800aad8 <_strtod_l+0x950>
 800a9f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9fa:	b352      	cbz	r2, 800aa52 <_strtod_l+0x8ca>
 800a9fc:	4a33      	ldr	r2, [pc, #204]	; (800aacc <_strtod_l+0x944>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d12a      	bne.n	800aa58 <_strtod_l+0x8d0>
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	4641      	mov	r1, r8
 800aa06:	b1fb      	cbz	r3, 800aa48 <_strtod_l+0x8c0>
 800aa08:	4b2e      	ldr	r3, [pc, #184]	; (800aac4 <_strtod_l+0x93c>)
 800aa0a:	ea09 0303 	and.w	r3, r9, r3
 800aa0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa12:	f04f 32ff 	mov.w	r2, #4294967295
 800aa16:	d81a      	bhi.n	800aa4e <_strtod_l+0x8c6>
 800aa18:	0d1b      	lsrs	r3, r3, #20
 800aa1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa1e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa22:	4299      	cmp	r1, r3
 800aa24:	d118      	bne.n	800aa58 <_strtod_l+0x8d0>
 800aa26:	4b2a      	ldr	r3, [pc, #168]	; (800aad0 <_strtod_l+0x948>)
 800aa28:	459a      	cmp	sl, r3
 800aa2a:	d102      	bne.n	800aa32 <_strtod_l+0x8aa>
 800aa2c:	3101      	adds	r1, #1
 800aa2e:	f43f adef 	beq.w	800a610 <_strtod_l+0x488>
 800aa32:	4b24      	ldr	r3, [pc, #144]	; (800aac4 <_strtod_l+0x93c>)
 800aa34:	ea0a 0303 	and.w	r3, sl, r3
 800aa38:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aa3c:	f04f 0800 	mov.w	r8, #0
 800aa40:	9b04      	ldr	r3, [sp, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1a2      	bne.n	800a98c <_strtod_l+0x804>
 800aa46:	e5ed      	b.n	800a624 <_strtod_l+0x49c>
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4c:	e7e9      	b.n	800aa22 <_strtod_l+0x89a>
 800aa4e:	4613      	mov	r3, r2
 800aa50:	e7e7      	b.n	800aa22 <_strtod_l+0x89a>
 800aa52:	ea53 0308 	orrs.w	r3, r3, r8
 800aa56:	d08a      	beq.n	800a96e <_strtod_l+0x7e6>
 800aa58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa5a:	b1e3      	cbz	r3, 800aa96 <_strtod_l+0x90e>
 800aa5c:	ea13 0f0a 	tst.w	r3, sl
 800aa60:	d0ee      	beq.n	800aa40 <_strtod_l+0x8b8>
 800aa62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa64:	9a04      	ldr	r2, [sp, #16]
 800aa66:	4640      	mov	r0, r8
 800aa68:	4649      	mov	r1, r9
 800aa6a:	b1c3      	cbz	r3, 800aa9e <_strtod_l+0x916>
 800aa6c:	f7ff fb6f 	bl	800a14e <sulp>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	ec51 0b18 	vmov	r0, r1, d8
 800aa78:	f7f5 fc10 	bl	800029c <__adddf3>
 800aa7c:	4680      	mov	r8, r0
 800aa7e:	4689      	mov	r9, r1
 800aa80:	e7de      	b.n	800aa40 <_strtod_l+0x8b8>
 800aa82:	4013      	ands	r3, r2
 800aa84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aa88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800aa8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800aa90:	f04f 38ff 	mov.w	r8, #4294967295
 800aa94:	e7d4      	b.n	800aa40 <_strtod_l+0x8b8>
 800aa96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa98:	ea13 0f08 	tst.w	r3, r8
 800aa9c:	e7e0      	b.n	800aa60 <_strtod_l+0x8d8>
 800aa9e:	f7ff fb56 	bl	800a14e <sulp>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	ec51 0b18 	vmov	r0, r1, d8
 800aaaa:	f7f5 fbf5 	bl	8000298 <__aeabi_dsub>
 800aaae:	2200      	movs	r2, #0
 800aab0:	2300      	movs	r3, #0
 800aab2:	4680      	mov	r8, r0
 800aab4:	4689      	mov	r9, r1
 800aab6:	f7f6 f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d0c0      	beq.n	800aa40 <_strtod_l+0x8b8>
 800aabe:	e618      	b.n	800a6f2 <_strtod_l+0x56a>
 800aac0:	fffffc02 	.word	0xfffffc02
 800aac4:	7ff00000 	.word	0x7ff00000
 800aac8:	39500000 	.word	0x39500000
 800aacc:	000fffff 	.word	0x000fffff
 800aad0:	7fefffff 	.word	0x7fefffff
 800aad4:	0800d2d8 	.word	0x0800d2d8
 800aad8:	4659      	mov	r1, fp
 800aada:	4628      	mov	r0, r5
 800aadc:	f7ff fac0 	bl	800a060 <__ratio>
 800aae0:	ec57 6b10 	vmov	r6, r7, d0
 800aae4:	ee10 0a10 	vmov	r0, s0
 800aae8:	2200      	movs	r2, #0
 800aaea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f6 f806 	bl	8000b00 <__aeabi_dcmple>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d071      	beq.n	800abdc <_strtod_l+0xa54>
 800aaf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d17c      	bne.n	800abf8 <_strtod_l+0xa70>
 800aafe:	f1b8 0f00 	cmp.w	r8, #0
 800ab02:	d15a      	bne.n	800abba <_strtod_l+0xa32>
 800ab04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d15d      	bne.n	800abc8 <_strtod_l+0xa40>
 800ab0c:	4b90      	ldr	r3, [pc, #576]	; (800ad50 <_strtod_l+0xbc8>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4630      	mov	r0, r6
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f5 ffea 	bl	8000aec <__aeabi_dcmplt>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d15c      	bne.n	800abd6 <_strtod_l+0xa4e>
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	4b8c      	ldr	r3, [pc, #560]	; (800ad54 <_strtod_l+0xbcc>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	f7f5 fd70 	bl	8000608 <__aeabi_dmul>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ab30:	9606      	str	r6, [sp, #24]
 800ab32:	9307      	str	r3, [sp, #28]
 800ab34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ab3c:	4b86      	ldr	r3, [pc, #536]	; (800ad58 <_strtod_l+0xbd0>)
 800ab3e:	ea0a 0303 	and.w	r3, sl, r3
 800ab42:	930d      	str	r3, [sp, #52]	; 0x34
 800ab44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab46:	4b85      	ldr	r3, [pc, #532]	; (800ad5c <_strtod_l+0xbd4>)
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	f040 8090 	bne.w	800ac6e <_strtod_l+0xae6>
 800ab4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ab52:	ec49 8b10 	vmov	d0, r8, r9
 800ab56:	f7ff f9b9 	bl	8009ecc <__ulp>
 800ab5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab5e:	ec51 0b10 	vmov	r0, r1, d0
 800ab62:	f7f5 fd51 	bl	8000608 <__aeabi_dmul>
 800ab66:	4642      	mov	r2, r8
 800ab68:	464b      	mov	r3, r9
 800ab6a:	f7f5 fb97 	bl	800029c <__adddf3>
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4979      	ldr	r1, [pc, #484]	; (800ad58 <_strtod_l+0xbd0>)
 800ab72:	4a7b      	ldr	r2, [pc, #492]	; (800ad60 <_strtod_l+0xbd8>)
 800ab74:	4019      	ands	r1, r3
 800ab76:	4291      	cmp	r1, r2
 800ab78:	4680      	mov	r8, r0
 800ab7a:	d944      	bls.n	800ac06 <_strtod_l+0xa7e>
 800ab7c:	ee18 2a90 	vmov	r2, s17
 800ab80:	4b78      	ldr	r3, [pc, #480]	; (800ad64 <_strtod_l+0xbdc>)
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d104      	bne.n	800ab90 <_strtod_l+0xa08>
 800ab86:	ee18 3a10 	vmov	r3, s16
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	f43f ad40 	beq.w	800a610 <_strtod_l+0x488>
 800ab90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ad64 <_strtod_l+0xbdc>
 800ab94:	f04f 38ff 	mov.w	r8, #4294967295
 800ab98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7fe fe6a 	bl	8009874 <_Bfree>
 800aba0:	9905      	ldr	r1, [sp, #20]
 800aba2:	4620      	mov	r0, r4
 800aba4:	f7fe fe66 	bl	8009874 <_Bfree>
 800aba8:	4659      	mov	r1, fp
 800abaa:	4620      	mov	r0, r4
 800abac:	f7fe fe62 	bl	8009874 <_Bfree>
 800abb0:	4629      	mov	r1, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7fe fe5e 	bl	8009874 <_Bfree>
 800abb8:	e609      	b.n	800a7ce <_strtod_l+0x646>
 800abba:	f1b8 0f01 	cmp.w	r8, #1
 800abbe:	d103      	bne.n	800abc8 <_strtod_l+0xa40>
 800abc0:	f1b9 0f00 	cmp.w	r9, #0
 800abc4:	f43f ad95 	beq.w	800a6f2 <_strtod_l+0x56a>
 800abc8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ad20 <_strtod_l+0xb98>
 800abcc:	4f60      	ldr	r7, [pc, #384]	; (800ad50 <_strtod_l+0xbc8>)
 800abce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abd2:	2600      	movs	r6, #0
 800abd4:	e7ae      	b.n	800ab34 <_strtod_l+0x9ac>
 800abd6:	4f5f      	ldr	r7, [pc, #380]	; (800ad54 <_strtod_l+0xbcc>)
 800abd8:	2600      	movs	r6, #0
 800abda:	e7a7      	b.n	800ab2c <_strtod_l+0x9a4>
 800abdc:	4b5d      	ldr	r3, [pc, #372]	; (800ad54 <_strtod_l+0xbcc>)
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 fd10 	bl	8000608 <__aeabi_dmul>
 800abe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d09c      	beq.n	800ab2c <_strtod_l+0x9a4>
 800abf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abf6:	e79d      	b.n	800ab34 <_strtod_l+0x9ac>
 800abf8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ad28 <_strtod_l+0xba0>
 800abfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac00:	ec57 6b17 	vmov	r6, r7, d7
 800ac04:	e796      	b.n	800ab34 <_strtod_l+0x9ac>
 800ac06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	46ca      	mov	sl, r9
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1c2      	bne.n	800ab98 <_strtod_l+0xa10>
 800ac12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac18:	0d1b      	lsrs	r3, r3, #20
 800ac1a:	051b      	lsls	r3, r3, #20
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d1bb      	bne.n	800ab98 <_strtod_l+0xa10>
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f6 f8a0 	bl	8000d68 <__aeabi_d2lz>
 800ac28:	f7f5 fcc0 	bl	80005ac <__aeabi_l2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fb30 	bl	8000298 <__aeabi_dsub>
 800ac38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac3e:	ea43 0308 	orr.w	r3, r3, r8
 800ac42:	4313      	orrs	r3, r2
 800ac44:	4606      	mov	r6, r0
 800ac46:	460f      	mov	r7, r1
 800ac48:	d054      	beq.n	800acf4 <_strtod_l+0xb6c>
 800ac4a:	a339      	add	r3, pc, #228	; (adr r3, 800ad30 <_strtod_l+0xba8>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	f7f5 ff4c 	bl	8000aec <__aeabi_dcmplt>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	f47f ace5 	bne.w	800a624 <_strtod_l+0x49c>
 800ac5a:	a337      	add	r3, pc, #220	; (adr r3, 800ad38 <_strtod_l+0xbb0>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	4630      	mov	r0, r6
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 ff60 	bl	8000b28 <__aeabi_dcmpgt>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d095      	beq.n	800ab98 <_strtod_l+0xa10>
 800ac6c:	e4da      	b.n	800a624 <_strtod_l+0x49c>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	b333      	cbz	r3, 800acc0 <_strtod_l+0xb38>
 800ac72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac78:	d822      	bhi.n	800acc0 <_strtod_l+0xb38>
 800ac7a:	a331      	add	r3, pc, #196	; (adr r3, 800ad40 <_strtod_l+0xbb8>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 ff3c 	bl	8000b00 <__aeabi_dcmple>
 800ac88:	b1a0      	cbz	r0, 800acb4 <_strtod_l+0xb2c>
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7f5 ff93 	bl	8000bb8 <__aeabi_d2uiz>
 800ac92:	2801      	cmp	r0, #1
 800ac94:	bf38      	it	cc
 800ac96:	2001      	movcc	r0, #1
 800ac98:	f7f5 fc3c 	bl	8000514 <__aeabi_ui2d>
 800ac9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac9e:	4606      	mov	r6, r0
 800aca0:	460f      	mov	r7, r1
 800aca2:	bb23      	cbnz	r3, 800acee <_strtod_l+0xb66>
 800aca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aca8:	9010      	str	r0, [sp, #64]	; 0x40
 800acaa:	9311      	str	r3, [sp, #68]	; 0x44
 800acac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800acb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acc4:	eeb0 0a48 	vmov.f32	s0, s16
 800acc8:	eef0 0a68 	vmov.f32	s1, s17
 800accc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800acd0:	f7ff f8fc 	bl	8009ecc <__ulp>
 800acd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acd8:	ec53 2b10 	vmov	r2, r3, d0
 800acdc:	f7f5 fc94 	bl	8000608 <__aeabi_dmul>
 800ace0:	ec53 2b18 	vmov	r2, r3, d8
 800ace4:	f7f5 fada 	bl	800029c <__adddf3>
 800ace8:	4680      	mov	r8, r0
 800acea:	4689      	mov	r9, r1
 800acec:	e78d      	b.n	800ac0a <_strtod_l+0xa82>
 800acee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800acf2:	e7db      	b.n	800acac <_strtod_l+0xb24>
 800acf4:	a314      	add	r3, pc, #80	; (adr r3, 800ad48 <_strtod_l+0xbc0>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f7f5 fef7 	bl	8000aec <__aeabi_dcmplt>
 800acfe:	e7b3      	b.n	800ac68 <_strtod_l+0xae0>
 800ad00:	2300      	movs	r3, #0
 800ad02:	930a      	str	r3, [sp, #40]	; 0x28
 800ad04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	f7ff ba7c 	b.w	800a206 <_strtod_l+0x7e>
 800ad0e:	2a65      	cmp	r2, #101	; 0x65
 800ad10:	f43f ab75 	beq.w	800a3fe <_strtod_l+0x276>
 800ad14:	2a45      	cmp	r2, #69	; 0x45
 800ad16:	f43f ab72 	beq.w	800a3fe <_strtod_l+0x276>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f7ff bbaa 	b.w	800a474 <_strtod_l+0x2ec>
 800ad20:	00000000 	.word	0x00000000
 800ad24:	bff00000 	.word	0xbff00000
 800ad28:	00000000 	.word	0x00000000
 800ad2c:	3ff00000 	.word	0x3ff00000
 800ad30:	94a03595 	.word	0x94a03595
 800ad34:	3fdfffff 	.word	0x3fdfffff
 800ad38:	35afe535 	.word	0x35afe535
 800ad3c:	3fe00000 	.word	0x3fe00000
 800ad40:	ffc00000 	.word	0xffc00000
 800ad44:	41dfffff 	.word	0x41dfffff
 800ad48:	94a03595 	.word	0x94a03595
 800ad4c:	3fcfffff 	.word	0x3fcfffff
 800ad50:	3ff00000 	.word	0x3ff00000
 800ad54:	3fe00000 	.word	0x3fe00000
 800ad58:	7ff00000 	.word	0x7ff00000
 800ad5c:	7fe00000 	.word	0x7fe00000
 800ad60:	7c9fffff 	.word	0x7c9fffff
 800ad64:	7fefffff 	.word	0x7fefffff

0800ad68 <_strtod_r>:
 800ad68:	4b01      	ldr	r3, [pc, #4]	; (800ad70 <_strtod_r+0x8>)
 800ad6a:	f7ff ba0d 	b.w	800a188 <_strtod_l>
 800ad6e:	bf00      	nop
 800ad70:	20000070 	.word	0x20000070

0800ad74 <_strtol_l.constprop.0>:
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7a:	d001      	beq.n	800ad80 <_strtol_l.constprop.0+0xc>
 800ad7c:	2b24      	cmp	r3, #36	; 0x24
 800ad7e:	d906      	bls.n	800ad8e <_strtol_l.constprop.0+0x1a>
 800ad80:	f7fd fd7a 	bl	8008878 <__errno>
 800ad84:	2316      	movs	r3, #22
 800ad86:	6003      	str	r3, [r0, #0]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ae74 <_strtol_l.constprop.0+0x100>
 800ad92:	460d      	mov	r5, r1
 800ad94:	462e      	mov	r6, r5
 800ad96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ad9e:	f017 0708 	ands.w	r7, r7, #8
 800ada2:	d1f7      	bne.n	800ad94 <_strtol_l.constprop.0+0x20>
 800ada4:	2c2d      	cmp	r4, #45	; 0x2d
 800ada6:	d132      	bne.n	800ae0e <_strtol_l.constprop.0+0x9a>
 800ada8:	782c      	ldrb	r4, [r5, #0]
 800adaa:	2701      	movs	r7, #1
 800adac:	1cb5      	adds	r5, r6, #2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d05b      	beq.n	800ae6a <_strtol_l.constprop.0+0xf6>
 800adb2:	2b10      	cmp	r3, #16
 800adb4:	d109      	bne.n	800adca <_strtol_l.constprop.0+0x56>
 800adb6:	2c30      	cmp	r4, #48	; 0x30
 800adb8:	d107      	bne.n	800adca <_strtol_l.constprop.0+0x56>
 800adba:	782c      	ldrb	r4, [r5, #0]
 800adbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800adc0:	2c58      	cmp	r4, #88	; 0x58
 800adc2:	d14d      	bne.n	800ae60 <_strtol_l.constprop.0+0xec>
 800adc4:	786c      	ldrb	r4, [r5, #1]
 800adc6:	2310      	movs	r3, #16
 800adc8:	3502      	adds	r5, #2
 800adca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800adce:	f108 38ff 	add.w	r8, r8, #4294967295
 800add2:	f04f 0e00 	mov.w	lr, #0
 800add6:	fbb8 f9f3 	udiv	r9, r8, r3
 800adda:	4676      	mov	r6, lr
 800addc:	fb03 8a19 	mls	sl, r3, r9, r8
 800ade0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ade4:	f1bc 0f09 	cmp.w	ip, #9
 800ade8:	d816      	bhi.n	800ae18 <_strtol_l.constprop.0+0xa4>
 800adea:	4664      	mov	r4, ip
 800adec:	42a3      	cmp	r3, r4
 800adee:	dd24      	ble.n	800ae3a <_strtol_l.constprop.0+0xc6>
 800adf0:	f1be 3fff 	cmp.w	lr, #4294967295
 800adf4:	d008      	beq.n	800ae08 <_strtol_l.constprop.0+0x94>
 800adf6:	45b1      	cmp	r9, r6
 800adf8:	d31c      	bcc.n	800ae34 <_strtol_l.constprop.0+0xc0>
 800adfa:	d101      	bne.n	800ae00 <_strtol_l.constprop.0+0x8c>
 800adfc:	45a2      	cmp	sl, r4
 800adfe:	db19      	blt.n	800ae34 <_strtol_l.constprop.0+0xc0>
 800ae00:	fb06 4603 	mla	r6, r6, r3, r4
 800ae04:	f04f 0e01 	mov.w	lr, #1
 800ae08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae0c:	e7e8      	b.n	800ade0 <_strtol_l.constprop.0+0x6c>
 800ae0e:	2c2b      	cmp	r4, #43	; 0x2b
 800ae10:	bf04      	itt	eq
 800ae12:	782c      	ldrbeq	r4, [r5, #0]
 800ae14:	1cb5      	addeq	r5, r6, #2
 800ae16:	e7ca      	b.n	800adae <_strtol_l.constprop.0+0x3a>
 800ae18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ae1c:	f1bc 0f19 	cmp.w	ip, #25
 800ae20:	d801      	bhi.n	800ae26 <_strtol_l.constprop.0+0xb2>
 800ae22:	3c37      	subs	r4, #55	; 0x37
 800ae24:	e7e2      	b.n	800adec <_strtol_l.constprop.0+0x78>
 800ae26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ae2a:	f1bc 0f19 	cmp.w	ip, #25
 800ae2e:	d804      	bhi.n	800ae3a <_strtol_l.constprop.0+0xc6>
 800ae30:	3c57      	subs	r4, #87	; 0x57
 800ae32:	e7db      	b.n	800adec <_strtol_l.constprop.0+0x78>
 800ae34:	f04f 3eff 	mov.w	lr, #4294967295
 800ae38:	e7e6      	b.n	800ae08 <_strtol_l.constprop.0+0x94>
 800ae3a:	f1be 3fff 	cmp.w	lr, #4294967295
 800ae3e:	d105      	bne.n	800ae4c <_strtol_l.constprop.0+0xd8>
 800ae40:	2322      	movs	r3, #34	; 0x22
 800ae42:	6003      	str	r3, [r0, #0]
 800ae44:	4646      	mov	r6, r8
 800ae46:	b942      	cbnz	r2, 800ae5a <_strtol_l.constprop.0+0xe6>
 800ae48:	4630      	mov	r0, r6
 800ae4a:	e79e      	b.n	800ad8a <_strtol_l.constprop.0+0x16>
 800ae4c:	b107      	cbz	r7, 800ae50 <_strtol_l.constprop.0+0xdc>
 800ae4e:	4276      	negs	r6, r6
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	d0f9      	beq.n	800ae48 <_strtol_l.constprop.0+0xd4>
 800ae54:	f1be 0f00 	cmp.w	lr, #0
 800ae58:	d000      	beq.n	800ae5c <_strtol_l.constprop.0+0xe8>
 800ae5a:	1e69      	subs	r1, r5, #1
 800ae5c:	6011      	str	r1, [r2, #0]
 800ae5e:	e7f3      	b.n	800ae48 <_strtol_l.constprop.0+0xd4>
 800ae60:	2430      	movs	r4, #48	; 0x30
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1b1      	bne.n	800adca <_strtol_l.constprop.0+0x56>
 800ae66:	2308      	movs	r3, #8
 800ae68:	e7af      	b.n	800adca <_strtol_l.constprop.0+0x56>
 800ae6a:	2c30      	cmp	r4, #48	; 0x30
 800ae6c:	d0a5      	beq.n	800adba <_strtol_l.constprop.0+0x46>
 800ae6e:	230a      	movs	r3, #10
 800ae70:	e7ab      	b.n	800adca <_strtol_l.constprop.0+0x56>
 800ae72:	bf00      	nop
 800ae74:	0800d301 	.word	0x0800d301

0800ae78 <_strtol_r>:
 800ae78:	f7ff bf7c 	b.w	800ad74 <_strtol_l.constprop.0>

0800ae7c <__ssputs_r>:
 800ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	688e      	ldr	r6, [r1, #8]
 800ae82:	461f      	mov	r7, r3
 800ae84:	42be      	cmp	r6, r7
 800ae86:	680b      	ldr	r3, [r1, #0]
 800ae88:	4682      	mov	sl, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	4690      	mov	r8, r2
 800ae8e:	d82c      	bhi.n	800aeea <__ssputs_r+0x6e>
 800ae90:	898a      	ldrh	r2, [r1, #12]
 800ae92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae96:	d026      	beq.n	800aee6 <__ssputs_r+0x6a>
 800ae98:	6965      	ldr	r5, [r4, #20]
 800ae9a:	6909      	ldr	r1, [r1, #16]
 800ae9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aea0:	eba3 0901 	sub.w	r9, r3, r1
 800aea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aea8:	1c7b      	adds	r3, r7, #1
 800aeaa:	444b      	add	r3, r9
 800aeac:	106d      	asrs	r5, r5, #1
 800aeae:	429d      	cmp	r5, r3
 800aeb0:	bf38      	it	cc
 800aeb2:	461d      	movcc	r5, r3
 800aeb4:	0553      	lsls	r3, r2, #21
 800aeb6:	d527      	bpl.n	800af08 <__ssputs_r+0x8c>
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7fe fc0f 	bl	80096dc <_malloc_r>
 800aebe:	4606      	mov	r6, r0
 800aec0:	b360      	cbz	r0, 800af1c <__ssputs_r+0xa0>
 800aec2:	6921      	ldr	r1, [r4, #16]
 800aec4:	464a      	mov	r2, r9
 800aec6:	f7fd fd04 	bl	80088d2 <memcpy>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed4:	81a3      	strh	r3, [r4, #12]
 800aed6:	6126      	str	r6, [r4, #16]
 800aed8:	6165      	str	r5, [r4, #20]
 800aeda:	444e      	add	r6, r9
 800aedc:	eba5 0509 	sub.w	r5, r5, r9
 800aee0:	6026      	str	r6, [r4, #0]
 800aee2:	60a5      	str	r5, [r4, #8]
 800aee4:	463e      	mov	r6, r7
 800aee6:	42be      	cmp	r6, r7
 800aee8:	d900      	bls.n	800aeec <__ssputs_r+0x70>
 800aeea:	463e      	mov	r6, r7
 800aeec:	6820      	ldr	r0, [r4, #0]
 800aeee:	4632      	mov	r2, r6
 800aef0:	4641      	mov	r1, r8
 800aef2:	f000 f9c9 	bl	800b288 <memmove>
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	1b9b      	subs	r3, r3, r6
 800aefa:	60a3      	str	r3, [r4, #8]
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	4433      	add	r3, r6
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	2000      	movs	r0, #0
 800af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af08:	462a      	mov	r2, r5
 800af0a:	f000 fd9e 	bl	800ba4a <_realloc_r>
 800af0e:	4606      	mov	r6, r0
 800af10:	2800      	cmp	r0, #0
 800af12:	d1e0      	bne.n	800aed6 <__ssputs_r+0x5a>
 800af14:	6921      	ldr	r1, [r4, #16]
 800af16:	4650      	mov	r0, sl
 800af18:	f7fe fb6c 	bl	80095f4 <_free_r>
 800af1c:	230c      	movs	r3, #12
 800af1e:	f8ca 3000 	str.w	r3, [sl]
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	f04f 30ff 	mov.w	r0, #4294967295
 800af2e:	e7e9      	b.n	800af04 <__ssputs_r+0x88>

0800af30 <_svfiprintf_r>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	4698      	mov	r8, r3
 800af36:	898b      	ldrh	r3, [r1, #12]
 800af38:	061b      	lsls	r3, r3, #24
 800af3a:	b09d      	sub	sp, #116	; 0x74
 800af3c:	4607      	mov	r7, r0
 800af3e:	460d      	mov	r5, r1
 800af40:	4614      	mov	r4, r2
 800af42:	d50e      	bpl.n	800af62 <_svfiprintf_r+0x32>
 800af44:	690b      	ldr	r3, [r1, #16]
 800af46:	b963      	cbnz	r3, 800af62 <_svfiprintf_r+0x32>
 800af48:	2140      	movs	r1, #64	; 0x40
 800af4a:	f7fe fbc7 	bl	80096dc <_malloc_r>
 800af4e:	6028      	str	r0, [r5, #0]
 800af50:	6128      	str	r0, [r5, #16]
 800af52:	b920      	cbnz	r0, 800af5e <_svfiprintf_r+0x2e>
 800af54:	230c      	movs	r3, #12
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	e0d0      	b.n	800b100 <_svfiprintf_r+0x1d0>
 800af5e:	2340      	movs	r3, #64	; 0x40
 800af60:	616b      	str	r3, [r5, #20]
 800af62:	2300      	movs	r3, #0
 800af64:	9309      	str	r3, [sp, #36]	; 0x24
 800af66:	2320      	movs	r3, #32
 800af68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af70:	2330      	movs	r3, #48	; 0x30
 800af72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b118 <_svfiprintf_r+0x1e8>
 800af76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af7a:	f04f 0901 	mov.w	r9, #1
 800af7e:	4623      	mov	r3, r4
 800af80:	469a      	mov	sl, r3
 800af82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af86:	b10a      	cbz	r2, 800af8c <_svfiprintf_r+0x5c>
 800af88:	2a25      	cmp	r2, #37	; 0x25
 800af8a:	d1f9      	bne.n	800af80 <_svfiprintf_r+0x50>
 800af8c:	ebba 0b04 	subs.w	fp, sl, r4
 800af90:	d00b      	beq.n	800afaa <_svfiprintf_r+0x7a>
 800af92:	465b      	mov	r3, fp
 800af94:	4622      	mov	r2, r4
 800af96:	4629      	mov	r1, r5
 800af98:	4638      	mov	r0, r7
 800af9a:	f7ff ff6f 	bl	800ae7c <__ssputs_r>
 800af9e:	3001      	adds	r0, #1
 800afa0:	f000 80a9 	beq.w	800b0f6 <_svfiprintf_r+0x1c6>
 800afa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa6:	445a      	add	r2, fp
 800afa8:	9209      	str	r2, [sp, #36]	; 0x24
 800afaa:	f89a 3000 	ldrb.w	r3, [sl]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 80a1 	beq.w	800b0f6 <_svfiprintf_r+0x1c6>
 800afb4:	2300      	movs	r3, #0
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afbe:	f10a 0a01 	add.w	sl, sl, #1
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	9307      	str	r3, [sp, #28]
 800afc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afca:	931a      	str	r3, [sp, #104]	; 0x68
 800afcc:	4654      	mov	r4, sl
 800afce:	2205      	movs	r2, #5
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	4850      	ldr	r0, [pc, #320]	; (800b118 <_svfiprintf_r+0x1e8>)
 800afd6:	f7f5 f903 	bl	80001e0 <memchr>
 800afda:	9a04      	ldr	r2, [sp, #16]
 800afdc:	b9d8      	cbnz	r0, 800b016 <_svfiprintf_r+0xe6>
 800afde:	06d0      	lsls	r0, r2, #27
 800afe0:	bf44      	itt	mi
 800afe2:	2320      	movmi	r3, #32
 800afe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe8:	0711      	lsls	r1, r2, #28
 800afea:	bf44      	itt	mi
 800afec:	232b      	movmi	r3, #43	; 0x2b
 800afee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff2:	f89a 3000 	ldrb.w	r3, [sl]
 800aff6:	2b2a      	cmp	r3, #42	; 0x2a
 800aff8:	d015      	beq.n	800b026 <_svfiprintf_r+0xf6>
 800affa:	9a07      	ldr	r2, [sp, #28]
 800affc:	4654      	mov	r4, sl
 800affe:	2000      	movs	r0, #0
 800b000:	f04f 0c0a 	mov.w	ip, #10
 800b004:	4621      	mov	r1, r4
 800b006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b00a:	3b30      	subs	r3, #48	; 0x30
 800b00c:	2b09      	cmp	r3, #9
 800b00e:	d94d      	bls.n	800b0ac <_svfiprintf_r+0x17c>
 800b010:	b1b0      	cbz	r0, 800b040 <_svfiprintf_r+0x110>
 800b012:	9207      	str	r2, [sp, #28]
 800b014:	e014      	b.n	800b040 <_svfiprintf_r+0x110>
 800b016:	eba0 0308 	sub.w	r3, r0, r8
 800b01a:	fa09 f303 	lsl.w	r3, r9, r3
 800b01e:	4313      	orrs	r3, r2
 800b020:	9304      	str	r3, [sp, #16]
 800b022:	46a2      	mov	sl, r4
 800b024:	e7d2      	b.n	800afcc <_svfiprintf_r+0x9c>
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	1d19      	adds	r1, r3, #4
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	9103      	str	r1, [sp, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfbb      	ittet	lt
 800b032:	425b      	neglt	r3, r3
 800b034:	f042 0202 	orrlt.w	r2, r2, #2
 800b038:	9307      	strge	r3, [sp, #28]
 800b03a:	9307      	strlt	r3, [sp, #28]
 800b03c:	bfb8      	it	lt
 800b03e:	9204      	strlt	r2, [sp, #16]
 800b040:	7823      	ldrb	r3, [r4, #0]
 800b042:	2b2e      	cmp	r3, #46	; 0x2e
 800b044:	d10c      	bne.n	800b060 <_svfiprintf_r+0x130>
 800b046:	7863      	ldrb	r3, [r4, #1]
 800b048:	2b2a      	cmp	r3, #42	; 0x2a
 800b04a:	d134      	bne.n	800b0b6 <_svfiprintf_r+0x186>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	1d1a      	adds	r2, r3, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	9203      	str	r2, [sp, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	bfb8      	it	lt
 800b058:	f04f 33ff 	movlt.w	r3, #4294967295
 800b05c:	3402      	adds	r4, #2
 800b05e:	9305      	str	r3, [sp, #20]
 800b060:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b128 <_svfiprintf_r+0x1f8>
 800b064:	7821      	ldrb	r1, [r4, #0]
 800b066:	2203      	movs	r2, #3
 800b068:	4650      	mov	r0, sl
 800b06a:	f7f5 f8b9 	bl	80001e0 <memchr>
 800b06e:	b138      	cbz	r0, 800b080 <_svfiprintf_r+0x150>
 800b070:	9b04      	ldr	r3, [sp, #16]
 800b072:	eba0 000a 	sub.w	r0, r0, sl
 800b076:	2240      	movs	r2, #64	; 0x40
 800b078:	4082      	lsls	r2, r0
 800b07a:	4313      	orrs	r3, r2
 800b07c:	3401      	adds	r4, #1
 800b07e:	9304      	str	r3, [sp, #16]
 800b080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b084:	4825      	ldr	r0, [pc, #148]	; (800b11c <_svfiprintf_r+0x1ec>)
 800b086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b08a:	2206      	movs	r2, #6
 800b08c:	f7f5 f8a8 	bl	80001e0 <memchr>
 800b090:	2800      	cmp	r0, #0
 800b092:	d038      	beq.n	800b106 <_svfiprintf_r+0x1d6>
 800b094:	4b22      	ldr	r3, [pc, #136]	; (800b120 <_svfiprintf_r+0x1f0>)
 800b096:	bb1b      	cbnz	r3, 800b0e0 <_svfiprintf_r+0x1b0>
 800b098:	9b03      	ldr	r3, [sp, #12]
 800b09a:	3307      	adds	r3, #7
 800b09c:	f023 0307 	bic.w	r3, r3, #7
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	9303      	str	r3, [sp, #12]
 800b0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a6:	4433      	add	r3, r6
 800b0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0aa:	e768      	b.n	800af7e <_svfiprintf_r+0x4e>
 800b0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	e7a6      	b.n	800b004 <_svfiprintf_r+0xd4>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	3401      	adds	r4, #1
 800b0ba:	9305      	str	r3, [sp, #20]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	f04f 0c0a 	mov.w	ip, #10
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c8:	3a30      	subs	r2, #48	; 0x30
 800b0ca:	2a09      	cmp	r2, #9
 800b0cc:	d903      	bls.n	800b0d6 <_svfiprintf_r+0x1a6>
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0c6      	beq.n	800b060 <_svfiprintf_r+0x130>
 800b0d2:	9105      	str	r1, [sp, #20]
 800b0d4:	e7c4      	b.n	800b060 <_svfiprintf_r+0x130>
 800b0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0da:	4604      	mov	r4, r0
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e7f0      	b.n	800b0c2 <_svfiprintf_r+0x192>
 800b0e0:	ab03      	add	r3, sp, #12
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	462a      	mov	r2, r5
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <_svfiprintf_r+0x1f4>)
 800b0e8:	a904      	add	r1, sp, #16
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	f7fc fc76 	bl	80079dc <_printf_float>
 800b0f0:	1c42      	adds	r2, r0, #1
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	d1d6      	bne.n	800b0a4 <_svfiprintf_r+0x174>
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	065b      	lsls	r3, r3, #25
 800b0fa:	f53f af2d 	bmi.w	800af58 <_svfiprintf_r+0x28>
 800b0fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b100:	b01d      	add	sp, #116	; 0x74
 800b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b106:	ab03      	add	r3, sp, #12
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	462a      	mov	r2, r5
 800b10c:	4b05      	ldr	r3, [pc, #20]	; (800b124 <_svfiprintf_r+0x1f4>)
 800b10e:	a904      	add	r1, sp, #16
 800b110:	4638      	mov	r0, r7
 800b112:	f7fc ff07 	bl	8007f24 <_printf_i>
 800b116:	e7eb      	b.n	800b0f0 <_svfiprintf_r+0x1c0>
 800b118:	0800d401 	.word	0x0800d401
 800b11c:	0800d40b 	.word	0x0800d40b
 800b120:	080079dd 	.word	0x080079dd
 800b124:	0800ae7d 	.word	0x0800ae7d
 800b128:	0800d407 	.word	0x0800d407

0800b12c <__sflush_r>:
 800b12c:	898a      	ldrh	r2, [r1, #12]
 800b12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b132:	4605      	mov	r5, r0
 800b134:	0710      	lsls	r0, r2, #28
 800b136:	460c      	mov	r4, r1
 800b138:	d458      	bmi.n	800b1ec <__sflush_r+0xc0>
 800b13a:	684b      	ldr	r3, [r1, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dc05      	bgt.n	800b14c <__sflush_r+0x20>
 800b140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b142:	2b00      	cmp	r3, #0
 800b144:	dc02      	bgt.n	800b14c <__sflush_r+0x20>
 800b146:	2000      	movs	r0, #0
 800b148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b14c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b14e:	2e00      	cmp	r6, #0
 800b150:	d0f9      	beq.n	800b146 <__sflush_r+0x1a>
 800b152:	2300      	movs	r3, #0
 800b154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b158:	682f      	ldr	r7, [r5, #0]
 800b15a:	6a21      	ldr	r1, [r4, #32]
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	d032      	beq.n	800b1c6 <__sflush_r+0x9a>
 800b160:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	075a      	lsls	r2, r3, #29
 800b166:	d505      	bpl.n	800b174 <__sflush_r+0x48>
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	1ac0      	subs	r0, r0, r3
 800b16c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b16e:	b10b      	cbz	r3, 800b174 <__sflush_r+0x48>
 800b170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b172:	1ac0      	subs	r0, r0, r3
 800b174:	2300      	movs	r3, #0
 800b176:	4602      	mov	r2, r0
 800b178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b17a:	6a21      	ldr	r1, [r4, #32]
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b0      	blx	r6
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	d106      	bne.n	800b194 <__sflush_r+0x68>
 800b186:	6829      	ldr	r1, [r5, #0]
 800b188:	291d      	cmp	r1, #29
 800b18a:	d82b      	bhi.n	800b1e4 <__sflush_r+0xb8>
 800b18c:	4a29      	ldr	r2, [pc, #164]	; (800b234 <__sflush_r+0x108>)
 800b18e:	410a      	asrs	r2, r1
 800b190:	07d6      	lsls	r6, r2, #31
 800b192:	d427      	bmi.n	800b1e4 <__sflush_r+0xb8>
 800b194:	2200      	movs	r2, #0
 800b196:	6062      	str	r2, [r4, #4]
 800b198:	04d9      	lsls	r1, r3, #19
 800b19a:	6922      	ldr	r2, [r4, #16]
 800b19c:	6022      	str	r2, [r4, #0]
 800b19e:	d504      	bpl.n	800b1aa <__sflush_r+0x7e>
 800b1a0:	1c42      	adds	r2, r0, #1
 800b1a2:	d101      	bne.n	800b1a8 <__sflush_r+0x7c>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	b903      	cbnz	r3, 800b1aa <__sflush_r+0x7e>
 800b1a8:	6560      	str	r0, [r4, #84]	; 0x54
 800b1aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ac:	602f      	str	r7, [r5, #0]
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d0c9      	beq.n	800b146 <__sflush_r+0x1a>
 800b1b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1b6:	4299      	cmp	r1, r3
 800b1b8:	d002      	beq.n	800b1c0 <__sflush_r+0x94>
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f7fe fa1a 	bl	80095f4 <_free_r>
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	6360      	str	r0, [r4, #52]	; 0x34
 800b1c4:	e7c0      	b.n	800b148 <__sflush_r+0x1c>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b0      	blx	r6
 800b1cc:	1c41      	adds	r1, r0, #1
 800b1ce:	d1c8      	bne.n	800b162 <__sflush_r+0x36>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0c5      	beq.n	800b162 <__sflush_r+0x36>
 800b1d6:	2b1d      	cmp	r3, #29
 800b1d8:	d001      	beq.n	800b1de <__sflush_r+0xb2>
 800b1da:	2b16      	cmp	r3, #22
 800b1dc:	d101      	bne.n	800b1e2 <__sflush_r+0xb6>
 800b1de:	602f      	str	r7, [r5, #0]
 800b1e0:	e7b1      	b.n	800b146 <__sflush_r+0x1a>
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e8:	81a3      	strh	r3, [r4, #12]
 800b1ea:	e7ad      	b.n	800b148 <__sflush_r+0x1c>
 800b1ec:	690f      	ldr	r7, [r1, #16]
 800b1ee:	2f00      	cmp	r7, #0
 800b1f0:	d0a9      	beq.n	800b146 <__sflush_r+0x1a>
 800b1f2:	0793      	lsls	r3, r2, #30
 800b1f4:	680e      	ldr	r6, [r1, #0]
 800b1f6:	bf08      	it	eq
 800b1f8:	694b      	ldreq	r3, [r1, #20]
 800b1fa:	600f      	str	r7, [r1, #0]
 800b1fc:	bf18      	it	ne
 800b1fe:	2300      	movne	r3, #0
 800b200:	eba6 0807 	sub.w	r8, r6, r7
 800b204:	608b      	str	r3, [r1, #8]
 800b206:	f1b8 0f00 	cmp.w	r8, #0
 800b20a:	dd9c      	ble.n	800b146 <__sflush_r+0x1a>
 800b20c:	6a21      	ldr	r1, [r4, #32]
 800b20e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b210:	4643      	mov	r3, r8
 800b212:	463a      	mov	r2, r7
 800b214:	4628      	mov	r0, r5
 800b216:	47b0      	blx	r6
 800b218:	2800      	cmp	r0, #0
 800b21a:	dc06      	bgt.n	800b22a <__sflush_r+0xfe>
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	f04f 30ff 	mov.w	r0, #4294967295
 800b228:	e78e      	b.n	800b148 <__sflush_r+0x1c>
 800b22a:	4407      	add	r7, r0
 800b22c:	eba8 0800 	sub.w	r8, r8, r0
 800b230:	e7e9      	b.n	800b206 <__sflush_r+0xda>
 800b232:	bf00      	nop
 800b234:	dfbffffe 	.word	0xdfbffffe

0800b238 <_fflush_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	690b      	ldr	r3, [r1, #16]
 800b23c:	4605      	mov	r5, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	b913      	cbnz	r3, 800b248 <_fflush_r+0x10>
 800b242:	2500      	movs	r5, #0
 800b244:	4628      	mov	r0, r5
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	b118      	cbz	r0, 800b252 <_fflush_r+0x1a>
 800b24a:	6a03      	ldr	r3, [r0, #32]
 800b24c:	b90b      	cbnz	r3, 800b252 <_fflush_r+0x1a>
 800b24e:	f7fd fa27 	bl	80086a0 <__sinit>
 800b252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0f3      	beq.n	800b242 <_fflush_r+0xa>
 800b25a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b25c:	07d0      	lsls	r0, r2, #31
 800b25e:	d404      	bmi.n	800b26a <_fflush_r+0x32>
 800b260:	0599      	lsls	r1, r3, #22
 800b262:	d402      	bmi.n	800b26a <_fflush_r+0x32>
 800b264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b266:	f7fd fb32 	bl	80088ce <__retarget_lock_acquire_recursive>
 800b26a:	4628      	mov	r0, r5
 800b26c:	4621      	mov	r1, r4
 800b26e:	f7ff ff5d 	bl	800b12c <__sflush_r>
 800b272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b274:	07da      	lsls	r2, r3, #31
 800b276:	4605      	mov	r5, r0
 800b278:	d4e4      	bmi.n	800b244 <_fflush_r+0xc>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	059b      	lsls	r3, r3, #22
 800b27e:	d4e1      	bmi.n	800b244 <_fflush_r+0xc>
 800b280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b282:	f7fd fb25 	bl	80088d0 <__retarget_lock_release_recursive>
 800b286:	e7dd      	b.n	800b244 <_fflush_r+0xc>

0800b288 <memmove>:
 800b288:	4288      	cmp	r0, r1
 800b28a:	b510      	push	{r4, lr}
 800b28c:	eb01 0402 	add.w	r4, r1, r2
 800b290:	d902      	bls.n	800b298 <memmove+0x10>
 800b292:	4284      	cmp	r4, r0
 800b294:	4623      	mov	r3, r4
 800b296:	d807      	bhi.n	800b2a8 <memmove+0x20>
 800b298:	1e43      	subs	r3, r0, #1
 800b29a:	42a1      	cmp	r1, r4
 800b29c:	d008      	beq.n	800b2b0 <memmove+0x28>
 800b29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2a6:	e7f8      	b.n	800b29a <memmove+0x12>
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	428a      	cmp	r2, r1
 800b2ae:	d100      	bne.n	800b2b2 <memmove+0x2a>
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2ba:	e7f7      	b.n	800b2ac <memmove+0x24>

0800b2bc <strncmp>:
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	b16a      	cbz	r2, 800b2dc <strncmp+0x20>
 800b2c0:	3901      	subs	r1, #1
 800b2c2:	1884      	adds	r4, r0, r2
 800b2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d103      	bne.n	800b2d8 <strncmp+0x1c>
 800b2d0:	42a0      	cmp	r0, r4
 800b2d2:	d001      	beq.n	800b2d8 <strncmp+0x1c>
 800b2d4:	2a00      	cmp	r2, #0
 800b2d6:	d1f5      	bne.n	800b2c4 <strncmp+0x8>
 800b2d8:	1ad0      	subs	r0, r2, r3
 800b2da:	bd10      	pop	{r4, pc}
 800b2dc:	4610      	mov	r0, r2
 800b2de:	e7fc      	b.n	800b2da <strncmp+0x1e>

0800b2e0 <_sbrk_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d06      	ldr	r5, [pc, #24]	; (800b2fc <_sbrk_r+0x1c>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	f7f7 feaa 	bl	8003044 <_sbrk>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_sbrk_r+0x1a>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_sbrk_r+0x1a>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	2000463c 	.word	0x2000463c

0800b300 <nan>:
 800b300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b308 <nan+0x8>
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	00000000 	.word	0x00000000
 800b30c:	7ff80000 	.word	0x7ff80000

0800b310 <__assert_func>:
 800b310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b312:	4614      	mov	r4, r2
 800b314:	461a      	mov	r2, r3
 800b316:	4b09      	ldr	r3, [pc, #36]	; (800b33c <__assert_func+0x2c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4605      	mov	r5, r0
 800b31c:	68d8      	ldr	r0, [r3, #12]
 800b31e:	b14c      	cbz	r4, 800b334 <__assert_func+0x24>
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <__assert_func+0x30>)
 800b322:	9100      	str	r1, [sp, #0]
 800b324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b328:	4906      	ldr	r1, [pc, #24]	; (800b344 <__assert_func+0x34>)
 800b32a:	462b      	mov	r3, r5
 800b32c:	f000 fbca 	bl	800bac4 <fiprintf>
 800b330:	f000 fbda 	bl	800bae8 <abort>
 800b334:	4b04      	ldr	r3, [pc, #16]	; (800b348 <__assert_func+0x38>)
 800b336:	461c      	mov	r4, r3
 800b338:	e7f3      	b.n	800b322 <__assert_func+0x12>
 800b33a:	bf00      	nop
 800b33c:	2000006c 	.word	0x2000006c
 800b340:	0800d41a 	.word	0x0800d41a
 800b344:	0800d427 	.word	0x0800d427
 800b348:	0800d455 	.word	0x0800d455

0800b34c <_calloc_r>:
 800b34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b34e:	fba1 2402 	umull	r2, r4, r1, r2
 800b352:	b94c      	cbnz	r4, 800b368 <_calloc_r+0x1c>
 800b354:	4611      	mov	r1, r2
 800b356:	9201      	str	r2, [sp, #4]
 800b358:	f7fe f9c0 	bl	80096dc <_malloc_r>
 800b35c:	9a01      	ldr	r2, [sp, #4]
 800b35e:	4605      	mov	r5, r0
 800b360:	b930      	cbnz	r0, 800b370 <_calloc_r+0x24>
 800b362:	4628      	mov	r0, r5
 800b364:	b003      	add	sp, #12
 800b366:	bd30      	pop	{r4, r5, pc}
 800b368:	220c      	movs	r2, #12
 800b36a:	6002      	str	r2, [r0, #0]
 800b36c:	2500      	movs	r5, #0
 800b36e:	e7f8      	b.n	800b362 <_calloc_r+0x16>
 800b370:	4621      	mov	r1, r4
 800b372:	f7fd fa2e 	bl	80087d2 <memset>
 800b376:	e7f4      	b.n	800b362 <_calloc_r+0x16>

0800b378 <rshift>:
 800b378:	6903      	ldr	r3, [r0, #16]
 800b37a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b37e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b382:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b386:	f100 0414 	add.w	r4, r0, #20
 800b38a:	dd45      	ble.n	800b418 <rshift+0xa0>
 800b38c:	f011 011f 	ands.w	r1, r1, #31
 800b390:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b394:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b398:	d10c      	bne.n	800b3b4 <rshift+0x3c>
 800b39a:	f100 0710 	add.w	r7, r0, #16
 800b39e:	4629      	mov	r1, r5
 800b3a0:	42b1      	cmp	r1, r6
 800b3a2:	d334      	bcc.n	800b40e <rshift+0x96>
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	1eea      	subs	r2, r5, #3
 800b3aa:	4296      	cmp	r6, r2
 800b3ac:	bf38      	it	cc
 800b3ae:	2300      	movcc	r3, #0
 800b3b0:	4423      	add	r3, r4
 800b3b2:	e015      	b.n	800b3e0 <rshift+0x68>
 800b3b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3b8:	f1c1 0820 	rsb	r8, r1, #32
 800b3bc:	40cf      	lsrs	r7, r1
 800b3be:	f105 0e04 	add.w	lr, r5, #4
 800b3c2:	46a1      	mov	r9, r4
 800b3c4:	4576      	cmp	r6, lr
 800b3c6:	46f4      	mov	ip, lr
 800b3c8:	d815      	bhi.n	800b3f6 <rshift+0x7e>
 800b3ca:	1a9a      	subs	r2, r3, r2
 800b3cc:	0092      	lsls	r2, r2, #2
 800b3ce:	3a04      	subs	r2, #4
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	42ae      	cmp	r6, r5
 800b3d4:	bf38      	it	cc
 800b3d6:	2200      	movcc	r2, #0
 800b3d8:	18a3      	adds	r3, r4, r2
 800b3da:	50a7      	str	r7, [r4, r2]
 800b3dc:	b107      	cbz	r7, 800b3e0 <rshift+0x68>
 800b3de:	3304      	adds	r3, #4
 800b3e0:	1b1a      	subs	r2, r3, r4
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3e8:	bf08      	it	eq
 800b3ea:	2300      	moveq	r3, #0
 800b3ec:	6102      	str	r2, [r0, #16]
 800b3ee:	bf08      	it	eq
 800b3f0:	6143      	streq	r3, [r0, #20]
 800b3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f6:	f8dc c000 	ldr.w	ip, [ip]
 800b3fa:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3fe:	ea4c 0707 	orr.w	r7, ip, r7
 800b402:	f849 7b04 	str.w	r7, [r9], #4
 800b406:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b40a:	40cf      	lsrs	r7, r1
 800b40c:	e7da      	b.n	800b3c4 <rshift+0x4c>
 800b40e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b412:	f847 cf04 	str.w	ip, [r7, #4]!
 800b416:	e7c3      	b.n	800b3a0 <rshift+0x28>
 800b418:	4623      	mov	r3, r4
 800b41a:	e7e1      	b.n	800b3e0 <rshift+0x68>

0800b41c <__hexdig_fun>:
 800b41c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b420:	2b09      	cmp	r3, #9
 800b422:	d802      	bhi.n	800b42a <__hexdig_fun+0xe>
 800b424:	3820      	subs	r0, #32
 800b426:	b2c0      	uxtb	r0, r0
 800b428:	4770      	bx	lr
 800b42a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b42e:	2b05      	cmp	r3, #5
 800b430:	d801      	bhi.n	800b436 <__hexdig_fun+0x1a>
 800b432:	3847      	subs	r0, #71	; 0x47
 800b434:	e7f7      	b.n	800b426 <__hexdig_fun+0xa>
 800b436:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b43a:	2b05      	cmp	r3, #5
 800b43c:	d801      	bhi.n	800b442 <__hexdig_fun+0x26>
 800b43e:	3827      	subs	r0, #39	; 0x27
 800b440:	e7f1      	b.n	800b426 <__hexdig_fun+0xa>
 800b442:	2000      	movs	r0, #0
 800b444:	4770      	bx	lr
	...

0800b448 <__gethex>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	4617      	mov	r7, r2
 800b44e:	680a      	ldr	r2, [r1, #0]
 800b450:	b085      	sub	sp, #20
 800b452:	f102 0b02 	add.w	fp, r2, #2
 800b456:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b45a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b45e:	4681      	mov	r9, r0
 800b460:	468a      	mov	sl, r1
 800b462:	9302      	str	r3, [sp, #8]
 800b464:	32fe      	adds	r2, #254	; 0xfe
 800b466:	eb02 030b 	add.w	r3, r2, fp
 800b46a:	46d8      	mov	r8, fp
 800b46c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b470:	9301      	str	r3, [sp, #4]
 800b472:	2830      	cmp	r0, #48	; 0x30
 800b474:	d0f7      	beq.n	800b466 <__gethex+0x1e>
 800b476:	f7ff ffd1 	bl	800b41c <__hexdig_fun>
 800b47a:	4604      	mov	r4, r0
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d138      	bne.n	800b4f2 <__gethex+0xaa>
 800b480:	49a7      	ldr	r1, [pc, #668]	; (800b720 <__gethex+0x2d8>)
 800b482:	2201      	movs	r2, #1
 800b484:	4640      	mov	r0, r8
 800b486:	f7ff ff19 	bl	800b2bc <strncmp>
 800b48a:	4606      	mov	r6, r0
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d169      	bne.n	800b564 <__gethex+0x11c>
 800b490:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b494:	465d      	mov	r5, fp
 800b496:	f7ff ffc1 	bl	800b41c <__hexdig_fun>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d064      	beq.n	800b568 <__gethex+0x120>
 800b49e:	465a      	mov	r2, fp
 800b4a0:	7810      	ldrb	r0, [r2, #0]
 800b4a2:	2830      	cmp	r0, #48	; 0x30
 800b4a4:	4690      	mov	r8, r2
 800b4a6:	f102 0201 	add.w	r2, r2, #1
 800b4aa:	d0f9      	beq.n	800b4a0 <__gethex+0x58>
 800b4ac:	f7ff ffb6 	bl	800b41c <__hexdig_fun>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	fab0 f480 	clz	r4, r0
 800b4b6:	0964      	lsrs	r4, r4, #5
 800b4b8:	465e      	mov	r6, fp
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	4642      	mov	r2, r8
 800b4be:	4615      	mov	r5, r2
 800b4c0:	3201      	adds	r2, #1
 800b4c2:	7828      	ldrb	r0, [r5, #0]
 800b4c4:	f7ff ffaa 	bl	800b41c <__hexdig_fun>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d1f8      	bne.n	800b4be <__gethex+0x76>
 800b4cc:	4994      	ldr	r1, [pc, #592]	; (800b720 <__gethex+0x2d8>)
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	f7ff fef3 	bl	800b2bc <strncmp>
 800b4d6:	b978      	cbnz	r0, 800b4f8 <__gethex+0xb0>
 800b4d8:	b946      	cbnz	r6, 800b4ec <__gethex+0xa4>
 800b4da:	1c6e      	adds	r6, r5, #1
 800b4dc:	4632      	mov	r2, r6
 800b4de:	4615      	mov	r5, r2
 800b4e0:	3201      	adds	r2, #1
 800b4e2:	7828      	ldrb	r0, [r5, #0]
 800b4e4:	f7ff ff9a 	bl	800b41c <__hexdig_fun>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1f8      	bne.n	800b4de <__gethex+0x96>
 800b4ec:	1b73      	subs	r3, r6, r5
 800b4ee:	009e      	lsls	r6, r3, #2
 800b4f0:	e004      	b.n	800b4fc <__gethex+0xb4>
 800b4f2:	2400      	movs	r4, #0
 800b4f4:	4626      	mov	r6, r4
 800b4f6:	e7e1      	b.n	800b4bc <__gethex+0x74>
 800b4f8:	2e00      	cmp	r6, #0
 800b4fa:	d1f7      	bne.n	800b4ec <__gethex+0xa4>
 800b4fc:	782b      	ldrb	r3, [r5, #0]
 800b4fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b502:	2b50      	cmp	r3, #80	; 0x50
 800b504:	d13d      	bne.n	800b582 <__gethex+0x13a>
 800b506:	786b      	ldrb	r3, [r5, #1]
 800b508:	2b2b      	cmp	r3, #43	; 0x2b
 800b50a:	d02f      	beq.n	800b56c <__gethex+0x124>
 800b50c:	2b2d      	cmp	r3, #45	; 0x2d
 800b50e:	d031      	beq.n	800b574 <__gethex+0x12c>
 800b510:	1c69      	adds	r1, r5, #1
 800b512:	f04f 0b00 	mov.w	fp, #0
 800b516:	7808      	ldrb	r0, [r1, #0]
 800b518:	f7ff ff80 	bl	800b41c <__hexdig_fun>
 800b51c:	1e42      	subs	r2, r0, #1
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	2a18      	cmp	r2, #24
 800b522:	d82e      	bhi.n	800b582 <__gethex+0x13a>
 800b524:	f1a0 0210 	sub.w	r2, r0, #16
 800b528:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b52c:	f7ff ff76 	bl	800b41c <__hexdig_fun>
 800b530:	f100 3cff 	add.w	ip, r0, #4294967295
 800b534:	fa5f fc8c 	uxtb.w	ip, ip
 800b538:	f1bc 0f18 	cmp.w	ip, #24
 800b53c:	d91d      	bls.n	800b57a <__gethex+0x132>
 800b53e:	f1bb 0f00 	cmp.w	fp, #0
 800b542:	d000      	beq.n	800b546 <__gethex+0xfe>
 800b544:	4252      	negs	r2, r2
 800b546:	4416      	add	r6, r2
 800b548:	f8ca 1000 	str.w	r1, [sl]
 800b54c:	b1dc      	cbz	r4, 800b586 <__gethex+0x13e>
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bf14      	ite	ne
 800b554:	f04f 0800 	movne.w	r8, #0
 800b558:	f04f 0806 	moveq.w	r8, #6
 800b55c:	4640      	mov	r0, r8
 800b55e:	b005      	add	sp, #20
 800b560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b564:	4645      	mov	r5, r8
 800b566:	4626      	mov	r6, r4
 800b568:	2401      	movs	r4, #1
 800b56a:	e7c7      	b.n	800b4fc <__gethex+0xb4>
 800b56c:	f04f 0b00 	mov.w	fp, #0
 800b570:	1ca9      	adds	r1, r5, #2
 800b572:	e7d0      	b.n	800b516 <__gethex+0xce>
 800b574:	f04f 0b01 	mov.w	fp, #1
 800b578:	e7fa      	b.n	800b570 <__gethex+0x128>
 800b57a:	230a      	movs	r3, #10
 800b57c:	fb03 0002 	mla	r0, r3, r2, r0
 800b580:	e7d0      	b.n	800b524 <__gethex+0xdc>
 800b582:	4629      	mov	r1, r5
 800b584:	e7e0      	b.n	800b548 <__gethex+0x100>
 800b586:	eba5 0308 	sub.w	r3, r5, r8
 800b58a:	3b01      	subs	r3, #1
 800b58c:	4621      	mov	r1, r4
 800b58e:	2b07      	cmp	r3, #7
 800b590:	dc0a      	bgt.n	800b5a8 <__gethex+0x160>
 800b592:	4648      	mov	r0, r9
 800b594:	f7fe f92e 	bl	80097f4 <_Balloc>
 800b598:	4604      	mov	r4, r0
 800b59a:	b940      	cbnz	r0, 800b5ae <__gethex+0x166>
 800b59c:	4b61      	ldr	r3, [pc, #388]	; (800b724 <__gethex+0x2dc>)
 800b59e:	4602      	mov	r2, r0
 800b5a0:	21e4      	movs	r1, #228	; 0xe4
 800b5a2:	4861      	ldr	r0, [pc, #388]	; (800b728 <__gethex+0x2e0>)
 800b5a4:	f7ff feb4 	bl	800b310 <__assert_func>
 800b5a8:	3101      	adds	r1, #1
 800b5aa:	105b      	asrs	r3, r3, #1
 800b5ac:	e7ef      	b.n	800b58e <__gethex+0x146>
 800b5ae:	f100 0a14 	add.w	sl, r0, #20
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	495a      	ldr	r1, [pc, #360]	; (800b720 <__gethex+0x2d8>)
 800b5b6:	f8cd a004 	str.w	sl, [sp, #4]
 800b5ba:	469b      	mov	fp, r3
 800b5bc:	45a8      	cmp	r8, r5
 800b5be:	d342      	bcc.n	800b646 <__gethex+0x1fe>
 800b5c0:	9801      	ldr	r0, [sp, #4]
 800b5c2:	f840 bb04 	str.w	fp, [r0], #4
 800b5c6:	eba0 000a 	sub.w	r0, r0, sl
 800b5ca:	1080      	asrs	r0, r0, #2
 800b5cc:	6120      	str	r0, [r4, #16]
 800b5ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b5d2:	4658      	mov	r0, fp
 800b5d4:	f7fe fa00 	bl	80099d8 <__hi0bits>
 800b5d8:	683d      	ldr	r5, [r7, #0]
 800b5da:	eba8 0000 	sub.w	r0, r8, r0
 800b5de:	42a8      	cmp	r0, r5
 800b5e0:	dd59      	ble.n	800b696 <__gethex+0x24e>
 800b5e2:	eba0 0805 	sub.w	r8, r0, r5
 800b5e6:	4641      	mov	r1, r8
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f7fe fd8f 	bl	800a10c <__any_on>
 800b5ee:	4683      	mov	fp, r0
 800b5f0:	b1b8      	cbz	r0, 800b622 <__gethex+0x1da>
 800b5f2:	f108 33ff 	add.w	r3, r8, #4294967295
 800b5f6:	1159      	asrs	r1, r3, #5
 800b5f8:	f003 021f 	and.w	r2, r3, #31
 800b5fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b600:	f04f 0b01 	mov.w	fp, #1
 800b604:	fa0b f202 	lsl.w	r2, fp, r2
 800b608:	420a      	tst	r2, r1
 800b60a:	d00a      	beq.n	800b622 <__gethex+0x1da>
 800b60c:	455b      	cmp	r3, fp
 800b60e:	dd06      	ble.n	800b61e <__gethex+0x1d6>
 800b610:	f1a8 0102 	sub.w	r1, r8, #2
 800b614:	4620      	mov	r0, r4
 800b616:	f7fe fd79 	bl	800a10c <__any_on>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d138      	bne.n	800b690 <__gethex+0x248>
 800b61e:	f04f 0b02 	mov.w	fp, #2
 800b622:	4641      	mov	r1, r8
 800b624:	4620      	mov	r0, r4
 800b626:	f7ff fea7 	bl	800b378 <rshift>
 800b62a:	4446      	add	r6, r8
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	42b3      	cmp	r3, r6
 800b630:	da41      	bge.n	800b6b6 <__gethex+0x26e>
 800b632:	4621      	mov	r1, r4
 800b634:	4648      	mov	r0, r9
 800b636:	f7fe f91d 	bl	8009874 <_Bfree>
 800b63a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b63c:	2300      	movs	r3, #0
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b644:	e78a      	b.n	800b55c <__gethex+0x114>
 800b646:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b64a:	2a2e      	cmp	r2, #46	; 0x2e
 800b64c:	d014      	beq.n	800b678 <__gethex+0x230>
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d106      	bne.n	800b660 <__gethex+0x218>
 800b652:	9b01      	ldr	r3, [sp, #4]
 800b654:	f843 bb04 	str.w	fp, [r3], #4
 800b658:	f04f 0b00 	mov.w	fp, #0
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	465b      	mov	r3, fp
 800b660:	7828      	ldrb	r0, [r5, #0]
 800b662:	9303      	str	r3, [sp, #12]
 800b664:	f7ff feda 	bl	800b41c <__hexdig_fun>
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	f000 000f 	and.w	r0, r0, #15
 800b66e:	4098      	lsls	r0, r3
 800b670:	ea4b 0b00 	orr.w	fp, fp, r0
 800b674:	3304      	adds	r3, #4
 800b676:	e7a1      	b.n	800b5bc <__gethex+0x174>
 800b678:	45a8      	cmp	r8, r5
 800b67a:	d8e8      	bhi.n	800b64e <__gethex+0x206>
 800b67c:	2201      	movs	r2, #1
 800b67e:	4628      	mov	r0, r5
 800b680:	9303      	str	r3, [sp, #12]
 800b682:	f7ff fe1b 	bl	800b2bc <strncmp>
 800b686:	4926      	ldr	r1, [pc, #152]	; (800b720 <__gethex+0x2d8>)
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d1df      	bne.n	800b64e <__gethex+0x206>
 800b68e:	e795      	b.n	800b5bc <__gethex+0x174>
 800b690:	f04f 0b03 	mov.w	fp, #3
 800b694:	e7c5      	b.n	800b622 <__gethex+0x1da>
 800b696:	da0b      	bge.n	800b6b0 <__gethex+0x268>
 800b698:	eba5 0800 	sub.w	r8, r5, r0
 800b69c:	4621      	mov	r1, r4
 800b69e:	4642      	mov	r2, r8
 800b6a0:	4648      	mov	r0, r9
 800b6a2:	f7fe fb01 	bl	8009ca8 <__lshift>
 800b6a6:	eba6 0608 	sub.w	r6, r6, r8
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	f100 0a14 	add.w	sl, r0, #20
 800b6b0:	f04f 0b00 	mov.w	fp, #0
 800b6b4:	e7ba      	b.n	800b62c <__gethex+0x1e4>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	42b3      	cmp	r3, r6
 800b6ba:	dd73      	ble.n	800b7a4 <__gethex+0x35c>
 800b6bc:	1b9e      	subs	r6, r3, r6
 800b6be:	42b5      	cmp	r5, r6
 800b6c0:	dc34      	bgt.n	800b72c <__gethex+0x2e4>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d023      	beq.n	800b710 <__gethex+0x2c8>
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d025      	beq.n	800b718 <__gethex+0x2d0>
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d115      	bne.n	800b6fc <__gethex+0x2b4>
 800b6d0:	42b5      	cmp	r5, r6
 800b6d2:	d113      	bne.n	800b6fc <__gethex+0x2b4>
 800b6d4:	2d01      	cmp	r5, #1
 800b6d6:	d10b      	bne.n	800b6f0 <__gethex+0x2a8>
 800b6d8:	9a02      	ldr	r2, [sp, #8]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	2301      	movs	r3, #1
 800b6e0:	6123      	str	r3, [r4, #16]
 800b6e2:	f8ca 3000 	str.w	r3, [sl]
 800b6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b6ec:	601c      	str	r4, [r3, #0]
 800b6ee:	e735      	b.n	800b55c <__gethex+0x114>
 800b6f0:	1e69      	subs	r1, r5, #1
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f7fe fd0a 	bl	800a10c <__any_on>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d1ed      	bne.n	800b6d8 <__gethex+0x290>
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	4648      	mov	r0, r9
 800b700:	f7fe f8b8 	bl	8009874 <_Bfree>
 800b704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b706:	2300      	movs	r3, #0
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b70e:	e725      	b.n	800b55c <__gethex+0x114>
 800b710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1f2      	bne.n	800b6fc <__gethex+0x2b4>
 800b716:	e7df      	b.n	800b6d8 <__gethex+0x290>
 800b718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1dc      	bne.n	800b6d8 <__gethex+0x290>
 800b71e:	e7ed      	b.n	800b6fc <__gethex+0x2b4>
 800b720:	0800d2ac 	.word	0x0800d2ac
 800b724:	0800d141 	.word	0x0800d141
 800b728:	0800d456 	.word	0x0800d456
 800b72c:	f106 38ff 	add.w	r8, r6, #4294967295
 800b730:	f1bb 0f00 	cmp.w	fp, #0
 800b734:	d133      	bne.n	800b79e <__gethex+0x356>
 800b736:	f1b8 0f00 	cmp.w	r8, #0
 800b73a:	d004      	beq.n	800b746 <__gethex+0x2fe>
 800b73c:	4641      	mov	r1, r8
 800b73e:	4620      	mov	r0, r4
 800b740:	f7fe fce4 	bl	800a10c <__any_on>
 800b744:	4683      	mov	fp, r0
 800b746:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b74a:	2301      	movs	r3, #1
 800b74c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b750:	f008 081f 	and.w	r8, r8, #31
 800b754:	fa03 f308 	lsl.w	r3, r3, r8
 800b758:	4213      	tst	r3, r2
 800b75a:	4631      	mov	r1, r6
 800b75c:	4620      	mov	r0, r4
 800b75e:	bf18      	it	ne
 800b760:	f04b 0b02 	orrne.w	fp, fp, #2
 800b764:	1bad      	subs	r5, r5, r6
 800b766:	f7ff fe07 	bl	800b378 <rshift>
 800b76a:	687e      	ldr	r6, [r7, #4]
 800b76c:	f04f 0802 	mov.w	r8, #2
 800b770:	f1bb 0f00 	cmp.w	fp, #0
 800b774:	d04a      	beq.n	800b80c <__gethex+0x3c4>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d016      	beq.n	800b7aa <__gethex+0x362>
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	d018      	beq.n	800b7b2 <__gethex+0x36a>
 800b780:	2b01      	cmp	r3, #1
 800b782:	d109      	bne.n	800b798 <__gethex+0x350>
 800b784:	f01b 0f02 	tst.w	fp, #2
 800b788:	d006      	beq.n	800b798 <__gethex+0x350>
 800b78a:	f8da 3000 	ldr.w	r3, [sl]
 800b78e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b792:	f01b 0f01 	tst.w	fp, #1
 800b796:	d10f      	bne.n	800b7b8 <__gethex+0x370>
 800b798:	f048 0810 	orr.w	r8, r8, #16
 800b79c:	e036      	b.n	800b80c <__gethex+0x3c4>
 800b79e:	f04f 0b01 	mov.w	fp, #1
 800b7a2:	e7d0      	b.n	800b746 <__gethex+0x2fe>
 800b7a4:	f04f 0801 	mov.w	r8, #1
 800b7a8:	e7e2      	b.n	800b770 <__gethex+0x328>
 800b7aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7ac:	f1c3 0301 	rsb	r3, r3, #1
 800b7b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0ef      	beq.n	800b798 <__gethex+0x350>
 800b7b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7bc:	f104 0214 	add.w	r2, r4, #20
 800b7c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4694      	mov	ip, r2
 800b7ce:	f852 1b04 	ldr.w	r1, [r2], #4
 800b7d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b7d6:	d01e      	beq.n	800b816 <__gethex+0x3ce>
 800b7d8:	3101      	adds	r1, #1
 800b7da:	f8cc 1000 	str.w	r1, [ip]
 800b7de:	f1b8 0f02 	cmp.w	r8, #2
 800b7e2:	f104 0214 	add.w	r2, r4, #20
 800b7e6:	d13d      	bne.n	800b864 <__gethex+0x41c>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	42ab      	cmp	r3, r5
 800b7ee:	d10b      	bne.n	800b808 <__gethex+0x3c0>
 800b7f0:	1169      	asrs	r1, r5, #5
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	f005 051f 	and.w	r5, r5, #31
 800b7f8:	fa03 f505 	lsl.w	r5, r3, r5
 800b7fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b800:	421d      	tst	r5, r3
 800b802:	bf18      	it	ne
 800b804:	f04f 0801 	movne.w	r8, #1
 800b808:	f048 0820 	orr.w	r8, r8, #32
 800b80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b80e:	601c      	str	r4, [r3, #0]
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	601e      	str	r6, [r3, #0]
 800b814:	e6a2      	b.n	800b55c <__gethex+0x114>
 800b816:	4290      	cmp	r0, r2
 800b818:	f842 3c04 	str.w	r3, [r2, #-4]
 800b81c:	d8d6      	bhi.n	800b7cc <__gethex+0x384>
 800b81e:	68a2      	ldr	r2, [r4, #8]
 800b820:	4593      	cmp	fp, r2
 800b822:	db17      	blt.n	800b854 <__gethex+0x40c>
 800b824:	6861      	ldr	r1, [r4, #4]
 800b826:	4648      	mov	r0, r9
 800b828:	3101      	adds	r1, #1
 800b82a:	f7fd ffe3 	bl	80097f4 <_Balloc>
 800b82e:	4682      	mov	sl, r0
 800b830:	b918      	cbnz	r0, 800b83a <__gethex+0x3f2>
 800b832:	4b1b      	ldr	r3, [pc, #108]	; (800b8a0 <__gethex+0x458>)
 800b834:	4602      	mov	r2, r0
 800b836:	2184      	movs	r1, #132	; 0x84
 800b838:	e6b3      	b.n	800b5a2 <__gethex+0x15a>
 800b83a:	6922      	ldr	r2, [r4, #16]
 800b83c:	3202      	adds	r2, #2
 800b83e:	f104 010c 	add.w	r1, r4, #12
 800b842:	0092      	lsls	r2, r2, #2
 800b844:	300c      	adds	r0, #12
 800b846:	f7fd f844 	bl	80088d2 <memcpy>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4648      	mov	r0, r9
 800b84e:	f7fe f811 	bl	8009874 <_Bfree>
 800b852:	4654      	mov	r4, sl
 800b854:	6922      	ldr	r2, [r4, #16]
 800b856:	1c51      	adds	r1, r2, #1
 800b858:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b85c:	6121      	str	r1, [r4, #16]
 800b85e:	2101      	movs	r1, #1
 800b860:	6151      	str	r1, [r2, #20]
 800b862:	e7bc      	b.n	800b7de <__gethex+0x396>
 800b864:	6921      	ldr	r1, [r4, #16]
 800b866:	4559      	cmp	r1, fp
 800b868:	dd0b      	ble.n	800b882 <__gethex+0x43a>
 800b86a:	2101      	movs	r1, #1
 800b86c:	4620      	mov	r0, r4
 800b86e:	f7ff fd83 	bl	800b378 <rshift>
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	3601      	adds	r6, #1
 800b876:	42b3      	cmp	r3, r6
 800b878:	f6ff aedb 	blt.w	800b632 <__gethex+0x1ea>
 800b87c:	f04f 0801 	mov.w	r8, #1
 800b880:	e7c2      	b.n	800b808 <__gethex+0x3c0>
 800b882:	f015 051f 	ands.w	r5, r5, #31
 800b886:	d0f9      	beq.n	800b87c <__gethex+0x434>
 800b888:	9b01      	ldr	r3, [sp, #4]
 800b88a:	441a      	add	r2, r3
 800b88c:	f1c5 0520 	rsb	r5, r5, #32
 800b890:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b894:	f7fe f8a0 	bl	80099d8 <__hi0bits>
 800b898:	42a8      	cmp	r0, r5
 800b89a:	dbe6      	blt.n	800b86a <__gethex+0x422>
 800b89c:	e7ee      	b.n	800b87c <__gethex+0x434>
 800b89e:	bf00      	nop
 800b8a0:	0800d141 	.word	0x0800d141

0800b8a4 <L_shift>:
 800b8a4:	f1c2 0208 	rsb	r2, r2, #8
 800b8a8:	0092      	lsls	r2, r2, #2
 800b8aa:	b570      	push	{r4, r5, r6, lr}
 800b8ac:	f1c2 0620 	rsb	r6, r2, #32
 800b8b0:	6843      	ldr	r3, [r0, #4]
 800b8b2:	6804      	ldr	r4, [r0, #0]
 800b8b4:	fa03 f506 	lsl.w	r5, r3, r6
 800b8b8:	432c      	orrs	r4, r5
 800b8ba:	40d3      	lsrs	r3, r2
 800b8bc:	6004      	str	r4, [r0, #0]
 800b8be:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8c2:	4288      	cmp	r0, r1
 800b8c4:	d3f4      	bcc.n	800b8b0 <L_shift+0xc>
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}

0800b8c8 <__match>:
 800b8c8:	b530      	push	{r4, r5, lr}
 800b8ca:	6803      	ldr	r3, [r0, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8d2:	b914      	cbnz	r4, 800b8da <__match+0x12>
 800b8d4:	6003      	str	r3, [r0, #0]
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	bd30      	pop	{r4, r5, pc}
 800b8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8e2:	2d19      	cmp	r5, #25
 800b8e4:	bf98      	it	ls
 800b8e6:	3220      	addls	r2, #32
 800b8e8:	42a2      	cmp	r2, r4
 800b8ea:	d0f0      	beq.n	800b8ce <__match+0x6>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	e7f3      	b.n	800b8d8 <__match+0x10>

0800b8f0 <__hexnan>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	680b      	ldr	r3, [r1, #0]
 800b8f6:	6801      	ldr	r1, [r0, #0]
 800b8f8:	115e      	asrs	r6, r3, #5
 800b8fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8fe:	f013 031f 	ands.w	r3, r3, #31
 800b902:	b087      	sub	sp, #28
 800b904:	bf18      	it	ne
 800b906:	3604      	addne	r6, #4
 800b908:	2500      	movs	r5, #0
 800b90a:	1f37      	subs	r7, r6, #4
 800b90c:	4682      	mov	sl, r0
 800b90e:	4690      	mov	r8, r2
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	f846 5c04 	str.w	r5, [r6, #-4]
 800b916:	46b9      	mov	r9, r7
 800b918:	463c      	mov	r4, r7
 800b91a:	9502      	str	r5, [sp, #8]
 800b91c:	46ab      	mov	fp, r5
 800b91e:	784a      	ldrb	r2, [r1, #1]
 800b920:	1c4b      	adds	r3, r1, #1
 800b922:	9303      	str	r3, [sp, #12]
 800b924:	b342      	cbz	r2, 800b978 <__hexnan+0x88>
 800b926:	4610      	mov	r0, r2
 800b928:	9105      	str	r1, [sp, #20]
 800b92a:	9204      	str	r2, [sp, #16]
 800b92c:	f7ff fd76 	bl	800b41c <__hexdig_fun>
 800b930:	2800      	cmp	r0, #0
 800b932:	d14f      	bne.n	800b9d4 <__hexnan+0xe4>
 800b934:	9a04      	ldr	r2, [sp, #16]
 800b936:	9905      	ldr	r1, [sp, #20]
 800b938:	2a20      	cmp	r2, #32
 800b93a:	d818      	bhi.n	800b96e <__hexnan+0x7e>
 800b93c:	9b02      	ldr	r3, [sp, #8]
 800b93e:	459b      	cmp	fp, r3
 800b940:	dd13      	ble.n	800b96a <__hexnan+0x7a>
 800b942:	454c      	cmp	r4, r9
 800b944:	d206      	bcs.n	800b954 <__hexnan+0x64>
 800b946:	2d07      	cmp	r5, #7
 800b948:	dc04      	bgt.n	800b954 <__hexnan+0x64>
 800b94a:	462a      	mov	r2, r5
 800b94c:	4649      	mov	r1, r9
 800b94e:	4620      	mov	r0, r4
 800b950:	f7ff ffa8 	bl	800b8a4 <L_shift>
 800b954:	4544      	cmp	r4, r8
 800b956:	d950      	bls.n	800b9fa <__hexnan+0x10a>
 800b958:	2300      	movs	r3, #0
 800b95a:	f1a4 0904 	sub.w	r9, r4, #4
 800b95e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b962:	f8cd b008 	str.w	fp, [sp, #8]
 800b966:	464c      	mov	r4, r9
 800b968:	461d      	mov	r5, r3
 800b96a:	9903      	ldr	r1, [sp, #12]
 800b96c:	e7d7      	b.n	800b91e <__hexnan+0x2e>
 800b96e:	2a29      	cmp	r2, #41	; 0x29
 800b970:	d155      	bne.n	800ba1e <__hexnan+0x12e>
 800b972:	3102      	adds	r1, #2
 800b974:	f8ca 1000 	str.w	r1, [sl]
 800b978:	f1bb 0f00 	cmp.w	fp, #0
 800b97c:	d04f      	beq.n	800ba1e <__hexnan+0x12e>
 800b97e:	454c      	cmp	r4, r9
 800b980:	d206      	bcs.n	800b990 <__hexnan+0xa0>
 800b982:	2d07      	cmp	r5, #7
 800b984:	dc04      	bgt.n	800b990 <__hexnan+0xa0>
 800b986:	462a      	mov	r2, r5
 800b988:	4649      	mov	r1, r9
 800b98a:	4620      	mov	r0, r4
 800b98c:	f7ff ff8a 	bl	800b8a4 <L_shift>
 800b990:	4544      	cmp	r4, r8
 800b992:	d934      	bls.n	800b9fe <__hexnan+0x10e>
 800b994:	f1a8 0204 	sub.w	r2, r8, #4
 800b998:	4623      	mov	r3, r4
 800b99a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b99e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9a2:	429f      	cmp	r7, r3
 800b9a4:	d2f9      	bcs.n	800b99a <__hexnan+0xaa>
 800b9a6:	1b3b      	subs	r3, r7, r4
 800b9a8:	f023 0303 	bic.w	r3, r3, #3
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	3e03      	subs	r6, #3
 800b9b0:	3401      	adds	r4, #1
 800b9b2:	42a6      	cmp	r6, r4
 800b9b4:	bf38      	it	cc
 800b9b6:	2304      	movcc	r3, #4
 800b9b8:	4443      	add	r3, r8
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f843 2b04 	str.w	r2, [r3], #4
 800b9c0:	429f      	cmp	r7, r3
 800b9c2:	d2fb      	bcs.n	800b9bc <__hexnan+0xcc>
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	b91b      	cbnz	r3, 800b9d0 <__hexnan+0xe0>
 800b9c8:	4547      	cmp	r7, r8
 800b9ca:	d126      	bne.n	800ba1a <__hexnan+0x12a>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	2005      	movs	r0, #5
 800b9d2:	e025      	b.n	800ba20 <__hexnan+0x130>
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	2d08      	cmp	r5, #8
 800b9d8:	f10b 0b01 	add.w	fp, fp, #1
 800b9dc:	dd06      	ble.n	800b9ec <__hexnan+0xfc>
 800b9de:	4544      	cmp	r4, r8
 800b9e0:	d9c3      	bls.n	800b96a <__hexnan+0x7a>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9e8:	2501      	movs	r5, #1
 800b9ea:	3c04      	subs	r4, #4
 800b9ec:	6822      	ldr	r2, [r4, #0]
 800b9ee:	f000 000f 	and.w	r0, r0, #15
 800b9f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b9f6:	6020      	str	r0, [r4, #0]
 800b9f8:	e7b7      	b.n	800b96a <__hexnan+0x7a>
 800b9fa:	2508      	movs	r5, #8
 800b9fc:	e7b5      	b.n	800b96a <__hexnan+0x7a>
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0df      	beq.n	800b9c4 <__hexnan+0xd4>
 800ba04:	f1c3 0320 	rsb	r3, r3, #32
 800ba08:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0c:	40da      	lsrs	r2, r3
 800ba0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba12:	4013      	ands	r3, r2
 800ba14:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba18:	e7d4      	b.n	800b9c4 <__hexnan+0xd4>
 800ba1a:	3f04      	subs	r7, #4
 800ba1c:	e7d2      	b.n	800b9c4 <__hexnan+0xd4>
 800ba1e:	2004      	movs	r0, #4
 800ba20:	b007      	add	sp, #28
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba26 <__ascii_mbtowc>:
 800ba26:	b082      	sub	sp, #8
 800ba28:	b901      	cbnz	r1, 800ba2c <__ascii_mbtowc+0x6>
 800ba2a:	a901      	add	r1, sp, #4
 800ba2c:	b142      	cbz	r2, 800ba40 <__ascii_mbtowc+0x1a>
 800ba2e:	b14b      	cbz	r3, 800ba44 <__ascii_mbtowc+0x1e>
 800ba30:	7813      	ldrb	r3, [r2, #0]
 800ba32:	600b      	str	r3, [r1, #0]
 800ba34:	7812      	ldrb	r2, [r2, #0]
 800ba36:	1e10      	subs	r0, r2, #0
 800ba38:	bf18      	it	ne
 800ba3a:	2001      	movne	r0, #1
 800ba3c:	b002      	add	sp, #8
 800ba3e:	4770      	bx	lr
 800ba40:	4610      	mov	r0, r2
 800ba42:	e7fb      	b.n	800ba3c <__ascii_mbtowc+0x16>
 800ba44:	f06f 0001 	mvn.w	r0, #1
 800ba48:	e7f8      	b.n	800ba3c <__ascii_mbtowc+0x16>

0800ba4a <_realloc_r>:
 800ba4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4e:	4680      	mov	r8, r0
 800ba50:	4614      	mov	r4, r2
 800ba52:	460e      	mov	r6, r1
 800ba54:	b921      	cbnz	r1, 800ba60 <_realloc_r+0x16>
 800ba56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	f7fd be3e 	b.w	80096dc <_malloc_r>
 800ba60:	b92a      	cbnz	r2, 800ba6e <_realloc_r+0x24>
 800ba62:	f7fd fdc7 	bl	80095f4 <_free_r>
 800ba66:	4625      	mov	r5, r4
 800ba68:	4628      	mov	r0, r5
 800ba6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6e:	f000 f842 	bl	800baf6 <_malloc_usable_size_r>
 800ba72:	4284      	cmp	r4, r0
 800ba74:	4607      	mov	r7, r0
 800ba76:	d802      	bhi.n	800ba7e <_realloc_r+0x34>
 800ba78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba7c:	d812      	bhi.n	800baa4 <_realloc_r+0x5a>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4640      	mov	r0, r8
 800ba82:	f7fd fe2b 	bl	80096dc <_malloc_r>
 800ba86:	4605      	mov	r5, r0
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d0ed      	beq.n	800ba68 <_realloc_r+0x1e>
 800ba8c:	42bc      	cmp	r4, r7
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4631      	mov	r1, r6
 800ba92:	bf28      	it	cs
 800ba94:	463a      	movcs	r2, r7
 800ba96:	f7fc ff1c 	bl	80088d2 <memcpy>
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	f7fd fda9 	bl	80095f4 <_free_r>
 800baa2:	e7e1      	b.n	800ba68 <_realloc_r+0x1e>
 800baa4:	4635      	mov	r5, r6
 800baa6:	e7df      	b.n	800ba68 <_realloc_r+0x1e>

0800baa8 <__ascii_wctomb>:
 800baa8:	b149      	cbz	r1, 800babe <__ascii_wctomb+0x16>
 800baaa:	2aff      	cmp	r2, #255	; 0xff
 800baac:	bf85      	ittet	hi
 800baae:	238a      	movhi	r3, #138	; 0x8a
 800bab0:	6003      	strhi	r3, [r0, #0]
 800bab2:	700a      	strbls	r2, [r1, #0]
 800bab4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bab8:	bf98      	it	ls
 800baba:	2001      	movls	r0, #1
 800babc:	4770      	bx	lr
 800babe:	4608      	mov	r0, r1
 800bac0:	4770      	bx	lr
	...

0800bac4 <fiprintf>:
 800bac4:	b40e      	push	{r1, r2, r3}
 800bac6:	b503      	push	{r0, r1, lr}
 800bac8:	4601      	mov	r1, r0
 800baca:	ab03      	add	r3, sp, #12
 800bacc:	4805      	ldr	r0, [pc, #20]	; (800bae4 <fiprintf+0x20>)
 800bace:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad2:	6800      	ldr	r0, [r0, #0]
 800bad4:	9301      	str	r3, [sp, #4]
 800bad6:	f000 f83f 	bl	800bb58 <_vfiprintf_r>
 800bada:	b002      	add	sp, #8
 800badc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bae0:	b003      	add	sp, #12
 800bae2:	4770      	bx	lr
 800bae4:	2000006c 	.word	0x2000006c

0800bae8 <abort>:
 800bae8:	b508      	push	{r3, lr}
 800baea:	2006      	movs	r0, #6
 800baec:	f000 fa0c 	bl	800bf08 <raise>
 800baf0:	2001      	movs	r0, #1
 800baf2:	f7f7 fa30 	bl	8002f56 <_exit>

0800baf6 <_malloc_usable_size_r>:
 800baf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bafa:	1f18      	subs	r0, r3, #4
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	bfbc      	itt	lt
 800bb00:	580b      	ldrlt	r3, [r1, r0]
 800bb02:	18c0      	addlt	r0, r0, r3
 800bb04:	4770      	bx	lr

0800bb06 <__sfputc_r>:
 800bb06:	6893      	ldr	r3, [r2, #8]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	b410      	push	{r4}
 800bb0e:	6093      	str	r3, [r2, #8]
 800bb10:	da08      	bge.n	800bb24 <__sfputc_r+0x1e>
 800bb12:	6994      	ldr	r4, [r2, #24]
 800bb14:	42a3      	cmp	r3, r4
 800bb16:	db01      	blt.n	800bb1c <__sfputc_r+0x16>
 800bb18:	290a      	cmp	r1, #10
 800bb1a:	d103      	bne.n	800bb24 <__sfputc_r+0x1e>
 800bb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb20:	f000 b934 	b.w	800bd8c <__swbuf_r>
 800bb24:	6813      	ldr	r3, [r2, #0]
 800bb26:	1c58      	adds	r0, r3, #1
 800bb28:	6010      	str	r0, [r2, #0]
 800bb2a:	7019      	strb	r1, [r3, #0]
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <__sfputs_r>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	4606      	mov	r6, r0
 800bb38:	460f      	mov	r7, r1
 800bb3a:	4614      	mov	r4, r2
 800bb3c:	18d5      	adds	r5, r2, r3
 800bb3e:	42ac      	cmp	r4, r5
 800bb40:	d101      	bne.n	800bb46 <__sfputs_r+0x12>
 800bb42:	2000      	movs	r0, #0
 800bb44:	e007      	b.n	800bb56 <__sfputs_r+0x22>
 800bb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb4a:	463a      	mov	r2, r7
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7ff ffda 	bl	800bb06 <__sfputc_r>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	d1f3      	bne.n	800bb3e <__sfputs_r+0xa>
 800bb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb58 <_vfiprintf_r>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	460d      	mov	r5, r1
 800bb5e:	b09d      	sub	sp, #116	; 0x74
 800bb60:	4614      	mov	r4, r2
 800bb62:	4698      	mov	r8, r3
 800bb64:	4606      	mov	r6, r0
 800bb66:	b118      	cbz	r0, 800bb70 <_vfiprintf_r+0x18>
 800bb68:	6a03      	ldr	r3, [r0, #32]
 800bb6a:	b90b      	cbnz	r3, 800bb70 <_vfiprintf_r+0x18>
 800bb6c:	f7fc fd98 	bl	80086a0 <__sinit>
 800bb70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb72:	07d9      	lsls	r1, r3, #31
 800bb74:	d405      	bmi.n	800bb82 <_vfiprintf_r+0x2a>
 800bb76:	89ab      	ldrh	r3, [r5, #12]
 800bb78:	059a      	lsls	r2, r3, #22
 800bb7a:	d402      	bmi.n	800bb82 <_vfiprintf_r+0x2a>
 800bb7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb7e:	f7fc fea6 	bl	80088ce <__retarget_lock_acquire_recursive>
 800bb82:	89ab      	ldrh	r3, [r5, #12]
 800bb84:	071b      	lsls	r3, r3, #28
 800bb86:	d501      	bpl.n	800bb8c <_vfiprintf_r+0x34>
 800bb88:	692b      	ldr	r3, [r5, #16]
 800bb8a:	b99b      	cbnz	r3, 800bbb4 <_vfiprintf_r+0x5c>
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f000 f93a 	bl	800be08 <__swsetup_r>
 800bb94:	b170      	cbz	r0, 800bbb4 <_vfiprintf_r+0x5c>
 800bb96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb98:	07dc      	lsls	r4, r3, #31
 800bb9a:	d504      	bpl.n	800bba6 <_vfiprintf_r+0x4e>
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bba0:	b01d      	add	sp, #116	; 0x74
 800bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	0598      	lsls	r0, r3, #22
 800bbaa:	d4f7      	bmi.n	800bb9c <_vfiprintf_r+0x44>
 800bbac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbae:	f7fc fe8f 	bl	80088d0 <__retarget_lock_release_recursive>
 800bbb2:	e7f3      	b.n	800bb9c <_vfiprintf_r+0x44>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb8:	2320      	movs	r3, #32
 800bbba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbc2:	2330      	movs	r3, #48	; 0x30
 800bbc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bd78 <_vfiprintf_r+0x220>
 800bbc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbcc:	f04f 0901 	mov.w	r9, #1
 800bbd0:	4623      	mov	r3, r4
 800bbd2:	469a      	mov	sl, r3
 800bbd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbd8:	b10a      	cbz	r2, 800bbde <_vfiprintf_r+0x86>
 800bbda:	2a25      	cmp	r2, #37	; 0x25
 800bbdc:	d1f9      	bne.n	800bbd2 <_vfiprintf_r+0x7a>
 800bbde:	ebba 0b04 	subs.w	fp, sl, r4
 800bbe2:	d00b      	beq.n	800bbfc <_vfiprintf_r+0xa4>
 800bbe4:	465b      	mov	r3, fp
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ffa2 	bl	800bb34 <__sfputs_r>
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	f000 80a9 	beq.w	800bd48 <_vfiprintf_r+0x1f0>
 800bbf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf8:	445a      	add	r2, fp
 800bbfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bbfc:	f89a 3000 	ldrb.w	r3, [sl]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 80a1 	beq.w	800bd48 <_vfiprintf_r+0x1f0>
 800bc06:	2300      	movs	r3, #0
 800bc08:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc10:	f10a 0a01 	add.w	sl, sl, #1
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc1c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc1e:	4654      	mov	r4, sl
 800bc20:	2205      	movs	r2, #5
 800bc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc26:	4854      	ldr	r0, [pc, #336]	; (800bd78 <_vfiprintf_r+0x220>)
 800bc28:	f7f4 fada 	bl	80001e0 <memchr>
 800bc2c:	9a04      	ldr	r2, [sp, #16]
 800bc2e:	b9d8      	cbnz	r0, 800bc68 <_vfiprintf_r+0x110>
 800bc30:	06d1      	lsls	r1, r2, #27
 800bc32:	bf44      	itt	mi
 800bc34:	2320      	movmi	r3, #32
 800bc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc3a:	0713      	lsls	r3, r2, #28
 800bc3c:	bf44      	itt	mi
 800bc3e:	232b      	movmi	r3, #43	; 0x2b
 800bc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4a:	d015      	beq.n	800bc78 <_vfiprintf_r+0x120>
 800bc4c:	9a07      	ldr	r2, [sp, #28]
 800bc4e:	4654      	mov	r4, sl
 800bc50:	2000      	movs	r0, #0
 800bc52:	f04f 0c0a 	mov.w	ip, #10
 800bc56:	4621      	mov	r1, r4
 800bc58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc5c:	3b30      	subs	r3, #48	; 0x30
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	d94d      	bls.n	800bcfe <_vfiprintf_r+0x1a6>
 800bc62:	b1b0      	cbz	r0, 800bc92 <_vfiprintf_r+0x13a>
 800bc64:	9207      	str	r2, [sp, #28]
 800bc66:	e014      	b.n	800bc92 <_vfiprintf_r+0x13a>
 800bc68:	eba0 0308 	sub.w	r3, r0, r8
 800bc6c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc70:	4313      	orrs	r3, r2
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	46a2      	mov	sl, r4
 800bc76:	e7d2      	b.n	800bc1e <_vfiprintf_r+0xc6>
 800bc78:	9b03      	ldr	r3, [sp, #12]
 800bc7a:	1d19      	adds	r1, r3, #4
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	9103      	str	r1, [sp, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bfbb      	ittet	lt
 800bc84:	425b      	neglt	r3, r3
 800bc86:	f042 0202 	orrlt.w	r2, r2, #2
 800bc8a:	9307      	strge	r3, [sp, #28]
 800bc8c:	9307      	strlt	r3, [sp, #28]
 800bc8e:	bfb8      	it	lt
 800bc90:	9204      	strlt	r2, [sp, #16]
 800bc92:	7823      	ldrb	r3, [r4, #0]
 800bc94:	2b2e      	cmp	r3, #46	; 0x2e
 800bc96:	d10c      	bne.n	800bcb2 <_vfiprintf_r+0x15a>
 800bc98:	7863      	ldrb	r3, [r4, #1]
 800bc9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9c:	d134      	bne.n	800bd08 <_vfiprintf_r+0x1b0>
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	1d1a      	adds	r2, r3, #4
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	9203      	str	r2, [sp, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfb8      	it	lt
 800bcaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcae:	3402      	adds	r4, #2
 800bcb0:	9305      	str	r3, [sp, #20]
 800bcb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd88 <_vfiprintf_r+0x230>
 800bcb6:	7821      	ldrb	r1, [r4, #0]
 800bcb8:	2203      	movs	r2, #3
 800bcba:	4650      	mov	r0, sl
 800bcbc:	f7f4 fa90 	bl	80001e0 <memchr>
 800bcc0:	b138      	cbz	r0, 800bcd2 <_vfiprintf_r+0x17a>
 800bcc2:	9b04      	ldr	r3, [sp, #16]
 800bcc4:	eba0 000a 	sub.w	r0, r0, sl
 800bcc8:	2240      	movs	r2, #64	; 0x40
 800bcca:	4082      	lsls	r2, r0
 800bccc:	4313      	orrs	r3, r2
 800bcce:	3401      	adds	r4, #1
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd6:	4829      	ldr	r0, [pc, #164]	; (800bd7c <_vfiprintf_r+0x224>)
 800bcd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcdc:	2206      	movs	r2, #6
 800bcde:	f7f4 fa7f 	bl	80001e0 <memchr>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d03f      	beq.n	800bd66 <_vfiprintf_r+0x20e>
 800bce6:	4b26      	ldr	r3, [pc, #152]	; (800bd80 <_vfiprintf_r+0x228>)
 800bce8:	bb1b      	cbnz	r3, 800bd32 <_vfiprintf_r+0x1da>
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	3307      	adds	r3, #7
 800bcee:	f023 0307 	bic.w	r3, r3, #7
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	9303      	str	r3, [sp, #12]
 800bcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf8:	443b      	add	r3, r7
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	e768      	b.n	800bbd0 <_vfiprintf_r+0x78>
 800bcfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd02:	460c      	mov	r4, r1
 800bd04:	2001      	movs	r0, #1
 800bd06:	e7a6      	b.n	800bc56 <_vfiprintf_r+0xfe>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	3401      	adds	r4, #1
 800bd0c:	9305      	str	r3, [sp, #20]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	f04f 0c0a 	mov.w	ip, #10
 800bd14:	4620      	mov	r0, r4
 800bd16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd1a:	3a30      	subs	r2, #48	; 0x30
 800bd1c:	2a09      	cmp	r2, #9
 800bd1e:	d903      	bls.n	800bd28 <_vfiprintf_r+0x1d0>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0c6      	beq.n	800bcb2 <_vfiprintf_r+0x15a>
 800bd24:	9105      	str	r1, [sp, #20]
 800bd26:	e7c4      	b.n	800bcb2 <_vfiprintf_r+0x15a>
 800bd28:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e7f0      	b.n	800bd14 <_vfiprintf_r+0x1bc>
 800bd32:	ab03      	add	r3, sp, #12
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	462a      	mov	r2, r5
 800bd38:	4b12      	ldr	r3, [pc, #72]	; (800bd84 <_vfiprintf_r+0x22c>)
 800bd3a:	a904      	add	r1, sp, #16
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7fb fe4d 	bl	80079dc <_printf_float>
 800bd42:	4607      	mov	r7, r0
 800bd44:	1c78      	adds	r0, r7, #1
 800bd46:	d1d6      	bne.n	800bcf6 <_vfiprintf_r+0x19e>
 800bd48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd4a:	07d9      	lsls	r1, r3, #31
 800bd4c:	d405      	bmi.n	800bd5a <_vfiprintf_r+0x202>
 800bd4e:	89ab      	ldrh	r3, [r5, #12]
 800bd50:	059a      	lsls	r2, r3, #22
 800bd52:	d402      	bmi.n	800bd5a <_vfiprintf_r+0x202>
 800bd54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd56:	f7fc fdbb 	bl	80088d0 <__retarget_lock_release_recursive>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	065b      	lsls	r3, r3, #25
 800bd5e:	f53f af1d 	bmi.w	800bb9c <_vfiprintf_r+0x44>
 800bd62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd64:	e71c      	b.n	800bba0 <_vfiprintf_r+0x48>
 800bd66:	ab03      	add	r3, sp, #12
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <_vfiprintf_r+0x22c>)
 800bd6e:	a904      	add	r1, sp, #16
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7fc f8d7 	bl	8007f24 <_printf_i>
 800bd76:	e7e4      	b.n	800bd42 <_vfiprintf_r+0x1ea>
 800bd78:	0800d401 	.word	0x0800d401
 800bd7c:	0800d40b 	.word	0x0800d40b
 800bd80:	080079dd 	.word	0x080079dd
 800bd84:	0800bb35 	.word	0x0800bb35
 800bd88:	0800d407 	.word	0x0800d407

0800bd8c <__swbuf_r>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	460e      	mov	r6, r1
 800bd90:	4614      	mov	r4, r2
 800bd92:	4605      	mov	r5, r0
 800bd94:	b118      	cbz	r0, 800bd9e <__swbuf_r+0x12>
 800bd96:	6a03      	ldr	r3, [r0, #32]
 800bd98:	b90b      	cbnz	r3, 800bd9e <__swbuf_r+0x12>
 800bd9a:	f7fc fc81 	bl	80086a0 <__sinit>
 800bd9e:	69a3      	ldr	r3, [r4, #24]
 800bda0:	60a3      	str	r3, [r4, #8]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	071a      	lsls	r2, r3, #28
 800bda6:	d525      	bpl.n	800bdf4 <__swbuf_r+0x68>
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	b31b      	cbz	r3, 800bdf4 <__swbuf_r+0x68>
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	6922      	ldr	r2, [r4, #16]
 800bdb0:	1a98      	subs	r0, r3, r2
 800bdb2:	6963      	ldr	r3, [r4, #20]
 800bdb4:	b2f6      	uxtb	r6, r6
 800bdb6:	4283      	cmp	r3, r0
 800bdb8:	4637      	mov	r7, r6
 800bdba:	dc04      	bgt.n	800bdc6 <__swbuf_r+0x3a>
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7ff fa3a 	bl	800b238 <_fflush_r>
 800bdc4:	b9e0      	cbnz	r0, 800be00 <__swbuf_r+0x74>
 800bdc6:	68a3      	ldr	r3, [r4, #8]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	60a3      	str	r3, [r4, #8]
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	6022      	str	r2, [r4, #0]
 800bdd2:	701e      	strb	r6, [r3, #0]
 800bdd4:	6962      	ldr	r2, [r4, #20]
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d004      	beq.n	800bde6 <__swbuf_r+0x5a>
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	07db      	lsls	r3, r3, #31
 800bde0:	d506      	bpl.n	800bdf0 <__swbuf_r+0x64>
 800bde2:	2e0a      	cmp	r6, #10
 800bde4:	d104      	bne.n	800bdf0 <__swbuf_r+0x64>
 800bde6:	4621      	mov	r1, r4
 800bde8:	4628      	mov	r0, r5
 800bdea:	f7ff fa25 	bl	800b238 <_fflush_r>
 800bdee:	b938      	cbnz	r0, 800be00 <__swbuf_r+0x74>
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f000 f806 	bl	800be08 <__swsetup_r>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d0d5      	beq.n	800bdac <__swbuf_r+0x20>
 800be00:	f04f 37ff 	mov.w	r7, #4294967295
 800be04:	e7f4      	b.n	800bdf0 <__swbuf_r+0x64>
	...

0800be08 <__swsetup_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4b2a      	ldr	r3, [pc, #168]	; (800beb4 <__swsetup_r+0xac>)
 800be0c:	4605      	mov	r5, r0
 800be0e:	6818      	ldr	r0, [r3, #0]
 800be10:	460c      	mov	r4, r1
 800be12:	b118      	cbz	r0, 800be1c <__swsetup_r+0x14>
 800be14:	6a03      	ldr	r3, [r0, #32]
 800be16:	b90b      	cbnz	r3, 800be1c <__swsetup_r+0x14>
 800be18:	f7fc fc42 	bl	80086a0 <__sinit>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be22:	0718      	lsls	r0, r3, #28
 800be24:	d422      	bmi.n	800be6c <__swsetup_r+0x64>
 800be26:	06d9      	lsls	r1, r3, #27
 800be28:	d407      	bmi.n	800be3a <__swsetup_r+0x32>
 800be2a:	2309      	movs	r3, #9
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	e034      	b.n	800bea4 <__swsetup_r+0x9c>
 800be3a:	0758      	lsls	r0, r3, #29
 800be3c:	d512      	bpl.n	800be64 <__swsetup_r+0x5c>
 800be3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be40:	b141      	cbz	r1, 800be54 <__swsetup_r+0x4c>
 800be42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be46:	4299      	cmp	r1, r3
 800be48:	d002      	beq.n	800be50 <__swsetup_r+0x48>
 800be4a:	4628      	mov	r0, r5
 800be4c:	f7fd fbd2 	bl	80095f4 <_free_r>
 800be50:	2300      	movs	r3, #0
 800be52:	6363      	str	r3, [r4, #52]	; 0x34
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be5a:	81a3      	strh	r3, [r4, #12]
 800be5c:	2300      	movs	r3, #0
 800be5e:	6063      	str	r3, [r4, #4]
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	6023      	str	r3, [r4, #0]
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f043 0308 	orr.w	r3, r3, #8
 800be6a:	81a3      	strh	r3, [r4, #12]
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	b94b      	cbnz	r3, 800be84 <__swsetup_r+0x7c>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be7a:	d003      	beq.n	800be84 <__swsetup_r+0x7c>
 800be7c:	4621      	mov	r1, r4
 800be7e:	4628      	mov	r0, r5
 800be80:	f000 f884 	bl	800bf8c <__smakebuf_r>
 800be84:	89a0      	ldrh	r0, [r4, #12]
 800be86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be8a:	f010 0301 	ands.w	r3, r0, #1
 800be8e:	d00a      	beq.n	800bea6 <__swsetup_r+0x9e>
 800be90:	2300      	movs	r3, #0
 800be92:	60a3      	str	r3, [r4, #8]
 800be94:	6963      	ldr	r3, [r4, #20]
 800be96:	425b      	negs	r3, r3
 800be98:	61a3      	str	r3, [r4, #24]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	b943      	cbnz	r3, 800beb0 <__swsetup_r+0xa8>
 800be9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bea2:	d1c4      	bne.n	800be2e <__swsetup_r+0x26>
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	0781      	lsls	r1, r0, #30
 800bea8:	bf58      	it	pl
 800beaa:	6963      	ldrpl	r3, [r4, #20]
 800beac:	60a3      	str	r3, [r4, #8]
 800beae:	e7f4      	b.n	800be9a <__swsetup_r+0x92>
 800beb0:	2000      	movs	r0, #0
 800beb2:	e7f7      	b.n	800bea4 <__swsetup_r+0x9c>
 800beb4:	2000006c 	.word	0x2000006c

0800beb8 <_raise_r>:
 800beb8:	291f      	cmp	r1, #31
 800beba:	b538      	push	{r3, r4, r5, lr}
 800bebc:	4604      	mov	r4, r0
 800bebe:	460d      	mov	r5, r1
 800bec0:	d904      	bls.n	800becc <_raise_r+0x14>
 800bec2:	2316      	movs	r3, #22
 800bec4:	6003      	str	r3, [r0, #0]
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bece:	b112      	cbz	r2, 800bed6 <_raise_r+0x1e>
 800bed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bed4:	b94b      	cbnz	r3, 800beea <_raise_r+0x32>
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 f830 	bl	800bf3c <_getpid_r>
 800bedc:	462a      	mov	r2, r5
 800bede:	4601      	mov	r1, r0
 800bee0:	4620      	mov	r0, r4
 800bee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bee6:	f000 b817 	b.w	800bf18 <_kill_r>
 800beea:	2b01      	cmp	r3, #1
 800beec:	d00a      	beq.n	800bf04 <_raise_r+0x4c>
 800beee:	1c59      	adds	r1, r3, #1
 800bef0:	d103      	bne.n	800befa <_raise_r+0x42>
 800bef2:	2316      	movs	r3, #22
 800bef4:	6003      	str	r3, [r0, #0]
 800bef6:	2001      	movs	r0, #1
 800bef8:	e7e7      	b.n	800beca <_raise_r+0x12>
 800befa:	2400      	movs	r4, #0
 800befc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf00:	4628      	mov	r0, r5
 800bf02:	4798      	blx	r3
 800bf04:	2000      	movs	r0, #0
 800bf06:	e7e0      	b.n	800beca <_raise_r+0x12>

0800bf08 <raise>:
 800bf08:	4b02      	ldr	r3, [pc, #8]	; (800bf14 <raise+0xc>)
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	6818      	ldr	r0, [r3, #0]
 800bf0e:	f7ff bfd3 	b.w	800beb8 <_raise_r>
 800bf12:	bf00      	nop
 800bf14:	2000006c 	.word	0x2000006c

0800bf18 <_kill_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	; (800bf38 <_kill_r+0x20>)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4608      	mov	r0, r1
 800bf22:	4611      	mov	r1, r2
 800bf24:	602b      	str	r3, [r5, #0]
 800bf26:	f7f7 f806 	bl	8002f36 <_kill>
 800bf2a:	1c43      	adds	r3, r0, #1
 800bf2c:	d102      	bne.n	800bf34 <_kill_r+0x1c>
 800bf2e:	682b      	ldr	r3, [r5, #0]
 800bf30:	b103      	cbz	r3, 800bf34 <_kill_r+0x1c>
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	bd38      	pop	{r3, r4, r5, pc}
 800bf36:	bf00      	nop
 800bf38:	2000463c 	.word	0x2000463c

0800bf3c <_getpid_r>:
 800bf3c:	f7f6 bff3 	b.w	8002f26 <_getpid>

0800bf40 <__swhatbuf_r>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	460c      	mov	r4, r1
 800bf44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	b096      	sub	sp, #88	; 0x58
 800bf4c:	4615      	mov	r5, r2
 800bf4e:	461e      	mov	r6, r3
 800bf50:	da0d      	bge.n	800bf6e <__swhatbuf_r+0x2e>
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf58:	f04f 0100 	mov.w	r1, #0
 800bf5c:	bf0c      	ite	eq
 800bf5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf62:	2340      	movne	r3, #64	; 0x40
 800bf64:	2000      	movs	r0, #0
 800bf66:	6031      	str	r1, [r6, #0]
 800bf68:	602b      	str	r3, [r5, #0]
 800bf6a:	b016      	add	sp, #88	; 0x58
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	466a      	mov	r2, sp
 800bf70:	f000 f848 	bl	800c004 <_fstat_r>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	dbec      	blt.n	800bf52 <__swhatbuf_r+0x12>
 800bf78:	9901      	ldr	r1, [sp, #4]
 800bf7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf82:	4259      	negs	r1, r3
 800bf84:	4159      	adcs	r1, r3
 800bf86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf8a:	e7eb      	b.n	800bf64 <__swhatbuf_r+0x24>

0800bf8c <__smakebuf_r>:
 800bf8c:	898b      	ldrh	r3, [r1, #12]
 800bf8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf90:	079d      	lsls	r5, r3, #30
 800bf92:	4606      	mov	r6, r0
 800bf94:	460c      	mov	r4, r1
 800bf96:	d507      	bpl.n	800bfa8 <__smakebuf_r+0x1c>
 800bf98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	6123      	str	r3, [r4, #16]
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	6163      	str	r3, [r4, #20]
 800bfa4:	b002      	add	sp, #8
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	ab01      	add	r3, sp, #4
 800bfaa:	466a      	mov	r2, sp
 800bfac:	f7ff ffc8 	bl	800bf40 <__swhatbuf_r>
 800bfb0:	9900      	ldr	r1, [sp, #0]
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7fd fb91 	bl	80096dc <_malloc_r>
 800bfba:	b948      	cbnz	r0, 800bfd0 <__smakebuf_r+0x44>
 800bfbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc0:	059a      	lsls	r2, r3, #22
 800bfc2:	d4ef      	bmi.n	800bfa4 <__smakebuf_r+0x18>
 800bfc4:	f023 0303 	bic.w	r3, r3, #3
 800bfc8:	f043 0302 	orr.w	r3, r3, #2
 800bfcc:	81a3      	strh	r3, [r4, #12]
 800bfce:	e7e3      	b.n	800bf98 <__smakebuf_r+0xc>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	6020      	str	r0, [r4, #0]
 800bfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	9b00      	ldr	r3, [sp, #0]
 800bfdc:	6163      	str	r3, [r4, #20]
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	6120      	str	r0, [r4, #16]
 800bfe2:	b15b      	cbz	r3, 800bffc <__smakebuf_r+0x70>
 800bfe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f000 f81d 	bl	800c028 <_isatty_r>
 800bfee:	b128      	cbz	r0, 800bffc <__smakebuf_r+0x70>
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	f043 0301 	orr.w	r3, r3, #1
 800bffa:	81a3      	strh	r3, [r4, #12]
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	431d      	orrs	r5, r3
 800c000:	81a5      	strh	r5, [r4, #12]
 800c002:	e7cf      	b.n	800bfa4 <__smakebuf_r+0x18>

0800c004 <_fstat_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d07      	ldr	r5, [pc, #28]	; (800c024 <_fstat_r+0x20>)
 800c008:	2300      	movs	r3, #0
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	4611      	mov	r1, r2
 800c010:	602b      	str	r3, [r5, #0]
 800c012:	f7f6 ffef 	bl	8002ff4 <_fstat>
 800c016:	1c43      	adds	r3, r0, #1
 800c018:	d102      	bne.n	800c020 <_fstat_r+0x1c>
 800c01a:	682b      	ldr	r3, [r5, #0]
 800c01c:	b103      	cbz	r3, 800c020 <_fstat_r+0x1c>
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	bd38      	pop	{r3, r4, r5, pc}
 800c022:	bf00      	nop
 800c024:	2000463c 	.word	0x2000463c

0800c028 <_isatty_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	; (800c044 <_isatty_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f6 ffee 	bl	8003014 <_isatty>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_isatty_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_isatty_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	2000463c 	.word	0x2000463c

0800c048 <pow>:
 800c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04a:	ed2d 8b02 	vpush	{d8}
 800c04e:	eeb0 8a40 	vmov.f32	s16, s0
 800c052:	eef0 8a60 	vmov.f32	s17, s1
 800c056:	ec55 4b11 	vmov	r4, r5, d1
 800c05a:	f000 f871 	bl	800c140 <__ieee754_pow>
 800c05e:	4622      	mov	r2, r4
 800c060:	462b      	mov	r3, r5
 800c062:	4620      	mov	r0, r4
 800c064:	4629      	mov	r1, r5
 800c066:	ec57 6b10 	vmov	r6, r7, d0
 800c06a:	f7f4 fd67 	bl	8000b3c <__aeabi_dcmpun>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d13b      	bne.n	800c0ea <pow+0xa2>
 800c072:	ec51 0b18 	vmov	r0, r1, d8
 800c076:	2200      	movs	r2, #0
 800c078:	2300      	movs	r3, #0
 800c07a:	f7f4 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c07e:	b1b8      	cbz	r0, 800c0b0 <pow+0x68>
 800c080:	2200      	movs	r2, #0
 800c082:	2300      	movs	r3, #0
 800c084:	4620      	mov	r0, r4
 800c086:	4629      	mov	r1, r5
 800c088:	f7f4 fd26 	bl	8000ad8 <__aeabi_dcmpeq>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d146      	bne.n	800c11e <pow+0xd6>
 800c090:	ec45 4b10 	vmov	d0, r4, r5
 800c094:	f000 f848 	bl	800c128 <finite>
 800c098:	b338      	cbz	r0, 800c0ea <pow+0xa2>
 800c09a:	2200      	movs	r2, #0
 800c09c:	2300      	movs	r3, #0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fd23 	bl	8000aec <__aeabi_dcmplt>
 800c0a6:	b300      	cbz	r0, 800c0ea <pow+0xa2>
 800c0a8:	f7fc fbe6 	bl	8008878 <__errno>
 800c0ac:	2322      	movs	r3, #34	; 0x22
 800c0ae:	e01b      	b.n	800c0e8 <pow+0xa0>
 800c0b0:	ec47 6b10 	vmov	d0, r6, r7
 800c0b4:	f000 f838 	bl	800c128 <finite>
 800c0b8:	b9e0      	cbnz	r0, 800c0f4 <pow+0xac>
 800c0ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c0be:	eef0 0a68 	vmov.f32	s1, s17
 800c0c2:	f000 f831 	bl	800c128 <finite>
 800c0c6:	b1a8      	cbz	r0, 800c0f4 <pow+0xac>
 800c0c8:	ec45 4b10 	vmov	d0, r4, r5
 800c0cc:	f000 f82c 	bl	800c128 <finite>
 800c0d0:	b180      	cbz	r0, 800c0f4 <pow+0xac>
 800c0d2:	4632      	mov	r2, r6
 800c0d4:	463b      	mov	r3, r7
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	4639      	mov	r1, r7
 800c0da:	f7f4 fd2f 	bl	8000b3c <__aeabi_dcmpun>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d0e2      	beq.n	800c0a8 <pow+0x60>
 800c0e2:	f7fc fbc9 	bl	8008878 <__errno>
 800c0e6:	2321      	movs	r3, #33	; 0x21
 800c0e8:	6003      	str	r3, [r0, #0]
 800c0ea:	ecbd 8b02 	vpop	{d8}
 800c0ee:	ec47 6b10 	vmov	d0, r6, r7
 800c0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 fcec 	bl	8000ad8 <__aeabi_dcmpeq>
 800c100:	2800      	cmp	r0, #0
 800c102:	d0f2      	beq.n	800c0ea <pow+0xa2>
 800c104:	eeb0 0a48 	vmov.f32	s0, s16
 800c108:	eef0 0a68 	vmov.f32	s1, s17
 800c10c:	f000 f80c 	bl	800c128 <finite>
 800c110:	2800      	cmp	r0, #0
 800c112:	d0ea      	beq.n	800c0ea <pow+0xa2>
 800c114:	ec45 4b10 	vmov	d0, r4, r5
 800c118:	f000 f806 	bl	800c128 <finite>
 800c11c:	e7c3      	b.n	800c0a6 <pow+0x5e>
 800c11e:	4f01      	ldr	r7, [pc, #4]	; (800c124 <pow+0xdc>)
 800c120:	2600      	movs	r6, #0
 800c122:	e7e2      	b.n	800c0ea <pow+0xa2>
 800c124:	3ff00000 	.word	0x3ff00000

0800c128 <finite>:
 800c128:	b082      	sub	sp, #8
 800c12a:	ed8d 0b00 	vstr	d0, [sp]
 800c12e:	9801      	ldr	r0, [sp, #4]
 800c130:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c134:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c138:	0fc0      	lsrs	r0, r0, #31
 800c13a:	b002      	add	sp, #8
 800c13c:	4770      	bx	lr
	...

0800c140 <__ieee754_pow>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	ed2d 8b06 	vpush	{d8-d10}
 800c148:	b089      	sub	sp, #36	; 0x24
 800c14a:	ed8d 1b00 	vstr	d1, [sp]
 800c14e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c152:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c156:	ea58 0102 	orrs.w	r1, r8, r2
 800c15a:	ec57 6b10 	vmov	r6, r7, d0
 800c15e:	d115      	bne.n	800c18c <__ieee754_pow+0x4c>
 800c160:	19b3      	adds	r3, r6, r6
 800c162:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c166:	4152      	adcs	r2, r2
 800c168:	4299      	cmp	r1, r3
 800c16a:	4b89      	ldr	r3, [pc, #548]	; (800c390 <__ieee754_pow+0x250>)
 800c16c:	4193      	sbcs	r3, r2
 800c16e:	f080 84d1 	bcs.w	800cb14 <__ieee754_pow+0x9d4>
 800c172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c176:	4630      	mov	r0, r6
 800c178:	4639      	mov	r1, r7
 800c17a:	f7f4 f88f 	bl	800029c <__adddf3>
 800c17e:	ec41 0b10 	vmov	d0, r0, r1
 800c182:	b009      	add	sp, #36	; 0x24
 800c184:	ecbd 8b06 	vpop	{d8-d10}
 800c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18c:	4b81      	ldr	r3, [pc, #516]	; (800c394 <__ieee754_pow+0x254>)
 800c18e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c192:	429c      	cmp	r4, r3
 800c194:	ee10 aa10 	vmov	sl, s0
 800c198:	463d      	mov	r5, r7
 800c19a:	dc06      	bgt.n	800c1aa <__ieee754_pow+0x6a>
 800c19c:	d101      	bne.n	800c1a2 <__ieee754_pow+0x62>
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	d1e7      	bne.n	800c172 <__ieee754_pow+0x32>
 800c1a2:	4598      	cmp	r8, r3
 800c1a4:	dc01      	bgt.n	800c1aa <__ieee754_pow+0x6a>
 800c1a6:	d10f      	bne.n	800c1c8 <__ieee754_pow+0x88>
 800c1a8:	b172      	cbz	r2, 800c1c8 <__ieee754_pow+0x88>
 800c1aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c1ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c1b2:	ea55 050a 	orrs.w	r5, r5, sl
 800c1b6:	d1dc      	bne.n	800c172 <__ieee754_pow+0x32>
 800c1b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1bc:	18db      	adds	r3, r3, r3
 800c1be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c1c2:	4152      	adcs	r2, r2
 800c1c4:	429d      	cmp	r5, r3
 800c1c6:	e7d0      	b.n	800c16a <__ieee754_pow+0x2a>
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	da3b      	bge.n	800c244 <__ieee754_pow+0x104>
 800c1cc:	4b72      	ldr	r3, [pc, #456]	; (800c398 <__ieee754_pow+0x258>)
 800c1ce:	4598      	cmp	r8, r3
 800c1d0:	dc51      	bgt.n	800c276 <__ieee754_pow+0x136>
 800c1d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c1d6:	4598      	cmp	r8, r3
 800c1d8:	f340 84ab 	ble.w	800cb32 <__ieee754_pow+0x9f2>
 800c1dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c1e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1e4:	2b14      	cmp	r3, #20
 800c1e6:	dd0f      	ble.n	800c208 <__ieee754_pow+0xc8>
 800c1e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c1ec:	fa22 f103 	lsr.w	r1, r2, r3
 800c1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	f040 849c 	bne.w	800cb32 <__ieee754_pow+0x9f2>
 800c1fa:	f001 0101 	and.w	r1, r1, #1
 800c1fe:	f1c1 0302 	rsb	r3, r1, #2
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	b182      	cbz	r2, 800c228 <__ieee754_pow+0xe8>
 800c206:	e05f      	b.n	800c2c8 <__ieee754_pow+0x188>
 800c208:	2a00      	cmp	r2, #0
 800c20a:	d15b      	bne.n	800c2c4 <__ieee754_pow+0x184>
 800c20c:	f1c3 0314 	rsb	r3, r3, #20
 800c210:	fa48 f103 	asr.w	r1, r8, r3
 800c214:	fa01 f303 	lsl.w	r3, r1, r3
 800c218:	4543      	cmp	r3, r8
 800c21a:	f040 8487 	bne.w	800cb2c <__ieee754_pow+0x9ec>
 800c21e:	f001 0101 	and.w	r1, r1, #1
 800c222:	f1c1 0302 	rsb	r3, r1, #2
 800c226:	9304      	str	r3, [sp, #16]
 800c228:	4b5c      	ldr	r3, [pc, #368]	; (800c39c <__ieee754_pow+0x25c>)
 800c22a:	4598      	cmp	r8, r3
 800c22c:	d132      	bne.n	800c294 <__ieee754_pow+0x154>
 800c22e:	f1b9 0f00 	cmp.w	r9, #0
 800c232:	f280 8477 	bge.w	800cb24 <__ieee754_pow+0x9e4>
 800c236:	4959      	ldr	r1, [pc, #356]	; (800c39c <__ieee754_pow+0x25c>)
 800c238:	4632      	mov	r2, r6
 800c23a:	463b      	mov	r3, r7
 800c23c:	2000      	movs	r0, #0
 800c23e:	f7f4 fb0d 	bl	800085c <__aeabi_ddiv>
 800c242:	e79c      	b.n	800c17e <__ieee754_pow+0x3e>
 800c244:	2300      	movs	r3, #0
 800c246:	9304      	str	r3, [sp, #16]
 800c248:	2a00      	cmp	r2, #0
 800c24a:	d13d      	bne.n	800c2c8 <__ieee754_pow+0x188>
 800c24c:	4b51      	ldr	r3, [pc, #324]	; (800c394 <__ieee754_pow+0x254>)
 800c24e:	4598      	cmp	r8, r3
 800c250:	d1ea      	bne.n	800c228 <__ieee754_pow+0xe8>
 800c252:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c256:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c25a:	ea53 030a 	orrs.w	r3, r3, sl
 800c25e:	f000 8459 	beq.w	800cb14 <__ieee754_pow+0x9d4>
 800c262:	4b4f      	ldr	r3, [pc, #316]	; (800c3a0 <__ieee754_pow+0x260>)
 800c264:	429c      	cmp	r4, r3
 800c266:	dd08      	ble.n	800c27a <__ieee754_pow+0x13a>
 800c268:	f1b9 0f00 	cmp.w	r9, #0
 800c26c:	f2c0 8456 	blt.w	800cb1c <__ieee754_pow+0x9dc>
 800c270:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c274:	e783      	b.n	800c17e <__ieee754_pow+0x3e>
 800c276:	2302      	movs	r3, #2
 800c278:	e7e5      	b.n	800c246 <__ieee754_pow+0x106>
 800c27a:	f1b9 0f00 	cmp.w	r9, #0
 800c27e:	f04f 0000 	mov.w	r0, #0
 800c282:	f04f 0100 	mov.w	r1, #0
 800c286:	f6bf af7a 	bge.w	800c17e <__ieee754_pow+0x3e>
 800c28a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c28e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c292:	e774      	b.n	800c17e <__ieee754_pow+0x3e>
 800c294:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c298:	d106      	bne.n	800c2a8 <__ieee754_pow+0x168>
 800c29a:	4632      	mov	r2, r6
 800c29c:	463b      	mov	r3, r7
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	f7f4 f9b1 	bl	8000608 <__aeabi_dmul>
 800c2a6:	e76a      	b.n	800c17e <__ieee754_pow+0x3e>
 800c2a8:	4b3e      	ldr	r3, [pc, #248]	; (800c3a4 <__ieee754_pow+0x264>)
 800c2aa:	4599      	cmp	r9, r3
 800c2ac:	d10c      	bne.n	800c2c8 <__ieee754_pow+0x188>
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	db0a      	blt.n	800c2c8 <__ieee754_pow+0x188>
 800c2b2:	ec47 6b10 	vmov	d0, r6, r7
 800c2b6:	b009      	add	sp, #36	; 0x24
 800c2b8:	ecbd 8b06 	vpop	{d8-d10}
 800c2bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	f000 bd20 	b.w	800cd04 <__ieee754_sqrt>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	ec47 6b10 	vmov	d0, r6, r7
 800c2cc:	f000 fc62 	bl	800cb94 <fabs>
 800c2d0:	ec51 0b10 	vmov	r0, r1, d0
 800c2d4:	f1ba 0f00 	cmp.w	sl, #0
 800c2d8:	d129      	bne.n	800c32e <__ieee754_pow+0x1ee>
 800c2da:	b124      	cbz	r4, 800c2e6 <__ieee754_pow+0x1a6>
 800c2dc:	4b2f      	ldr	r3, [pc, #188]	; (800c39c <__ieee754_pow+0x25c>)
 800c2de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d123      	bne.n	800c32e <__ieee754_pow+0x1ee>
 800c2e6:	f1b9 0f00 	cmp.w	r9, #0
 800c2ea:	da05      	bge.n	800c2f8 <__ieee754_pow+0x1b8>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	492a      	ldr	r1, [pc, #168]	; (800c39c <__ieee754_pow+0x25c>)
 800c2f4:	f7f4 fab2 	bl	800085c <__aeabi_ddiv>
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	f6bf af40 	bge.w	800c17e <__ieee754_pow+0x3e>
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c304:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c308:	431c      	orrs	r4, r3
 800c30a:	d108      	bne.n	800c31e <__ieee754_pow+0x1de>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4610      	mov	r0, r2
 800c312:	4619      	mov	r1, r3
 800c314:	f7f3 ffc0 	bl	8000298 <__aeabi_dsub>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	e78f      	b.n	800c23e <__ieee754_pow+0xfe>
 800c31e:	9b04      	ldr	r3, [sp, #16]
 800c320:	2b01      	cmp	r3, #1
 800c322:	f47f af2c 	bne.w	800c17e <__ieee754_pow+0x3e>
 800c326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c32a:	4619      	mov	r1, r3
 800c32c:	e727      	b.n	800c17e <__ieee754_pow+0x3e>
 800c32e:	0feb      	lsrs	r3, r5, #31
 800c330:	3b01      	subs	r3, #1
 800c332:	9306      	str	r3, [sp, #24]
 800c334:	9a06      	ldr	r2, [sp, #24]
 800c336:	9b04      	ldr	r3, [sp, #16]
 800c338:	4313      	orrs	r3, r2
 800c33a:	d102      	bne.n	800c342 <__ieee754_pow+0x202>
 800c33c:	4632      	mov	r2, r6
 800c33e:	463b      	mov	r3, r7
 800c340:	e7e6      	b.n	800c310 <__ieee754_pow+0x1d0>
 800c342:	4b19      	ldr	r3, [pc, #100]	; (800c3a8 <__ieee754_pow+0x268>)
 800c344:	4598      	cmp	r8, r3
 800c346:	f340 80fb 	ble.w	800c540 <__ieee754_pow+0x400>
 800c34a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c34e:	4598      	cmp	r8, r3
 800c350:	4b13      	ldr	r3, [pc, #76]	; (800c3a0 <__ieee754_pow+0x260>)
 800c352:	dd0c      	ble.n	800c36e <__ieee754_pow+0x22e>
 800c354:	429c      	cmp	r4, r3
 800c356:	dc0f      	bgt.n	800c378 <__ieee754_pow+0x238>
 800c358:	f1b9 0f00 	cmp.w	r9, #0
 800c35c:	da0f      	bge.n	800c37e <__ieee754_pow+0x23e>
 800c35e:	2000      	movs	r0, #0
 800c360:	b009      	add	sp, #36	; 0x24
 800c362:	ecbd 8b06 	vpop	{d8-d10}
 800c366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36a:	f000 bcc2 	b.w	800ccf2 <__math_oflow>
 800c36e:	429c      	cmp	r4, r3
 800c370:	dbf2      	blt.n	800c358 <__ieee754_pow+0x218>
 800c372:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <__ieee754_pow+0x25c>)
 800c374:	429c      	cmp	r4, r3
 800c376:	dd19      	ble.n	800c3ac <__ieee754_pow+0x26c>
 800c378:	f1b9 0f00 	cmp.w	r9, #0
 800c37c:	dcef      	bgt.n	800c35e <__ieee754_pow+0x21e>
 800c37e:	2000      	movs	r0, #0
 800c380:	b009      	add	sp, #36	; 0x24
 800c382:	ecbd 8b06 	vpop	{d8-d10}
 800c386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	f000 bca9 	b.w	800cce0 <__math_uflow>
 800c38e:	bf00      	nop
 800c390:	fff00000 	.word	0xfff00000
 800c394:	7ff00000 	.word	0x7ff00000
 800c398:	433fffff 	.word	0x433fffff
 800c39c:	3ff00000 	.word	0x3ff00000
 800c3a0:	3fefffff 	.word	0x3fefffff
 800c3a4:	3fe00000 	.word	0x3fe00000
 800c3a8:	41e00000 	.word	0x41e00000
 800c3ac:	4b60      	ldr	r3, [pc, #384]	; (800c530 <__ieee754_pow+0x3f0>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f7f3 ff72 	bl	8000298 <__aeabi_dsub>
 800c3b4:	a354      	add	r3, pc, #336	; (adr r3, 800c508 <__ieee754_pow+0x3c8>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	460d      	mov	r5, r1
 800c3be:	f7f4 f923 	bl	8000608 <__aeabi_dmul>
 800c3c2:	a353      	add	r3, pc, #332	; (adr r3, 800c510 <__ieee754_pow+0x3d0>)
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	460f      	mov	r7, r1
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f4 f91a 	bl	8000608 <__aeabi_dmul>
 800c3d4:	4b57      	ldr	r3, [pc, #348]	; (800c534 <__ieee754_pow+0x3f4>)
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	468b      	mov	fp, r1
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f4 f912 	bl	8000608 <__aeabi_dmul>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	a14b      	add	r1, pc, #300	; (adr r1, 800c518 <__ieee754_pow+0x3d8>)
 800c3ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ee:	f7f3 ff53 	bl	8000298 <__aeabi_dsub>
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	f7f4 f907 	bl	8000608 <__aeabi_dmul>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	2000      	movs	r0, #0
 800c400:	494d      	ldr	r1, [pc, #308]	; (800c538 <__ieee754_pow+0x3f8>)
 800c402:	f7f3 ff49 	bl	8000298 <__aeabi_dsub>
 800c406:	4622      	mov	r2, r4
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	462b      	mov	r3, r5
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	f7f4 f8f9 	bl	8000608 <__aeabi_dmul>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f4 f8f3 	bl	8000608 <__aeabi_dmul>
 800c422:	a33f      	add	r3, pc, #252	; (adr r3, 800c520 <__ieee754_pow+0x3e0>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f4 f8ee 	bl	8000608 <__aeabi_dmul>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	4650      	mov	r0, sl
 800c432:	4659      	mov	r1, fp
 800c434:	f7f3 ff30 	bl	8000298 <__aeabi_dsub>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4680      	mov	r8, r0
 800c43e:	4689      	mov	r9, r1
 800c440:	4630      	mov	r0, r6
 800c442:	4639      	mov	r1, r7
 800c444:	f7f3 ff2a 	bl	800029c <__adddf3>
 800c448:	2000      	movs	r0, #0
 800c44a:	4632      	mov	r2, r6
 800c44c:	463b      	mov	r3, r7
 800c44e:	4604      	mov	r4, r0
 800c450:	460d      	mov	r5, r1
 800c452:	f7f3 ff21 	bl	8000298 <__aeabi_dsub>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4640      	mov	r0, r8
 800c45c:	4649      	mov	r1, r9
 800c45e:	f7f3 ff1b 	bl	8000298 <__aeabi_dsub>
 800c462:	9b04      	ldr	r3, [sp, #16]
 800c464:	9a06      	ldr	r2, [sp, #24]
 800c466:	3b01      	subs	r3, #1
 800c468:	4313      	orrs	r3, r2
 800c46a:	4682      	mov	sl, r0
 800c46c:	468b      	mov	fp, r1
 800c46e:	f040 81e7 	bne.w	800c840 <__ieee754_pow+0x700>
 800c472:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c528 <__ieee754_pow+0x3e8>
 800c476:	eeb0 8a47 	vmov.f32	s16, s14
 800c47a:	eef0 8a67 	vmov.f32	s17, s15
 800c47e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c482:	2600      	movs	r6, #0
 800c484:	4632      	mov	r2, r6
 800c486:	463b      	mov	r3, r7
 800c488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c48c:	f7f3 ff04 	bl	8000298 <__aeabi_dsub>
 800c490:	4622      	mov	r2, r4
 800c492:	462b      	mov	r3, r5
 800c494:	f7f4 f8b8 	bl	8000608 <__aeabi_dmul>
 800c498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c49c:	4680      	mov	r8, r0
 800c49e:	4689      	mov	r9, r1
 800c4a0:	4650      	mov	r0, sl
 800c4a2:	4659      	mov	r1, fp
 800c4a4:	f7f4 f8b0 	bl	8000608 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	f7f3 fef4 	bl	800029c <__adddf3>
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	4680      	mov	r8, r0
 800c4ba:	4689      	mov	r9, r1
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f4 f8a2 	bl	8000608 <__aeabi_dmul>
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	f7f3 fee4 	bl	800029c <__adddf3>
 800c4d4:	4b19      	ldr	r3, [pc, #100]	; (800c53c <__ieee754_pow+0x3fc>)
 800c4d6:	4299      	cmp	r1, r3
 800c4d8:	ec45 4b19 	vmov	d9, r4, r5
 800c4dc:	4606      	mov	r6, r0
 800c4de:	460f      	mov	r7, r1
 800c4e0:	468b      	mov	fp, r1
 800c4e2:	f340 82f0 	ble.w	800cac6 <__ieee754_pow+0x986>
 800c4e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c4ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c4ee:	4303      	orrs	r3, r0
 800c4f0:	f000 81e4 	beq.w	800c8bc <__ieee754_pow+0x77c>
 800c4f4:	ec51 0b18 	vmov	r0, r1, d8
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f7f4 faf6 	bl	8000aec <__aeabi_dcmplt>
 800c500:	3800      	subs	r0, #0
 800c502:	bf18      	it	ne
 800c504:	2001      	movne	r0, #1
 800c506:	e72b      	b.n	800c360 <__ieee754_pow+0x220>
 800c508:	60000000 	.word	0x60000000
 800c50c:	3ff71547 	.word	0x3ff71547
 800c510:	f85ddf44 	.word	0xf85ddf44
 800c514:	3e54ae0b 	.word	0x3e54ae0b
 800c518:	55555555 	.word	0x55555555
 800c51c:	3fd55555 	.word	0x3fd55555
 800c520:	652b82fe 	.word	0x652b82fe
 800c524:	3ff71547 	.word	0x3ff71547
 800c528:	00000000 	.word	0x00000000
 800c52c:	bff00000 	.word	0xbff00000
 800c530:	3ff00000 	.word	0x3ff00000
 800c534:	3fd00000 	.word	0x3fd00000
 800c538:	3fe00000 	.word	0x3fe00000
 800c53c:	408fffff 	.word	0x408fffff
 800c540:	4bd5      	ldr	r3, [pc, #852]	; (800c898 <__ieee754_pow+0x758>)
 800c542:	402b      	ands	r3, r5
 800c544:	2200      	movs	r2, #0
 800c546:	b92b      	cbnz	r3, 800c554 <__ieee754_pow+0x414>
 800c548:	4bd4      	ldr	r3, [pc, #848]	; (800c89c <__ieee754_pow+0x75c>)
 800c54a:	f7f4 f85d 	bl	8000608 <__aeabi_dmul>
 800c54e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c552:	460c      	mov	r4, r1
 800c554:	1523      	asrs	r3, r4, #20
 800c556:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c55a:	4413      	add	r3, r2
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	4bd0      	ldr	r3, [pc, #832]	; (800c8a0 <__ieee754_pow+0x760>)
 800c560:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c564:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c568:	429c      	cmp	r4, r3
 800c56a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c56e:	dd08      	ble.n	800c582 <__ieee754_pow+0x442>
 800c570:	4bcc      	ldr	r3, [pc, #816]	; (800c8a4 <__ieee754_pow+0x764>)
 800c572:	429c      	cmp	r4, r3
 800c574:	f340 8162 	ble.w	800c83c <__ieee754_pow+0x6fc>
 800c578:	9b05      	ldr	r3, [sp, #20]
 800c57a:	3301      	adds	r3, #1
 800c57c:	9305      	str	r3, [sp, #20]
 800c57e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c582:	2400      	movs	r4, #0
 800c584:	00e3      	lsls	r3, r4, #3
 800c586:	9307      	str	r3, [sp, #28]
 800c588:	4bc7      	ldr	r3, [pc, #796]	; (800c8a8 <__ieee754_pow+0x768>)
 800c58a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c58e:	ed93 7b00 	vldr	d7, [r3]
 800c592:	4629      	mov	r1, r5
 800c594:	ec53 2b17 	vmov	r2, r3, d7
 800c598:	eeb0 9a47 	vmov.f32	s18, s14
 800c59c:	eef0 9a67 	vmov.f32	s19, s15
 800c5a0:	4682      	mov	sl, r0
 800c5a2:	f7f3 fe79 	bl	8000298 <__aeabi_dsub>
 800c5a6:	4652      	mov	r2, sl
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	460f      	mov	r7, r1
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	ec51 0b19 	vmov	r0, r1, d9
 800c5b2:	f7f3 fe73 	bl	800029c <__adddf3>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	49bb      	ldr	r1, [pc, #748]	; (800c8ac <__ieee754_pow+0x76c>)
 800c5be:	f7f4 f94d 	bl	800085c <__aeabi_ddiv>
 800c5c2:	ec41 0b1a 	vmov	d10, r0, r1
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f4 f81b 	bl	8000608 <__aeabi_dmul>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5d8:	9302      	str	r3, [sp, #8]
 800c5da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c5de:	46ab      	mov	fp, r5
 800c5e0:	106d      	asrs	r5, r5, #1
 800c5e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c5e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c5ea:	ec41 0b18 	vmov	d8, r0, r1
 800c5ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	4614      	mov	r4, r2
 800c5fa:	461d      	mov	r5, r3
 800c5fc:	f7f4 f804 	bl	8000608 <__aeabi_dmul>
 800c600:	4602      	mov	r2, r0
 800c602:	460b      	mov	r3, r1
 800c604:	4630      	mov	r0, r6
 800c606:	4639      	mov	r1, r7
 800c608:	f7f3 fe46 	bl	8000298 <__aeabi_dsub>
 800c60c:	ec53 2b19 	vmov	r2, r3, d9
 800c610:	4606      	mov	r6, r0
 800c612:	460f      	mov	r7, r1
 800c614:	4620      	mov	r0, r4
 800c616:	4629      	mov	r1, r5
 800c618:	f7f3 fe3e 	bl	8000298 <__aeabi_dsub>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4650      	mov	r0, sl
 800c622:	4659      	mov	r1, fp
 800c624:	f7f3 fe38 	bl	8000298 <__aeabi_dsub>
 800c628:	4642      	mov	r2, r8
 800c62a:	464b      	mov	r3, r9
 800c62c:	f7f3 ffec 	bl	8000608 <__aeabi_dmul>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4630      	mov	r0, r6
 800c636:	4639      	mov	r1, r7
 800c638:	f7f3 fe2e 	bl	8000298 <__aeabi_dsub>
 800c63c:	ec53 2b1a 	vmov	r2, r3, d10
 800c640:	f7f3 ffe2 	bl	8000608 <__aeabi_dmul>
 800c644:	ec53 2b18 	vmov	r2, r3, d8
 800c648:	ec41 0b19 	vmov	d9, r0, r1
 800c64c:	ec51 0b18 	vmov	r0, r1, d8
 800c650:	f7f3 ffda 	bl	8000608 <__aeabi_dmul>
 800c654:	a37c      	add	r3, pc, #496	; (adr r3, 800c848 <__ieee754_pow+0x708>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	4604      	mov	r4, r0
 800c65c:	460d      	mov	r5, r1
 800c65e:	f7f3 ffd3 	bl	8000608 <__aeabi_dmul>
 800c662:	a37b      	add	r3, pc, #492	; (adr r3, 800c850 <__ieee754_pow+0x710>)
 800c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c668:	f7f3 fe18 	bl	800029c <__adddf3>
 800c66c:	4622      	mov	r2, r4
 800c66e:	462b      	mov	r3, r5
 800c670:	f7f3 ffca 	bl	8000608 <__aeabi_dmul>
 800c674:	a378      	add	r3, pc, #480	; (adr r3, 800c858 <__ieee754_pow+0x718>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 fe0f 	bl	800029c <__adddf3>
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	f7f3 ffc1 	bl	8000608 <__aeabi_dmul>
 800c686:	a376      	add	r3, pc, #472	; (adr r3, 800c860 <__ieee754_pow+0x720>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	f7f3 fe06 	bl	800029c <__adddf3>
 800c690:	4622      	mov	r2, r4
 800c692:	462b      	mov	r3, r5
 800c694:	f7f3 ffb8 	bl	8000608 <__aeabi_dmul>
 800c698:	a373      	add	r3, pc, #460	; (adr r3, 800c868 <__ieee754_pow+0x728>)
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f7f3 fdfd 	bl	800029c <__adddf3>
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	f7f3 ffaf 	bl	8000608 <__aeabi_dmul>
 800c6aa:	a371      	add	r3, pc, #452	; (adr r3, 800c870 <__ieee754_pow+0x730>)
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f7f3 fdf4 	bl	800029c <__adddf3>
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	460f      	mov	r7, r1
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f3 ffa2 	bl	8000608 <__aeabi_dmul>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	4639      	mov	r1, r7
 800c6cc:	f7f3 ff9c 	bl	8000608 <__aeabi_dmul>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	ec51 0b18 	vmov	r0, r1, d8
 800c6dc:	f7f3 fdde 	bl	800029c <__adddf3>
 800c6e0:	ec53 2b19 	vmov	r2, r3, d9
 800c6e4:	f7f3 ff90 	bl	8000608 <__aeabi_dmul>
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	f7f3 fdd6 	bl	800029c <__adddf3>
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	468b      	mov	fp, r1
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f3 ff84 	bl	8000608 <__aeabi_dmul>
 800c700:	4b6b      	ldr	r3, [pc, #428]	; (800c8b0 <__ieee754_pow+0x770>)
 800c702:	2200      	movs	r2, #0
 800c704:	4606      	mov	r6, r0
 800c706:	460f      	mov	r7, r1
 800c708:	f7f3 fdc8 	bl	800029c <__adddf3>
 800c70c:	4652      	mov	r2, sl
 800c70e:	465b      	mov	r3, fp
 800c710:	f7f3 fdc4 	bl	800029c <__adddf3>
 800c714:	2000      	movs	r0, #0
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4640      	mov	r0, r8
 800c720:	4649      	mov	r1, r9
 800c722:	f7f3 ff71 	bl	8000608 <__aeabi_dmul>
 800c726:	4b62      	ldr	r3, [pc, #392]	; (800c8b0 <__ieee754_pow+0x770>)
 800c728:	4680      	mov	r8, r0
 800c72a:	4689      	mov	r9, r1
 800c72c:	2200      	movs	r2, #0
 800c72e:	4620      	mov	r0, r4
 800c730:	4629      	mov	r1, r5
 800c732:	f7f3 fdb1 	bl	8000298 <__aeabi_dsub>
 800c736:	4632      	mov	r2, r6
 800c738:	463b      	mov	r3, r7
 800c73a:	f7f3 fdad 	bl	8000298 <__aeabi_dsub>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	4650      	mov	r0, sl
 800c744:	4659      	mov	r1, fp
 800c746:	f7f3 fda7 	bl	8000298 <__aeabi_dsub>
 800c74a:	ec53 2b18 	vmov	r2, r3, d8
 800c74e:	f7f3 ff5b 	bl	8000608 <__aeabi_dmul>
 800c752:	4622      	mov	r2, r4
 800c754:	4606      	mov	r6, r0
 800c756:	460f      	mov	r7, r1
 800c758:	462b      	mov	r3, r5
 800c75a:	ec51 0b19 	vmov	r0, r1, d9
 800c75e:	f7f3 ff53 	bl	8000608 <__aeabi_dmul>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f3 fd97 	bl	800029c <__adddf3>
 800c76e:	4606      	mov	r6, r0
 800c770:	460f      	mov	r7, r1
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	4640      	mov	r0, r8
 800c778:	4649      	mov	r1, r9
 800c77a:	f7f3 fd8f 	bl	800029c <__adddf3>
 800c77e:	a33e      	add	r3, pc, #248	; (adr r3, 800c878 <__ieee754_pow+0x738>)
 800c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c784:	2000      	movs	r0, #0
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	f7f3 ff3d 	bl	8000608 <__aeabi_dmul>
 800c78e:	4642      	mov	r2, r8
 800c790:	ec41 0b18 	vmov	d8, r0, r1
 800c794:	464b      	mov	r3, r9
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd7d 	bl	8000298 <__aeabi_dsub>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	f7f3 fd77 	bl	8000298 <__aeabi_dsub>
 800c7aa:	a335      	add	r3, pc, #212	; (adr r3, 800c880 <__ieee754_pow+0x740>)
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	f7f3 ff2a 	bl	8000608 <__aeabi_dmul>
 800c7b4:	a334      	add	r3, pc, #208	; (adr r3, 800c888 <__ieee754_pow+0x748>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	460f      	mov	r7, r1
 800c7be:	4620      	mov	r0, r4
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	f7f3 ff21 	bl	8000608 <__aeabi_dmul>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	f7f3 fd65 	bl	800029c <__adddf3>
 800c7d2:	9a07      	ldr	r2, [sp, #28]
 800c7d4:	4b37      	ldr	r3, [pc, #220]	; (800c8b4 <__ieee754_pow+0x774>)
 800c7d6:	4413      	add	r3, r2
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f7f3 fd5e 	bl	800029c <__adddf3>
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	9805      	ldr	r0, [sp, #20]
 800c7e4:	468b      	mov	fp, r1
 800c7e6:	f7f3 fea5 	bl	8000534 <__aeabi_i2d>
 800c7ea:	9a07      	ldr	r2, [sp, #28]
 800c7ec:	4b32      	ldr	r3, [pc, #200]	; (800c8b8 <__ieee754_pow+0x778>)
 800c7ee:	4413      	add	r3, r2
 800c7f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	460f      	mov	r7, r1
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	465b      	mov	r3, fp
 800c7fc:	ec51 0b18 	vmov	r0, r1, d8
 800c800:	f7f3 fd4c 	bl	800029c <__adddf3>
 800c804:	4642      	mov	r2, r8
 800c806:	464b      	mov	r3, r9
 800c808:	f7f3 fd48 	bl	800029c <__adddf3>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	f7f3 fd44 	bl	800029c <__adddf3>
 800c814:	2000      	movs	r0, #0
 800c816:	4632      	mov	r2, r6
 800c818:	463b      	mov	r3, r7
 800c81a:	4604      	mov	r4, r0
 800c81c:	460d      	mov	r5, r1
 800c81e:	f7f3 fd3b 	bl	8000298 <__aeabi_dsub>
 800c822:	4642      	mov	r2, r8
 800c824:	464b      	mov	r3, r9
 800c826:	f7f3 fd37 	bl	8000298 <__aeabi_dsub>
 800c82a:	ec53 2b18 	vmov	r2, r3, d8
 800c82e:	f7f3 fd33 	bl	8000298 <__aeabi_dsub>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4650      	mov	r0, sl
 800c838:	4659      	mov	r1, fp
 800c83a:	e610      	b.n	800c45e <__ieee754_pow+0x31e>
 800c83c:	2401      	movs	r4, #1
 800c83e:	e6a1      	b.n	800c584 <__ieee754_pow+0x444>
 800c840:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c890 <__ieee754_pow+0x750>
 800c844:	e617      	b.n	800c476 <__ieee754_pow+0x336>
 800c846:	bf00      	nop
 800c848:	4a454eef 	.word	0x4a454eef
 800c84c:	3fca7e28 	.word	0x3fca7e28
 800c850:	93c9db65 	.word	0x93c9db65
 800c854:	3fcd864a 	.word	0x3fcd864a
 800c858:	a91d4101 	.word	0xa91d4101
 800c85c:	3fd17460 	.word	0x3fd17460
 800c860:	518f264d 	.word	0x518f264d
 800c864:	3fd55555 	.word	0x3fd55555
 800c868:	db6fabff 	.word	0xdb6fabff
 800c86c:	3fdb6db6 	.word	0x3fdb6db6
 800c870:	33333303 	.word	0x33333303
 800c874:	3fe33333 	.word	0x3fe33333
 800c878:	e0000000 	.word	0xe0000000
 800c87c:	3feec709 	.word	0x3feec709
 800c880:	dc3a03fd 	.word	0xdc3a03fd
 800c884:	3feec709 	.word	0x3feec709
 800c888:	145b01f5 	.word	0x145b01f5
 800c88c:	be3e2fe0 	.word	0xbe3e2fe0
 800c890:	00000000 	.word	0x00000000
 800c894:	3ff00000 	.word	0x3ff00000
 800c898:	7ff00000 	.word	0x7ff00000
 800c89c:	43400000 	.word	0x43400000
 800c8a0:	0003988e 	.word	0x0003988e
 800c8a4:	000bb679 	.word	0x000bb679
 800c8a8:	0800d4b8 	.word	0x0800d4b8
 800c8ac:	3ff00000 	.word	0x3ff00000
 800c8b0:	40080000 	.word	0x40080000
 800c8b4:	0800d4d8 	.word	0x0800d4d8
 800c8b8:	0800d4c8 	.word	0x0800d4c8
 800c8bc:	a3b3      	add	r3, pc, #716	; (adr r3, 800cb8c <__ieee754_pow+0xa4c>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f7f3 fce9 	bl	800029c <__adddf3>
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	ec41 0b1a 	vmov	d10, r0, r1
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	f7f3 fcdf 	bl	8000298 <__aeabi_dsub>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	ec51 0b1a 	vmov	r0, r1, d10
 800c8e2:	f7f4 f921 	bl	8000b28 <__aeabi_dcmpgt>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f47f ae04 	bne.w	800c4f4 <__ieee754_pow+0x3b4>
 800c8ec:	4aa2      	ldr	r2, [pc, #648]	; (800cb78 <__ieee754_pow+0xa38>)
 800c8ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	f340 8107 	ble.w	800cb06 <__ieee754_pow+0x9c6>
 800c8f8:	151b      	asrs	r3, r3, #20
 800c8fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c8fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c902:	fa4a fa03 	asr.w	sl, sl, r3
 800c906:	44da      	add	sl, fp
 800c908:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c90c:	489b      	ldr	r0, [pc, #620]	; (800cb7c <__ieee754_pow+0xa3c>)
 800c90e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c912:	4108      	asrs	r0, r1
 800c914:	ea00 030a 	and.w	r3, r0, sl
 800c918:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c91c:	f1c1 0114 	rsb	r1, r1, #20
 800c920:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c924:	fa4a fa01 	asr.w	sl, sl, r1
 800c928:	f1bb 0f00 	cmp.w	fp, #0
 800c92c:	f04f 0200 	mov.w	r2, #0
 800c930:	4620      	mov	r0, r4
 800c932:	4629      	mov	r1, r5
 800c934:	bfb8      	it	lt
 800c936:	f1ca 0a00 	rsblt	sl, sl, #0
 800c93a:	f7f3 fcad 	bl	8000298 <__aeabi_dsub>
 800c93e:	ec41 0b19 	vmov	d9, r0, r1
 800c942:	4642      	mov	r2, r8
 800c944:	464b      	mov	r3, r9
 800c946:	ec51 0b19 	vmov	r0, r1, d9
 800c94a:	f7f3 fca7 	bl	800029c <__adddf3>
 800c94e:	a37a      	add	r3, pc, #488	; (adr r3, 800cb38 <__ieee754_pow+0x9f8>)
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	2000      	movs	r0, #0
 800c956:	4604      	mov	r4, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	f7f3 fe55 	bl	8000608 <__aeabi_dmul>
 800c95e:	ec53 2b19 	vmov	r2, r3, d9
 800c962:	4606      	mov	r6, r0
 800c964:	460f      	mov	r7, r1
 800c966:	4620      	mov	r0, r4
 800c968:	4629      	mov	r1, r5
 800c96a:	f7f3 fc95 	bl	8000298 <__aeabi_dsub>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f3 fc8f 	bl	8000298 <__aeabi_dsub>
 800c97a:	a371      	add	r3, pc, #452	; (adr r3, 800cb40 <__ieee754_pow+0xa00>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fe42 	bl	8000608 <__aeabi_dmul>
 800c984:	a370      	add	r3, pc, #448	; (adr r3, 800cb48 <__ieee754_pow+0xa08>)
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	4680      	mov	r8, r0
 800c98c:	4689      	mov	r9, r1
 800c98e:	4620      	mov	r0, r4
 800c990:	4629      	mov	r1, r5
 800c992:	f7f3 fe39 	bl	8000608 <__aeabi_dmul>
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	4640      	mov	r0, r8
 800c99c:	4649      	mov	r1, r9
 800c99e:	f7f3 fc7d 	bl	800029c <__adddf3>
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	460d      	mov	r5, r1
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	f7f3 fc75 	bl	800029c <__adddf3>
 800c9b2:	4632      	mov	r2, r6
 800c9b4:	463b      	mov	r3, r7
 800c9b6:	4680      	mov	r8, r0
 800c9b8:	4689      	mov	r9, r1
 800c9ba:	f7f3 fc6d 	bl	8000298 <__aeabi_dsub>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7f3 fc67 	bl	8000298 <__aeabi_dsub>
 800c9ca:	4642      	mov	r2, r8
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f3 fe17 	bl	8000608 <__aeabi_dmul>
 800c9da:	a35d      	add	r3, pc, #372	; (adr r3, 800cb50 <__ieee754_pow+0xa10>)
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	f7f3 fe10 	bl	8000608 <__aeabi_dmul>
 800c9e8:	a35b      	add	r3, pc, #364	; (adr r3, 800cb58 <__ieee754_pow+0xa18>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	f7f3 fc53 	bl	8000298 <__aeabi_dsub>
 800c9f2:	4622      	mov	r2, r4
 800c9f4:	462b      	mov	r3, r5
 800c9f6:	f7f3 fe07 	bl	8000608 <__aeabi_dmul>
 800c9fa:	a359      	add	r3, pc, #356	; (adr r3, 800cb60 <__ieee754_pow+0xa20>)
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	f7f3 fc4c 	bl	800029c <__adddf3>
 800ca04:	4622      	mov	r2, r4
 800ca06:	462b      	mov	r3, r5
 800ca08:	f7f3 fdfe 	bl	8000608 <__aeabi_dmul>
 800ca0c:	a356      	add	r3, pc, #344	; (adr r3, 800cb68 <__ieee754_pow+0xa28>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	f7f3 fc41 	bl	8000298 <__aeabi_dsub>
 800ca16:	4622      	mov	r2, r4
 800ca18:	462b      	mov	r3, r5
 800ca1a:	f7f3 fdf5 	bl	8000608 <__aeabi_dmul>
 800ca1e:	a354      	add	r3, pc, #336	; (adr r3, 800cb70 <__ieee754_pow+0xa30>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fc3a 	bl	800029c <__adddf3>
 800ca28:	4622      	mov	r2, r4
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	f7f3 fdec 	bl	8000608 <__aeabi_dmul>
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	4640      	mov	r0, r8
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f3 fc2e 	bl	8000298 <__aeabi_dsub>
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4640      	mov	r0, r8
 800ca46:	4649      	mov	r1, r9
 800ca48:	f7f3 fdde 	bl	8000608 <__aeabi_dmul>
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	ec41 0b19 	vmov	d9, r0, r1
 800ca52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca56:	4620      	mov	r0, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	f7f3 fc1d 	bl	8000298 <__aeabi_dsub>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	ec51 0b19 	vmov	r0, r1, d9
 800ca66:	f7f3 fef9 	bl	800085c <__aeabi_ddiv>
 800ca6a:	4632      	mov	r2, r6
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	460d      	mov	r5, r1
 800ca70:	463b      	mov	r3, r7
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f7f3 fdc7 	bl	8000608 <__aeabi_dmul>
 800ca7a:	4632      	mov	r2, r6
 800ca7c:	463b      	mov	r3, r7
 800ca7e:	f7f3 fc0d 	bl	800029c <__adddf3>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f3 fc05 	bl	8000298 <__aeabi_dsub>
 800ca8e:	4642      	mov	r2, r8
 800ca90:	464b      	mov	r3, r9
 800ca92:	f7f3 fc01 	bl	8000298 <__aeabi_dsub>
 800ca96:	460b      	mov	r3, r1
 800ca98:	4602      	mov	r2, r0
 800ca9a:	4939      	ldr	r1, [pc, #228]	; (800cb80 <__ieee754_pow+0xa40>)
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	f7f3 fbfb 	bl	8000298 <__aeabi_dsub>
 800caa2:	ec41 0b10 	vmov	d0, r0, r1
 800caa6:	ee10 3a90 	vmov	r3, s1
 800caaa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800caae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cab2:	da2b      	bge.n	800cb0c <__ieee754_pow+0x9cc>
 800cab4:	4650      	mov	r0, sl
 800cab6:	f000 f877 	bl	800cba8 <scalbn>
 800caba:	ec51 0b10 	vmov	r0, r1, d0
 800cabe:	ec53 2b18 	vmov	r2, r3, d8
 800cac2:	f7ff bbee 	b.w	800c2a2 <__ieee754_pow+0x162>
 800cac6:	4b2f      	ldr	r3, [pc, #188]	; (800cb84 <__ieee754_pow+0xa44>)
 800cac8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cacc:	429e      	cmp	r6, r3
 800cace:	f77f af0d 	ble.w	800c8ec <__ieee754_pow+0x7ac>
 800cad2:	4b2d      	ldr	r3, [pc, #180]	; (800cb88 <__ieee754_pow+0xa48>)
 800cad4:	440b      	add	r3, r1
 800cad6:	4303      	orrs	r3, r0
 800cad8:	d009      	beq.n	800caee <__ieee754_pow+0x9ae>
 800cada:	ec51 0b18 	vmov	r0, r1, d8
 800cade:	2200      	movs	r2, #0
 800cae0:	2300      	movs	r3, #0
 800cae2:	f7f4 f803 	bl	8000aec <__aeabi_dcmplt>
 800cae6:	3800      	subs	r0, #0
 800cae8:	bf18      	it	ne
 800caea:	2001      	movne	r0, #1
 800caec:	e448      	b.n	800c380 <__ieee754_pow+0x240>
 800caee:	4622      	mov	r2, r4
 800caf0:	462b      	mov	r3, r5
 800caf2:	f7f3 fbd1 	bl	8000298 <__aeabi_dsub>
 800caf6:	4642      	mov	r2, r8
 800caf8:	464b      	mov	r3, r9
 800cafa:	f7f4 f80b 	bl	8000b14 <__aeabi_dcmpge>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	f43f aef4 	beq.w	800c8ec <__ieee754_pow+0x7ac>
 800cb04:	e7e9      	b.n	800cada <__ieee754_pow+0x99a>
 800cb06:	f04f 0a00 	mov.w	sl, #0
 800cb0a:	e71a      	b.n	800c942 <__ieee754_pow+0x802>
 800cb0c:	ec51 0b10 	vmov	r0, r1, d0
 800cb10:	4619      	mov	r1, r3
 800cb12:	e7d4      	b.n	800cabe <__ieee754_pow+0x97e>
 800cb14:	491a      	ldr	r1, [pc, #104]	; (800cb80 <__ieee754_pow+0xa40>)
 800cb16:	2000      	movs	r0, #0
 800cb18:	f7ff bb31 	b.w	800c17e <__ieee754_pow+0x3e>
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	2100      	movs	r1, #0
 800cb20:	f7ff bb2d 	b.w	800c17e <__ieee754_pow+0x3e>
 800cb24:	4630      	mov	r0, r6
 800cb26:	4639      	mov	r1, r7
 800cb28:	f7ff bb29 	b.w	800c17e <__ieee754_pow+0x3e>
 800cb2c:	9204      	str	r2, [sp, #16]
 800cb2e:	f7ff bb7b 	b.w	800c228 <__ieee754_pow+0xe8>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f7ff bb65 	b.w	800c202 <__ieee754_pow+0xc2>
 800cb38:	00000000 	.word	0x00000000
 800cb3c:	3fe62e43 	.word	0x3fe62e43
 800cb40:	fefa39ef 	.word	0xfefa39ef
 800cb44:	3fe62e42 	.word	0x3fe62e42
 800cb48:	0ca86c39 	.word	0x0ca86c39
 800cb4c:	be205c61 	.word	0xbe205c61
 800cb50:	72bea4d0 	.word	0x72bea4d0
 800cb54:	3e663769 	.word	0x3e663769
 800cb58:	c5d26bf1 	.word	0xc5d26bf1
 800cb5c:	3ebbbd41 	.word	0x3ebbbd41
 800cb60:	af25de2c 	.word	0xaf25de2c
 800cb64:	3f11566a 	.word	0x3f11566a
 800cb68:	16bebd93 	.word	0x16bebd93
 800cb6c:	3f66c16c 	.word	0x3f66c16c
 800cb70:	5555553e 	.word	0x5555553e
 800cb74:	3fc55555 	.word	0x3fc55555
 800cb78:	3fe00000 	.word	0x3fe00000
 800cb7c:	fff00000 	.word	0xfff00000
 800cb80:	3ff00000 	.word	0x3ff00000
 800cb84:	4090cbff 	.word	0x4090cbff
 800cb88:	3f6f3400 	.word	0x3f6f3400
 800cb8c:	652b82fe 	.word	0x652b82fe
 800cb90:	3c971547 	.word	0x3c971547

0800cb94 <fabs>:
 800cb94:	ec51 0b10 	vmov	r0, r1, d0
 800cb98:	ee10 2a10 	vmov	r2, s0
 800cb9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cba0:	ec43 2b10 	vmov	d0, r2, r3
 800cba4:	4770      	bx	lr
	...

0800cba8 <scalbn>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	ec55 4b10 	vmov	r4, r5, d0
 800cbae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	462b      	mov	r3, r5
 800cbb6:	b999      	cbnz	r1, 800cbe0 <scalbn+0x38>
 800cbb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cbbc:	4323      	orrs	r3, r4
 800cbbe:	d03f      	beq.n	800cc40 <scalbn+0x98>
 800cbc0:	4b35      	ldr	r3, [pc, #212]	; (800cc98 <scalbn+0xf0>)
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	ee10 0a10 	vmov	r0, s0
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f7f3 fd1d 	bl	8000608 <__aeabi_dmul>
 800cbce:	4b33      	ldr	r3, [pc, #204]	; (800cc9c <scalbn+0xf4>)
 800cbd0:	429e      	cmp	r6, r3
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	460d      	mov	r5, r1
 800cbd6:	da10      	bge.n	800cbfa <scalbn+0x52>
 800cbd8:	a327      	add	r3, pc, #156	; (adr r3, 800cc78 <scalbn+0xd0>)
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	e01f      	b.n	800cc20 <scalbn+0x78>
 800cbe0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cbe4:	4291      	cmp	r1, r2
 800cbe6:	d10c      	bne.n	800cc02 <scalbn+0x5a>
 800cbe8:	ee10 2a10 	vmov	r2, s0
 800cbec:	4620      	mov	r0, r4
 800cbee:	4629      	mov	r1, r5
 800cbf0:	f7f3 fb54 	bl	800029c <__adddf3>
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	460d      	mov	r5, r1
 800cbf8:	e022      	b.n	800cc40 <scalbn+0x98>
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cc00:	3936      	subs	r1, #54	; 0x36
 800cc02:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cc06:	4296      	cmp	r6, r2
 800cc08:	dd0d      	ble.n	800cc26 <scalbn+0x7e>
 800cc0a:	2d00      	cmp	r5, #0
 800cc0c:	a11c      	add	r1, pc, #112	; (adr r1, 800cc80 <scalbn+0xd8>)
 800cc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc12:	da02      	bge.n	800cc1a <scalbn+0x72>
 800cc14:	a11c      	add	r1, pc, #112	; (adr r1, 800cc88 <scalbn+0xe0>)
 800cc16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc1a:	a319      	add	r3, pc, #100	; (adr r3, 800cc80 <scalbn+0xd8>)
 800cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc20:	f7f3 fcf2 	bl	8000608 <__aeabi_dmul>
 800cc24:	e7e6      	b.n	800cbf4 <scalbn+0x4c>
 800cc26:	1872      	adds	r2, r6, r1
 800cc28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc2c:	428a      	cmp	r2, r1
 800cc2e:	dcec      	bgt.n	800cc0a <scalbn+0x62>
 800cc30:	2a00      	cmp	r2, #0
 800cc32:	dd08      	ble.n	800cc46 <scalbn+0x9e>
 800cc34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc40:	ec45 4b10 	vmov	d0, r4, r5
 800cc44:	bd70      	pop	{r4, r5, r6, pc}
 800cc46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc4a:	da08      	bge.n	800cc5e <scalbn+0xb6>
 800cc4c:	2d00      	cmp	r5, #0
 800cc4e:	a10a      	add	r1, pc, #40	; (adr r1, 800cc78 <scalbn+0xd0>)
 800cc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc54:	dac0      	bge.n	800cbd8 <scalbn+0x30>
 800cc56:	a10e      	add	r1, pc, #56	; (adr r1, 800cc90 <scalbn+0xe8>)
 800cc58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc5c:	e7bc      	b.n	800cbd8 <scalbn+0x30>
 800cc5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc62:	3236      	adds	r2, #54	; 0x36
 800cc64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	4b0c      	ldr	r3, [pc, #48]	; (800cca0 <scalbn+0xf8>)
 800cc70:	2200      	movs	r2, #0
 800cc72:	e7d5      	b.n	800cc20 <scalbn+0x78>
 800cc74:	f3af 8000 	nop.w
 800cc78:	c2f8f359 	.word	0xc2f8f359
 800cc7c:	01a56e1f 	.word	0x01a56e1f
 800cc80:	8800759c 	.word	0x8800759c
 800cc84:	7e37e43c 	.word	0x7e37e43c
 800cc88:	8800759c 	.word	0x8800759c
 800cc8c:	fe37e43c 	.word	0xfe37e43c
 800cc90:	c2f8f359 	.word	0xc2f8f359
 800cc94:	81a56e1f 	.word	0x81a56e1f
 800cc98:	43500000 	.word	0x43500000
 800cc9c:	ffff3cb0 	.word	0xffff3cb0
 800cca0:	3c900000 	.word	0x3c900000

0800cca4 <with_errno>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	4616      	mov	r6, r2
 800ccac:	f7fb fde4 	bl	8008878 <__errno>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	6006      	str	r6, [r0, #0]
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}

0800ccb8 <xflow>:
 800ccb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccba:	4614      	mov	r4, r2
 800ccbc:	461d      	mov	r5, r3
 800ccbe:	b108      	cbz	r0, 800ccc4 <xflow+0xc>
 800ccc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ccc4:	e9cd 2300 	strd	r2, r3, [sp]
 800ccc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cccc:	4620      	mov	r0, r4
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f7f3 fc9a 	bl	8000608 <__aeabi_dmul>
 800ccd4:	2222      	movs	r2, #34	; 0x22
 800ccd6:	b003      	add	sp, #12
 800ccd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccdc:	f7ff bfe2 	b.w	800cca4 <with_errno>

0800cce0 <__math_uflow>:
 800cce0:	b508      	push	{r3, lr}
 800cce2:	2200      	movs	r2, #0
 800cce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cce8:	f7ff ffe6 	bl	800ccb8 <xflow>
 800ccec:	ec41 0b10 	vmov	d0, r0, r1
 800ccf0:	bd08      	pop	{r3, pc}

0800ccf2 <__math_oflow>:
 800ccf2:	b508      	push	{r3, lr}
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ccfa:	f7ff ffdd 	bl	800ccb8 <xflow>
 800ccfe:	ec41 0b10 	vmov	d0, r0, r1
 800cd02:	bd08      	pop	{r3, pc}

0800cd04 <__ieee754_sqrt>:
 800cd04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd08:	ec55 4b10 	vmov	r4, r5, d0
 800cd0c:	4e67      	ldr	r6, [pc, #412]	; (800ceac <__ieee754_sqrt+0x1a8>)
 800cd0e:	43ae      	bics	r6, r5
 800cd10:	ee10 0a10 	vmov	r0, s0
 800cd14:	ee10 2a10 	vmov	r2, s0
 800cd18:	4629      	mov	r1, r5
 800cd1a:	462b      	mov	r3, r5
 800cd1c:	d10d      	bne.n	800cd3a <__ieee754_sqrt+0x36>
 800cd1e:	f7f3 fc73 	bl	8000608 <__aeabi_dmul>
 800cd22:	4602      	mov	r2, r0
 800cd24:	460b      	mov	r3, r1
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 fab7 	bl	800029c <__adddf3>
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	ec45 4b10 	vmov	d0, r4, r5
 800cd36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd3a:	2d00      	cmp	r5, #0
 800cd3c:	dc0b      	bgt.n	800cd56 <__ieee754_sqrt+0x52>
 800cd3e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd42:	4326      	orrs	r6, r4
 800cd44:	d0f5      	beq.n	800cd32 <__ieee754_sqrt+0x2e>
 800cd46:	b135      	cbz	r5, 800cd56 <__ieee754_sqrt+0x52>
 800cd48:	f7f3 faa6 	bl	8000298 <__aeabi_dsub>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	f7f3 fd84 	bl	800085c <__aeabi_ddiv>
 800cd54:	e7eb      	b.n	800cd2e <__ieee754_sqrt+0x2a>
 800cd56:	1509      	asrs	r1, r1, #20
 800cd58:	f000 808d 	beq.w	800ce76 <__ieee754_sqrt+0x172>
 800cd5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd60:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cd64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd68:	07c9      	lsls	r1, r1, #31
 800cd6a:	bf5c      	itt	pl
 800cd6c:	005b      	lslpl	r3, r3, #1
 800cd6e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cd72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd76:	bf58      	it	pl
 800cd78:	0052      	lslpl	r2, r2, #1
 800cd7a:	2500      	movs	r5, #0
 800cd7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cd80:	1076      	asrs	r6, r6, #1
 800cd82:	0052      	lsls	r2, r2, #1
 800cd84:	f04f 0e16 	mov.w	lr, #22
 800cd88:	46ac      	mov	ip, r5
 800cd8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd8e:	eb0c 0001 	add.w	r0, ip, r1
 800cd92:	4298      	cmp	r0, r3
 800cd94:	bfde      	ittt	le
 800cd96:	1a1b      	suble	r3, r3, r0
 800cd98:	eb00 0c01 	addle.w	ip, r0, r1
 800cd9c:	186d      	addle	r5, r5, r1
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	f1be 0e01 	subs.w	lr, lr, #1
 800cda4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cda8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cdac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cdb0:	d1ed      	bne.n	800cd8e <__ieee754_sqrt+0x8a>
 800cdb2:	4674      	mov	r4, lr
 800cdb4:	2720      	movs	r7, #32
 800cdb6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cdba:	4563      	cmp	r3, ip
 800cdbc:	eb01 000e 	add.w	r0, r1, lr
 800cdc0:	dc02      	bgt.n	800cdc8 <__ieee754_sqrt+0xc4>
 800cdc2:	d113      	bne.n	800cdec <__ieee754_sqrt+0xe8>
 800cdc4:	4290      	cmp	r0, r2
 800cdc6:	d811      	bhi.n	800cdec <__ieee754_sqrt+0xe8>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	eb00 0e01 	add.w	lr, r0, r1
 800cdce:	da57      	bge.n	800ce80 <__ieee754_sqrt+0x17c>
 800cdd0:	f1be 0f00 	cmp.w	lr, #0
 800cdd4:	db54      	blt.n	800ce80 <__ieee754_sqrt+0x17c>
 800cdd6:	f10c 0801 	add.w	r8, ip, #1
 800cdda:	eba3 030c 	sub.w	r3, r3, ip
 800cdde:	4290      	cmp	r0, r2
 800cde0:	bf88      	it	hi
 800cde2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cde6:	1a12      	subs	r2, r2, r0
 800cde8:	440c      	add	r4, r1
 800cdea:	46c4      	mov	ip, r8
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	3f01      	subs	r7, #1
 800cdf0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cdf4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cdf8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cdfc:	d1dd      	bne.n	800cdba <__ieee754_sqrt+0xb6>
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	d01b      	beq.n	800ce3a <__ieee754_sqrt+0x136>
 800ce02:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ceb0 <__ieee754_sqrt+0x1ac>
 800ce06:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ceb4 <__ieee754_sqrt+0x1b0>
 800ce0a:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce0e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce12:	f7f3 fa41 	bl	8000298 <__aeabi_dsub>
 800ce16:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	4640      	mov	r0, r8
 800ce20:	4649      	mov	r1, r9
 800ce22:	f7f3 fe6d 	bl	8000b00 <__aeabi_dcmple>
 800ce26:	b140      	cbz	r0, 800ce3a <__ieee754_sqrt+0x136>
 800ce28:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ce2c:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce30:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce34:	d126      	bne.n	800ce84 <__ieee754_sqrt+0x180>
 800ce36:	3501      	adds	r5, #1
 800ce38:	463c      	mov	r4, r7
 800ce3a:	106a      	asrs	r2, r5, #1
 800ce3c:	0863      	lsrs	r3, r4, #1
 800ce3e:	07e9      	lsls	r1, r5, #31
 800ce40:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ce44:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ce48:	bf48      	it	mi
 800ce4a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ce4e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ce52:	461c      	mov	r4, r3
 800ce54:	e76d      	b.n	800cd32 <__ieee754_sqrt+0x2e>
 800ce56:	0ad3      	lsrs	r3, r2, #11
 800ce58:	3815      	subs	r0, #21
 800ce5a:	0552      	lsls	r2, r2, #21
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d0fa      	beq.n	800ce56 <__ieee754_sqrt+0x152>
 800ce60:	02dc      	lsls	r4, r3, #11
 800ce62:	d50a      	bpl.n	800ce7a <__ieee754_sqrt+0x176>
 800ce64:	f1c1 0420 	rsb	r4, r1, #32
 800ce68:	fa22 f404 	lsr.w	r4, r2, r4
 800ce6c:	1e4d      	subs	r5, r1, #1
 800ce6e:	408a      	lsls	r2, r1
 800ce70:	4323      	orrs	r3, r4
 800ce72:	1b41      	subs	r1, r0, r5
 800ce74:	e772      	b.n	800cd5c <__ieee754_sqrt+0x58>
 800ce76:	4608      	mov	r0, r1
 800ce78:	e7f0      	b.n	800ce5c <__ieee754_sqrt+0x158>
 800ce7a:	005b      	lsls	r3, r3, #1
 800ce7c:	3101      	adds	r1, #1
 800ce7e:	e7ef      	b.n	800ce60 <__ieee754_sqrt+0x15c>
 800ce80:	46e0      	mov	r8, ip
 800ce82:	e7aa      	b.n	800cdda <__ieee754_sqrt+0xd6>
 800ce84:	f7f3 fa0a 	bl	800029c <__adddf3>
 800ce88:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4640      	mov	r0, r8
 800ce92:	4649      	mov	r1, r9
 800ce94:	f7f3 fe2a 	bl	8000aec <__aeabi_dcmplt>
 800ce98:	b120      	cbz	r0, 800cea4 <__ieee754_sqrt+0x1a0>
 800ce9a:	1ca0      	adds	r0, r4, #2
 800ce9c:	bf08      	it	eq
 800ce9e:	3501      	addeq	r5, #1
 800cea0:	3402      	adds	r4, #2
 800cea2:	e7ca      	b.n	800ce3a <__ieee754_sqrt+0x136>
 800cea4:	3401      	adds	r4, #1
 800cea6:	f024 0401 	bic.w	r4, r4, #1
 800ceaa:	e7c6      	b.n	800ce3a <__ieee754_sqrt+0x136>
 800ceac:	7ff00000 	.word	0x7ff00000
 800ceb0:	200001e0 	.word	0x200001e0
 800ceb4:	200001e8 	.word	0x200001e8

0800ceb8 <_init>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	bf00      	nop
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr

0800cec4 <_fini>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr
