
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08008dc0  08008dc0  00018dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe0  08008fe0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008fe8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004450  20000078  08009060  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044c8  08009060  000244c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ac8  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ede  00000000  00000000  00034bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00037a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc4  00000000  00000000  00038ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018983  00000000  00000000  00039e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017801  00000000  00000000  000527ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099c6e  00000000  00000000  00069ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f0c  00000000  00000000  00103c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00109b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008da8 	.word	0x08008da8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008da8 	.word	0x08008da8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bb 	b.w	8000f40 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <DWT_Delay_Init+0x58>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <DWT_Delay_Init+0x58>)
 8000f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f52:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <DWT_Delay_Init+0x58>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <DWT_Delay_Init+0x58>)
 8000f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <DWT_Delay_Init+0x5c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <DWT_Delay_Init+0x5c>)
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <DWT_Delay_Init+0x5c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <DWT_Delay_Init+0x5c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <DWT_Delay_Init+0x5c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f7e:	bf00      	nop
     __ASM volatile ("NOP");
 8000f80:	bf00      	nop
  __ASM volatile ("NOP");
 8000f82:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <DWT_Delay_Init+0x5c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e000      	b.n	8000f92 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f90:	2301      	movs	r3, #1
  }
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000edf0 	.word	0xe000edf0
 8000fa0:	e0001000 	.word	0xe0001000

08000fa4 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <delay+0x40>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fb2:	f003 ff1d 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <delay+0x44>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0c9b      	lsrs	r3, r3, #18
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000fc8:	bf00      	nop
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <delay+0x40>)
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	1ad2      	subs	r2, r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3f8      	bcc.n	8000fca <delay+0x26>
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e0001000 	.word	0xe0001000
 8000fe8:	431bde83 	.word	0x431bde83

08000fec <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f002 f8aa 	bl	8003174 <HAL_GPIO_Init>
}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f002 f88c 	bl	8003174 <HAL_GPIO_Init>
}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <DHT_Start>:


void DHT_Start (void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001068:	f7ff ff6c 	bl	8000f44 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 800106c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001070:	480e      	ldr	r0, [pc, #56]	; (80010ac <DHT_Start+0x48>)
 8001072:	f7ff ffbb 	bl	8000fec <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <DHT_Start+0x48>)
 800107e:	f002 fa15 	bl	80034ac <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 8001082:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001086:	f7ff ff8d 	bl	8000fa4 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <DHT_Start+0x48>)
 8001092:	f002 fa0b 	bl	80034ac <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001096:	2014      	movs	r0, #20
 8001098:	f7ff ff84 	bl	8000fa4 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DHT_Start+0x48>)
 80010a2:	f7ff ffc1 	bl	8001028 <Set_Pin_Input>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020000 	.word	0x40020000

080010b0 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80010ba:	2028      	movs	r0, #40	; 0x28
 80010bc:	f7ff ff72 	bl	8000fa4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <DHT_Check_Response+0x5c>)
 80010c6:	f002 f9d9 	bl	800347c <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10f      	bne.n	80010f0 <DHT_Check_Response+0x40>
	{
		delay (80);
 80010d0:	2050      	movs	r0, #80	; 0x50
 80010d2:	f7ff ff67 	bl	8000fa4 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <DHT_Check_Response+0x5c>)
 80010dc:	f002 f9ce 	bl	800347c <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <DHT_Check_Response+0x3c>
 80010e6:	2301      	movs	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e001      	b.n	80010f0 <DHT_Check_Response+0x40>
		else Response = -1;
 80010ec:	23ff      	movs	r3, #255	; 0xff
 80010ee:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80010f0:	bf00      	nop
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <DHT_Check_Response+0x5c>)
 80010f8:	f002 f9c0 	bl	800347c <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f7      	bne.n	80010f2 <DHT_Check_Response+0x42>

	return Response;
 8001102:	79fb      	ldrb	r3, [r7, #7]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020000 	.word	0x40020000

08001110 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001116:	2300      	movs	r3, #0
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	e03a      	b.n	8001192 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 800111c:	bf00      	nop
 800111e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <DHT_Read+0x94>)
 8001124:	f002 f9aa 	bl	800347c <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f7      	beq.n	800111e <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f7ff ff38 	bl	8000fa4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	481a      	ldr	r0, [pc, #104]	; (80011a4 <DHT_Read+0x94>)
 800113a:	f002 f99f 	bl	800347c <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10e      	bne.n	8001162 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2201      	movs	r2, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	b25b      	sxtb	r3, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	b25a      	sxtb	r2, r3
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	4013      	ands	r3, r2
 800115c:	b25b      	sxtb	r3, r3
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	e00b      	b.n	800117a <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	f1c3 0307 	rsb	r3, r3, #7
 8001168:	2201      	movs	r2, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800117a:	bf00      	nop
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <DHT_Read+0x94>)
 8001182:	f002 f97b 	bl	800347c <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f7      	bne.n	800117c <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	3301      	adds	r3, #1
 8001190:	71bb      	strb	r3, [r7, #6]
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b07      	cmp	r3, #7
 8001196:	d9c1      	bls.n	800111c <DHT_Read+0xc>
	}
	return i;
 8001198:	79fb      	ldrb	r3, [r7, #7]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020000 	.word	0x40020000

080011a8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80011b0:	f7ff ff58 	bl	8001064 <DHT_Start>
	Presence = DHT_Check_Response ();
 80011b4:	f7ff ff7c 	bl	80010b0 <DHT_Check_Response>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <DHT_GetData+0xb4>)
 80011be:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80011c0:	f7ff ffa6 	bl	8001110 <DHT_Read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <DHT_GetData+0xb8>)
 80011ca:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80011cc:	f7ff ffa0 	bl	8001110 <DHT_Read>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <DHT_GetData+0xbc>)
 80011d6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80011d8:	f7ff ff9a 	bl	8001110 <DHT_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <DHT_GetData+0xc0>)
 80011e2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80011e4:	f7ff ff94 	bl	8001110 <DHT_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <DHT_GetData+0xc4>)
 80011ee:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80011f0:	f7ff ff8e 	bl	8001110 <DHT_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <DHT_GetData+0xc8>)
 80011fa:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <DHT_GetData+0xc8>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <DHT_GetData+0xb8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <DHT_GetData+0xbc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <DHT_GetData+0xc0>)
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <DHT_GetData+0xc4>)
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	4413      	add	r3, r2
 800121a:	4299      	cmp	r1, r3
 800121c:	d119      	bne.n	8001252 <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <DHT_GetData+0xc0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <DHT_GetData+0xc4>)
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	4313      	orrs	r3, r2
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <DHT_GetData+0xb8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <DHT_GetData+0xbc>)
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	4313      	orrs	r3, r2
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000009a 	.word	0x2000009a
 8001260:	20000094 	.word	0x20000094
 8001264:	20000095 	.word	0x20000095
 8001268:	20000096 	.word	0x20000096
 800126c:	20000097 	.word	0x20000097
 8001270:	20000098 	.word	0x20000098

08001274 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2203      	movs	r2, #3
 8001280:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	715a      	strb	r2, [r3, #5]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af04      	add	r7, sp, #16
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	460b      	mov	r3, r1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	8af9      	ldrh	r1, [r7, #22]
 80012cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2302      	movs	r3, #2
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	f002 fb3d 	bl	800395c <HAL_I2C_Mem_Read>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10b      	bne.n	8001300 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80012e8:	7d7b      	ldrb	r3, [r7, #21]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	7d3b      	ldrb	r3, [r7, #20]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	801a      	strh	r2, [r3, #0]
		return true;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <read_register16+0x56>
	} else
		return false;
 8001300:	2300      	movs	r3, #0

}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800130a:	b590      	push	{r4, r7, lr}
 800130c:	b08b      	sub	sp, #44	; 0x2c
 800130e:	af04      	add	r7, sp, #16
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	461a      	mov	r2, r3
 8001316:	460b      	mov	r3, r1
 8001318:	72fb      	strb	r3, [r7, #11]
 800131a:	4613      	mov	r3, r2
 800131c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	b29a      	uxth	r2, r3
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	b29b      	uxth	r3, r3
 8001332:	8af9      	ldrh	r1, [r7, #22]
 8001334:	f241 3488 	movw	r4, #5000	; 0x1388
 8001338:	9402      	str	r4, [sp, #8]
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	f002 fb0b 	bl	800395c <HAL_I2C_Mem_Read>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <read_data+0x46>
		return 0;
 800134c:	2300      	movs	r3, #0
 800134e:	e000      	b.n	8001352 <read_data+0x48>
	else
		return 1;
 8001350:	2301      	movs	r3, #1

}
 8001352:	4618      	mov	r0, r3
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}

0800135a <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	461a      	mov	r2, r3
 8001366:	2188      	movs	r1, #136	; 0x88
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff9f 	bl	80012ac <read_register16>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d06f      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	461a      	mov	r2, r3
 800137a:	218a      	movs	r1, #138	; 0x8a
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff95 	bl	80012ac <read_register16>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d065      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3304      	adds	r3, #4
 800138c:	461a      	mov	r2, r3
 800138e:	218c      	movs	r1, #140	; 0x8c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff8b 	bl	80012ac <read_register16>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d05b      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3306      	adds	r3, #6
 80013a0:	461a      	mov	r2, r3
 80013a2:	218e      	movs	r1, #142	; 0x8e
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff81 	bl	80012ac <read_register16>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d051      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3308      	adds	r3, #8
 80013b4:	461a      	mov	r2, r3
 80013b6:	2190      	movs	r1, #144	; 0x90
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff77 	bl	80012ac <read_register16>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d047      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	330a      	adds	r3, #10
 80013c8:	461a      	mov	r2, r3
 80013ca:	2192      	movs	r1, #146	; 0x92
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff6d 	bl	80012ac <read_register16>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d03d      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	330c      	adds	r3, #12
 80013dc:	461a      	mov	r2, r3
 80013de:	2194      	movs	r1, #148	; 0x94
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff63 	bl	80012ac <read_register16>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d033      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	330e      	adds	r3, #14
 80013f0:	461a      	mov	r2, r3
 80013f2:	2196      	movs	r1, #150	; 0x96
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff59 	bl	80012ac <read_register16>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d029      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3310      	adds	r3, #16
 8001404:	461a      	mov	r2, r3
 8001406:	2198      	movs	r1, #152	; 0x98
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff4f 	bl	80012ac <read_register16>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01f      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3312      	adds	r3, #18
 8001418:	461a      	mov	r2, r3
 800141a:	219a      	movs	r1, #154	; 0x9a
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff45 	bl	80012ac <read_register16>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3314      	adds	r3, #20
 800142c:	461a      	mov	r2, r3
 800142e:	219c      	movs	r1, #156	; 0x9c
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff3b 	bl	80012ac <read_register16>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001440:	461a      	mov	r2, r3
 8001442:	219e      	movs	r1, #158	; 0x9e
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff31 	bl	80012ac <read_register16>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <read_calibration_data+0xfa>

		return true;
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <read_calibration_data+0xfc>
	}

	return false;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f103 0218 	add.w	r2, r3, #24
 800146c:	2301      	movs	r3, #1
 800146e:	21a1      	movs	r1, #161	; 0xa1
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff4a 	bl	800130a <read_data>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d14b      	bne.n	8001514 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	331a      	adds	r3, #26
 8001480:	461a      	mov	r2, r3
 8001482:	21e1      	movs	r1, #225	; 0xe1
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff11 	bl	80012ac <read_register16>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d041      	beq.n	8001514 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f103 021c 	add.w	r2, r3, #28
 8001496:	2301      	movs	r3, #1
 8001498:	21e3      	movs	r1, #227	; 0xe3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff35 	bl	800130a <read_data>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d136      	bne.n	8001514 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80014a6:	f107 030e 	add.w	r3, r7, #14
 80014aa:	461a      	mov	r2, r3
 80014ac:	21e4      	movs	r1, #228	; 0xe4
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fefc 	bl	80012ac <read_register16>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d02c      	beq.n	8001514 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	461a      	mov	r2, r3
 80014c0:	21e5      	movs	r1, #229	; 0xe5
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fef2 	bl	80012ac <read_register16>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d022      	beq.n	8001514 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80014d4:	2301      	movs	r3, #1
 80014d6:	21e7      	movs	r1, #231	; 0xe7
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff16 	bl	800130a <read_data>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d117      	bne.n	8001514 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	121b      	asrs	r3, r3, #8
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21a      	sxth	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001504:	89bb      	ldrh	r3, [r7, #12]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	b29b      	uxth	r3, r3
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	841a      	strh	r2, [r3, #32]

		return true;
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800151e:	b580      	push	{r7, lr}
 8001520:	b088      	sub	sp, #32
 8001522:	af04      	add	r7, sp, #16
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
 800152a:	4613      	mov	r3, r2
 800152c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	b29a      	uxth	r2, r3
 800153e:	89f9      	ldrh	r1, [r7, #14]
 8001540:	f242 7310 	movw	r3, #10000	; 0x2710
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2301      	movs	r3, #1
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	f002 f90a 	bl	8003768 <HAL_I2C_Mem_Write>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <write_register8+0x40>
		return false;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <write_register8+0x42>
	else
		return true;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001576:	2b76      	cmp	r3, #118	; 0x76
 8001578:	d005      	beq.n	8001586 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800157e:	2b77      	cmp	r3, #119	; 0x77
 8001580:	d001      	beq.n	8001586 <bmp280_init+0x1e>

		return false;
 8001582:	2300      	movs	r3, #0
 8001584:	e099      	b.n	80016ba <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800158c:	2301      	movs	r3, #1
 800158e:	21d0      	movs	r1, #208	; 0xd0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff feba 	bl	800130a <read_data>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <bmp280_init+0x38>
		return false;
 800159c:	2300      	movs	r3, #0
 800159e:	e08c      	b.n	80016ba <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015a6:	2b58      	cmp	r3, #88	; 0x58
 80015a8:	d006      	beq.n	80015b8 <bmp280_init+0x50>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015b0:	2b60      	cmp	r3, #96	; 0x60
 80015b2:	d001      	beq.n	80015b8 <bmp280_init+0x50>

		return false;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e080      	b.n	80016ba <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80015b8:	22b6      	movs	r2, #182	; 0xb6
 80015ba:	21e0      	movs	r1, #224	; 0xe0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffae 	bl	800151e <write_register8>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <bmp280_init+0x64>
		return false;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e076      	b.n	80016ba <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	2301      	movs	r3, #1
 80015d2:	21f3      	movs	r1, #243	; 0xf3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe98 	bl	800130a <read_data>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f5      	bne.n	80015cc <bmp280_init+0x64>
				&& (status & 1) == 0)
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff feb5 	bl	800135a <read_calibration_data>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d100      	bne.n	80015fe <bmp280_init+0x96>
 80015fc:	e001      	b.n	8001602 <bmp280_init+0x9a>
		return false;
 80015fe:	2300      	movs	r3, #0
 8001600:	e05b      	b.n	80016ba <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001608:	2b60      	cmp	r3, #96	; 0x60
 800160a:	d10a      	bne.n	8001622 <bmp280_init+0xba>
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff26 	bl	800145e <read_hum_calibration_data>
 8001612:	4603      	mov	r3, r0
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <bmp280_init+0xba>
		return false;
 800161e:	2300      	movs	r3, #0
 8001620:	e04b      	b.n	80016ba <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	795b      	ldrb	r3, [r3, #5]
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	b25a      	sxtb	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	b25b      	sxtb	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	461a      	mov	r2, r3
 800163c:	21f5      	movs	r1, #245	; 0xf5
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff6d 	bl	800151e <write_register8>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <bmp280_init+0xe6>
		return false;
 800164a:	2300      	movs	r3, #0
 800164c:	e035      	b.n	80016ba <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	78db      	ldrb	r3, [r3, #3]
 8001660:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001662:	b25a      	sxtb	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b25a      	sxtb	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800167a:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001682:	2b60      	cmp	r3, #96	; 0x60
 8001684:	d10d      	bne.n	80016a2 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800168c:	7b7b      	ldrb	r3, [r7, #13]
 800168e:	461a      	mov	r2, r3
 8001690:	21f2      	movs	r1, #242	; 0xf2
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff43 	bl	800151e <write_register8>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <bmp280_init+0x13a>
			return false;
 800169e:	2300      	movs	r3, #0
 80016a0:	e00b      	b.n	80016ba <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	461a      	mov	r2, r3
 80016a6:	21f4      	movs	r1, #244	; 0xf4
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff38 	bl	800151e <write_register8>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <bmp280_init+0x150>
		return false;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <bmp280_init+0x152>
	}

	return true;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80016c2:	b480      	push	{r7}
 80016c4:	b087      	sub	sp, #28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	10da      	asrs	r2, r3, #3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016e4:	12db      	asrs	r3, r3, #11
 80016e6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	111b      	asrs	r3, r3, #4
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	8812      	ldrh	r2, [r2, #0]
 80016f0:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	1112      	asrs	r2, r2, #4
 80016f6:	68f9      	ldr	r1, [r7, #12]
 80016f8:	8809      	ldrh	r1, [r1, #0]
 80016fa:	1a52      	subs	r2, r2, r1
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001708:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800170c:	139b      	asrs	r3, r3, #14
 800170e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	441a      	add	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3380      	adds	r3, #128	; 0x80
 8001726:	121b      	asrs	r3, r3, #8
}
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001738:	b0cc      	sub	sp, #304	; 0x130
 800173a:	af00      	add	r7, sp, #0
 800173c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001740:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001744:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800174c:	17da      	asrs	r2, r3, #31
 800174e:	461c      	mov	r4, r3
 8001750:	4615      	mov	r5, r2
 8001752:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001756:	f145 3bff 	adc.w	fp, r5, #4294967295
 800175a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800175e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001762:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001766:	fb03 f102 	mul.w	r1, r3, r2
 800176a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800176e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	18ca      	adds	r2, r1, r3
 8001778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800177c:	fba3 8903 	umull	r8, r9, r3, r3
 8001780:	eb02 0309 	add.w	r3, r2, r9
 8001784:	4699      	mov	r9, r3
 8001786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800178a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800178e:	b21b      	sxth	r3, r3
 8001790:	17da      	asrs	r2, r3, #31
 8001792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001796:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800179a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800179e:	4603      	mov	r3, r0
 80017a0:	fb03 f209 	mul.w	r2, r3, r9
 80017a4:	460b      	mov	r3, r1
 80017a6:	fb08 f303 	mul.w	r3, r8, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	4602      	mov	r2, r0
 80017ae:	fba8 1202 	umull	r1, r2, r8, r2
 80017b2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80017b6:	460a      	mov	r2, r1
 80017b8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80017bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80017c0:	4413      	add	r3, r2
 80017c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80017c6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80017ca:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80017ce:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80017d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	17da      	asrs	r2, r3, #31
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80017e2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80017e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017ea:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80017ee:	462a      	mov	r2, r5
 80017f0:	fb02 f203 	mul.w	r2, r2, r3
 80017f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017f8:	4621      	mov	r1, r4
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	441a      	add	r2, r3
 8001800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001804:	4621      	mov	r1, r4
 8001806:	fba3 1301 	umull	r1, r3, r3, r1
 800180a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800180e:	460b      	mov	r3, r1
 8001810:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001818:	18d3      	adds	r3, r2, r3
 800181a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800182a:	462b      	mov	r3, r5
 800182c:	0459      	lsls	r1, r3, #17
 800182e:	4623      	mov	r3, r4
 8001830:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001834:	4623      	mov	r3, r4
 8001836:	0458      	lsls	r0, r3, #17
 8001838:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800183c:	1814      	adds	r4, r2, r0
 800183e:	643c      	str	r4, [r7, #64]	; 0x40
 8001840:	414b      	adcs	r3, r1
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
 8001844:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001848:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800184c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001850:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001854:	b21b      	sxth	r3, r3
 8001856:	17da      	asrs	r2, r3, #31
 8001858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800185c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800186c:	00d9      	lsls	r1, r3, #3
 800186e:	2000      	movs	r0, #0
 8001870:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001874:	1814      	adds	r4, r2, r0
 8001876:	63bc      	str	r4, [r7, #56]	; 0x38
 8001878:	414b      	adcs	r3, r1
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800187c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001880:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001884:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800188c:	fb03 f102 	mul.w	r1, r3, r2
 8001890:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	18ca      	adds	r2, r1, r3
 800189e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018a2:	fba3 1303 	umull	r1, r3, r3, r3
 80018a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80018aa:	460b      	mov	r3, r1
 80018ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80018b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018b4:	18d3      	adds	r3, r2, r3
 80018b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80018ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	17da      	asrs	r2, r3, #31
 80018c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80018ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80018ce:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80018d2:	462b      	mov	r3, r5
 80018d4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80018d8:	4642      	mov	r2, r8
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	4621      	mov	r1, r4
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	4641      	mov	r1, r8
 80018ec:	fba2 1201 	umull	r1, r2, r2, r1
 80018f0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80018f4:	460a      	mov	r2, r1
 80018f6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80018fa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80018fe:	4413      	add	r3, r2
 8001900:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001904:	f04f 0000 	mov.w	r0, #0
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001910:	4623      	mov	r3, r4
 8001912:	0a18      	lsrs	r0, r3, #8
 8001914:	462b      	mov	r3, r5
 8001916:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800191a:	462b      	mov	r3, r5
 800191c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800191e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001922:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800192e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001932:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001936:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800193a:	464a      	mov	r2, r9
 800193c:	fb02 f203 	mul.w	r2, r2, r3
 8001940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001944:	4644      	mov	r4, r8
 8001946:	fb04 f303 	mul.w	r3, r4, r3
 800194a:	441a      	add	r2, r3
 800194c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001950:	4644      	mov	r4, r8
 8001952:	fba3 4304 	umull	r4, r3, r3, r4
 8001956:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800195a:	4623      	mov	r3, r4
 800195c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001960:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001976:	464c      	mov	r4, r9
 8001978:	0323      	lsls	r3, r4, #12
 800197a:	4644      	mov	r4, r8
 800197c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001980:	4644      	mov	r4, r8
 8001982:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001984:	1884      	adds	r4, r0, r2
 8001986:	633c      	str	r4, [r7, #48]	; 0x30
 8001988:	eb41 0303 	adc.w	r3, r1, r3
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
 800198e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001992:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001996:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800199a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800199e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80019a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019aa:	88db      	ldrh	r3, [r3, #6]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80019b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80019b8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019bc:	462b      	mov	r3, r5
 80019be:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80019c2:	4642      	mov	r2, r8
 80019c4:	fb02 f203 	mul.w	r2, r2, r3
 80019c8:	464b      	mov	r3, r9
 80019ca:	4621      	mov	r1, r4
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	4622      	mov	r2, r4
 80019d4:	4641      	mov	r1, r8
 80019d6:	fba2 1201 	umull	r1, r2, r2, r1
 80019da:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80019de:	460a      	mov	r2, r1
 80019e0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80019e4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80019e8:	4413      	add	r3, r2
 80019ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80019fa:	4629      	mov	r1, r5
 80019fc:	104a      	asrs	r2, r1, #1
 80019fe:	4629      	mov	r1, r5
 8001a00:	17cb      	asrs	r3, r1, #31
 8001a02:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001a06:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e148      	b.n	8001ca4 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001a12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a16:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001a1a:	17da      	asrs	r2, r3, #31
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a20:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001a24:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001a28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a2c:	105b      	asrs	r3, r3, #1
 8001a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a36:	07db      	lsls	r3, r3, #31
 8001a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a3c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a40:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001a44:	4621      	mov	r1, r4
 8001a46:	1a89      	subs	r1, r1, r2
 8001a48:	67b9      	str	r1, [r7, #120]	; 0x78
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	eb61 0303 	sbc.w	r3, r1, r3
 8001a50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a56:	4622      	mov	r2, r4
 8001a58:	462b      	mov	r3, r5
 8001a5a:	1891      	adds	r1, r2, r2
 8001a5c:	6239      	str	r1, [r7, #32]
 8001a5e:	415b      	adcs	r3, r3
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a66:	4621      	mov	r1, r4
 8001a68:	1851      	adds	r1, r2, r1
 8001a6a:	61b9      	str	r1, [r7, #24]
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	414b      	adcs	r3, r1
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a7e:	4649      	mov	r1, r9
 8001a80:	018b      	lsls	r3, r1, #6
 8001a82:	4641      	mov	r1, r8
 8001a84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a88:	4641      	mov	r1, r8
 8001a8a:	018a      	lsls	r2, r1, #6
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	1889      	adds	r1, r1, r2
 8001a90:	6139      	str	r1, [r7, #16]
 8001a92:	4649      	mov	r1, r9
 8001a94:	eb43 0101 	adc.w	r1, r3, r1
 8001a98:	6179      	str	r1, [r7, #20]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	008b      	lsls	r3, r1, #2
 8001aaa:	4641      	mov	r1, r8
 8001aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	008a      	lsls	r2, r1, #2
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4622      	mov	r2, r4
 8001abc:	189b      	adds	r3, r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	462a      	mov	r2, r5
 8001ac4:	eb42 0303 	adc.w	r3, r2, r3
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	008b      	lsls	r3, r1, #2
 8001ada:	4641      	mov	r1, r8
 8001adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ae0:	4641      	mov	r1, r8
 8001ae2:	008a      	lsls	r2, r1, #2
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4622      	mov	r2, r4
 8001aec:	189b      	adds	r3, r3, r2
 8001aee:	673b      	str	r3, [r7, #112]	; 0x70
 8001af0:	462b      	mov	r3, r5
 8001af2:	460a      	mov	r2, r1
 8001af4:	eb42 0303 	adc.w	r3, r2, r3
 8001af8:	677b      	str	r3, [r7, #116]	; 0x74
 8001afa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001afe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b02:	f7ff f851 	bl	8000ba8 <__aeabi_ldivmod>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b12:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	17da      	asrs	r2, r3, #31
 8001b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b1e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001b22:	f04f 0000 	mov.w	r0, #0
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	0b50      	lsrs	r0, r2, #13
 8001b2c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b30:	1359      	asrs	r1, r3, #13
 8001b32:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001b36:	462b      	mov	r3, r5
 8001b38:	fb00 f203 	mul.w	r2, r0, r3
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	fb03 f301 	mul.w	r3, r3, r1
 8001b42:	4413      	add	r3, r2
 8001b44:	4622      	mov	r2, r4
 8001b46:	fba2 1200 	umull	r1, r2, r2, r0
 8001b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b4e:	460a      	mov	r2, r1
 8001b50:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001b54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001b58:	4413      	add	r3, r2
 8001b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b5e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0b50      	lsrs	r0, r2, #13
 8001b6c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b70:	1359      	asrs	r1, r3, #13
 8001b72:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001b76:	462b      	mov	r3, r5
 8001b78:	fb00 f203 	mul.w	r2, r0, r3
 8001b7c:	4623      	mov	r3, r4
 8001b7e:	fb03 f301 	mul.w	r3, r3, r1
 8001b82:	4413      	add	r3, r2
 8001b84:	4622      	mov	r2, r4
 8001b86:	fba2 1200 	umull	r1, r2, r2, r0
 8001b8a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b8e:	460a      	mov	r2, r1
 8001b90:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001b94:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001b98:	4413      	add	r3, r2
 8001b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001baa:	4621      	mov	r1, r4
 8001bac:	0e4a      	lsrs	r2, r1, #25
 8001bae:	4629      	mov	r1, r5
 8001bb0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	164b      	asrs	r3, r1, #25
 8001bb8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bc0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	17da      	asrs	r2, r3, #31
 8001bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8001bca:	667a      	str	r2, [r7, #100]	; 0x64
 8001bcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bd0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bd4:	462a      	mov	r2, r5
 8001bd6:	fb02 f203 	mul.w	r2, r2, r3
 8001bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001bde:	4621      	mov	r1, r4
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bea:	4621      	mov	r1, r4
 8001bec:	fba2 1201 	umull	r1, r2, r2, r1
 8001bf0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001bfa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001bfe:	4413      	add	r3, r2
 8001c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001c10:	4621      	mov	r1, r4
 8001c12:	0cca      	lsrs	r2, r1, #19
 8001c14:	4629      	mov	r1, r5
 8001c16:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	14cb      	asrs	r3, r1, #19
 8001c1e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001c22:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001c26:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c2a:	1884      	adds	r4, r0, r2
 8001c2c:	65bc      	str	r4, [r7, #88]	; 0x58
 8001c2e:	eb41 0303 	adc.w	r3, r1, r3
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c38:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	1889      	adds	r1, r1, r2
 8001c40:	6539      	str	r1, [r7, #80]	; 0x50
 8001c42:	4629      	mov	r1, r5
 8001c44:	eb43 0101 	adc.w	r1, r3, r1
 8001c48:	6579      	str	r1, [r7, #84]	; 0x54
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001c56:	4623      	mov	r3, r4
 8001c58:	0a18      	lsrs	r0, r3, #8
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c60:	462b      	mov	r3, r5
 8001c62:	1219      	asrs	r1, r3, #8
 8001c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c68:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	17da      	asrs	r2, r3, #31
 8001c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001c80:	464c      	mov	r4, r9
 8001c82:	0123      	lsls	r3, r4, #4
 8001c84:	4644      	mov	r4, r8
 8001c86:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c8a:	4644      	mov	r4, r8
 8001c8c:	0122      	lsls	r2, r4, #4
 8001c8e:	1884      	adds	r4, r0, r2
 8001c90:	603c      	str	r4, [r7, #0]
 8001c92:	eb41 0303 	adc.w	r3, r1, r3
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c9c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001ca0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001caa:	46bd      	mov	sp, r7
 8001cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001cb0 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001cc2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	039a      	lsls	r2, r3, #14
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001cce:	051b      	lsls	r3, r3, #20
 8001cd0:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ce6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001cee:	4611      	mov	r1, r2
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	fb01 f202 	mul.w	r2, r1, r2
 8001cf6:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	7f09      	ldrb	r1, [r1, #28]
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	6979      	ldr	r1, [r7, #20]
 8001d00:	fb00 f101 	mul.w	r1, r0, r1
 8001d04:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001d06:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001d0a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001d0e:	1292      	asrs	r2, r2, #10
 8001d10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001d14:	68f9      	ldr	r1, [r7, #12]
 8001d16:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001d1a:	fb01 f202 	mul.w	r2, r1, r2
 8001d1e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001d22:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	13db      	asrs	r3, r3, #15
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	13d2      	asrs	r2, r2, #15
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	7e12      	ldrb	r2, [r2, #24]
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d4e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001d56:	bfa8      	it	ge
 8001d58:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001d5c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	131b      	asrs	r3, r3, #12
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b08c      	sub	sp, #48	; 0x30
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d82:	2b60      	cmp	r3, #96	; 0x60
 8001d84:	d007      	beq.n	8001d96 <bmp280_read_fixed+0x28>
		if (humidity)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <bmp280_read_fixed+0x32>
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	e000      	b.n	8001da2 <bmp280_read_fixed+0x34>
 8001da0:	2306      	movs	r3, #6
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f107 0218 	add.w	r2, r7, #24
 8001dac:	21f7      	movs	r1, #247	; 0xf7
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff faab 	bl	800130a <read_data>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <bmp280_read_fixed+0x50>
		return false;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e038      	b.n	8001e30 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001dbe:	7e3b      	ldrb	r3, [r7, #24]
 8001dc0:	031a      	lsls	r2, r3, #12
 8001dc2:	7e7b      	ldrb	r3, [r7, #25]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	7eba      	ldrb	r2, [r7, #26]
 8001dca:	0912      	lsrs	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001dd2:	7efb      	ldrb	r3, [r7, #27]
 8001dd4:	031a      	lsls	r2, r3, #12
 8001dd6:	7f3b      	ldrb	r3, [r7, #28]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	7f7a      	ldrb	r2, [r7, #29]
 8001dde:	0912      	lsrs	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4313      	orrs	r3, r2
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	461a      	mov	r2, r3
 8001dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fc67 	bl	80016c2 <compensate_temperature>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7ff fc97 	bl	8001734 <compensate_pressure>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001e12:	7fbb      	ldrb	r3, [r7, #30]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	7ffa      	ldrb	r2, [r7, #31]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	6a39      	ldr	r1, [r7, #32]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff ff44 	bl	8001cb0 <compensate_humidity>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <bmp280_read_float+0x1a>
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	e000      	b.n	8001e54 <bmp280_read_float+0x1c>
 8001e52:	2300      	movs	r3, #0
 8001e54:	f107 0218 	add.w	r2, r7, #24
 8001e58:	f107 011c 	add.w	r1, r7, #28
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff ff86 	bl	8001d6e <bmp280_read_fixed>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d028      	beq.n	8001eba <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001ec4 <bmp280_read_float+0x8c>
 8001e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e8a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001ec8 <bmp280_read_float+0x90>
 8001e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ea8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001ecc <bmp280_read_float+0x94>
 8001eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <bmp280_read_float+0x84>
	}

	return false;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	42c80000 	.word	0x42c80000
 8001ec8:	43800000 	.word	0x43800000
 8001ecc:	44800000 	.word	0x44800000

08001ed0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <vApplicationGetIdleTaskMemory+0x30>)
 8001ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	2000009c 	.word	0x2000009c
 8001f00:	200000f0 	.word	0x200000f0

08001f04 <ReadDataFromSensors>:
float DHT_temperature, DHT_humidity;

float cur_pressure, cur_temperature, cur_humidity = 0;
float prev_pressure, prev_temperature, prev_humidity = 0;

void ReadDataFromSensors() {
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af02      	add	r7, sp, #8
	// Set LED for Debugging
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	4868      	ldr	r0, [pc, #416]	; (80020b0 <ReadDataFromSensors+0x1ac>)
 8001f10:	f001 facc 	bl	80034ac <HAL_GPIO_WritePin>

	// GET DATA FROM DHT22
	sprintf(uartData, "\r\nDHT22 Sensor:\r\n");
 8001f14:	4967      	ldr	r1, [pc, #412]	; (80020b4 <ReadDataFromSensors+0x1b0>)
 8001f16:	4868      	ldr	r0, [pc, #416]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001f18:	f005 fb68 	bl	80075ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8001f1c:	4866      	ldr	r0, [pc, #408]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001f1e:	f7fe f95f 	bl	80001e0 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	4963      	ldr	r1, [pc, #396]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001f2c:	4863      	ldr	r0, [pc, #396]	; (80020bc <ReadDataFromSensors+0x1b8>)
 8001f2e:	f003 fd35 	bl	800599c <HAL_UART_Transmit>
	DHT_GetData(&DHT22_Data);
 8001f32:	4863      	ldr	r0, [pc, #396]	; (80020c0 <ReadDataFromSensors+0x1bc>)
 8001f34:	f7ff f938 	bl	80011a8 <DHT_GetData>
	DHT_temperature = DHT22_Data.Temperature / 10;
 8001f38:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <ReadDataFromSensors+0x1bc>)
 8001f3a:	ed93 7a00 	vldr	s14, [r3]
 8001f3e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <ReadDataFromSensors+0x1c0>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
	DHT_humidity = DHT22_Data.Humidity / 10;
 8001f4c:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <ReadDataFromSensors+0x1bc>)
 8001f4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f52:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <ReadDataFromSensors+0x1c4>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
	sprintf(uartData, "Temp (C) =\t %.1f\r\nHumidity (%%) =\t %.1f%%\r\n",
 8001f60:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <ReadDataFromSensors+0x1c0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe faf7 	bl	8000558 <__aeabi_f2d>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <ReadDataFromSensors+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe faf0 	bl	8000558 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f80:	4622      	mov	r2, r4
 8001f82:	462b      	mov	r3, r5
 8001f84:	4951      	ldr	r1, [pc, #324]	; (80020cc <ReadDataFromSensors+0x1c8>)
 8001f86:	484c      	ldr	r0, [pc, #304]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001f88:	f005 fb30 	bl	80075ec <siprintf>
			DHT_temperature, DHT_humidity);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8001f8c:	484a      	ldr	r0, [pc, #296]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001f8e:	f7fe f927 	bl	80001e0 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	4947      	ldr	r1, [pc, #284]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001f9c:	4847      	ldr	r0, [pc, #284]	; (80020bc <ReadDataFromSensors+0x1b8>)
 8001f9e:	f003 fcfd 	bl	800599c <HAL_UART_Transmit>

	HAL_Delay(1000); // WAIT
 8001fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa6:	f000 ffdb 	bl	8002f60 <HAL_Delay>

	// GET DATA FROM BMP-280
	sprintf(uartData, "BMP-280 Sensor:\r\n");
 8001faa:	4949      	ldr	r1, [pc, #292]	; (80020d0 <ReadDataFromSensors+0x1cc>)
 8001fac:	4842      	ldr	r0, [pc, #264]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001fae:	f005 fb1d 	bl	80075ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8001fb2:	4841      	ldr	r0, [pc, #260]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001fb4:	f7fe f914 	bl	80001e0 <strlen>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc0:	493d      	ldr	r1, [pc, #244]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001fc2:	483e      	ldr	r0, [pc, #248]	; (80020bc <ReadDataFromSensors+0x1b8>)
 8001fc4:	f003 fcea 	bl	800599c <HAL_UART_Transmit>
	while (!bmp280_read_float(&bmp280, &BMP_temperature, &BMP_pressure,
 8001fc8:	e012      	b.n	8001ff0 <ReadDataFromSensors+0xec>
			&BMP_humidity)) {
		sprintf(uartData, "Temperature/pressure reading failed\r\n");
 8001fca:	4942      	ldr	r1, [pc, #264]	; (80020d4 <ReadDataFromSensors+0x1d0>)
 8001fcc:	483a      	ldr	r0, [pc, #232]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001fce:	f005 fb0d 	bl	80075ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8001fd2:	4839      	ldr	r0, [pc, #228]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001fd4:	f7fe f904 	bl	80001e0 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe0:	4935      	ldr	r1, [pc, #212]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8001fe2:	4836      	ldr	r0, [pc, #216]	; (80020bc <ReadDataFromSensors+0x1b8>)
 8001fe4:	f003 fcda 	bl	800599c <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001fe8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fec:	f000 ffb8 	bl	8002f60 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &BMP_temperature, &BMP_pressure,
 8001ff0:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <ReadDataFromSensors+0x1d4>)
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <ReadDataFromSensors+0x1d8>)
 8001ff4:	493a      	ldr	r1, [pc, #232]	; (80020e0 <ReadDataFromSensors+0x1dc>)
 8001ff6:	483b      	ldr	r0, [pc, #236]	; (80020e4 <ReadDataFromSensors+0x1e0>)
 8001ff8:	f7ff ff1e 	bl	8001e38 <bmp280_read_float>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e0      	bne.n	8001fca <ReadDataFromSensors+0xc6>
	}

	sprintf(uartData, "Pressure: %.2f Pa, Temperature: %.2f C", BMP_pressure,
 8002008:	4b34      	ldr	r3, [pc, #208]	; (80020dc <ReadDataFromSensors+0x1d8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe faa3 	bl	8000558 <__aeabi_f2d>
 8002012:	4604      	mov	r4, r0
 8002014:	460d      	mov	r5, r1
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <ReadDataFromSensors+0x1dc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fa9c 	bl	8000558 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	e9cd 2300 	strd	r2, r3, [sp]
 8002028:	4622      	mov	r2, r4
 800202a:	462b      	mov	r3, r5
 800202c:	492e      	ldr	r1, [pc, #184]	; (80020e8 <ReadDataFromSensors+0x1e4>)
 800202e:	4822      	ldr	r0, [pc, #136]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8002030:	f005 fadc 	bl	80075ec <siprintf>
			BMP_temperature);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002034:	4820      	ldr	r0, [pc, #128]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8002036:	f7fe f8d3 	bl	80001e0 <strlen>
 800203a:	4603      	mov	r3, r0
 800203c:	b29a      	uxth	r2, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	491d      	ldr	r1, [pc, #116]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8002044:	481d      	ldr	r0, [pc, #116]	; (80020bc <ReadDataFromSensors+0x1b8>)
 8002046:	f003 fca9 	bl	800599c <HAL_UART_Transmit>
	if (bme280p) {
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <ReadDataFromSensors+0x1e8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d016      	beq.n	8002080 <ReadDataFromSensors+0x17c>
		sprintf(uartData, ", Humidity: %.2f\r\n", BMP_humidity);
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <ReadDataFromSensors+0x1d4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa7e 	bl	8000558 <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4923      	ldr	r1, [pc, #140]	; (80020f0 <ReadDataFromSensors+0x1ec>)
 8002062:	4815      	ldr	r0, [pc, #84]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8002064:	f005 fac2 	bl	80075ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002068:	4813      	ldr	r0, [pc, #76]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 800206a:	f7fe f8b9 	bl	80001e0 <strlen>
 800206e:	4603      	mov	r3, r0
 8002070:	b29a      	uxth	r2, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	4910      	ldr	r1, [pc, #64]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8002078:	4810      	ldr	r0, [pc, #64]	; (80020bc <ReadDataFromSensors+0x1b8>)
 800207a:	f003 fc8f 	bl	800599c <HAL_UART_Transmit>
 800207e:	e00e      	b.n	800209e <ReadDataFromSensors+0x19a>
	}

	else {
		sprintf((char*) uartData, "\r\n");
 8002080:	491c      	ldr	r1, [pc, #112]	; (80020f4 <ReadDataFromSensors+0x1f0>)
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8002084:	f005 fab2 	bl	80075ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002088:	480b      	ldr	r0, [pc, #44]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 800208a:	f7fe f8a9 	bl	80001e0 <strlen>
 800208e:	4603      	mov	r3, r0
 8002090:	b29a      	uxth	r2, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <ReadDataFromSensors+0x1b4>)
 8002098:	4808      	ldr	r0, [pc, #32]	; (80020bc <ReadDataFromSensors+0x1b8>)
 800209a:	f003 fc7f 	bl	800599c <HAL_UART_Transmit>
	}

	// Set LED for Debugging
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	2120      	movs	r1, #32
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <ReadDataFromSensors+0x1ac>)
 80020a4:	f001 fa02 	bl	80034ac <HAL_GPIO_WritePin>
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40020000 	.word	0x40020000
 80020b4:	08008dc0 	.word	0x08008dc0
 80020b8:	20000420 	.word	0x20000420
 80020bc:	200003d4 	.word	0x200003d4
 80020c0:	200005fc 	.word	0x200005fc
 80020c4:	20000604 	.word	0x20000604
 80020c8:	20000608 	.word	0x20000608
 80020cc:	08008dd4 	.word	0x08008dd4
 80020d0:	08008e00 	.word	0x08008e00
 80020d4:	08008e14 	.word	0x08008e14
 80020d8:	200005f8 	.word	0x200005f8
 80020dc:	200005f0 	.word	0x200005f0
 80020e0:	200005f4 	.word	0x200005f4
 80020e4:	200005b8 	.word	0x200005b8
 80020e8:	08008e3c 	.word	0x08008e3c
 80020ec:	200005ec 	.word	0x200005ec
 80020f0:	08008e64 	.word	0x08008e64
 80020f4:	08008e78 	.word	0x08008e78

080020f8 <ProcessData>:

void ProcessData() {
 80020f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020fc:	b08c      	sub	sp, #48	; 0x30
 80020fe:	af04      	add	r7, sp, #16
	// Choose Data & Calibrate

	// Choose DHT22 over BMP-280 for temperature because it is more accurate
	if (DHT_temperature != 0) {
 8002100:	4bbb      	ldr	r3, [pc, #748]	; (80023f0 <ProcessData+0x2f8>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	eef5 7a40 	vcmp.f32	s15, #0.0
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	d004      	beq.n	800211a <ProcessData+0x22>
		cur_temperature = DHT_temperature;
 8002110:	4bb7      	ldr	r3, [pc, #732]	; (80023f0 <ProcessData+0x2f8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4ab7      	ldr	r2, [pc, #732]	; (80023f4 <ProcessData+0x2fc>)
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e010      	b.n	800213c <ProcessData+0x44>
	} else if (BMP_temperature != 0) {
 800211a:	4bb7      	ldr	r3, [pc, #732]	; (80023f8 <ProcessData+0x300>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d004      	beq.n	8002134 <ProcessData+0x3c>
		cur_temperature = BMP_temperature;
 800212a:	4bb3      	ldr	r3, [pc, #716]	; (80023f8 <ProcessData+0x300>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4ab1      	ldr	r2, [pc, #708]	; (80023f4 <ProcessData+0x2fc>)
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e003      	b.n	800213c <ProcessData+0x44>
	} else {
		cur_temperature = prev_temperature;
 8002134:	4bb1      	ldr	r3, [pc, #708]	; (80023fc <ProcessData+0x304>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4aae      	ldr	r2, [pc, #696]	; (80023f4 <ProcessData+0x2fc>)
 800213a:	6013      	str	r3, [r2, #0]
	}

	// Humidity is DHT22-exclusive
	if (DHT_humidity != 0) {
 800213c:	4bb0      	ldr	r3, [pc, #704]	; (8002400 <ProcessData+0x308>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	d00a      	beq.n	8002162 <ProcessData+0x6a>
		cur_humidity = DHT_humidity - 10; // Calibration
 800214c:	4bac      	ldr	r3, [pc, #688]	; (8002400 <ProcessData+0x308>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800215a:	4baa      	ldr	r3, [pc, #680]	; (8002404 <ProcessData+0x30c>)
 800215c:	edc3 7a00 	vstr	s15, [r3]
 8002160:	e003      	b.n	800216a <ProcessData+0x72>
	} else {
		cur_humidity = prev_humidity;
 8002162:	4ba9      	ldr	r3, [pc, #676]	; (8002408 <ProcessData+0x310>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4aa7      	ldr	r2, [pc, #668]	; (8002404 <ProcessData+0x30c>)
 8002168:	6013      	str	r3, [r2, #0]
	}

	// Pressure is BMP-280-exclusive
	if (BMP_pressure != 0) {
 800216a:	4ba8      	ldr	r3, [pc, #672]	; (800240c <ProcessData+0x314>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	d004      	beq.n	8002184 <ProcessData+0x8c>
		cur_pressure = BMP_pressure;
 800217a:	4ba4      	ldr	r3, [pc, #656]	; (800240c <ProcessData+0x314>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4aa4      	ldr	r2, [pc, #656]	; (8002410 <ProcessData+0x318>)
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e003      	b.n	800218c <ProcessData+0x94>
	} else {
		cur_pressure = BMP_pressure;
 8002184:	4ba1      	ldr	r3, [pc, #644]	; (800240c <ProcessData+0x314>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4aa1      	ldr	r2, [pc, #644]	; (8002410 <ProcessData+0x318>)
 800218a:	6013      	str	r3, [r2, #0]

	// Process Prediction Algorithm

	// Calculate Pressure at Sea Level
	double temp1 = 1.0
			- (0.0065 * altitude)
 800218c:	4ba1      	ldr	r3, [pc, #644]	; (8002414 <ProcessData+0x31c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe f9e1 	bl	8000558 <__aeabi_f2d>
 8002196:	a38a      	add	r3, pc, #552	; (adr r3, 80023c0 <ProcessData+0x2c8>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe fa34 	bl	8000608 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4690      	mov	r8, r2
 80021a6:	4699      	mov	r9, r3
					/ (cur_temperature + 0.0065 * altitude + 273.15);
 80021a8:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <ProcessData+0x2fc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d3 	bl	8000558 <__aeabi_f2d>
 80021b2:	4604      	mov	r4, r0
 80021b4:	460d      	mov	r5, r1
 80021b6:	4b97      	ldr	r3, [pc, #604]	; (8002414 <ProcessData+0x31c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f9cc 	bl	8000558 <__aeabi_f2d>
 80021c0:	a37f      	add	r3, pc, #508	; (adr r3, 80023c0 <ProcessData+0x2c8>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fa1f 	bl	8000608 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f7fe f863 	bl	800029c <__adddf3>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	a37a      	add	r3, pc, #488	; (adr r3, 80023c8 <ProcessData+0x2d0>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe f85a 	bl	800029c <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4640      	mov	r0, r8
 80021ee:	4649      	mov	r1, r9
 80021f0:	f7fe fb34 	bl	800085c <__aeabi_ddiv>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
	double temp1 = 1.0
 80021f8:	f04f 0000 	mov.w	r0, #0
 80021fc:	4986      	ldr	r1, [pc, #536]	; (8002418 <ProcessData+0x320>)
 80021fe:	f7fe f84b 	bl	8000298 <__aeabi_dsub>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temp2 = pow(temp1, -5.257);
 800220a:	ed9f 1b71 	vldr	d1, [pc, #452]	; 80023d0 <ProcessData+0x2d8>
 800220e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002212:	f005 fe8f 	bl	8007f34 <pow>
 8002216:	ed87 0b02 	vstr	d0, [r7, #8]
	double p0 = cur_pressure / 100 * temp2;
 800221a:	4b7d      	ldr	r3, [pc, #500]	; (8002410 <ProcessData+0x318>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800241c <ProcessData+0x324>
 8002224:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002228:	ee16 0a90 	vmov	r0, s13
 800222c:	f7fe f994 	bl	8000558 <__aeabi_f2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002238:	f7fe f9e6 	bl	8000608 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	e9c7 2300 	strd	r2, r3, [r7]

	uint8_t z; // Prediction value

	// Pressure is Rising
	if (cur_pressure > prev_pressure) {
 8002244:	4b72      	ldr	r3, [pc, #456]	; (8002410 <ProcessData+0x318>)
 8002246:	ed93 7a00 	vldr	s14, [r3]
 800224a:	4b75      	ldr	r3, [pc, #468]	; (8002420 <ProcessData+0x328>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002258:	dd16      	ble.n	8002288 <ProcessData+0x190>
		z = 130 - p0 / 81;
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	4b71      	ldr	r3, [pc, #452]	; (8002424 <ProcessData+0x32c>)
 8002260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002264:	f7fe fafa 	bl	800085c <__aeabi_ddiv>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	f04f 0000 	mov.w	r0, #0
 8002270:	496d      	ldr	r1, [pc, #436]	; (8002428 <ProcessData+0x330>)
 8002272:	f7fe f811 	bl	8000298 <__aeabi_dsub>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f7fe fc73 	bl	8000b68 <__aeabi_d2uiz>
 8002282:	4603      	mov	r3, r0
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	e048      	b.n	800231a <ProcessData+0x222>
	}
	// Pressure is Falling
	else if (cur_pressure < prev_pressure) {
 8002288:	4b61      	ldr	r3, [pc, #388]	; (8002410 <ProcessData+0x318>)
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <ProcessData+0x328>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	d51f      	bpl.n	80022de <ProcessData+0x1e6>
		z = 147 - 5 * p0 / 376;
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	4b62      	ldr	r3, [pc, #392]	; (800242c <ProcessData+0x334>)
 80022a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022a8:	f7fe f9ae 	bl	8000608 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <ProcessData+0x338>)
 80022ba:	f7fe facf 	bl	800085c <__aeabi_ddiv>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	a145      	add	r1, pc, #276	; (adr r1, 80023d8 <ProcessData+0x2e0>)
 80022c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022c8:	f7fd ffe6 	bl	8000298 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fc48 	bl	8000b68 <__aeabi_d2uiz>
 80022d8:	4603      	mov	r3, r0
 80022da:	77fb      	strb	r3, [r7, #31]
 80022dc:	e01d      	b.n	800231a <ProcessData+0x222>
	}
	// Pressure is Steady
	else {
		z = 179 - 2 * p0 / 129;
 80022de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	f7fd ffd9 	bl	800029c <__adddf3>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	a33b      	add	r3, pc, #236	; (adr r3, 80023e0 <ProcessData+0x2e8>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe fab0 	bl	800085c <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	a139      	add	r1, pc, #228	; (adr r1, 80023e8 <ProcessData+0x2f0>)
 8002302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002306:	f7fd ffc7 	bl	8000298 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fc29 	bl	8000b68 <__aeabi_d2uiz>
 8002316:	4603      	mov	r3, r0
 8002318:	77fb      	strb	r3, [r7, #31]
	}

	// TODO Adjust Z value

	sprintf(uartData, "\r\nDEBUG: %f %f %f\r\n", temp1, temp2, p0);
 800231a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800231e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002326:	e9cd 2300 	strd	r2, r3, [sp]
 800232a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800232e:	4941      	ldr	r1, [pc, #260]	; (8002434 <ProcessData+0x33c>)
 8002330:	4841      	ldr	r0, [pc, #260]	; (8002438 <ProcessData+0x340>)
 8002332:	f005 f95b 	bl	80075ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002336:	4840      	ldr	r0, [pc, #256]	; (8002438 <ProcessData+0x340>)
 8002338:	f7fd ff52 	bl	80001e0 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	b29a      	uxth	r2, r3
 8002340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002344:	493c      	ldr	r1, [pc, #240]	; (8002438 <ProcessData+0x340>)
 8002346:	483d      	ldr	r0, [pc, #244]	; (800243c <ProcessData+0x344>)
 8002348:	f003 fb28 	bl	800599c <HAL_UART_Transmit>

	sprintf(uartData, "\r\nForecast Number = %d\r\n", z);
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	461a      	mov	r2, r3
 8002350:	493b      	ldr	r1, [pc, #236]	; (8002440 <ProcessData+0x348>)
 8002352:	4839      	ldr	r0, [pc, #228]	; (8002438 <ProcessData+0x340>)
 8002354:	f005 f94a 	bl	80075ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002358:	4837      	ldr	r0, [pc, #220]	; (8002438 <ProcessData+0x340>)
 800235a:	f7fd ff41 	bl	80001e0 <strlen>
 800235e:	4603      	mov	r3, r0
 8002360:	b29a      	uxth	r2, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	4934      	ldr	r1, [pc, #208]	; (8002438 <ProcessData+0x340>)
 8002368:	4834      	ldr	r0, [pc, #208]	; (800243c <ProcessData+0x344>)
 800236a:	f003 fb17 	bl	800599c <HAL_UART_Transmit>

	// Set Data History
	if (cur_pressure != 0) {
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <ProcessData+0x318>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	d003      	beq.n	8002386 <ProcessData+0x28e>
		prev_pressure = cur_pressure;
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <ProcessData+0x318>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a27      	ldr	r2, [pc, #156]	; (8002420 <ProcessData+0x328>)
 8002384:	6013      	str	r3, [r2, #0]
	}
	if (cur_temperature != 0) {
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <ProcessData+0x2fc>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	d003      	beq.n	800239e <ProcessData+0x2a6>
		prev_temperature = cur_temperature;
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <ProcessData+0x2fc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <ProcessData+0x304>)
 800239c:	6013      	str	r3, [r2, #0]
	}
	if (cur_humidity != 0) {
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <ProcessData+0x30c>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	d003      	beq.n	80023b6 <ProcessData+0x2be>
		prev_humidity = cur_humidity;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <ProcessData+0x30c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <ProcessData+0x310>)
 80023b4:	6013      	str	r3, [r2, #0]
	}
}
 80023b6:	bf00      	nop
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023c0:	76c8b439 	.word	0x76c8b439
 80023c4:	3f7a9fbe 	.word	0x3f7a9fbe
 80023c8:	66666666 	.word	0x66666666
 80023cc:	40711266 	.word	0x40711266
 80023d0:	020c49ba 	.word	0x020c49ba
 80023d4:	c015072b 	.word	0xc015072b
 80023d8:	00000000 	.word	0x00000000
 80023dc:	40626000 	.word	0x40626000
 80023e0:	00000000 	.word	0x00000000
 80023e4:	40602000 	.word	0x40602000
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40666000 	.word	0x40666000
 80023f0:	20000604 	.word	0x20000604
 80023f4:	20000610 	.word	0x20000610
 80023f8:	200005f4 	.word	0x200005f4
 80023fc:	2000061c 	.word	0x2000061c
 8002400:	20000608 	.word	0x20000608
 8002404:	20000614 	.word	0x20000614
 8002408:	20000620 	.word	0x20000620
 800240c:	200005f0 	.word	0x200005f0
 8002410:	2000060c 	.word	0x2000060c
 8002414:	20000000 	.word	0x20000000
 8002418:	3ff00000 	.word	0x3ff00000
 800241c:	42c80000 	.word	0x42c80000
 8002420:	20000618 	.word	0x20000618
 8002424:	40544000 	.word	0x40544000
 8002428:	40604000 	.word	0x40604000
 800242c:	40140000 	.word	0x40140000
 8002430:	40778000 	.word	0x40778000
 8002434:	08008e7c 	.word	0x08008e7c
 8002438:	20000420 	.word	0x20000420
 800243c:	200003d4 	.word	0x200003d4
 8002440:	08008e90 	.word	0x08008e90

08002444 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800244a:	f000 fd17 	bl	8002e7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800244e:	f000 f8a3 	bl	8002598 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002452:	f000 fa01 	bl	8002858 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002456:	f000 f9d5 	bl	8002804 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800245a:	f000 f9a9 	bl	80027b0 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 800245e:	f000 f931 	bl	80026c4 <MX_TIM3_Init>
	MX_I2C2_Init();
 8002462:	f000 f901 	bl	8002668 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	bmp280_init_default_params(&bmp280.params);
 8002466:	483f      	ldr	r0, [pc, #252]	; (8002564 <main+0x120>)
 8002468:	f7fe ff04 	bl	8001274 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800246c:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <main+0x124>)
 800246e:	2276      	movs	r2, #118	; 0x76
 8002470:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <main+0x124>)
 8002474:	4a3d      	ldr	r2, [pc, #244]	; (800256c <main+0x128>)
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_UART_Transmit(&huart2, 'a', 1, 1000);
 8002478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247c:	2201      	movs	r2, #1
 800247e:	2161      	movs	r1, #97	; 0x61
 8002480:	483b      	ldr	r0, [pc, #236]	; (8002570 <main+0x12c>)
 8002482:	f003 fa8b 	bl	800599c <HAL_UART_Transmit>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002486:	e012      	b.n	80024ae <main+0x6a>
		sprintf(uartData, "BMP280 initialization failed\r\n");
 8002488:	493a      	ldr	r1, [pc, #232]	; (8002574 <main+0x130>)
 800248a:	483b      	ldr	r0, [pc, #236]	; (8002578 <main+0x134>)
 800248c:	f005 f8ae 	bl	80075ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002490:	4839      	ldr	r0, [pc, #228]	; (8002578 <main+0x134>)
 8002492:	f7fd fea5 	bl	80001e0 <strlen>
 8002496:	4603      	mov	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249e:	4936      	ldr	r1, [pc, #216]	; (8002578 <main+0x134>)
 80024a0:	4833      	ldr	r0, [pc, #204]	; (8002570 <main+0x12c>)
 80024a2:	f003 fa7b 	bl	800599c <HAL_UART_Transmit>
		HAL_Delay(2000);
 80024a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024aa:	f000 fd59 	bl	8002f60 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80024ae:	492d      	ldr	r1, [pc, #180]	; (8002564 <main+0x120>)
 80024b0:	482d      	ldr	r0, [pc, #180]	; (8002568 <main+0x124>)
 80024b2:	f7ff f859 	bl	8001568 <bmp280_init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e2      	bne.n	8002488 <main+0x44>
	}
	bme280p = bmp280.id == BME280_CHIP_ID;
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <main+0x124>)
 80024c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <main+0x138>)
 80024d4:	701a      	strb	r2, [r3, #0]
	sprintf(uartData, "\r\nBMP280: found %s\r\n",
			bme280p ? "BME280" : "BMP280");
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <main+0x138>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
	sprintf(uartData, "\r\nBMP280: found %s\r\n",
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <main+0x9e>
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <main+0x13c>)
 80024e0:	e000      	b.n	80024e4 <main+0xa0>
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <main+0x140>)
 80024e4:	461a      	mov	r2, r3
 80024e6:	4928      	ldr	r1, [pc, #160]	; (8002588 <main+0x144>)
 80024e8:	4823      	ldr	r0, [pc, #140]	; (8002578 <main+0x134>)
 80024ea:	f005 f87f 	bl	80075ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 80024ee:	4822      	ldr	r0, [pc, #136]	; (8002578 <main+0x134>)
 80024f0:	f7fd fe76 	bl	80001e0 <strlen>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fc:	491e      	ldr	r1, [pc, #120]	; (8002578 <main+0x134>)
 80024fe:	481c      	ldr	r0, [pc, #112]	; (8002570 <main+0x12c>)
 8002500:	f003 fa4c 	bl	800599c <HAL_UART_Transmit>
	HAL_Delay(1000); // WAIT
 8002504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002508:	f000 fd2a 	bl	8002f60 <HAL_Delay>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of UARTToNode */
	osThreadDef(UARTToNode, SendDataToNodeThread, osPriorityNormal, 0, 128);
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <main+0x148>)
 800250e:	1d3c      	adds	r4, r7, #4
 8002510:	461d      	mov	r5, r3
 8002512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800251a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UARTToNodeHandle = osThreadCreate(osThread(UARTToNode), NULL);
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fe15 	bl	8006152 <osThreadCreate>
 8002528:	4603      	mov	r3, r0
 800252a:	4a19      	ldr	r2, [pc, #100]	; (8002590 <main+0x14c>)
 800252c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800252e:	f003 fe09 	bl	8006144 <osKernelStart>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ReadDataFromSensors();
 8002532:	f7ff fce7 	bl	8001f04 <ReadDataFromSensors>
		ProcessData();
 8002536:	f7ff fddf 	bl	80020f8 <ProcessData>

//		SendDataToNodeMCU();
		sprintf(uartData, "while\r\n");
 800253a:	4916      	ldr	r1, [pc, #88]	; (8002594 <main+0x150>)
 800253c:	480e      	ldr	r0, [pc, #56]	; (8002578 <main+0x134>)
 800253e:	f005 f855 	bl	80075ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002542:	480d      	ldr	r0, [pc, #52]	; (8002578 <main+0x134>)
 8002544:	f7fd fe4c 	bl	80001e0 <strlen>
 8002548:	4603      	mov	r3, r0
 800254a:	b29a      	uxth	r2, r3
 800254c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002550:	4909      	ldr	r1, [pc, #36]	; (8002578 <main+0x134>)
 8002552:	4807      	ldr	r0, [pc, #28]	; (8002570 <main+0x12c>)
 8002554:	f003 fa22 	bl	800599c <HAL_UART_Transmit>
		HAL_Delay(3000);
 8002558:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800255c:	f000 fd00 	bl	8002f60 <HAL_Delay>
		ReadDataFromSensors();
 8002560:	e7e7      	b.n	8002532 <main+0xee>
 8002562:	bf00      	nop
 8002564:	200005e4 	.word	0x200005e4
 8002568:	200005b8 	.word	0x200005b8
 800256c:	200002f0 	.word	0x200002f0
 8002570:	200003d4 	.word	0x200003d4
 8002574:	08008eac 	.word	0x08008eac
 8002578:	20000420 	.word	0x20000420
 800257c:	200005ec 	.word	0x200005ec
 8002580:	08008ecc 	.word	0x08008ecc
 8002584:	08008ed4 	.word	0x08008ed4
 8002588:	08008edc 	.word	0x08008edc
 800258c:	08008f08 	.word	0x08008f08
 8002590:	2000041c 	.word	0x2000041c
 8002594:	08008ef4 	.word	0x08008ef4

08002598 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b094      	sub	sp, #80	; 0x50
 800259c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800259e:	f107 0320 	add.w	r3, r7, #32
 80025a2:	2230      	movs	r2, #48	; 0x30
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f005 f840 	bl	800762c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <SystemClock_Config+0xc8>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <SystemClock_Config+0xc8>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <SystemClock_Config+0xc8>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025d8:	2300      	movs	r3, #0
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <SystemClock_Config+0xcc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a20      	ldr	r2, [pc, #128]	; (8002664 <SystemClock_Config+0xcc>)
 80025e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <SystemClock_Config+0xcc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025f4:	2301      	movs	r3, #1
 80025f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025fe:	2302      	movs	r3, #2
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002608:	2308      	movs	r3, #8
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800260c:	2364      	movs	r3, #100	; 0x64
 800260e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002610:	2302      	movs	r3, #2
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002614:	2304      	movs	r3, #4
 8002616:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002618:	f107 0320 	add.w	r3, r7, #32
 800261c:	4618      	mov	r0, r3
 800261e:	f001 ff83 	bl	8004528 <HAL_RCC_OscConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <SystemClock_Config+0x94>
		Error_Handler();
 8002628:	f000 fa2e 	bl	8002a88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800262c:	230f      	movs	r3, #15
 800262e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002630:	2302      	movs	r3, #2
 8002632:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	2101      	movs	r1, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f002 f9e5 	bl	8004a18 <HAL_RCC_ClockConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <SystemClock_Config+0xc0>
		Error_Handler();
 8002654:	f000 fa18 	bl	8002a88 <Error_Handler>
	}
}
 8002658:	bf00      	nop
 800265a:	3750      	adds	r7, #80	; 0x50
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000

08002668 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_I2C2_Init+0x50>)
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <MX_I2C2_Init+0x54>)
 8002670:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_I2C2_Init+0x50>)
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <MX_I2C2_Init+0x58>)
 8002676:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_I2C2_Init+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_I2C2_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_I2C2_Init+0x50>)
 8002686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800268a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <MX_I2C2_Init+0x50>)
 800268e:	2200      	movs	r2, #0
 8002690:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_I2C2_Init+0x50>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <MX_I2C2_Init+0x50>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_I2C2_Init+0x50>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80026a4:	4804      	ldr	r0, [pc, #16]	; (80026b8 <MX_I2C2_Init+0x50>)
 80026a6:	f000 ff1b 	bl	80034e0 <HAL_I2C_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80026b0:	f000 f9ea 	bl	8002a88 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200002f0 	.word	0x200002f0
 80026bc:	40005800 	.word	0x40005800
 80026c0:	000186a0 	.word	0x000186a0

080026c4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
 80026f0:	615a      	str	r2, [r3, #20]
 80026f2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <MX_TIM3_Init+0xe4>)
 80026f6:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <MX_TIM3_Init+0xe8>)
 80026f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100 - 1;
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <MX_TIM3_Init+0xe4>)
 80026fc:	2263      	movs	r2, #99	; 0x63
 80026fe:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002700:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <MX_TIM3_Init+0xe4>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <MX_TIM3_Init+0xe4>)
 8002708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800270c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <MX_TIM3_Init+0xe4>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <MX_TIM3_Init+0xe4>)
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800271a:	4823      	ldr	r0, [pc, #140]	; (80027a8 <MX_TIM3_Init+0xe4>)
 800271c:	f002 fb9c 	bl	8004e58 <HAL_TIM_Base_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM3_Init+0x66>
		Error_Handler();
 8002726:	f000 f9af 	bl	8002a88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800272a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002734:	4619      	mov	r1, r3
 8002736:	481c      	ldr	r0, [pc, #112]	; (80027a8 <MX_TIM3_Init+0xe4>)
 8002738:	f002 fcf8 	bl	800512c <HAL_TIM_ConfigClockSource>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM3_Init+0x82>
		Error_Handler();
 8002742:	f000 f9a1 	bl	8002a88 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002746:	4818      	ldr	r0, [pc, #96]	; (80027a8 <MX_TIM3_Init+0xe4>)
 8002748:	f002 fbd5 	bl	8004ef6 <HAL_TIM_PWM_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM3_Init+0x92>
		Error_Handler();
 8002752:	f000 f999 	bl	8002a88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800275e:	f107 0320 	add.w	r3, r7, #32
 8002762:	4619      	mov	r1, r3
 8002764:	4810      	ldr	r0, [pc, #64]	; (80027a8 <MX_TIM3_Init+0xe4>)
 8002766:	f003 f85b 	bl	8005820 <HAL_TIMEx_MasterConfigSynchronization>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002770:	f000 f98a 	bl	8002a88 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002774:	2360      	movs	r3, #96	; 0x60
 8002776:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	2200      	movs	r2, #0
 8002788:	4619      	mov	r1, r3
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <MX_TIM3_Init+0xe4>)
 800278c:	f002 fc0c 	bl	8004fa8 <HAL_TIM_PWM_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002796:	f000 f977 	bl	8002a88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <MX_TIM3_Init+0xe4>)
 800279c:	f000 fa22 	bl	8002be4 <HAL_TIM_MspPostInit>

}
 80027a0:	bf00      	nop
 80027a2:	3738      	adds	r7, #56	; 0x38
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000344 	.word	0x20000344
 80027ac:	40000400 	.word	0x40000400

080027b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_USART1_UART_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e8:	f003 f888 	bl	80058fc <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80027f2:	f000 f949 	bl	8002a88 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2000038c 	.word	0x2000038c
 8002800:	40011000 	.word	0x40011000

08002804 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <MX_USART2_UART_Init+0x50>)
 800280c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002814:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800283c:	f003 f85e 	bl	80058fc <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002846:	f000 f91f 	bl	8002a88 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200003d4 	.word	0x200003d4
 8002854:	40004400 	.word	0x40004400

08002858 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <MX_GPIO_Init+0xd4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a2d      	ldr	r2, [pc, #180]	; (800292c <MX_GPIO_Init+0xd4>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <MX_GPIO_Init+0xd4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b27      	ldr	r3, [pc, #156]	; (800292c <MX_GPIO_Init+0xd4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a26      	ldr	r2, [pc, #152]	; (800292c <MX_GPIO_Init+0xd4>)
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <MX_GPIO_Init+0xd4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <MX_GPIO_Init+0xd4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <MX_GPIO_Init+0xd4>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <MX_GPIO_Init+0xd4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <MX_GPIO_Init+0xd4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <MX_GPIO_Init+0xd4>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <MX_GPIO_Init+0xd4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_8, GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80028e4:	4812      	ldr	r0, [pc, #72]	; (8002930 <MX_GPIO_Init+0xd8>)
 80028e6:	f000 fde1 	bl	80034ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80028ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <MX_GPIO_Init+0xdc>)
 8002902:	f000 fc37 	bl	8003174 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA8 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_8;
 8002906:	f44f 7390 	mov.w	r3, #288	; 0x120
 800290a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290c:	2301      	movs	r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002910:	2301      	movs	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	4804      	ldr	r0, [pc, #16]	; (8002930 <MX_GPIO_Init+0xd8>)
 8002920:	f000 fc28 	bl	8003174 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002924:	bf00      	nop
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020800 	.word	0x40020800

08002938 <SendDataToNodeThread>:
 * @brief  Function implementing the UARTToNode thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_SendDataToNodeThread */
void SendDataToNodeThread(void const *argument) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		sprintf(uartData, "nok if\r\n");
 8002940:	4946      	ldr	r1, [pc, #280]	; (8002a5c <SendDataToNodeThread+0x124>)
 8002942:	4847      	ldr	r0, [pc, #284]	; (8002a60 <SendDataToNodeThread+0x128>)
 8002944:	f004 fe52 	bl	80075ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002948:	4845      	ldr	r0, [pc, #276]	; (8002a60 <SendDataToNodeThread+0x128>)
 800294a:	f7fd fc49 	bl	80001e0 <strlen>
 800294e:	4603      	mov	r3, r0
 8002950:	b29a      	uxth	r2, r3
 8002952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002956:	4942      	ldr	r1, [pc, #264]	; (8002a60 <SendDataToNodeThread+0x128>)
 8002958:	4842      	ldr	r0, [pc, #264]	; (8002a64 <SendDataToNodeThread+0x12c>)
 800295a:	f003 f81f 	bl	800599c <HAL_UART_Transmit>

//		if (cur_pressure != 0 && cur_temperature != 0 && cur_humidity != 0) {

		sprintf(uartData, "nai if\r\n");
 800295e:	4942      	ldr	r1, [pc, #264]	; (8002a68 <SendDataToNodeThread+0x130>)
 8002960:	483f      	ldr	r0, [pc, #252]	; (8002a60 <SendDataToNodeThread+0x128>)
 8002962:	f004 fe43 	bl	80075ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartData, strlen(uartData), 1000);
 8002966:	483e      	ldr	r0, [pc, #248]	; (8002a60 <SendDataToNodeThread+0x128>)
 8002968:	f7fd fc3a 	bl	80001e0 <strlen>
 800296c:	4603      	mov	r3, r0
 800296e:	b29a      	uxth	r2, r3
 8002970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002974:	493a      	ldr	r1, [pc, #232]	; (8002a60 <SendDataToNodeThread+0x128>)
 8002976:	483b      	ldr	r0, [pc, #236]	; (8002a64 <SendDataToNodeThread+0x12c>)
 8002978:	f003 f810 	bl	800599c <HAL_UART_Transmit>
		/* Call read_PM25_sensor every 15 seconds */
		/* Then send all datas to ESP8266 is the format "s{dustval},{latval},{latdir},{lonval},{londir}"  (s to indicate the start of the data)*/

		// Decompose dustval to string (sprintf won't work with float)
		int pressure_before_decimal = (int) cur_pressure;
 800297c:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <SendDataToNodeThread+0x134>)
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002986:	ee17 3a90 	vmov	r3, s15
 800298a:	61fb      	str	r3, [r7, #28]
		int pressure_after_decimal = (int) (100
				* (cur_pressure - pressure_before_decimal));
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <SendDataToNodeThread+0x134>)
 800298e:	ed93 7a00 	vldr	s14, [r3]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002a70 <SendDataToNodeThread+0x138>
 80029a4:	ee67 7a87 	vmul.f32	s15, s15, s14
		int pressure_after_decimal = (int) (100
 80029a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ac:	ee17 3a90 	vmov	r3, s15
 80029b0:	61bb      	str	r3, [r7, #24]

		int temperature_before_decimal = (int) cur_temperature;
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <SendDataToNodeThread+0x13c>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029bc:	ee17 3a90 	vmov	r3, s15
 80029c0:	617b      	str	r3, [r7, #20]
		int temperature_after_decimal = (int) (100
				* (cur_temperature - temperature_before_decimal));
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <SendDataToNodeThread+0x13c>)
 80029c4:	ed93 7a00 	vldr	s14, [r3]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002a70 <SendDataToNodeThread+0x138>
 80029da:	ee67 7a87 	vmul.f32	s15, s15, s14
		int temperature_after_decimal = (int) (100
 80029de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e2:	ee17 3a90 	vmov	r3, s15
 80029e6:	613b      	str	r3, [r7, #16]

		int humidity_before_decimal = (int) cur_humidity;
 80029e8:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <SendDataToNodeThread+0x140>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f2:	ee17 3a90 	vmov	r3, s15
 80029f6:	60fb      	str	r3, [r7, #12]
		int humidity_after_decimal = (int) (100
				* (cur_humidity - humidity_before_decimal));
 80029f8:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <SendDataToNodeThread+0x140>)
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002a70 <SendDataToNodeThread+0x138>
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
		int humidity_after_decimal = (int) (100
 8002a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a18:	ee17 3a90 	vmov	r3, s15
 8002a1c:	60bb      	str	r3, [r7, #8]
//			sprintf(pmbuffer, "s%d.%d,%d.%d,%d.%d,20\n", pressure_before_decimal,
//					pressure_after_decimal, temperature_before_decimal,
//					temperature_after_decimal, humidity_before_decimal,
//					humidity_after_decimal);
		//dummy
		sprintf(pmbuffer, "s1.2,3.4,5.67,20\n");
 8002a1e:	4917      	ldr	r1, [pc, #92]	; (8002a7c <SendDataToNodeThread+0x144>)
 8002a20:	4817      	ldr	r0, [pc, #92]	; (8002a80 <SendDataToNodeThread+0x148>)
 8002a22:	f004 fde3 	bl	80075ec <siprintf>
		// Transmit the message to ESP8266 in the correct format
		HAL_UART_Transmit(&huart1, (uint8_t*) pmbuffer, strlen(pmbuffer),
 8002a26:	4816      	ldr	r0, [pc, #88]	; (8002a80 <SendDataToNodeThread+0x148>)
 8002a28:	f7fd fbda 	bl	80001e0 <strlen>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
 8002a34:	4912      	ldr	r1, [pc, #72]	; (8002a80 <SendDataToNodeThread+0x148>)
 8002a36:	4813      	ldr	r0, [pc, #76]	; (8002a84 <SendDataToNodeThread+0x14c>)
 8002a38:	f002 ffb0 	bl	800599c <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		// uncomment to debug (print the sent message to console (baudrate=115200))
		HAL_UART_Transmit(&huart2, (uint8_t*) pmbuffer, strlen(pmbuffer),
 8002a3c:	4810      	ldr	r0, [pc, #64]	; (8002a80 <SendDataToNodeThread+0x148>)
 8002a3e:	f7fd fbcf 	bl	80001e0 <strlen>
 8002a42:	4603      	mov	r3, r0
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	490d      	ldr	r1, [pc, #52]	; (8002a80 <SendDataToNodeThread+0x148>)
 8002a4c:	4805      	ldr	r0, [pc, #20]	; (8002a64 <SendDataToNodeThread+0x12c>)
 8002a4e:	f002 ffa5 	bl	800599c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

//		}
		osDelay(20000);
 8002a52:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002a56:	f003 fbc8 	bl	80061ea <osDelay>
	for (;;) {
 8002a5a:	e771      	b.n	8002940 <SendDataToNodeThread+0x8>
 8002a5c:	08008f24 	.word	0x08008f24
 8002a60:	20000420 	.word	0x20000420
 8002a64:	200003d4 	.word	0x200003d4
 8002a68:	08008f30 	.word	0x08008f30
 8002a6c:	2000060c 	.word	0x2000060c
 8002a70:	42c80000 	.word	0x42c80000
 8002a74:	20000610 	.word	0x20000610
 8002a78:	20000614 	.word	0x20000614
 8002a7c:	08008f3c 	.word	0x08008f3c
 8002a80:	20000520 	.word	0x20000520
 8002a84:	2000038c 	.word	0x2000038c

08002a88 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a8c:	b672      	cpsid	i
}
 8002a8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a90:	e7fe      	b.n	8002a90 <Error_Handler+0x8>
	...

08002a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_MspInit+0x54>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <HAL_MspInit+0x54>)
 8002aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_MspInit+0x54>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_MspInit+0x54>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <HAL_MspInit+0x54>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_MspInit+0x54>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	f06f 0001 	mvn.w	r0, #1
 8002ada:	f000 fb22 	bl	8003122 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_I2C_MspInit+0xa8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d13d      	bne.n	8002b8a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_I2C_MspInit+0xac>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <HAL_I2C_MspInit+0xac>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_I2C_MspInit+0xac>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b30:	2312      	movs	r3, #18
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	4815      	ldr	r0, [pc, #84]	; (8002b9c <HAL_I2C_MspInit+0xb0>)
 8002b48:	f000 fb14 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b52:	2312      	movs	r3, #18
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002b5e:	2309      	movs	r3, #9
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <HAL_I2C_MspInit+0xb0>)
 8002b6a:	f000 fb03 	bl	8003174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_I2C_MspInit+0xac>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_I2C_MspInit+0xac>)
 8002b78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_I2C_MspInit+0xac>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	; 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40005800 	.word	0x40005800
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <HAL_TIM_Base_MspInit+0x3c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10d      	bne.n	8002bce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_TIM_Base_MspInit+0x40>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_TIM_Base_MspInit+0x40>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_TIM_Base_MspInit+0x40>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40023800 	.word	0x40023800

08002be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_TIM_MspPostInit+0x68>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d11d      	bne.n	8002c42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_TIM_MspPostInit+0x6c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_TIM_MspPostInit+0x6c>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_TIM_MspPostInit+0x6c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c22:	2340      	movs	r3, #64	; 0x40
 8002c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c32:	2302      	movs	r3, #2
 8002c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <HAL_TIM_MspPostInit+0x70>)
 8002c3e:	f000 fa99 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c42:	bf00      	nop
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020800 	.word	0x40020800

08002c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a32      	ldr	r2, [pc, #200]	; (8002d40 <HAL_UART_MspInit+0xe8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d12d      	bne.n	8002cd6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c84:	f043 0310 	orr.w	r3, r3, #16
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	4619      	mov	r1, r3
 8002cce:	481e      	ldr	r0, [pc, #120]	; (8002d48 <HAL_UART_MspInit+0xf0>)
 8002cd0:	f000 fa50 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cd4:	e030      	b.n	8002d38 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_UART_MspInit+0xf4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d12b      	bne.n	8002d38 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cee:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d18:	230c      	movs	r3, #12
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d28:	2307      	movs	r3, #7
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	4619      	mov	r1, r3
 8002d32:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_UART_MspInit+0xf0>)
 8002d34:	f000 fa1e 	bl	8003174 <HAL_GPIO_Init>
}
 8002d38:	bf00      	nop
 8002d3a:	3730      	adds	r7, #48	; 0x30
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40004400 	.word	0x40004400

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d54:	e7fe      	b.n	8002d54 <NMI_Handler+0x4>

08002d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <MemManage_Handler+0x4>

08002d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d80:	f000 f8ce 	bl	8002f20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d84:	f003 ffb4 	bl	8006cf0 <xTaskGetSchedulerState>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d8e:	f004 f9f3 	bl	8007178 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <_sbrk+0x5c>)
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <_sbrk+0x60>)
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <_sbrk+0x64>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <_sbrk+0x68>)
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d207      	bcs.n	8002dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc8:	f004 fc38 	bl	800763c <__errno>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	220c      	movs	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e009      	b.n	8002dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <_sbrk+0x64>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <_sbrk+0x64>)
 8002de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20020000 	.word	0x20020000
 8002df8:	00000400 	.word	0x00000400
 8002dfc:	20000624 	.word	0x20000624
 8002e00:	200044c8 	.word	0x200044c8

08002e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <SystemInit+0x20>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <SystemInit+0x20>)
 8002e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e2c:	f7ff ffea 	bl	8002e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e32:	490d      	ldr	r1, [pc, #52]	; (8002e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e34:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e48:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e56:	f004 fbf7 	bl	8007648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5a:	f7ff faf3 	bl	8002444 <main>
  bx  lr    
 8002e5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e68:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002e6c:	08008fe8 	.word	0x08008fe8
  ldr r2, =_sbss
 8002e70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002e74:	200044c8 	.word	0x200044c8

08002e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC_IRQHandler>
	...

08002e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_Init+0x40>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_Init+0x40>)
 8002e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <HAL_Init+0x40>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f000 f931 	bl	800310c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eaa:	200f      	movs	r0, #15
 8002eac:	f000 f808 	bl	8002ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb0:	f7ff fdf0 	bl	8002a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_InitTick+0x54>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_InitTick+0x58>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f93b 	bl	800315a <HAL_SYSTICK_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00e      	b.n	8002f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d80a      	bhi.n	8002f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f000 f911 	bl	8003122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <HAL_InitTick+0x5c>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000004 	.word	0x20000004
 8002f18:	2000000c 	.word	0x2000000c
 8002f1c:	20000008 	.word	0x20000008

08002f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x20>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x24>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_IncTick+0x24>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	20000628 	.word	0x20000628

08002f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_GetTick+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000628 	.word	0x20000628

08002f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff ffee 	bl	8002f48 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f86:	bf00      	nop
 8002f88:	f7ff ffde 	bl	8002f48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fda:	4a04      	ldr	r2, [pc, #16]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 0307 	and.w	r3, r3, #7
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	490c      	ldr	r1, [pc, #48]	; (8003058 <__NVIC_SetPriority+0x4c>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4908      	ldr	r1, [pc, #32]	; (800305c <__NVIC_SetPriority+0x50>)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3b04      	subs	r3, #4
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f1c3 0307 	rsb	r3, r3, #7
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf28      	it	cs
 800307e:	2304      	movcs	r3, #4
 8003080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3304      	adds	r3, #4
 8003086:	2b06      	cmp	r3, #6
 8003088:	d902      	bls.n	8003090 <NVIC_EncodePriority+0x30>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3b03      	subs	r3, #3
 800308e:	e000      	b.n	8003092 <NVIC_EncodePriority+0x32>
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43d9      	mvns	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	4313      	orrs	r3, r2
         );
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	; 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d8:	d301      	bcc.n	80030de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030da:	2301      	movs	r3, #1
 80030dc:	e00f      	b.n	80030fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <SysTick_Config+0x40>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e6:	210f      	movs	r1, #15
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f7ff ff8e 	bl	800300c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <SysTick_Config+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f6:	4b04      	ldr	r3, [pc, #16]	; (8003108 <SysTick_Config+0x40>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff47 	bl	8002fa8 <__NVIC_SetPriorityGrouping>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff5c 	bl	8002ff0 <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff8e 	bl	8003060 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5d 	bl	800300c <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ffb0 	bl	80030c8 <SysTick_Config>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e159      	b.n	8003444 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003190:	2201      	movs	r2, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f040 8148 	bne.w	800343e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d005      	beq.n	80031c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d130      	bne.n	8003228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 0201 	and.w	r2, r3, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b03      	cmp	r3, #3
 8003232:	d017      	beq.n	8003264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d123      	bne.n	80032b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	08da      	lsrs	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3208      	adds	r2, #8
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0203 	and.w	r2, r3, #3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a2 	beq.w	800343e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	4b57      	ldr	r3, [pc, #348]	; (800345c <HAL_GPIO_Init+0x2e8>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	4a56      	ldr	r2, [pc, #344]	; (800345c <HAL_GPIO_Init+0x2e8>)
 8003304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003308:	6453      	str	r3, [r2, #68]	; 0x44
 800330a:	4b54      	ldr	r3, [pc, #336]	; (800345c <HAL_GPIO_Init+0x2e8>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003316:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_GPIO_Init+0x2ec>)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	3302      	adds	r3, #2
 800331e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a49      	ldr	r2, [pc, #292]	; (8003464 <HAL_GPIO_Init+0x2f0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d019      	beq.n	8003376 <HAL_GPIO_Init+0x202>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a48      	ldr	r2, [pc, #288]	; (8003468 <HAL_GPIO_Init+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_GPIO_Init+0x1fe>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a47      	ldr	r2, [pc, #284]	; (800346c <HAL_GPIO_Init+0x2f8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00d      	beq.n	800336e <HAL_GPIO_Init+0x1fa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a46      	ldr	r2, [pc, #280]	; (8003470 <HAL_GPIO_Init+0x2fc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d007      	beq.n	800336a <HAL_GPIO_Init+0x1f6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a45      	ldr	r2, [pc, #276]	; (8003474 <HAL_GPIO_Init+0x300>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_GPIO_Init+0x1f2>
 8003362:	2304      	movs	r3, #4
 8003364:	e008      	b.n	8003378 <HAL_GPIO_Init+0x204>
 8003366:	2307      	movs	r3, #7
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x204>
 800336a:	2303      	movs	r3, #3
 800336c:	e004      	b.n	8003378 <HAL_GPIO_Init+0x204>
 800336e:	2302      	movs	r3, #2
 8003370:	e002      	b.n	8003378 <HAL_GPIO_Init+0x204>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x204>
 8003376:	2300      	movs	r3, #0
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	f002 0203 	and.w	r2, r2, #3
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4093      	lsls	r3, r2
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003388:	4935      	ldr	r1, [pc, #212]	; (8003460 <HAL_GPIO_Init+0x2ec>)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003396:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_GPIO_Init+0x304>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ba:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <HAL_GPIO_Init+0x304>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c0:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_GPIO_Init+0x304>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e4:	4a24      	ldr	r2, [pc, #144]	; (8003478 <HAL_GPIO_Init+0x304>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_GPIO_Init+0x304>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340e:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <HAL_GPIO_Init+0x304>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_GPIO_Init+0x304>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003438:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <HAL_GPIO_Init+0x304>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3301      	adds	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	f67f aea2 	bls.w	8003190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	40013800 	.word	0x40013800
 8003464:	40020000 	.word	0x40020000
 8003468:	40020400 	.word	0x40020400
 800346c:	40020800 	.word	0x40020800
 8003470:	40020c00 	.word	0x40020c00
 8003474:	40021000 	.word	0x40021000
 8003478:	40013c00 	.word	0x40013c00

0800347c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	e001      	b.n	800349e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c8:	e003      	b.n	80034d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	041a      	lsls	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e12b      	b.n	800374a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff faf0 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2224      	movs	r2, #36	; 0x24
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003544:	f001 fc60 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4a81      	ldr	r2, [pc, #516]	; (8003754 <HAL_I2C_Init+0x274>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d807      	bhi.n	8003564 <HAL_I2C_Init+0x84>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a80      	ldr	r2, [pc, #512]	; (8003758 <HAL_I2C_Init+0x278>)
 8003558:	4293      	cmp	r3, r2
 800355a:	bf94      	ite	ls
 800355c:	2301      	movls	r3, #1
 800355e:	2300      	movhi	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e006      	b.n	8003572 <HAL_I2C_Init+0x92>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a7d      	ldr	r2, [pc, #500]	; (800375c <HAL_I2C_Init+0x27c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	bf94      	ite	ls
 800356c:	2301      	movls	r3, #1
 800356e:	2300      	movhi	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0e7      	b.n	800374a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a78      	ldr	r2, [pc, #480]	; (8003760 <HAL_I2C_Init+0x280>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0c9b      	lsrs	r3, r3, #18
 8003584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a6a      	ldr	r2, [pc, #424]	; (8003754 <HAL_I2C_Init+0x274>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d802      	bhi.n	80035b4 <HAL_I2C_Init+0xd4>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3301      	adds	r3, #1
 80035b2:	e009      	b.n	80035c8 <HAL_I2C_Init+0xe8>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	4a69      	ldr	r2, [pc, #420]	; (8003764 <HAL_I2C_Init+0x284>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	3301      	adds	r3, #1
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	495c      	ldr	r1, [pc, #368]	; (8003754 <HAL_I2C_Init+0x274>)
 80035e4:	428b      	cmp	r3, r1
 80035e6:	d819      	bhi.n	800361c <HAL_I2C_Init+0x13c>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1e59      	subs	r1, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f6:	1c59      	adds	r1, r3, #1
 80035f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035fc:	400b      	ands	r3, r1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_I2C_Init+0x138>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e59      	subs	r1, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003616:	e051      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 8003618:	2304      	movs	r3, #4
 800361a:	e04f      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d111      	bne.n	8003648 <HAL_I2C_Init+0x168>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e012      	b.n	800366e <HAL_I2C_Init+0x18e>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e58      	subs	r0, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	0099      	lsls	r1, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	fbb0 f3f3 	udiv	r3, r0, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Init+0x196>
 8003672:	2301      	movs	r3, #1
 8003674:	e022      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10e      	bne.n	800369c <HAL_I2C_Init+0x1bc>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e58      	subs	r0, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	440b      	add	r3, r1
 800368c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369a:	e00f      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	0099      	lsls	r1, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	6809      	ldr	r1, [r1, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6911      	ldr	r1, [r2, #16]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68d2      	ldr	r2, [r2, #12]
 80036f6:	4311      	orrs	r1, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	000186a0 	.word	0x000186a0
 8003758:	001e847f 	.word	0x001e847f
 800375c:	003d08ff 	.word	0x003d08ff
 8003760:	431bde83 	.word	0x431bde83
 8003764:	10624dd3 	.word	0x10624dd3

08003768 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	817b      	strh	r3, [r7, #10]
 800377a:	460b      	mov	r3, r1
 800377c:	813b      	strh	r3, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003782:	f7ff fbe1 	bl	8002f48 <HAL_GetTick>
 8003786:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b20      	cmp	r3, #32
 8003792:	f040 80d9 	bne.w	8003948 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2319      	movs	r3, #25
 800379c:	2201      	movs	r2, #1
 800379e:	496d      	ldr	r1, [pc, #436]	; (8003954 <HAL_I2C_Mem_Write+0x1ec>)
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fc8b 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
 80037ae:	e0cc      	b.n	800394a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2C_Mem_Write+0x56>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0c5      	b.n	800394a <HAL_I2C_Mem_Write+0x1e2>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d007      	beq.n	80037e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2221      	movs	r2, #33	; 0x21
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2240      	movs	r2, #64	; 0x40
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a3a      	ldr	r2, [r7, #32]
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_I2C_Mem_Write+0x1f0>)
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003826:	88f8      	ldrh	r0, [r7, #6]
 8003828:	893a      	ldrh	r2, [r7, #8]
 800382a:	8979      	ldrh	r1, [r7, #10]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4603      	mov	r3, r0
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fac2 	bl	8003dc0 <I2C_RequestMemoryWrite>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d052      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e081      	b.n	800394a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fd50 	bl	80042f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b04      	cmp	r3, #4
 800385c:	d107      	bne.n	800386e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06b      	b.n	800394a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d11b      	bne.n	80038e8 <HAL_I2C_Mem_Write+0x180>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d017      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1aa      	bne.n	8003846 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fd43 	bl	8004380 <I2C_WaitOnBTFFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b04      	cmp	r3, #4
 8003906:	d107      	bne.n	8003918 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003916:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e016      	b.n	800394a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	00100002 	.word	0x00100002
 8003958:	ffff0000 	.word	0xffff0000

0800395c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	817b      	strh	r3, [r7, #10]
 800396e:	460b      	mov	r3, r1
 8003970:	813b      	strh	r3, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003976:	f7ff fae7 	bl	8002f48 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b20      	cmp	r3, #32
 8003986:	f040 8214 	bne.w	8003db2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2319      	movs	r3, #25
 8003990:	2201      	movs	r2, #1
 8003992:	497b      	ldr	r1, [pc, #492]	; (8003b80 <HAL_I2C_Mem_Read+0x224>)
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb91 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
 80039a2:	e207      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x56>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e200      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d007      	beq.n	80039d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2222      	movs	r2, #34	; 0x22
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a5b      	ldr	r2, [pc, #364]	; (8003b84 <HAL_I2C_Mem_Read+0x228>)
 8003a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a1a:	88f8      	ldrh	r0, [r7, #6]
 8003a1c:	893a      	ldrh	r2, [r7, #8]
 8003a1e:	8979      	ldrh	r1, [r7, #10]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	4603      	mov	r3, r0
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fa5e 	bl	8003eec <I2C_RequestMemoryRead>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e1bc      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d113      	bne.n	8003a6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e190      	b.n	8003d8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d11b      	bne.n	8003aaa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e170      	b.n	8003d8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d11b      	bne.n	8003aea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	e150      	b.n	8003d8c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b00:	e144      	b.n	8003d8c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	f200 80f1 	bhi.w	8003cee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d123      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fc79 	bl	8004410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e145      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b5a:	e117      	b.n	8003d8c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d14e      	bne.n	8003c02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4906      	ldr	r1, [pc, #24]	; (8003b88 <HAL_I2C_Mem_Read+0x22c>)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 faa4 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e11a      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
 8003b7e:	bf00      	nop
 8003b80:	00100002 	.word	0x00100002
 8003b84:	ffff0000 	.word	0xffff0000
 8003b88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c00:	e0c4      	b.n	8003d8c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2200      	movs	r2, #0
 8003c0a:	496c      	ldr	r1, [pc, #432]	; (8003dbc <HAL_I2C_Mem_Read+0x460>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fa55 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cb      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	2200      	movs	r2, #0
 8003c66:	4955      	ldr	r1, [pc, #340]	; (8003dbc <HAL_I2C_Mem_Read+0x460>)
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fa27 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e09d      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cec:	e04e      	b.n	8003d8c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fb8c 	bl	8004410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e058      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d124      	bne.n	8003d8c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d107      	bne.n	8003d5a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d58:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f47f aeb6 	bne.w	8003b02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e000      	b.n	8003db4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
  }
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3728      	adds	r7, #40	; 0x28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	00010004 	.word	0x00010004

08003dc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	817b      	strh	r3, [r7, #10]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	813b      	strh	r3, [r7, #8]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f960 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d103      	bne.n	8003e1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e05f      	b.n	8003ede <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	6a3a      	ldr	r2, [r7, #32]
 8003e32:	492d      	ldr	r1, [pc, #180]	; (8003ee8 <I2C_RequestMemoryWrite+0x128>)
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f9bb 	bl	80041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e04c      	b.n	8003ede <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fa46 	bl	80042f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d107      	bne.n	8003e82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e02b      	b.n	8003ede <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d105      	bne.n	8003e98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8c:	893b      	ldrh	r3, [r7, #8]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	611a      	str	r2, [r3, #16]
 8003e96:	e021      	b.n	8003edc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e98:	893b      	ldrh	r3, [r7, #8]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	6a39      	ldr	r1, [r7, #32]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa20 	bl	80042f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d107      	bne.n	8003ece <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e005      	b.n	8003ede <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed2:	893b      	ldrh	r3, [r7, #8]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	00010002 	.word	0x00010002

08003eec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	460b      	mov	r3, r1
 8003f00:	813b      	strh	r3, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f8c2 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d103      	bne.n	8003f56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e0aa      	b.n	80040b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5a:	897b      	ldrh	r3, [r7, #10]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	6a3a      	ldr	r2, [r7, #32]
 8003f6e:	4952      	ldr	r1, [pc, #328]	; (80040b8 <I2C_RequestMemoryRead+0x1cc>)
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f91d 	bl	80041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e097      	b.n	80040b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	6a39      	ldr	r1, [r7, #32]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f9a8 	bl	80042f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d107      	bne.n	8003fbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e076      	b.n	80040b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]
 8003fd2:	e021      	b.n	8004018 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe4:	6a39      	ldr	r1, [r7, #32]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f982 	bl	80042f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d107      	bne.n	800400a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e050      	b.n	80040b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400e:	893b      	ldrh	r3, [r7, #8]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	6a39      	ldr	r1, [r7, #32]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f967 	bl	80042f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00d      	beq.n	8004044 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b04      	cmp	r3, #4
 800402e:	d107      	bne.n	8004040 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e035      	b.n	80040b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004052:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	2200      	movs	r2, #0
 800405c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f82b 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d103      	bne.n	8004084 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e013      	b.n	80040b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	4906      	ldr	r1, [pc, #24]	; (80040b8 <I2C_RequestMemoryRead+0x1cc>)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f886 	bl	80041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	00010002 	.word	0x00010002

080040bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040cc:	e048      	b.n	8004160 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d044      	beq.n	8004160 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fe ff37 	bl	8002f48 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d139      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10d      	bne.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	43da      	mvns	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	e00c      	b.n	800412c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	43da      	mvns	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4013      	ands	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	429a      	cmp	r2, r3
 8004130:	d116      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e023      	b.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	0c1b      	lsrs	r3, r3, #16
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b01      	cmp	r3, #1
 8004168:	d10d      	bne.n	8004186 <I2C_WaitOnFlagUntilTimeout+0xca>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	43da      	mvns	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4013      	ands	r3, r2
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	e00c      	b.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	43da      	mvns	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d093      	beq.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041be:	e071      	b.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d123      	bne.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f043 0204 	orr.w	r2, r3, #4
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e067      	b.n	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d041      	beq.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004220:	f7fe fe92 	bl	8002f48 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d136      	bne.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10c      	bne.n	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	43da      	mvns	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e00b      	b.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e021      	b.n	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10c      	bne.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	43da      	mvns	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e00b      	b.n	80042e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	43da      	mvns	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f af6d 	bne.w	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042fc:	e034      	b.n	8004368 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f8e3 	bl	80044ca <I2C_IsAcknowledgeFailed>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e034      	b.n	8004378 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d028      	beq.n	8004368 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fe fe17 	bl	8002f48 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	d016      	beq.n	8004368 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e007      	b.n	8004378 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d1c3      	bne.n	80042fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800438c:	e034      	b.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f89b 	bl	80044ca <I2C_IsAcknowledgeFailed>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e034      	b.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d028      	beq.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fe fdcf 	bl	8002f48 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d11d      	bne.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d016      	beq.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e007      	b.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d1c3      	bne.n	800438e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800441c:	e049      	b.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d119      	bne.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0210 	mvn.w	r2, #16
 8004434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e030      	b.n	80044c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004460:	f7fe fd72 	bl	8002f48 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11d      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d016      	beq.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0220 	orr.w	r2, r3, #32
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e007      	b.n	80044c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d1ae      	bne.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e0:	d11b      	bne.n	800451a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f043 0204 	orr.w	r2, r3, #4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e267      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d075      	beq.n	8004632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d00c      	beq.n	800456c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800455a:	2b08      	cmp	r3, #8
 800455c:	d112      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455e:	4b82      	ldr	r3, [pc, #520]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456a:	d10b      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05b      	beq.n	8004630 <HAL_RCC_OscConfig+0x108>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d157      	bne.n	8004630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e242      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d106      	bne.n	800459c <HAL_RCC_OscConfig+0x74>
 800458e:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a75      	ldr	r2, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x98>
 80045a6:	4b70      	ldr	r3, [pc, #448]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6f      	ldr	r2, [pc, #444]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b6d      	ldr	r3, [pc, #436]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6c      	ldr	r2, [pc, #432]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 80045c0:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a68      	ldr	r2, [pc, #416]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b66      	ldr	r3, [pc, #408]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fe fcb2 	bl	8002f48 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fe fcae 	bl	8002f48 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e207      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0xc0>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe fc9e 	bl	8002f48 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe fc9a 	bl	8002f48 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1f3      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	4b51      	ldr	r3, [pc, #324]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0xe8>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d063      	beq.n	8004706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004652:	2b08      	cmp	r3, #8
 8004654:	d11c      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004656:	4b44      	ldr	r3, [pc, #272]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d116      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e1c7      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4937      	ldr	r1, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	e03a      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b34      	ldr	r3, [pc, #208]	; (800476c <HAL_RCC_OscConfig+0x244>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fe fc53 	bl	8002f48 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fe fc4f 	bl	8002f48 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1a8      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b28      	ldr	r3, [pc, #160]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4925      	ldr	r1, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	e015      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCC_OscConfig+0x244>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fe fc32 	bl	8002f48 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e8:	f7fe fc2e 	bl	8002f48 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e187      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d036      	beq.n	8004780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe fc12 	bl	8002f48 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004728:	f7fe fc0e 	bl	8002f48 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e167      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x200>
 8004746:	e01b      	b.n	8004780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fe fbfb 	bl	8002f48 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	e00e      	b.n	8004774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004756:	f7fe fbf7 	bl	8002f48 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d907      	bls.n	8004774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e150      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004768:	40023800 	.word	0x40023800
 800476c:	42470000 	.word	0x42470000
 8004770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ea      	bne.n	8004756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8097 	beq.w	80048bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004792:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	4b7d      	ldr	r3, [pc, #500]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a7c      	ldr	r2, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b77      	ldr	r3, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d118      	bne.n	80047fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ca:	4b74      	ldr	r3, [pc, #464]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a73      	ldr	r2, [pc, #460]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d6:	f7fe fbb7 	bl	8002f48 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047de:	f7fe fbb3 	bl	8002f48 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e10c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	4b6a      	ldr	r3, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ea>
 8004804:	4b64      	ldr	r3, [pc, #400]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a63      	ldr	r2, [pc, #396]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	e01c      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x30c>
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a5e      	ldr	r2, [pc, #376]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	6713      	str	r3, [r2, #112]	; 0x70
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	4a5b      	ldr	r2, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6713      	str	r3, [r2, #112]	; 0x70
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a54      	ldr	r2, [pc, #336]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004846:	f023 0304 	bic.w	r3, r3, #4
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fe fb78 	bl	8002f48 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	e00a      	b.n	8004872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fe fb74 	bl	8002f48 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0cb      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ee      	beq.n	800485c <HAL_RCC_OscConfig+0x334>
 800487e:	e014      	b.n	80048aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004880:	f7fe fb62 	bl	8002f48 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fe fb5e 	bl	8002f48 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0b5      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ee      	bne.n	8004888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b39      	ldr	r3, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	4a38      	ldr	r2, [pc, #224]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a1 	beq.w	8004a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c6:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d05c      	beq.n	800498c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d141      	bne.n	800495e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fe fb32 	bl	8002f48 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fe fb2e 	bl	8002f48 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e087      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	491b      	ldr	r1, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fe fb07 	bl	8002f48 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fe fb03 	bl	8002f48 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e05c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x416>
 800495c:	e054      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fe faf0 	bl	8002f48 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fe faec 	bl	8002f48 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e045      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x444>
 800498a:	e03d      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e038      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004998:	40023800 	.word	0x40023800
 800499c:	40007000 	.word	0x40007000
 80049a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4ec>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d028      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d121      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d11a      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d4:	4013      	ands	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	4293      	cmp	r3, r2
 80049de:	d111      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800

08004a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0cc      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90c      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0b8      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a6c:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a58      	ldr	r2, [pc, #352]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	494d      	ldr	r1, [pc, #308]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d044      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d119      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e07f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e067      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4934      	ldr	r1, [pc, #208]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b08:	f7fe fa1e 	bl	8002f48 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fe fa1a 	bl	8002f48 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e04f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d20c      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e032      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4916      	ldr	r1, [pc, #88]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	490e      	ldr	r1, [pc, #56]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9e:	f000 f821 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	490a      	ldr	r1, [pc, #40]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	5ccb      	ldrb	r3, [r1, r3]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe f97e 	bl	8002ec0 <HAL_InitTick>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	08008f58 	.word	0x08008f58
 8004bdc:	20000004 	.word	0x20000004
 8004be0:	20000008 	.word	0x20000008

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b094      	sub	sp, #80	; 0x50
 8004bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfc:	4b79      	ldr	r3, [pc, #484]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d00d      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x40>
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	f200 80e1 	bhi.w	8004dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x34>
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c16:	e0db      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b73      	ldr	r3, [pc, #460]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c1c:	e0db      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c1e:	4b73      	ldr	r3, [pc, #460]	; (8004dec <HAL_RCC_GetSysClockFreq+0x208>)
 8004c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c22:	e0d8      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c24:	4b6f      	ldr	r3, [pc, #444]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d063      	beq.n	8004d02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3a:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	2200      	movs	r2, #0
 8004c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4e:	2300      	movs	r3, #0
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
 8004c52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c56:	4622      	mov	r2, r4
 8004c58:	462b      	mov	r3, r5
 8004c5a:	f04f 0000 	mov.w	r0, #0
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	0159      	lsls	r1, r3, #5
 8004c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c68:	0150      	lsls	r0, r2, #5
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4621      	mov	r1, r4
 8004c70:	1a51      	subs	r1, r2, r1
 8004c72:	6139      	str	r1, [r7, #16]
 8004c74:	4629      	mov	r1, r5
 8004c76:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c88:	4659      	mov	r1, fp
 8004c8a:	018b      	lsls	r3, r1, #6
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c92:	4651      	mov	r1, sl
 8004c94:	018a      	lsls	r2, r1, #6
 8004c96:	4651      	mov	r1, sl
 8004c98:	ebb2 0801 	subs.w	r8, r2, r1
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	eb63 0901 	sbc.w	r9, r3, r1
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb6:	4690      	mov	r8, r2
 8004cb8:	4699      	mov	r9, r3
 8004cba:	4623      	mov	r3, r4
 8004cbc:	eb18 0303 	adds.w	r3, r8, r3
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	eb49 0303 	adc.w	r3, r9, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	024b      	lsls	r3, r1, #9
 8004cda:	4621      	mov	r1, r4
 8004cdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	024a      	lsls	r2, r1, #9
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cea:	2200      	movs	r2, #0
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf4:	f7fb ffa8 	bl	8000c48 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d00:	e058      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d12:	623b      	str	r3, [r7, #32]
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	f04f 0000 	mov.w	r0, #0
 8004d24:	f04f 0100 	mov.w	r1, #0
 8004d28:	0159      	lsls	r1, r3, #5
 8004d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d2e:	0150      	lsls	r0, r2, #5
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4641      	mov	r1, r8
 8004d36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d54:	ebb2 040a 	subs.w	r4, r2, sl
 8004d58:	eb63 050b 	sbc.w	r5, r3, fp
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	00eb      	lsls	r3, r5, #3
 8004d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d6a:	00e2      	lsls	r2, r4, #3
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	461d      	mov	r5, r3
 8004d70:	4643      	mov	r3, r8
 8004d72:	18e3      	adds	r3, r4, r3
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	464b      	mov	r3, r9
 8004d78:	eb45 0303 	adc.w	r3, r5, r3
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	028b      	lsls	r3, r1, #10
 8004d8e:	4621      	mov	r1, r4
 8004d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d94:	4621      	mov	r1, r4
 8004d96:	028a      	lsls	r2, r1, #10
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	61fa      	str	r2, [r7, #28]
 8004da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da8:	f7fb ff4e 	bl	8000c48 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4613      	mov	r3, r2
 8004db2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dce:	e002      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3750      	adds	r7, #80	; 0x50
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	00f42400 	.word	0x00f42400
 8004dec:	007a1200 	.word	0x007a1200

08004df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df4:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000004 	.word	0x20000004

08004e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e0c:	f7ff fff0 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	0a9b      	lsrs	r3, r3, #10
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	4903      	ldr	r1, [pc, #12]	; (8004e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	08008f68 	.word	0x08008f68

08004e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e34:	f7ff ffdc 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0b5b      	lsrs	r3, r3, #13
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4903      	ldr	r1, [pc, #12]	; (8004e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40023800 	.word	0x40023800
 8004e54:	08008f68 	.word	0x08008f68

08004e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e041      	b.n	8004eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fd fe8e 	bl	8002ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f000 fa10 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e041      	b.n	8004f8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f839 	bl	8004f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f000 f9c1 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e0ae      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	f200 809f 	bhi.w	8005114 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fd6:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005115 	.word	0x08005115
 8004fe4:	08005115 	.word	0x08005115
 8004fe8:	08005115 	.word	0x08005115
 8004fec:	08005051 	.word	0x08005051
 8004ff0:	08005115 	.word	0x08005115
 8004ff4:	08005115 	.word	0x08005115
 8004ff8:	08005115 	.word	0x08005115
 8004ffc:	08005093 	.word	0x08005093
 8005000:	08005115 	.word	0x08005115
 8005004:	08005115 	.word	0x08005115
 8005008:	08005115 	.word	0x08005115
 800500c:	080050d3 	.word	0x080050d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f9dc 	bl	80053d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0208 	orr.w	r2, r2, #8
 800502a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0204 	bic.w	r2, r2, #4
 800503a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6999      	ldr	r1, [r3, #24]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	619a      	str	r2, [r3, #24]
      break;
 800504e:	e064      	b.n	800511a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fa22 	bl	80054a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800506a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6999      	ldr	r1, [r3, #24]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	021a      	lsls	r2, r3, #8
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	619a      	str	r2, [r3, #24]
      break;
 8005090:	e043      	b.n	800511a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fa6d 	bl	8005578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0208 	orr.w	r2, r2, #8
 80050ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0204 	bic.w	r2, r2, #4
 80050bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69d9      	ldr	r1, [r3, #28]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	61da      	str	r2, [r3, #28]
      break;
 80050d0:	e023      	b.n	800511a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fab7 	bl	800564c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69d9      	ldr	r1, [r3, #28]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	021a      	lsls	r2, r3, #8
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	61da      	str	r2, [r3, #28]
      break;
 8005112:	e002      	b.n	800511a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
      break;
 8005118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_TIM_ConfigClockSource+0x1c>
 8005144:	2302      	movs	r3, #2
 8005146:	e0b4      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x186>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800516e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005180:	d03e      	beq.n	8005200 <HAL_TIM_ConfigClockSource+0xd4>
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005186:	f200 8087 	bhi.w	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 800518a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518e:	f000 8086 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x172>
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005196:	d87f      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	2b70      	cmp	r3, #112	; 0x70
 800519a:	d01a      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0xa6>
 800519c:	2b70      	cmp	r3, #112	; 0x70
 800519e:	d87b      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b60      	cmp	r3, #96	; 0x60
 80051a2:	d050      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x11a>
 80051a4:	2b60      	cmp	r3, #96	; 0x60
 80051a6:	d877      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051a8:	2b50      	cmp	r3, #80	; 0x50
 80051aa:	d03c      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0xfa>
 80051ac:	2b50      	cmp	r3, #80	; 0x50
 80051ae:	d873      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d058      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x13a>
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d86f      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d064      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d86b      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d060      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d867      	bhi.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d05c      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d05a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x15a>
 80051d0:	e062      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051e2:	f000 fafd 	bl	80057e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	609a      	str	r2, [r3, #8]
      break;
 80051fe:	e04f      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005210:	f000 fae6 	bl	80057e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005222:	609a      	str	r2, [r3, #8]
      break;
 8005224:	e03c      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005232:	461a      	mov	r2, r3
 8005234:	f000 fa5a 	bl	80056ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2150      	movs	r1, #80	; 0x50
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fab3 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005244:	e02c      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fa79 	bl	800574a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2160      	movs	r1, #96	; 0x60
 800525e:	4618      	mov	r0, r3
 8005260:	f000 faa3 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005264:	e01c      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005272:	461a      	mov	r2, r3
 8005274:	f000 fa3a 	bl	80056ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fa93 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005284:	e00c      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f000 fa8a 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005296:	e003      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	e000      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800529e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3a      	ldr	r2, [pc, #232]	; (80053b8 <TIM_Base_SetConfig+0xfc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a37      	ldr	r2, [pc, #220]	; (80053bc <TIM_Base_SetConfig+0x100>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a36      	ldr	r2, [pc, #216]	; (80053c0 <TIM_Base_SetConfig+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a35      	ldr	r2, [pc, #212]	; (80053c4 <TIM_Base_SetConfig+0x108>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2b      	ldr	r2, [pc, #172]	; (80053b8 <TIM_Base_SetConfig+0xfc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01b      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d017      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <TIM_Base_SetConfig+0x100>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <TIM_Base_SetConfig+0x104>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00f      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a26      	ldr	r2, [pc, #152]	; (80053c4 <TIM_Base_SetConfig+0x108>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00b      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <TIM_Base_SetConfig+0x10c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a24      	ldr	r2, [pc, #144]	; (80053cc <TIM_Base_SetConfig+0x110>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d108      	bne.n	8005358 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <TIM_Base_SetConfig+0xfc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d103      	bne.n	800538c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f023 0201 	bic.w	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	611a      	str	r2, [r3, #16]
  }
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f023 0201 	bic.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 0302 	bic.w	r3, r3, #2
 800541c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1c      	ldr	r2, [pc, #112]	; (800549c <TIM_OC1_SetConfig+0xc8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d10c      	bne.n	800544a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0308 	bic.w	r3, r3, #8
 8005436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a13      	ldr	r2, [pc, #76]	; (800549c <TIM_OC1_SetConfig+0xc8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d111      	bne.n	8005476 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	621a      	str	r2, [r3, #32]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40010000 	.word	0x40010000

080054a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f023 0210 	bic.w	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0320 	bic.w	r3, r3, #32
 80054ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <TIM_OC2_SetConfig+0xd4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10d      	bne.n	800551c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <TIM_OC2_SetConfig+0xd4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d113      	bne.n	800554c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000

08005578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <TIM_OC3_SetConfig+0xd0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10d      	bne.n	80055f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a14      	ldr	r2, [pc, #80]	; (8005648 <TIM_OC3_SetConfig+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40010000 	.word	0x40010000

0800564c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <TIM_OC4_SetConfig+0x9c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000

080056ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 030a 	bic.w	r3, r3, #10
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574a:	b480      	push	{r7}
 800574c:	b087      	sub	sp, #28
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f023 0210 	bic.w	r2, r3, #16
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	031b      	lsls	r3, r3, #12
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005786:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f043 0307 	orr.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005834:	2302      	movs	r3, #2
 8005836:	e050      	b.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d018      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005884:	d013      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d10c      	bne.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40014000 	.word	0x40014000

080058fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e042      	b.n	8005994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fd f998 	bl	8002c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f973 	bl	8005c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d175      	bne.n	8005aa8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Transmit+0x2c>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e06e      	b.n	8005aaa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2221      	movs	r2, #33	; 0x21
 80059d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059da:	f7fd fab5 	bl	8002f48 <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	88fa      	ldrh	r2, [r7, #6]
 80059e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d108      	bne.n	8005a08 <HAL_UART_Transmit+0x6c>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	e003      	b.n	8005a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a10:	e02e      	b.n	8005a70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2180      	movs	r1, #128	; 0x80
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f848 	bl	8005ab2 <UART_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e03a      	b.n	8005aaa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	e007      	b.n	8005a62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1cb      	bne.n	8005a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2140      	movs	r1, #64	; 0x40
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f814 	bl	8005ab2 <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e006      	b.n	8005aaa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e000      	b.n	8005aaa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac2:	e03b      	b.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d037      	beq.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005acc:	f7fd fa3c 	bl	8002f48 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	6a3a      	ldr	r2, [r7, #32]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d302      	bcc.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e03a      	b.n	8005b5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d023      	beq.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d020      	beq.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d01d      	beq.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d116      	bne.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f81d 	bl	8005b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e00f      	b.n	8005b5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4013      	ands	r3, r2
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d0b4      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b095      	sub	sp, #84	; 0x54
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b8c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3314      	adds	r3, #20
 8005bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d119      	bne.n	8005c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f023 0310 	bic.w	r3, r3, #16
 8005bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bfc:	61ba      	str	r2, [r7, #24]
 8005bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e5      	bne.n	8005bdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c1e:	bf00      	nop
 8005c20:	3754      	adds	r7, #84	; 0x54
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b0c0      	sub	sp, #256	; 0x100
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c48:	68d9      	ldr	r1, [r3, #12]
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	ea40 0301 	orr.w	r3, r0, r1
 8005c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c84:	f021 010c 	bic.w	r1, r1, #12
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c92:	430b      	orrs	r3, r1
 8005c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca6:	6999      	ldr	r1, [r3, #24]
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	ea40 0301 	orr.w	r3, r0, r1
 8005cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b8f      	ldr	r3, [pc, #572]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d005      	beq.n	8005ccc <UART_SetConfig+0xa0>
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b8d      	ldr	r3, [pc, #564]	; (8005efc <UART_SetConfig+0x2d0>)
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d104      	bne.n	8005cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7ff f8b0 	bl	8004e30 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cd4:	e003      	b.n	8005cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cd6:	f7ff f897 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 8005cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce8:	f040 810c 	bne.w	8005f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cfe:	4622      	mov	r2, r4
 8005d00:	462b      	mov	r3, r5
 8005d02:	1891      	adds	r1, r2, r2
 8005d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d06:	415b      	adcs	r3, r3
 8005d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d0e:	4621      	mov	r1, r4
 8005d10:	eb12 0801 	adds.w	r8, r2, r1
 8005d14:	4629      	mov	r1, r5
 8005d16:	eb43 0901 	adc.w	r9, r3, r1
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2e:	4690      	mov	r8, r2
 8005d30:	4699      	mov	r9, r3
 8005d32:	4623      	mov	r3, r4
 8005d34:	eb18 0303 	adds.w	r3, r8, r3
 8005d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d3c:	462b      	mov	r3, r5
 8005d3e:	eb49 0303 	adc.w	r3, r9, r3
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	18db      	adds	r3, r3, r3
 8005d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d60:	4613      	mov	r3, r2
 8005d62:	eb42 0303 	adc.w	r3, r2, r3
 8005d66:	657b      	str	r3, [r7, #84]	; 0x54
 8005d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d70:	f7fa ff6a 	bl	8000c48 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <UART_SetConfig+0x2d4>)
 8005d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	011c      	lsls	r4, r3, #4
 8005d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	1891      	adds	r1, r2, r2
 8005d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d9c:	415b      	adcs	r3, r3
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005da4:	4641      	mov	r1, r8
 8005da6:	eb12 0a01 	adds.w	sl, r2, r1
 8005daa:	4649      	mov	r1, r9
 8005dac:	eb43 0b01 	adc.w	fp, r3, r1
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc4:	4692      	mov	sl, r2
 8005dc6:	469b      	mov	fp, r3
 8005dc8:	4643      	mov	r3, r8
 8005dca:	eb1a 0303 	adds.w	r3, sl, r3
 8005dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8005dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005df0:	460b      	mov	r3, r1
 8005df2:	18db      	adds	r3, r3, r3
 8005df4:	643b      	str	r3, [r7, #64]	; 0x40
 8005df6:	4613      	mov	r3, r2
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e06:	f7fa ff1f 	bl	8000c48 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <UART_SetConfig+0x2d4>)
 8005e12:	fba3 2301 	umull	r2, r3, r3, r1
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	2264      	movs	r2, #100	; 0x64
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	1acb      	subs	r3, r1, r3
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e26:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <UART_SetConfig+0x2d4>)
 8005e28:	fba3 2302 	umull	r2, r3, r3, r2
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e34:	441c      	add	r4, r3
 8005e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e50:	415b      	adcs	r3, r3
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e58:	4641      	mov	r1, r8
 8005e5a:	1851      	adds	r1, r2, r1
 8005e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e5e:	4649      	mov	r1, r9
 8005e60:	414b      	adcs	r3, r1
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e70:	4659      	mov	r1, fp
 8005e72:	00cb      	lsls	r3, r1, #3
 8005e74:	4651      	mov	r1, sl
 8005e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	00ca      	lsls	r2, r1, #3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	4642      	mov	r2, r8
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	460a      	mov	r2, r1
 8005e90:	eb42 0303 	adc.w	r3, r2, r3
 8005e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005eac:	460b      	mov	r3, r1
 8005eae:	18db      	adds	r3, r3, r3
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	eb42 0303 	adc.w	r3, r2, r3
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ec2:	f7fa fec1 	bl	8000c48 <__aeabi_uldivmod>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <UART_SetConfig+0x2d4>)
 8005ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	2164      	movs	r1, #100	; 0x64
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	3332      	adds	r3, #50	; 0x32
 8005ede:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <UART_SetConfig+0x2d4>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	f003 0207 	and.w	r2, r3, #7
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4422      	add	r2, r4
 8005ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ef4:	e106      	b.n	8006104 <UART_SetConfig+0x4d8>
 8005ef6:	bf00      	nop
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	40011400 	.word	0x40011400
 8005f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f16:	4642      	mov	r2, r8
 8005f18:	464b      	mov	r3, r9
 8005f1a:	1891      	adds	r1, r2, r2
 8005f1c:	6239      	str	r1, [r7, #32]
 8005f1e:	415b      	adcs	r3, r3
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
 8005f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f26:	4641      	mov	r1, r8
 8005f28:	1854      	adds	r4, r2, r1
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	eb43 0501 	adc.w	r5, r3, r1
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	00eb      	lsls	r3, r5, #3
 8005f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f3e:	00e2      	lsls	r2, r4, #3
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	4643      	mov	r3, r8
 8005f46:	18e3      	adds	r3, r4, r3
 8005f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	eb45 0303 	adc.w	r3, r5, r3
 8005f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f72:	4629      	mov	r1, r5
 8005f74:	008b      	lsls	r3, r1, #2
 8005f76:	4621      	mov	r1, r4
 8005f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	008a      	lsls	r2, r1, #2
 8005f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f84:	f7fa fe60 	bl	8000c48 <__aeabi_uldivmod>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4b60      	ldr	r3, [pc, #384]	; (8006110 <UART_SetConfig+0x4e4>)
 8005f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	011c      	lsls	r4, r3, #4
 8005f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	61b9      	str	r1, [r7, #24]
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fb8:	4641      	mov	r1, r8
 8005fba:	1851      	adds	r1, r2, r1
 8005fbc:	6139      	str	r1, [r7, #16]
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	414b      	adcs	r3, r1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fd0:	4659      	mov	r1, fp
 8005fd2:	00cb      	lsls	r3, r1, #3
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fda:	4651      	mov	r1, sl
 8005fdc:	00ca      	lsls	r2, r1, #3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fec:	464b      	mov	r3, r9
 8005fee:	460a      	mov	r2, r1
 8005ff0:	eb42 0303 	adc.w	r3, r2, r3
 8005ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	67bb      	str	r3, [r7, #120]	; 0x78
 8006002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006010:	4649      	mov	r1, r9
 8006012:	008b      	lsls	r3, r1, #2
 8006014:	4641      	mov	r1, r8
 8006016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800601a:	4641      	mov	r1, r8
 800601c:	008a      	lsls	r2, r1, #2
 800601e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006022:	f7fa fe11 	bl	8000c48 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4611      	mov	r1, r2
 800602c:	4b38      	ldr	r3, [pc, #224]	; (8006110 <UART_SetConfig+0x4e4>)
 800602e:	fba3 2301 	umull	r2, r3, r3, r1
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	2264      	movs	r2, #100	; 0x64
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	1acb      	subs	r3, r1, r3
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	3332      	adds	r3, #50	; 0x32
 8006040:	4a33      	ldr	r2, [pc, #204]	; (8006110 <UART_SetConfig+0x4e4>)
 8006042:	fba2 2303 	umull	r2, r3, r2, r3
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800604c:	441c      	add	r4, r3
 800604e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006052:	2200      	movs	r2, #0
 8006054:	673b      	str	r3, [r7, #112]	; 0x70
 8006056:	677a      	str	r2, [r7, #116]	; 0x74
 8006058:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	1891      	adds	r1, r2, r2
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	415b      	adcs	r3, r3
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800606c:	4641      	mov	r1, r8
 800606e:	1851      	adds	r1, r2, r1
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	4649      	mov	r1, r9
 8006074:	414b      	adcs	r3, r1
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006084:	4659      	mov	r1, fp
 8006086:	00cb      	lsls	r3, r1, #3
 8006088:	4651      	mov	r1, sl
 800608a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800608e:	4651      	mov	r1, sl
 8006090:	00ca      	lsls	r2, r1, #3
 8006092:	4610      	mov	r0, r2
 8006094:	4619      	mov	r1, r3
 8006096:	4603      	mov	r3, r0
 8006098:	4642      	mov	r2, r8
 800609a:	189b      	adds	r3, r3, r2
 800609c:	66bb      	str	r3, [r7, #104]	; 0x68
 800609e:	464b      	mov	r3, r9
 80060a0:	460a      	mov	r2, r1
 80060a2:	eb42 0303 	adc.w	r3, r2, r3
 80060a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	663b      	str	r3, [r7, #96]	; 0x60
 80060b2:	667a      	str	r2, [r7, #100]	; 0x64
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060c0:	4649      	mov	r1, r9
 80060c2:	008b      	lsls	r3, r1, #2
 80060c4:	4641      	mov	r1, r8
 80060c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ca:	4641      	mov	r1, r8
 80060cc:	008a      	lsls	r2, r1, #2
 80060ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060d2:	f7fa fdb9 	bl	8000c48 <__aeabi_uldivmod>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <UART_SetConfig+0x4e4>)
 80060dc:	fba3 1302 	umull	r1, r3, r3, r2
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	2164      	movs	r1, #100	; 0x64
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	3332      	adds	r3, #50	; 0x32
 80060ee:	4a08      	ldr	r2, [pc, #32]	; (8006110 <UART_SetConfig+0x4e4>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4422      	add	r2, r4
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800610a:	46bd      	mov	sp, r7
 800610c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006110:	51eb851f 	.word	0x51eb851f

08006114 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006126:	2b84      	cmp	r3, #132	; 0x84
 8006128:	d005      	beq.n	8006136 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800612a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	3303      	adds	r3, #3
 8006134:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006136:	68fb      	ldr	r3, [r7, #12]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006148:	f000 fade 	bl	8006708 <vTaskStartScheduler>
  
  return osOK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	bd80      	pop	{r7, pc}

08006152 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006152:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006154:	b089      	sub	sp, #36	; 0x24
 8006156:	af04      	add	r7, sp, #16
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d020      	beq.n	80061a6 <osThreadCreate+0x54>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01c      	beq.n	80061a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685c      	ldr	r4, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691e      	ldr	r6, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff ffc8 	bl	8006114 <makeFreeRtosPriority>
 8006184:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800618e:	9202      	str	r2, [sp, #8]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	9100      	str	r1, [sp, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	4632      	mov	r2, r6
 8006198:	4629      	mov	r1, r5
 800619a:	4620      	mov	r0, r4
 800619c:	f000 f8ed 	bl	800637a <xTaskCreateStatic>
 80061a0:	4603      	mov	r3, r0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e01c      	b.n	80061e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685c      	ldr	r4, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff ffaa 	bl	8006114 <makeFreeRtosPriority>
 80061c0:	4602      	mov	r2, r0
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	9200      	str	r2, [sp, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	4632      	mov	r2, r6
 80061ce:	4629      	mov	r1, r5
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 f92f 	bl	8006434 <xTaskCreate>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d001      	beq.n	80061e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	e000      	b.n	80061e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061e0:	68fb      	ldr	r3, [r7, #12]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <osDelay+0x16>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	e000      	b.n	8006202 <osDelay+0x18>
 8006200:	2301      	movs	r3, #1
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fa4c 	bl	80066a0 <vTaskDelay>
  
  return osOK;
 8006208:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f103 0208 	add.w	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f103 0208 	add.w	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f103 0208 	add.w	r2, r3, #8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]
}
 80062a8:	bf00      	nop
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d103      	bne.n	80062d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e00c      	b.n	80062ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3308      	adds	r3, #8
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e002      	b.n	80062e2 <vListInsert+0x2e>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d2f6      	bcs.n	80062dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6892      	ldr	r2, [r2, #8]
 800633c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6852      	ldr	r2, [r2, #4]
 8006346:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d103      	bne.n	800635a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800637a:	b580      	push	{r7, lr}
 800637c:	b08e      	sub	sp, #56	; 0x38
 800637e:	af04      	add	r7, sp, #16
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xTaskCreateStatic+0x46>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	61fb      	str	r3, [r7, #28]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063c0:	2354      	movs	r3, #84	; 0x54
 80063c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b54      	cmp	r3, #84	; 0x54
 80063c8:	d00a      	beq.n	80063e0 <xTaskCreateStatic+0x66>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	61bb      	str	r3, [r7, #24]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01e      	beq.n	8006426 <xTaskCreateStatic+0xac>
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01b      	beq.n	8006426 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006400:	2300      	movs	r3, #0
 8006402:	9303      	str	r3, [sp, #12]
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	9302      	str	r3, [sp, #8]
 8006408:	f107 0314 	add.w	r3, r7, #20
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f850 	bl	80064be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800641e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006420:	f000 f8d4 	bl	80065cc <prvAddNewTaskToReadyList>
 8006424:	e001      	b.n	800642a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800642a:	697b      	ldr	r3, [r7, #20]
	}
 800642c:	4618      	mov	r0, r3
 800642e:	3728      	adds	r7, #40	; 0x28
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	; 0x30
 8006438:	af04      	add	r7, sp, #16
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fee5 	bl	8007218 <pvPortMalloc>
 800644e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00e      	beq.n	8006474 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006456:	2054      	movs	r0, #84	; 0x54
 8006458:	f000 fede 	bl	8007218 <pvPortMalloc>
 800645c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
 800646a:	e005      	b.n	8006478 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800646c:	6978      	ldr	r0, [r7, #20]
 800646e:	f000 ff9f 	bl	80073b0 <vPortFree>
 8006472:	e001      	b.n	8006478 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d017      	beq.n	80064ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	2300      	movs	r3, #0
 800648a:	9303      	str	r3, [sp, #12]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	9302      	str	r3, [sp, #8]
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f80e 	bl	80064be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a2:	69f8      	ldr	r0, [r7, #28]
 80064a4:	f000 f892 	bl	80065cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064a8:	2301      	movs	r3, #1
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	e002      	b.n	80064b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064ae:	f04f 33ff 	mov.w	r3, #4294967295
 80064b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064b4:	69bb      	ldr	r3, [r7, #24]
	}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b088      	sub	sp, #32
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064d6:	3b01      	subs	r3, #1
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f023 0307 	bic.w	r3, r3, #7
 80064e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <prvInitialiseNewTask+0x48>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	617b      	str	r3, [r7, #20]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01f      	beq.n	800654c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e012      	b.n	8006538 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	7819      	ldrb	r1, [r3, #0]
 800651a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	3334      	adds	r3, #52	; 0x34
 8006522:	460a      	mov	r2, r1
 8006524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d006      	beq.n	8006540 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3301      	adds	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b0f      	cmp	r3, #15
 800653c:	d9e9      	bls.n	8006512 <prvInitialiseNewTask+0x54>
 800653e:	e000      	b.n	8006542 <prvInitialiseNewTask+0x84>
			{
				break;
 8006540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800654a:	e003      	b.n	8006554 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	2b06      	cmp	r3, #6
 8006558:	d901      	bls.n	800655e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800655a:	2306      	movs	r3, #6
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006562:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006568:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2200      	movs	r2, #0
 800656e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	3304      	adds	r3, #4
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff fe6c 	bl	8006252 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	3318      	adds	r3, #24
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fe67 	bl	8006252 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	f1c3 0207 	rsb	r2, r3, #7
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006598:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	2200      	movs	r2, #0
 800659e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	69b8      	ldr	r0, [r7, #24]
 80065ae:	f000 fc23 	bl	8006df8 <pxPortInitialiseStack>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c4:	bf00      	nop
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065d4:	f000 fd3e 	bl	8007054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065d8:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <prvAddNewTaskToReadyList+0xb8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	4a29      	ldr	r2, [pc, #164]	; (8006684 <prvAddNewTaskToReadyList+0xb8>)
 80065e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065e2:	4b29      	ldr	r3, [pc, #164]	; (8006688 <prvAddNewTaskToReadyList+0xbc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ea:	4a27      	ldr	r2, [pc, #156]	; (8006688 <prvAddNewTaskToReadyList+0xbc>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065f0:	4b24      	ldr	r3, [pc, #144]	; (8006684 <prvAddNewTaskToReadyList+0xb8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d110      	bne.n	800661a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065f8:	f000 fabc 	bl	8006b74 <prvInitialiseTaskLists>
 80065fc:	e00d      	b.n	800661a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065fe:	4b23      	ldr	r3, [pc, #140]	; (800668c <prvAddNewTaskToReadyList+0xc0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <prvAddNewTaskToReadyList+0xbc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	429a      	cmp	r2, r3
 8006612:	d802      	bhi.n	800661a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006614:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <prvAddNewTaskToReadyList+0xbc>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <prvAddNewTaskToReadyList+0xc4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3301      	adds	r3, #1
 8006620:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <prvAddNewTaskToReadyList+0xc4>)
 8006622:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <prvAddNewTaskToReadyList+0xc8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4313      	orrs	r3, r2
 8006632:	4a18      	ldr	r2, [pc, #96]	; (8006694 <prvAddNewTaskToReadyList+0xc8>)
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4a15      	ldr	r2, [pc, #84]	; (8006698 <prvAddNewTaskToReadyList+0xcc>)
 8006644:	441a      	add	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3304      	adds	r3, #4
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	f7ff fe0d 	bl	800626c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006652:	f000 fd2f 	bl	80070b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <prvAddNewTaskToReadyList+0xc0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00e      	beq.n	800667c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800665e:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <prvAddNewTaskToReadyList+0xbc>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	429a      	cmp	r2, r3
 800666a:	d207      	bcs.n	800667c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <prvAddNewTaskToReadyList+0xd0>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	2000072c 	.word	0x2000072c
 8006688:	2000062c 	.word	0x2000062c
 800668c:	20000738 	.word	0x20000738
 8006690:	20000748 	.word	0x20000748
 8006694:	20000734 	.word	0x20000734
 8006698:	20000630 	.word	0x20000630
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d017      	beq.n	80066e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <vTaskDelay+0x60>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <vTaskDelay+0x30>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60bb      	str	r3, [r7, #8]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066d0:	f000 f87a 	bl	80067c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066d4:	2100      	movs	r1, #0
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fb28 	bl	8006d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066dc:	f000 f882 	bl	80067e4 <xTaskResumeAll>
 80066e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066e8:	4b06      	ldr	r3, [pc, #24]	; (8006704 <vTaskDelay+0x64>)
 80066ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000754 	.word	0x20000754
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006716:	463a      	mov	r2, r7
 8006718:	1d39      	adds	r1, r7, #4
 800671a:	f107 0308 	add.w	r3, r7, #8
 800671e:	4618      	mov	r0, r3
 8006720:	f7fb fbd6 	bl	8001ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	9202      	str	r2, [sp, #8]
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	2300      	movs	r3, #0
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	2300      	movs	r3, #0
 8006734:	460a      	mov	r2, r1
 8006736:	491e      	ldr	r1, [pc, #120]	; (80067b0 <vTaskStartScheduler+0xa8>)
 8006738:	481e      	ldr	r0, [pc, #120]	; (80067b4 <vTaskStartScheduler+0xac>)
 800673a:	f7ff fe1e 	bl	800637a <xTaskCreateStatic>
 800673e:	4603      	mov	r3, r0
 8006740:	4a1d      	ldr	r2, [pc, #116]	; (80067b8 <vTaskStartScheduler+0xb0>)
 8006742:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006744:	4b1c      	ldr	r3, [pc, #112]	; (80067b8 <vTaskStartScheduler+0xb0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800674c:	2301      	movs	r3, #1
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	e001      	b.n	8006756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d116      	bne.n	800678a <vTaskStartScheduler+0x82>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	613b      	str	r3, [r7, #16]
}
 800676e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <vTaskStartScheduler+0xb4>)
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006778:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <vTaskStartScheduler+0xb8>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800677e:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <vTaskStartScheduler+0xbc>)
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006784:	f000 fbc4 	bl	8006f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006788:	e00e      	b.n	80067a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d10a      	bne.n	80067a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60fb      	str	r3, [r7, #12]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <vTaskStartScheduler+0x9e>
}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	08008f50 	.word	0x08008f50
 80067b4:	08006b45 	.word	0x08006b45
 80067b8:	20000750 	.word	0x20000750
 80067bc:	2000074c 	.word	0x2000074c
 80067c0:	20000738 	.word	0x20000738
 80067c4:	20000730 	.word	0x20000730

080067c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <vTaskSuspendAll+0x18>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a03      	ldr	r2, [pc, #12]	; (80067e0 <vTaskSuspendAll+0x18>)
 80067d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067d6:	bf00      	nop
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	20000754 	.word	0x20000754

080067e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067f2:	4b41      	ldr	r3, [pc, #260]	; (80068f8 <xTaskResumeAll+0x114>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <xTaskResumeAll+0x2c>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	603b      	str	r3, [r7, #0]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006810:	f000 fc20 	bl	8007054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006814:	4b38      	ldr	r3, [pc, #224]	; (80068f8 <xTaskResumeAll+0x114>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3b01      	subs	r3, #1
 800681a:	4a37      	ldr	r2, [pc, #220]	; (80068f8 <xTaskResumeAll+0x114>)
 800681c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800681e:	4b36      	ldr	r3, [pc, #216]	; (80068f8 <xTaskResumeAll+0x114>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d161      	bne.n	80068ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006826:	4b35      	ldr	r3, [pc, #212]	; (80068fc <xTaskResumeAll+0x118>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d05d      	beq.n	80068ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800682e:	e02e      	b.n	800688e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006830:	4b33      	ldr	r3, [pc, #204]	; (8006900 <xTaskResumeAll+0x11c>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3318      	adds	r3, #24
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fd72 	bl	8006326 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff fd6d 	bl	8006326 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	2201      	movs	r2, #1
 8006852:	409a      	lsls	r2, r3
 8006854:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <xTaskResumeAll+0x120>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4313      	orrs	r3, r2
 800685a:	4a2a      	ldr	r2, [pc, #168]	; (8006904 <xTaskResumeAll+0x120>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a27      	ldr	r2, [pc, #156]	; (8006908 <xTaskResumeAll+0x124>)
 800686c:	441a      	add	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7ff fcf9 	bl	800626c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	4b23      	ldr	r3, [pc, #140]	; (800690c <xTaskResumeAll+0x128>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d302      	bcc.n	800688e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006888:	4b21      	ldr	r3, [pc, #132]	; (8006910 <xTaskResumeAll+0x12c>)
 800688a:	2201      	movs	r2, #1
 800688c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800688e:	4b1c      	ldr	r3, [pc, #112]	; (8006900 <xTaskResumeAll+0x11c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1cc      	bne.n	8006830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800689c:	f000 fa08 	bl	8006cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068a0:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <xTaskResumeAll+0x130>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d010      	beq.n	80068ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068ac:	f000 f836 	bl	800691c <xTaskIncrementTick>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80068b6:	4b16      	ldr	r3, [pc, #88]	; (8006910 <xTaskResumeAll+0x12c>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3b01      	subs	r3, #1
 80068c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f1      	bne.n	80068ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80068c8:	4b12      	ldr	r3, [pc, #72]	; (8006914 <xTaskResumeAll+0x130>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <xTaskResumeAll+0x12c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068d6:	2301      	movs	r3, #1
 80068d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <xTaskResumeAll+0x134>)
 80068dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068ea:	f000 fbe3 	bl	80070b4 <vPortExitCritical>

	return xAlreadyYielded;
 80068ee:	68bb      	ldr	r3, [r7, #8]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000754 	.word	0x20000754
 80068fc:	2000072c 	.word	0x2000072c
 8006900:	200006ec 	.word	0x200006ec
 8006904:	20000734 	.word	0x20000734
 8006908:	20000630 	.word	0x20000630
 800690c:	2000062c 	.word	0x2000062c
 8006910:	20000740 	.word	0x20000740
 8006914:	2000073c 	.word	0x2000073c
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006926:	4b4e      	ldr	r3, [pc, #312]	; (8006a60 <xTaskIncrementTick+0x144>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 808e 	bne.w	8006a4c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006930:	4b4c      	ldr	r3, [pc, #304]	; (8006a64 <xTaskIncrementTick+0x148>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006938:	4a4a      	ldr	r2, [pc, #296]	; (8006a64 <xTaskIncrementTick+0x148>)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d120      	bne.n	8006986 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006944:	4b48      	ldr	r3, [pc, #288]	; (8006a68 <xTaskIncrementTick+0x14c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <xTaskIncrementTick+0x48>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	603b      	str	r3, [r7, #0]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <xTaskIncrementTick+0x46>
 8006964:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <xTaskIncrementTick+0x14c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	4b40      	ldr	r3, [pc, #256]	; (8006a6c <xTaskIncrementTick+0x150>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3e      	ldr	r2, [pc, #248]	; (8006a68 <xTaskIncrementTick+0x14c>)
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	4a3e      	ldr	r2, [pc, #248]	; (8006a6c <xTaskIncrementTick+0x150>)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4b3d      	ldr	r3, [pc, #244]	; (8006a70 <xTaskIncrementTick+0x154>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	4a3c      	ldr	r2, [pc, #240]	; (8006a70 <xTaskIncrementTick+0x154>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	f000 f995 	bl	8006cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006986:	4b3b      	ldr	r3, [pc, #236]	; (8006a74 <xTaskIncrementTick+0x158>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d348      	bcc.n	8006a22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006990:	4b35      	ldr	r3, [pc, #212]	; (8006a68 <xTaskIncrementTick+0x14c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699a:	4b36      	ldr	r3, [pc, #216]	; (8006a74 <xTaskIncrementTick+0x158>)
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	601a      	str	r2, [r3, #0]
					break;
 80069a2:	e03e      	b.n	8006a22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a4:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <xTaskIncrementTick+0x14c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d203      	bcs.n	80069c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069bc:	4a2d      	ldr	r2, [pc, #180]	; (8006a74 <xTaskIncrementTick+0x158>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069c2:	e02e      	b.n	8006a22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fcac 	bl	8006326 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3318      	adds	r3, #24
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fca3 	bl	8006326 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	2201      	movs	r2, #1
 80069e6:	409a      	lsls	r2, r3
 80069e8:	4b23      	ldr	r3, [pc, #140]	; (8006a78 <xTaskIncrementTick+0x15c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <xTaskIncrementTick+0x15c>)
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <xTaskIncrementTick+0x160>)
 8006a00:	441a      	add	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7ff fc2f 	bl	800626c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <xTaskIncrementTick+0x164>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d3b9      	bcc.n	8006990 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a20:	e7b6      	b.n	8006990 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a22:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <xTaskIncrementTick+0x164>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a28:	4914      	ldr	r1, [pc, #80]	; (8006a7c <xTaskIncrementTick+0x160>)
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d901      	bls.n	8006a3e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a3e:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <xTaskIncrementTick+0x168>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e004      	b.n	8006a56 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <xTaskIncrementTick+0x16c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3301      	adds	r3, #1
 8006a52:	4a0d      	ldr	r2, [pc, #52]	; (8006a88 <xTaskIncrementTick+0x16c>)
 8006a54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a56:	697b      	ldr	r3, [r7, #20]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000754 	.word	0x20000754
 8006a64:	20000730 	.word	0x20000730
 8006a68:	200006e4 	.word	0x200006e4
 8006a6c:	200006e8 	.word	0x200006e8
 8006a70:	20000744 	.word	0x20000744
 8006a74:	2000074c 	.word	0x2000074c
 8006a78:	20000734 	.word	0x20000734
 8006a7c:	20000630 	.word	0x20000630
 8006a80:	2000062c 	.word	0x2000062c
 8006a84:	20000740 	.word	0x20000740
 8006a88:	2000073c 	.word	0x2000073c

08006a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a92:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <vTaskSwitchContext+0xa4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a9a:	4b26      	ldr	r3, [pc, #152]	; (8006b34 <vTaskSwitchContext+0xa8>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006aa0:	e03f      	b.n	8006b22 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006aa2:	4b24      	ldr	r3, [pc, #144]	; (8006b34 <vTaskSwitchContext+0xa8>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa8:	4b23      	ldr	r3, [pc, #140]	; (8006b38 <vTaskSwitchContext+0xac>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	fab3 f383 	clz	r3, r3
 8006ab4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	f1c3 031f 	rsb	r3, r3, #31
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	491f      	ldr	r1, [pc, #124]	; (8006b3c <vTaskSwitchContext+0xb0>)
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	607b      	str	r3, [r7, #4]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <vTaskSwitchContext+0x5a>
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <vTaskSwitchContext+0xb0>)
 8006af4:	4413      	add	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d104      	bne.n	8006b18 <vTaskSwitchContext+0x8c>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	605a      	str	r2, [r3, #4]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <vTaskSwitchContext+0xb4>)
 8006b20:	6013      	str	r3, [r2, #0]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000754 	.word	0x20000754
 8006b34:	20000740 	.word	0x20000740
 8006b38:	20000734 	.word	0x20000734
 8006b3c:	20000630 	.word	0x20000630
 8006b40:	2000062c 	.word	0x2000062c

08006b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b4c:	f000 f852 	bl	8006bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b50:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <prvIdleTask+0x28>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d9f9      	bls.n	8006b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b58:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <prvIdleTask+0x2c>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b68:	e7f0      	b.n	8006b4c <prvIdleTask+0x8>
 8006b6a:	bf00      	nop
 8006b6c:	20000630 	.word	0x20000630
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	e00c      	b.n	8006b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <prvInitialiseTaskLists+0x60>)
 8006b8c:	4413      	add	r3, r2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fb3f 	bl	8006212 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3301      	adds	r3, #1
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b06      	cmp	r3, #6
 8006b9e:	d9ef      	bls.n	8006b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ba0:	480d      	ldr	r0, [pc, #52]	; (8006bd8 <prvInitialiseTaskLists+0x64>)
 8006ba2:	f7ff fb36 	bl	8006212 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ba6:	480d      	ldr	r0, [pc, #52]	; (8006bdc <prvInitialiseTaskLists+0x68>)
 8006ba8:	f7ff fb33 	bl	8006212 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bac:	480c      	ldr	r0, [pc, #48]	; (8006be0 <prvInitialiseTaskLists+0x6c>)
 8006bae:	f7ff fb30 	bl	8006212 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bb2:	480c      	ldr	r0, [pc, #48]	; (8006be4 <prvInitialiseTaskLists+0x70>)
 8006bb4:	f7ff fb2d 	bl	8006212 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bb8:	480b      	ldr	r0, [pc, #44]	; (8006be8 <prvInitialiseTaskLists+0x74>)
 8006bba:	f7ff fb2a 	bl	8006212 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <prvInitialiseTaskLists+0x78>)
 8006bc0:	4a05      	ldr	r2, [pc, #20]	; (8006bd8 <prvInitialiseTaskLists+0x64>)
 8006bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <prvInitialiseTaskLists+0x7c>)
 8006bc6:	4a05      	ldr	r2, [pc, #20]	; (8006bdc <prvInitialiseTaskLists+0x68>)
 8006bc8:	601a      	str	r2, [r3, #0]
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000630 	.word	0x20000630
 8006bd8:	200006bc 	.word	0x200006bc
 8006bdc:	200006d0 	.word	0x200006d0
 8006be0:	200006ec 	.word	0x200006ec
 8006be4:	20000700 	.word	0x20000700
 8006be8:	20000718 	.word	0x20000718
 8006bec:	200006e4 	.word	0x200006e4
 8006bf0:	200006e8 	.word	0x200006e8

08006bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bfa:	e019      	b.n	8006c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bfc:	f000 fa2a 	bl	8007054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c00:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <prvCheckTasksWaitingTermination+0x50>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fb8a 	bl	8006326 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c12:	4b0d      	ldr	r3, [pc, #52]	; (8006c48 <prvCheckTasksWaitingTermination+0x54>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	4a0b      	ldr	r2, [pc, #44]	; (8006c48 <prvCheckTasksWaitingTermination+0x54>)
 8006c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <prvCheckTasksWaitingTermination+0x58>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <prvCheckTasksWaitingTermination+0x58>)
 8006c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c26:	f000 fa45 	bl	80070b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f810 	bl	8006c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <prvCheckTasksWaitingTermination+0x58>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e1      	bne.n	8006bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000700 	.word	0x20000700
 8006c48:	2000072c 	.word	0x2000072c
 8006c4c:	20000714 	.word	0x20000714

08006c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d108      	bne.n	8006c74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fba2 	bl	80073b0 <vPortFree>
				vPortFree( pxTCB );
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fb9f 	bl	80073b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c72:	e018      	b.n	8006ca6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d103      	bne.n	8006c86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fb96 	bl	80073b0 <vPortFree>
	}
 8006c84:	e00f      	b.n	8006ca6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d00a      	beq.n	8006ca6 <prvDeleteTCB+0x56>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <prvDeleteTCB+0x54>
	}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <prvResetNextTaskUnblockTime+0x38>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <prvResetNextTaskUnblockTime+0x3c>)
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cc8:	e008      	b.n	8006cdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <prvResetNextTaskUnblockTime+0x38>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	4a04      	ldr	r2, [pc, #16]	; (8006cec <prvResetNextTaskUnblockTime+0x3c>)
 8006cda:	6013      	str	r3, [r2, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	200006e4 	.word	0x200006e4
 8006cec:	2000074c 	.word	0x2000074c

08006cf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <xTaskGetSchedulerState+0x34>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	607b      	str	r3, [r7, #4]
 8006d02:	e008      	b.n	8006d16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d04:	4b08      	ldr	r3, [pc, #32]	; (8006d28 <xTaskGetSchedulerState+0x38>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	607b      	str	r3, [r7, #4]
 8006d10:	e001      	b.n	8006d16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d16:	687b      	ldr	r3, [r7, #4]
	}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20000738 	.word	0x20000738
 8006d28:	20000754 	.word	0x20000754

08006d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d36:	4b29      	ldr	r3, [pc, #164]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d3c:	4b28      	ldr	r3, [pc, #160]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff faef 	bl	8006326 <uxListRemove>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d4e:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	2201      	movs	r2, #1
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	43da      	mvns	r2, r3
 8006d5c:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4013      	ands	r3, r2
 8006d62:	4a20      	ldr	r2, [pc, #128]	; (8006de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d10a      	bne.n	8006d84 <prvAddCurrentTaskToDelayedList+0x58>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d74:	4b1a      	ldr	r3, [pc, #104]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	481a      	ldr	r0, [pc, #104]	; (8006de8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d7e:	f7ff fa75 	bl	800626c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d82:	e026      	b.n	8006dd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d8c:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d209      	bcs.n	8006db0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d9c:	4b13      	ldr	r3, [pc, #76]	; (8006dec <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7ff fa83 	bl	80062b4 <vListInsert>
}
 8006dae:	e010      	b.n	8006dd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006db0:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7ff fa79 	bl	80062b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d202      	bcs.n	8006dd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006dcc:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6013      	str	r3, [r2, #0]
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000730 	.word	0x20000730
 8006de0:	2000062c 	.word	0x2000062c
 8006de4:	20000734 	.word	0x20000734
 8006de8:	20000718 	.word	0x20000718
 8006dec:	200006e8 	.word	0x200006e8
 8006df0:	200006e4 	.word	0x200006e4
 8006df4:	2000074c 	.word	0x2000074c

08006df8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3b04      	subs	r3, #4
 8006e08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3b04      	subs	r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3b04      	subs	r3, #4
 8006e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e28:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <pxPortInitialiseStack+0x64>)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3b14      	subs	r3, #20
 8006e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3b04      	subs	r3, #4
 8006e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f06f 0202 	mvn.w	r2, #2
 8006e46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3b20      	subs	r3, #32
 8006e4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	08006e61 	.word	0x08006e61

08006e60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e6a:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <prvTaskExitError+0x54>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d00a      	beq.n	8006e8a <prvTaskExitError+0x2a>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <prvTaskExitError+0x28>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60bb      	str	r3, [r7, #8]
}
 8006e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e9e:	bf00      	nop
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0fc      	beq.n	8006ea0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	20000010 	.word	0x20000010
	...

08006ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <pxCurrentTCBConst2>)
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	6808      	ldr	r0, [r1, #0]
 8006ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	f380 8809 	msr	PSP, r0
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f380 8811 	msr	BASEPRI, r0
 8006eda:	4770      	bx	lr
 8006edc:	f3af 8000 	nop.w

08006ee0 <pxCurrentTCBConst2>:
 8006ee0:	2000062c 	.word	0x2000062c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop

08006ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ee8:	4808      	ldr	r0, [pc, #32]	; (8006f0c <prvPortStartFirstTask+0x24>)
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	6800      	ldr	r0, [r0, #0]
 8006eee:	f380 8808 	msr	MSP, r0
 8006ef2:	f04f 0000 	mov.w	r0, #0
 8006ef6:	f380 8814 	msr	CONTROL, r0
 8006efa:	b662      	cpsie	i
 8006efc:	b661      	cpsie	f
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	df00      	svc	0
 8006f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f0a:	bf00      	nop
 8006f0c:	e000ed08 	.word	0xe000ed08

08006f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f16:	4b46      	ldr	r3, [pc, #280]	; (8007030 <xPortStartScheduler+0x120>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a46      	ldr	r2, [pc, #280]	; (8007034 <xPortStartScheduler+0x124>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10a      	bne.n	8006f36 <xPortStartScheduler+0x26>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	613b      	str	r3, [r7, #16]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f36:	4b3e      	ldr	r3, [pc, #248]	; (8007030 <xPortStartScheduler+0x120>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a3f      	ldr	r2, [pc, #252]	; (8007038 <xPortStartScheduler+0x128>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d10a      	bne.n	8006f56 <xPortStartScheduler+0x46>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	60fb      	str	r3, [r7, #12]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f56:	4b39      	ldr	r3, [pc, #228]	; (800703c <xPortStartScheduler+0x12c>)
 8006f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	22ff      	movs	r2, #255	; 0xff
 8006f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	4b31      	ldr	r3, [pc, #196]	; (8007040 <xPortStartScheduler+0x130>)
 8006f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <xPortStartScheduler+0x134>)
 8006f80:	2207      	movs	r2, #7
 8006f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f84:	e009      	b.n	8006f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <xPortStartScheduler+0x134>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <xPortStartScheduler+0x134>)
 8006f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b80      	cmp	r3, #128	; 0x80
 8006fa4:	d0ef      	beq.n	8006f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fa6:	4b27      	ldr	r3, [pc, #156]	; (8007044 <xPortStartScheduler+0x134>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f1c3 0307 	rsb	r3, r3, #7
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d00a      	beq.n	8006fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	60bb      	str	r3, [r7, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fc8:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <xPortStartScheduler+0x134>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <xPortStartScheduler+0x134>)
 8006fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <xPortStartScheduler+0x134>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <xPortStartScheduler+0x134>)
 8006fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <xPortStartScheduler+0x138>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a17      	ldr	r2, [pc, #92]	; (8007048 <xPortStartScheduler+0x138>)
 8006fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ff2:	4b15      	ldr	r3, [pc, #84]	; (8007048 <xPortStartScheduler+0x138>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a14      	ldr	r2, [pc, #80]	; (8007048 <xPortStartScheduler+0x138>)
 8006ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ffe:	f000 f8dd 	bl	80071bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <xPortStartScheduler+0x13c>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007008:	f000 f8fc 	bl	8007204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800700c:	4b10      	ldr	r3, [pc, #64]	; (8007050 <xPortStartScheduler+0x140>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a0f      	ldr	r2, [pc, #60]	; (8007050 <xPortStartScheduler+0x140>)
 8007012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007018:	f7ff ff66 	bl	8006ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800701c:	f7ff fd36 	bl	8006a8c <vTaskSwitchContext>
	prvTaskExitError();
 8007020:	f7ff ff1e 	bl	8006e60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	e000ed00 	.word	0xe000ed00
 8007034:	410fc271 	.word	0x410fc271
 8007038:	410fc270 	.word	0x410fc270
 800703c:	e000e400 	.word	0xe000e400
 8007040:	20000758 	.word	0x20000758
 8007044:	2000075c 	.word	0x2000075c
 8007048:	e000ed20 	.word	0xe000ed20
 800704c:	20000010 	.word	0x20000010
 8007050:	e000ef34 	.word	0xe000ef34

08007054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	607b      	str	r3, [r7, #4]
}
 800706c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <vPortEnterCritical+0x58>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3301      	adds	r3, #1
 8007074:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <vPortEnterCritical+0x58>)
 8007076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <vPortEnterCritical+0x58>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10f      	bne.n	80070a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007080:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <vPortEnterCritical+0x5c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	603b      	str	r3, [r7, #0]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <vPortEnterCritical+0x4a>
	}
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000010 	.word	0x20000010
 80070b0:	e000ed04 	.word	0xe000ed04

080070b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <vPortExitCritical+0x50>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <vPortExitCritical+0x24>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	607b      	str	r3, [r7, #4]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <vPortExitCritical+0x50>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3b01      	subs	r3, #1
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <vPortExitCritical+0x50>)
 80070e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <vPortExitCritical+0x50>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <vPortExitCritical+0x42>
 80070ea:	2300      	movs	r3, #0
 80070ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000010 	.word	0x20000010
	...

08007110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007110:	f3ef 8009 	mrs	r0, PSP
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4b15      	ldr	r3, [pc, #84]	; (8007170 <pxCurrentTCBConst>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	f01e 0f10 	tst.w	lr, #16
 8007120:	bf08      	it	eq
 8007122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007134:	f380 8811 	msr	BASEPRI, r0
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f7ff fca4 	bl	8006a8c <vTaskSwitchContext>
 8007144:	f04f 0000 	mov.w	r0, #0
 8007148:	f380 8811 	msr	BASEPRI, r0
 800714c:	bc09      	pop	{r0, r3}
 800714e:	6819      	ldr	r1, [r3, #0]
 8007150:	6808      	ldr	r0, [r1, #0]
 8007152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007156:	f01e 0f10 	tst.w	lr, #16
 800715a:	bf08      	it	eq
 800715c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007160:	f380 8809 	msr	PSP, r0
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	f3af 8000 	nop.w

08007170 <pxCurrentTCBConst>:
 8007170:	2000062c 	.word	0x2000062c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007192:	f7ff fbc3 	bl	800691c <xTaskIncrementTick>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800719c:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <xPortSysTickHandler+0x40>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	2300      	movs	r3, #0
 80071a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	f383 8811 	msr	BASEPRI, r3
}
 80071ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071c0:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <vPortSetupTimerInterrupt+0x34>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071c6:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <vPortSetupTimerInterrupt+0x38>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071cc:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <vPortSetupTimerInterrupt+0x3c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <vPortSetupTimerInterrupt+0x40>)
 80071d2:	fba2 2303 	umull	r2, r3, r2, r3
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	4a09      	ldr	r2, [pc, #36]	; (8007200 <vPortSetupTimerInterrupt+0x44>)
 80071da:	3b01      	subs	r3, #1
 80071dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071de:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <vPortSetupTimerInterrupt+0x34>)
 80071e0:	2207      	movs	r2, #7
 80071e2:	601a      	str	r2, [r3, #0]
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	e000e010 	.word	0xe000e010
 80071f4:	e000e018 	.word	0xe000e018
 80071f8:	20000004 	.word	0x20000004
 80071fc:	10624dd3 	.word	0x10624dd3
 8007200:	e000e014 	.word	0xe000e014

08007204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007214 <vPortEnableVFP+0x10>
 8007208:	6801      	ldr	r1, [r0, #0]
 800720a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800720e:	6001      	str	r1, [r0, #0]
 8007210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007212:	bf00      	nop
 8007214:	e000ed88 	.word	0xe000ed88

08007218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007224:	f7ff fad0 	bl	80067c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007228:	4b5b      	ldr	r3, [pc, #364]	; (8007398 <pvPortMalloc+0x180>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007230:	f000 f920 	bl	8007474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007234:	4b59      	ldr	r3, [pc, #356]	; (800739c <pvPortMalloc+0x184>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 8093 	bne.w	8007368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01d      	beq.n	8007284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007248:	2208      	movs	r2, #8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	2b00      	cmp	r3, #0
 8007258:	d014      	beq.n	8007284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f023 0307 	bic.w	r3, r3, #7
 8007260:	3308      	adds	r3, #8
 8007262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <pvPortMalloc+0x6c>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	617b      	str	r3, [r7, #20]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d06e      	beq.n	8007368 <pvPortMalloc+0x150>
 800728a:	4b45      	ldr	r3, [pc, #276]	; (80073a0 <pvPortMalloc+0x188>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d869      	bhi.n	8007368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007294:	4b43      	ldr	r3, [pc, #268]	; (80073a4 <pvPortMalloc+0x18c>)
 8007296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007298:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <pvPortMalloc+0x18c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800729e:	e004      	b.n	80072aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d903      	bls.n	80072bc <pvPortMalloc+0xa4>
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f1      	bne.n	80072a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072bc:	4b36      	ldr	r3, [pc, #216]	; (8007398 <pvPortMalloc+0x180>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d050      	beq.n	8007368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2208      	movs	r2, #8
 80072cc:	4413      	add	r3, r2
 80072ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	2308      	movs	r3, #8
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d91f      	bls.n	8007328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <pvPortMalloc+0xf8>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	613b      	str	r3, [r7, #16]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007322:	69b8      	ldr	r0, [r7, #24]
 8007324:	f000 f908 	bl	8007538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007328:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <pvPortMalloc+0x188>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <pvPortMalloc+0x188>)
 8007334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007336:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <pvPortMalloc+0x188>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <pvPortMalloc+0x190>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d203      	bcs.n	800734a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007342:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <pvPortMalloc+0x188>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <pvPortMalloc+0x190>)
 8007348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <pvPortMalloc+0x184>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	431a      	orrs	r2, r3
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800735e:	4b13      	ldr	r3, [pc, #76]	; (80073ac <pvPortMalloc+0x194>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	4a11      	ldr	r2, [pc, #68]	; (80073ac <pvPortMalloc+0x194>)
 8007366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007368:	f7ff fa3c 	bl	80067e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <pvPortMalloc+0x174>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	60fb      	str	r3, [r7, #12]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <pvPortMalloc+0x172>
	return pvReturn;
 800738c:	69fb      	ldr	r3, [r7, #28]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3728      	adds	r7, #40	; 0x28
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20004368 	.word	0x20004368
 800739c:	2000437c 	.word	0x2000437c
 80073a0:	2000436c 	.word	0x2000436c
 80073a4:	20004360 	.word	0x20004360
 80073a8:	20004370 	.word	0x20004370
 80073ac:	20004374 	.word	0x20004374

080073b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d04d      	beq.n	800745e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073c2:	2308      	movs	r3, #8
 80073c4:	425b      	negs	r3, r3
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4413      	add	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	4b24      	ldr	r3, [pc, #144]	; (8007468 <vPortFree+0xb8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4013      	ands	r3, r2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <vPortFree+0x44>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <vPortFree+0x62>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60bb      	str	r3, [r7, #8]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <vPortFree+0xb8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01e      	beq.n	800745e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d11a      	bne.n	800745e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <vPortFree+0xb8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	43db      	mvns	r3, r3
 8007432:	401a      	ands	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007438:	f7ff f9c6 	bl	80067c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <vPortFree+0xbc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4413      	add	r3, r2
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <vPortFree+0xbc>)
 8007448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f000 f874 	bl	8007538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <vPortFree+0xc0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a06      	ldr	r2, [pc, #24]	; (8007470 <vPortFree+0xc0>)
 8007458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800745a:	f7ff f9c3 	bl	80067e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000437c 	.word	0x2000437c
 800746c:	2000436c 	.word	0x2000436c
 8007470:	20004378 	.word	0x20004378

08007474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800747a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800747e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <prvHeapInit+0xac>)
 8007482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3307      	adds	r3, #7
 8007492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <prvHeapInit+0xac>)
 80074a4:	4413      	add	r3, r2
 80074a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074ac:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <prvHeapInit+0xb0>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <prvHeapInit+0xb0>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074c0:	2208      	movs	r2, #8
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0307 	bic.w	r3, r3, #7
 80074ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <prvHeapInit+0xb4>)
 80074d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <prvHeapInit+0xb4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2200      	movs	r2, #0
 80074dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <prvHeapInit+0xb4>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <prvHeapInit+0xb4>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <prvHeapInit+0xb8>)
 8007502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4a09      	ldr	r2, [pc, #36]	; (8007530 <prvHeapInit+0xbc>)
 800750a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800750c:	4b09      	ldr	r3, [pc, #36]	; (8007534 <prvHeapInit+0xc0>)
 800750e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20000760 	.word	0x20000760
 8007524:	20004360 	.word	0x20004360
 8007528:	20004368 	.word	0x20004368
 800752c:	20004370 	.word	0x20004370
 8007530:	2000436c 	.word	0x2000436c
 8007534:	2000437c 	.word	0x2000437c

08007538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007540:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <prvInsertBlockIntoFreeList+0xac>)
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e002      	b.n	800754c <prvInsertBlockIntoFreeList+0x14>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d8f7      	bhi.n	8007546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4413      	add	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d108      	bne.n	800757a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	441a      	add	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d118      	bne.n	80075c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d00d      	beq.n	80075b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	441a      	add	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e008      	b.n	80075c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvInsertBlockIntoFreeList+0xb0>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e003      	b.n	80075c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d002      	beq.n	80075d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20004360 	.word	0x20004360
 80075e8:	20004368 	.word	0x20004368

080075ec <siprintf>:
 80075ec:	b40e      	push	{r1, r2, r3}
 80075ee:	b500      	push	{lr}
 80075f0:	b09c      	sub	sp, #112	; 0x70
 80075f2:	ab1d      	add	r3, sp, #116	; 0x74
 80075f4:	9002      	str	r0, [sp, #8]
 80075f6:	9006      	str	r0, [sp, #24]
 80075f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075fc:	4809      	ldr	r0, [pc, #36]	; (8007624 <siprintf+0x38>)
 80075fe:	9107      	str	r1, [sp, #28]
 8007600:	9104      	str	r1, [sp, #16]
 8007602:	4909      	ldr	r1, [pc, #36]	; (8007628 <siprintf+0x3c>)
 8007604:	f853 2b04 	ldr.w	r2, [r3], #4
 8007608:	9105      	str	r1, [sp, #20]
 800760a:	6800      	ldr	r0, [r0, #0]
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	a902      	add	r1, sp, #8
 8007610:	f000 f9a0 	bl	8007954 <_svfiprintf_r>
 8007614:	9b02      	ldr	r3, [sp, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	b01c      	add	sp, #112	; 0x70
 800761c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007620:	b003      	add	sp, #12
 8007622:	4770      	bx	lr
 8007624:	20000060 	.word	0x20000060
 8007628:	ffff0208 	.word	0xffff0208

0800762c <memset>:
 800762c:	4402      	add	r2, r0
 800762e:	4603      	mov	r3, r0
 8007630:	4293      	cmp	r3, r2
 8007632:	d100      	bne.n	8007636 <memset+0xa>
 8007634:	4770      	bx	lr
 8007636:	f803 1b01 	strb.w	r1, [r3], #1
 800763a:	e7f9      	b.n	8007630 <memset+0x4>

0800763c <__errno>:
 800763c:	4b01      	ldr	r3, [pc, #4]	; (8007644 <__errno+0x8>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000060 	.word	0x20000060

08007648 <__libc_init_array>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4d0d      	ldr	r5, [pc, #52]	; (8007680 <__libc_init_array+0x38>)
 800764c:	4c0d      	ldr	r4, [pc, #52]	; (8007684 <__libc_init_array+0x3c>)
 800764e:	1b64      	subs	r4, r4, r5
 8007650:	10a4      	asrs	r4, r4, #2
 8007652:	2600      	movs	r6, #0
 8007654:	42a6      	cmp	r6, r4
 8007656:	d109      	bne.n	800766c <__libc_init_array+0x24>
 8007658:	4d0b      	ldr	r5, [pc, #44]	; (8007688 <__libc_init_array+0x40>)
 800765a:	4c0c      	ldr	r4, [pc, #48]	; (800768c <__libc_init_array+0x44>)
 800765c:	f001 fba4 	bl	8008da8 <_init>
 8007660:	1b64      	subs	r4, r4, r5
 8007662:	10a4      	asrs	r4, r4, #2
 8007664:	2600      	movs	r6, #0
 8007666:	42a6      	cmp	r6, r4
 8007668:	d105      	bne.n	8007676 <__libc_init_array+0x2e>
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007670:	4798      	blx	r3
 8007672:	3601      	adds	r6, #1
 8007674:	e7ee      	b.n	8007654 <__libc_init_array+0xc>
 8007676:	f855 3b04 	ldr.w	r3, [r5], #4
 800767a:	4798      	blx	r3
 800767c:	3601      	adds	r6, #1
 800767e:	e7f2      	b.n	8007666 <__libc_init_array+0x1e>
 8007680:	08008fe0 	.word	0x08008fe0
 8007684:	08008fe0 	.word	0x08008fe0
 8007688:	08008fe0 	.word	0x08008fe0
 800768c:	08008fe4 	.word	0x08008fe4

08007690 <__retarget_lock_acquire_recursive>:
 8007690:	4770      	bx	lr

08007692 <__retarget_lock_release_recursive>:
 8007692:	4770      	bx	lr

08007694 <memcpy>:
 8007694:	440a      	add	r2, r1
 8007696:	4291      	cmp	r1, r2
 8007698:	f100 33ff 	add.w	r3, r0, #4294967295
 800769c:	d100      	bne.n	80076a0 <memcpy+0xc>
 800769e:	4770      	bx	lr
 80076a0:	b510      	push	{r4, lr}
 80076a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076aa:	4291      	cmp	r1, r2
 80076ac:	d1f9      	bne.n	80076a2 <memcpy+0xe>
 80076ae:	bd10      	pop	{r4, pc}

080076b0 <_free_r>:
 80076b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d044      	beq.n	8007740 <_free_r+0x90>
 80076b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ba:	9001      	str	r0, [sp, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f1a1 0404 	sub.w	r4, r1, #4
 80076c2:	bfb8      	it	lt
 80076c4:	18e4      	addlt	r4, r4, r3
 80076c6:	f000 f8df 	bl	8007888 <__malloc_lock>
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <_free_r+0x94>)
 80076cc:	9801      	ldr	r0, [sp, #4]
 80076ce:	6813      	ldr	r3, [r2, #0]
 80076d0:	b933      	cbnz	r3, 80076e0 <_free_r+0x30>
 80076d2:	6063      	str	r3, [r4, #4]
 80076d4:	6014      	str	r4, [r2, #0]
 80076d6:	b003      	add	sp, #12
 80076d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076dc:	f000 b8da 	b.w	8007894 <__malloc_unlock>
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d908      	bls.n	80076f6 <_free_r+0x46>
 80076e4:	6825      	ldr	r5, [r4, #0]
 80076e6:	1961      	adds	r1, r4, r5
 80076e8:	428b      	cmp	r3, r1
 80076ea:	bf01      	itttt	eq
 80076ec:	6819      	ldreq	r1, [r3, #0]
 80076ee:	685b      	ldreq	r3, [r3, #4]
 80076f0:	1949      	addeq	r1, r1, r5
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	e7ed      	b.n	80076d2 <_free_r+0x22>
 80076f6:	461a      	mov	r2, r3
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	b10b      	cbz	r3, 8007700 <_free_r+0x50>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d9fa      	bls.n	80076f6 <_free_r+0x46>
 8007700:	6811      	ldr	r1, [r2, #0]
 8007702:	1855      	adds	r5, r2, r1
 8007704:	42a5      	cmp	r5, r4
 8007706:	d10b      	bne.n	8007720 <_free_r+0x70>
 8007708:	6824      	ldr	r4, [r4, #0]
 800770a:	4421      	add	r1, r4
 800770c:	1854      	adds	r4, r2, r1
 800770e:	42a3      	cmp	r3, r4
 8007710:	6011      	str	r1, [r2, #0]
 8007712:	d1e0      	bne.n	80076d6 <_free_r+0x26>
 8007714:	681c      	ldr	r4, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	6053      	str	r3, [r2, #4]
 800771a:	440c      	add	r4, r1
 800771c:	6014      	str	r4, [r2, #0]
 800771e:	e7da      	b.n	80076d6 <_free_r+0x26>
 8007720:	d902      	bls.n	8007728 <_free_r+0x78>
 8007722:	230c      	movs	r3, #12
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	e7d6      	b.n	80076d6 <_free_r+0x26>
 8007728:	6825      	ldr	r5, [r4, #0]
 800772a:	1961      	adds	r1, r4, r5
 800772c:	428b      	cmp	r3, r1
 800772e:	bf04      	itt	eq
 8007730:	6819      	ldreq	r1, [r3, #0]
 8007732:	685b      	ldreq	r3, [r3, #4]
 8007734:	6063      	str	r3, [r4, #4]
 8007736:	bf04      	itt	eq
 8007738:	1949      	addeq	r1, r1, r5
 800773a:	6021      	streq	r1, [r4, #0]
 800773c:	6054      	str	r4, [r2, #4]
 800773e:	e7ca      	b.n	80076d6 <_free_r+0x26>
 8007740:	b003      	add	sp, #12
 8007742:	bd30      	pop	{r4, r5, pc}
 8007744:	200044c0 	.word	0x200044c0

08007748 <sbrk_aligned>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	4e0e      	ldr	r6, [pc, #56]	; (8007784 <sbrk_aligned+0x3c>)
 800774c:	460c      	mov	r4, r1
 800774e:	6831      	ldr	r1, [r6, #0]
 8007750:	4605      	mov	r5, r0
 8007752:	b911      	cbnz	r1, 800775a <sbrk_aligned+0x12>
 8007754:	f000 fba6 	bl	8007ea4 <_sbrk_r>
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f000 fba1 	bl	8007ea4 <_sbrk_r>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d00a      	beq.n	800777c <sbrk_aligned+0x34>
 8007766:	1cc4      	adds	r4, r0, #3
 8007768:	f024 0403 	bic.w	r4, r4, #3
 800776c:	42a0      	cmp	r0, r4
 800776e:	d007      	beq.n	8007780 <sbrk_aligned+0x38>
 8007770:	1a21      	subs	r1, r4, r0
 8007772:	4628      	mov	r0, r5
 8007774:	f000 fb96 	bl	8007ea4 <_sbrk_r>
 8007778:	3001      	adds	r0, #1
 800777a:	d101      	bne.n	8007780 <sbrk_aligned+0x38>
 800777c:	f04f 34ff 	mov.w	r4, #4294967295
 8007780:	4620      	mov	r0, r4
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	200044c4 	.word	0x200044c4

08007788 <_malloc_r>:
 8007788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800778c:	1ccd      	adds	r5, r1, #3
 800778e:	f025 0503 	bic.w	r5, r5, #3
 8007792:	3508      	adds	r5, #8
 8007794:	2d0c      	cmp	r5, #12
 8007796:	bf38      	it	cc
 8007798:	250c      	movcc	r5, #12
 800779a:	2d00      	cmp	r5, #0
 800779c:	4607      	mov	r7, r0
 800779e:	db01      	blt.n	80077a4 <_malloc_r+0x1c>
 80077a0:	42a9      	cmp	r1, r5
 80077a2:	d905      	bls.n	80077b0 <_malloc_r+0x28>
 80077a4:	230c      	movs	r3, #12
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	2600      	movs	r6, #0
 80077aa:	4630      	mov	r0, r6
 80077ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007884 <_malloc_r+0xfc>
 80077b4:	f000 f868 	bl	8007888 <__malloc_lock>
 80077b8:	f8d8 3000 	ldr.w	r3, [r8]
 80077bc:	461c      	mov	r4, r3
 80077be:	bb5c      	cbnz	r4, 8007818 <_malloc_r+0x90>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4638      	mov	r0, r7
 80077c4:	f7ff ffc0 	bl	8007748 <sbrk_aligned>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	4604      	mov	r4, r0
 80077cc:	d155      	bne.n	800787a <_malloc_r+0xf2>
 80077ce:	f8d8 4000 	ldr.w	r4, [r8]
 80077d2:	4626      	mov	r6, r4
 80077d4:	2e00      	cmp	r6, #0
 80077d6:	d145      	bne.n	8007864 <_malloc_r+0xdc>
 80077d8:	2c00      	cmp	r4, #0
 80077da:	d048      	beq.n	800786e <_malloc_r+0xe6>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	4631      	mov	r1, r6
 80077e0:	4638      	mov	r0, r7
 80077e2:	eb04 0903 	add.w	r9, r4, r3
 80077e6:	f000 fb5d 	bl	8007ea4 <_sbrk_r>
 80077ea:	4581      	cmp	r9, r0
 80077ec:	d13f      	bne.n	800786e <_malloc_r+0xe6>
 80077ee:	6821      	ldr	r1, [r4, #0]
 80077f0:	1a6d      	subs	r5, r5, r1
 80077f2:	4629      	mov	r1, r5
 80077f4:	4638      	mov	r0, r7
 80077f6:	f7ff ffa7 	bl	8007748 <sbrk_aligned>
 80077fa:	3001      	adds	r0, #1
 80077fc:	d037      	beq.n	800786e <_malloc_r+0xe6>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	442b      	add	r3, r5
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	f8d8 3000 	ldr.w	r3, [r8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d038      	beq.n	800787e <_malloc_r+0xf6>
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	42a2      	cmp	r2, r4
 8007810:	d12b      	bne.n	800786a <_malloc_r+0xe2>
 8007812:	2200      	movs	r2, #0
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e00f      	b.n	8007838 <_malloc_r+0xb0>
 8007818:	6822      	ldr	r2, [r4, #0]
 800781a:	1b52      	subs	r2, r2, r5
 800781c:	d41f      	bmi.n	800785e <_malloc_r+0xd6>
 800781e:	2a0b      	cmp	r2, #11
 8007820:	d917      	bls.n	8007852 <_malloc_r+0xca>
 8007822:	1961      	adds	r1, r4, r5
 8007824:	42a3      	cmp	r3, r4
 8007826:	6025      	str	r5, [r4, #0]
 8007828:	bf18      	it	ne
 800782a:	6059      	strne	r1, [r3, #4]
 800782c:	6863      	ldr	r3, [r4, #4]
 800782e:	bf08      	it	eq
 8007830:	f8c8 1000 	streq.w	r1, [r8]
 8007834:	5162      	str	r2, [r4, r5]
 8007836:	604b      	str	r3, [r1, #4]
 8007838:	4638      	mov	r0, r7
 800783a:	f104 060b 	add.w	r6, r4, #11
 800783e:	f000 f829 	bl	8007894 <__malloc_unlock>
 8007842:	f026 0607 	bic.w	r6, r6, #7
 8007846:	1d23      	adds	r3, r4, #4
 8007848:	1af2      	subs	r2, r6, r3
 800784a:	d0ae      	beq.n	80077aa <_malloc_r+0x22>
 800784c:	1b9b      	subs	r3, r3, r6
 800784e:	50a3      	str	r3, [r4, r2]
 8007850:	e7ab      	b.n	80077aa <_malloc_r+0x22>
 8007852:	42a3      	cmp	r3, r4
 8007854:	6862      	ldr	r2, [r4, #4]
 8007856:	d1dd      	bne.n	8007814 <_malloc_r+0x8c>
 8007858:	f8c8 2000 	str.w	r2, [r8]
 800785c:	e7ec      	b.n	8007838 <_malloc_r+0xb0>
 800785e:	4623      	mov	r3, r4
 8007860:	6864      	ldr	r4, [r4, #4]
 8007862:	e7ac      	b.n	80077be <_malloc_r+0x36>
 8007864:	4634      	mov	r4, r6
 8007866:	6876      	ldr	r6, [r6, #4]
 8007868:	e7b4      	b.n	80077d4 <_malloc_r+0x4c>
 800786a:	4613      	mov	r3, r2
 800786c:	e7cc      	b.n	8007808 <_malloc_r+0x80>
 800786e:	230c      	movs	r3, #12
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	4638      	mov	r0, r7
 8007874:	f000 f80e 	bl	8007894 <__malloc_unlock>
 8007878:	e797      	b.n	80077aa <_malloc_r+0x22>
 800787a:	6025      	str	r5, [r4, #0]
 800787c:	e7dc      	b.n	8007838 <_malloc_r+0xb0>
 800787e:	605b      	str	r3, [r3, #4]
 8007880:	deff      	udf	#255	; 0xff
 8007882:	bf00      	nop
 8007884:	200044c0 	.word	0x200044c0

08007888 <__malloc_lock>:
 8007888:	4801      	ldr	r0, [pc, #4]	; (8007890 <__malloc_lock+0x8>)
 800788a:	f7ff bf01 	b.w	8007690 <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	200044bc 	.word	0x200044bc

08007894 <__malloc_unlock>:
 8007894:	4801      	ldr	r0, [pc, #4]	; (800789c <__malloc_unlock+0x8>)
 8007896:	f7ff befc 	b.w	8007692 <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	200044bc 	.word	0x200044bc

080078a0 <__ssputs_r>:
 80078a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	688e      	ldr	r6, [r1, #8]
 80078a6:	461f      	mov	r7, r3
 80078a8:	42be      	cmp	r6, r7
 80078aa:	680b      	ldr	r3, [r1, #0]
 80078ac:	4682      	mov	sl, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	4690      	mov	r8, r2
 80078b2:	d82c      	bhi.n	800790e <__ssputs_r+0x6e>
 80078b4:	898a      	ldrh	r2, [r1, #12]
 80078b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078ba:	d026      	beq.n	800790a <__ssputs_r+0x6a>
 80078bc:	6965      	ldr	r5, [r4, #20]
 80078be:	6909      	ldr	r1, [r1, #16]
 80078c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c4:	eba3 0901 	sub.w	r9, r3, r1
 80078c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078cc:	1c7b      	adds	r3, r7, #1
 80078ce:	444b      	add	r3, r9
 80078d0:	106d      	asrs	r5, r5, #1
 80078d2:	429d      	cmp	r5, r3
 80078d4:	bf38      	it	cc
 80078d6:	461d      	movcc	r5, r3
 80078d8:	0553      	lsls	r3, r2, #21
 80078da:	d527      	bpl.n	800792c <__ssputs_r+0x8c>
 80078dc:	4629      	mov	r1, r5
 80078de:	f7ff ff53 	bl	8007788 <_malloc_r>
 80078e2:	4606      	mov	r6, r0
 80078e4:	b360      	cbz	r0, 8007940 <__ssputs_r+0xa0>
 80078e6:	6921      	ldr	r1, [r4, #16]
 80078e8:	464a      	mov	r2, r9
 80078ea:	f7ff fed3 	bl	8007694 <memcpy>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f8:	81a3      	strh	r3, [r4, #12]
 80078fa:	6126      	str	r6, [r4, #16]
 80078fc:	6165      	str	r5, [r4, #20]
 80078fe:	444e      	add	r6, r9
 8007900:	eba5 0509 	sub.w	r5, r5, r9
 8007904:	6026      	str	r6, [r4, #0]
 8007906:	60a5      	str	r5, [r4, #8]
 8007908:	463e      	mov	r6, r7
 800790a:	42be      	cmp	r6, r7
 800790c:	d900      	bls.n	8007910 <__ssputs_r+0x70>
 800790e:	463e      	mov	r6, r7
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	4632      	mov	r2, r6
 8007914:	4641      	mov	r1, r8
 8007916:	f000 faab 	bl	8007e70 <memmove>
 800791a:	68a3      	ldr	r3, [r4, #8]
 800791c:	1b9b      	subs	r3, r3, r6
 800791e:	60a3      	str	r3, [r4, #8]
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	4433      	add	r3, r6
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	2000      	movs	r0, #0
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	462a      	mov	r2, r5
 800792e:	f000 fac9 	bl	8007ec4 <_realloc_r>
 8007932:	4606      	mov	r6, r0
 8007934:	2800      	cmp	r0, #0
 8007936:	d1e0      	bne.n	80078fa <__ssputs_r+0x5a>
 8007938:	6921      	ldr	r1, [r4, #16]
 800793a:	4650      	mov	r0, sl
 800793c:	f7ff feb8 	bl	80076b0 <_free_r>
 8007940:	230c      	movs	r3, #12
 8007942:	f8ca 3000 	str.w	r3, [sl]
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800794c:	81a3      	strh	r3, [r4, #12]
 800794e:	f04f 30ff 	mov.w	r0, #4294967295
 8007952:	e7e9      	b.n	8007928 <__ssputs_r+0x88>

08007954 <_svfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	4698      	mov	r8, r3
 800795a:	898b      	ldrh	r3, [r1, #12]
 800795c:	061b      	lsls	r3, r3, #24
 800795e:	b09d      	sub	sp, #116	; 0x74
 8007960:	4607      	mov	r7, r0
 8007962:	460d      	mov	r5, r1
 8007964:	4614      	mov	r4, r2
 8007966:	d50e      	bpl.n	8007986 <_svfiprintf_r+0x32>
 8007968:	690b      	ldr	r3, [r1, #16]
 800796a:	b963      	cbnz	r3, 8007986 <_svfiprintf_r+0x32>
 800796c:	2140      	movs	r1, #64	; 0x40
 800796e:	f7ff ff0b 	bl	8007788 <_malloc_r>
 8007972:	6028      	str	r0, [r5, #0]
 8007974:	6128      	str	r0, [r5, #16]
 8007976:	b920      	cbnz	r0, 8007982 <_svfiprintf_r+0x2e>
 8007978:	230c      	movs	r3, #12
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	e0d0      	b.n	8007b24 <_svfiprintf_r+0x1d0>
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	616b      	str	r3, [r5, #20]
 8007986:	2300      	movs	r3, #0
 8007988:	9309      	str	r3, [sp, #36]	; 0x24
 800798a:	2320      	movs	r3, #32
 800798c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007990:	f8cd 800c 	str.w	r8, [sp, #12]
 8007994:	2330      	movs	r3, #48	; 0x30
 8007996:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b3c <_svfiprintf_r+0x1e8>
 800799a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800799e:	f04f 0901 	mov.w	r9, #1
 80079a2:	4623      	mov	r3, r4
 80079a4:	469a      	mov	sl, r3
 80079a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079aa:	b10a      	cbz	r2, 80079b0 <_svfiprintf_r+0x5c>
 80079ac:	2a25      	cmp	r2, #37	; 0x25
 80079ae:	d1f9      	bne.n	80079a4 <_svfiprintf_r+0x50>
 80079b0:	ebba 0b04 	subs.w	fp, sl, r4
 80079b4:	d00b      	beq.n	80079ce <_svfiprintf_r+0x7a>
 80079b6:	465b      	mov	r3, fp
 80079b8:	4622      	mov	r2, r4
 80079ba:	4629      	mov	r1, r5
 80079bc:	4638      	mov	r0, r7
 80079be:	f7ff ff6f 	bl	80078a0 <__ssputs_r>
 80079c2:	3001      	adds	r0, #1
 80079c4:	f000 80a9 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ca:	445a      	add	r2, fp
 80079cc:	9209      	str	r2, [sp, #36]	; 0x24
 80079ce:	f89a 3000 	ldrb.w	r3, [sl]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80a1 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079d8:	2300      	movs	r3, #0
 80079da:	f04f 32ff 	mov.w	r2, #4294967295
 80079de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e2:	f10a 0a01 	add.w	sl, sl, #1
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	9307      	str	r3, [sp, #28]
 80079ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ee:	931a      	str	r3, [sp, #104]	; 0x68
 80079f0:	4654      	mov	r4, sl
 80079f2:	2205      	movs	r2, #5
 80079f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f8:	4850      	ldr	r0, [pc, #320]	; (8007b3c <_svfiprintf_r+0x1e8>)
 80079fa:	f7f8 fbf9 	bl	80001f0 <memchr>
 80079fe:	9a04      	ldr	r2, [sp, #16]
 8007a00:	b9d8      	cbnz	r0, 8007a3a <_svfiprintf_r+0xe6>
 8007a02:	06d0      	lsls	r0, r2, #27
 8007a04:	bf44      	itt	mi
 8007a06:	2320      	movmi	r3, #32
 8007a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a0c:	0711      	lsls	r1, r2, #28
 8007a0e:	bf44      	itt	mi
 8007a10:	232b      	movmi	r3, #43	; 0x2b
 8007a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a16:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a1c:	d015      	beq.n	8007a4a <_svfiprintf_r+0xf6>
 8007a1e:	9a07      	ldr	r2, [sp, #28]
 8007a20:	4654      	mov	r4, sl
 8007a22:	2000      	movs	r0, #0
 8007a24:	f04f 0c0a 	mov.w	ip, #10
 8007a28:	4621      	mov	r1, r4
 8007a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a2e:	3b30      	subs	r3, #48	; 0x30
 8007a30:	2b09      	cmp	r3, #9
 8007a32:	d94d      	bls.n	8007ad0 <_svfiprintf_r+0x17c>
 8007a34:	b1b0      	cbz	r0, 8007a64 <_svfiprintf_r+0x110>
 8007a36:	9207      	str	r2, [sp, #28]
 8007a38:	e014      	b.n	8007a64 <_svfiprintf_r+0x110>
 8007a3a:	eba0 0308 	sub.w	r3, r0, r8
 8007a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	46a2      	mov	sl, r4
 8007a48:	e7d2      	b.n	80079f0 <_svfiprintf_r+0x9c>
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	1d19      	adds	r1, r3, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	9103      	str	r1, [sp, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bfbb      	ittet	lt
 8007a56:	425b      	neglt	r3, r3
 8007a58:	f042 0202 	orrlt.w	r2, r2, #2
 8007a5c:	9307      	strge	r3, [sp, #28]
 8007a5e:	9307      	strlt	r3, [sp, #28]
 8007a60:	bfb8      	it	lt
 8007a62:	9204      	strlt	r2, [sp, #16]
 8007a64:	7823      	ldrb	r3, [r4, #0]
 8007a66:	2b2e      	cmp	r3, #46	; 0x2e
 8007a68:	d10c      	bne.n	8007a84 <_svfiprintf_r+0x130>
 8007a6a:	7863      	ldrb	r3, [r4, #1]
 8007a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a6e:	d134      	bne.n	8007ada <_svfiprintf_r+0x186>
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	1d1a      	adds	r2, r3, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	9203      	str	r2, [sp, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bfb8      	it	lt
 8007a7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a80:	3402      	adds	r4, #2
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b4c <_svfiprintf_r+0x1f8>
 8007a88:	7821      	ldrb	r1, [r4, #0]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	f7f8 fbaf 	bl	80001f0 <memchr>
 8007a92:	b138      	cbz	r0, 8007aa4 <_svfiprintf_r+0x150>
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	eba0 000a 	sub.w	r0, r0, sl
 8007a9a:	2240      	movs	r2, #64	; 0x40
 8007a9c:	4082      	lsls	r2, r0
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa8:	4825      	ldr	r0, [pc, #148]	; (8007b40 <_svfiprintf_r+0x1ec>)
 8007aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aae:	2206      	movs	r2, #6
 8007ab0:	f7f8 fb9e 	bl	80001f0 <memchr>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d038      	beq.n	8007b2a <_svfiprintf_r+0x1d6>
 8007ab8:	4b22      	ldr	r3, [pc, #136]	; (8007b44 <_svfiprintf_r+0x1f0>)
 8007aba:	bb1b      	cbnz	r3, 8007b04 <_svfiprintf_r+0x1b0>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	3307      	adds	r3, #7
 8007ac0:	f023 0307 	bic.w	r3, r3, #7
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	9303      	str	r3, [sp, #12]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aca:	4433      	add	r3, r6
 8007acc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ace:	e768      	b.n	80079a2 <_svfiprintf_r+0x4e>
 8007ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e7a6      	b.n	8007a28 <_svfiprintf_r+0xd4>
 8007ada:	2300      	movs	r3, #0
 8007adc:	3401      	adds	r4, #1
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f04f 0c0a 	mov.w	ip, #10
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aec:	3a30      	subs	r2, #48	; 0x30
 8007aee:	2a09      	cmp	r2, #9
 8007af0:	d903      	bls.n	8007afa <_svfiprintf_r+0x1a6>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c6      	beq.n	8007a84 <_svfiprintf_r+0x130>
 8007af6:	9105      	str	r1, [sp, #20]
 8007af8:	e7c4      	b.n	8007a84 <_svfiprintf_r+0x130>
 8007afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afe:	4604      	mov	r4, r0
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7f0      	b.n	8007ae6 <_svfiprintf_r+0x192>
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <_svfiprintf_r+0x1f4>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f3af 8000 	nop.w
 8007b14:	1c42      	adds	r2, r0, #1
 8007b16:	4606      	mov	r6, r0
 8007b18:	d1d6      	bne.n	8007ac8 <_svfiprintf_r+0x174>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	065b      	lsls	r3, r3, #25
 8007b1e:	f53f af2d 	bmi.w	800797c <_svfiprintf_r+0x28>
 8007b22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b24:	b01d      	add	sp, #116	; 0x74
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	ab03      	add	r3, sp, #12
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	462a      	mov	r2, r5
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <_svfiprintf_r+0x1f4>)
 8007b32:	a904      	add	r1, sp, #16
 8007b34:	4638      	mov	r0, r7
 8007b36:	f000 f879 	bl	8007c2c <_printf_i>
 8007b3a:	e7eb      	b.n	8007b14 <_svfiprintf_r+0x1c0>
 8007b3c:	08008f70 	.word	0x08008f70
 8007b40:	08008f7a 	.word	0x08008f7a
 8007b44:	00000000 	.word	0x00000000
 8007b48:	080078a1 	.word	0x080078a1
 8007b4c:	08008f76 	.word	0x08008f76

08007b50 <_printf_common>:
 8007b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	4616      	mov	r6, r2
 8007b56:	4699      	mov	r9, r3
 8007b58:	688a      	ldr	r2, [r1, #8]
 8007b5a:	690b      	ldr	r3, [r1, #16]
 8007b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b60:	4293      	cmp	r3, r2
 8007b62:	bfb8      	it	lt
 8007b64:	4613      	movlt	r3, r2
 8007b66:	6033      	str	r3, [r6, #0]
 8007b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	b10a      	cbz	r2, 8007b76 <_printf_common+0x26>
 8007b72:	3301      	adds	r3, #1
 8007b74:	6033      	str	r3, [r6, #0]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	0699      	lsls	r1, r3, #26
 8007b7a:	bf42      	ittt	mi
 8007b7c:	6833      	ldrmi	r3, [r6, #0]
 8007b7e:	3302      	addmi	r3, #2
 8007b80:	6033      	strmi	r3, [r6, #0]
 8007b82:	6825      	ldr	r5, [r4, #0]
 8007b84:	f015 0506 	ands.w	r5, r5, #6
 8007b88:	d106      	bne.n	8007b98 <_printf_common+0x48>
 8007b8a:	f104 0a19 	add.w	sl, r4, #25
 8007b8e:	68e3      	ldr	r3, [r4, #12]
 8007b90:	6832      	ldr	r2, [r6, #0]
 8007b92:	1a9b      	subs	r3, r3, r2
 8007b94:	42ab      	cmp	r3, r5
 8007b96:	dc26      	bgt.n	8007be6 <_printf_common+0x96>
 8007b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b9c:	1e13      	subs	r3, r2, #0
 8007b9e:	6822      	ldr	r2, [r4, #0]
 8007ba0:	bf18      	it	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	0692      	lsls	r2, r2, #26
 8007ba6:	d42b      	bmi.n	8007c00 <_printf_common+0xb0>
 8007ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bac:	4649      	mov	r1, r9
 8007bae:	4638      	mov	r0, r7
 8007bb0:	47c0      	blx	r8
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d01e      	beq.n	8007bf4 <_printf_common+0xa4>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	6922      	ldr	r2, [r4, #16]
 8007bba:	f003 0306 	and.w	r3, r3, #6
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	bf02      	ittt	eq
 8007bc2:	68e5      	ldreq	r5, [r4, #12]
 8007bc4:	6833      	ldreq	r3, [r6, #0]
 8007bc6:	1aed      	subeq	r5, r5, r3
 8007bc8:	68a3      	ldr	r3, [r4, #8]
 8007bca:	bf0c      	ite	eq
 8007bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd0:	2500      	movne	r5, #0
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	bfc4      	itt	gt
 8007bd6:	1a9b      	subgt	r3, r3, r2
 8007bd8:	18ed      	addgt	r5, r5, r3
 8007bda:	2600      	movs	r6, #0
 8007bdc:	341a      	adds	r4, #26
 8007bde:	42b5      	cmp	r5, r6
 8007be0:	d11a      	bne.n	8007c18 <_printf_common+0xc8>
 8007be2:	2000      	movs	r0, #0
 8007be4:	e008      	b.n	8007bf8 <_printf_common+0xa8>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4652      	mov	r2, sl
 8007bea:	4649      	mov	r1, r9
 8007bec:	4638      	mov	r0, r7
 8007bee:	47c0      	blx	r8
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d103      	bne.n	8007bfc <_printf_common+0xac>
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	e7c6      	b.n	8007b8e <_printf_common+0x3e>
 8007c00:	18e1      	adds	r1, r4, r3
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	2030      	movs	r0, #48	; 0x30
 8007c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c0a:	4422      	add	r2, r4
 8007c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c14:	3302      	adds	r3, #2
 8007c16:	e7c7      	b.n	8007ba8 <_printf_common+0x58>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	4638      	mov	r0, r7
 8007c20:	47c0      	blx	r8
 8007c22:	3001      	adds	r0, #1
 8007c24:	d0e6      	beq.n	8007bf4 <_printf_common+0xa4>
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7d9      	b.n	8007bde <_printf_common+0x8e>
	...

08007c2c <_printf_i>:
 8007c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	7e0f      	ldrb	r7, [r1, #24]
 8007c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c34:	2f78      	cmp	r7, #120	; 0x78
 8007c36:	4691      	mov	r9, r2
 8007c38:	4680      	mov	r8, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	469a      	mov	sl, r3
 8007c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c42:	d807      	bhi.n	8007c54 <_printf_i+0x28>
 8007c44:	2f62      	cmp	r7, #98	; 0x62
 8007c46:	d80a      	bhi.n	8007c5e <_printf_i+0x32>
 8007c48:	2f00      	cmp	r7, #0
 8007c4a:	f000 80d4 	beq.w	8007df6 <_printf_i+0x1ca>
 8007c4e:	2f58      	cmp	r7, #88	; 0x58
 8007c50:	f000 80c0 	beq.w	8007dd4 <_printf_i+0x1a8>
 8007c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c5c:	e03a      	b.n	8007cd4 <_printf_i+0xa8>
 8007c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c62:	2b15      	cmp	r3, #21
 8007c64:	d8f6      	bhi.n	8007c54 <_printf_i+0x28>
 8007c66:	a101      	add	r1, pc, #4	; (adr r1, 8007c6c <_printf_i+0x40>)
 8007c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c6c:	08007cc5 	.word	0x08007cc5
 8007c70:	08007cd9 	.word	0x08007cd9
 8007c74:	08007c55 	.word	0x08007c55
 8007c78:	08007c55 	.word	0x08007c55
 8007c7c:	08007c55 	.word	0x08007c55
 8007c80:	08007c55 	.word	0x08007c55
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007c55 	.word	0x08007c55
 8007c8c:	08007c55 	.word	0x08007c55
 8007c90:	08007c55 	.word	0x08007c55
 8007c94:	08007c55 	.word	0x08007c55
 8007c98:	08007ddd 	.word	0x08007ddd
 8007c9c:	08007d05 	.word	0x08007d05
 8007ca0:	08007d97 	.word	0x08007d97
 8007ca4:	08007c55 	.word	0x08007c55
 8007ca8:	08007c55 	.word	0x08007c55
 8007cac:	08007dff 	.word	0x08007dff
 8007cb0:	08007c55 	.word	0x08007c55
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007c55 	.word	0x08007c55
 8007cbc:	08007c55 	.word	0x08007c55
 8007cc0:	08007d9f 	.word	0x08007d9f
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	1d1a      	adds	r2, r3, #4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	602a      	str	r2, [r5, #0]
 8007ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e09f      	b.n	8007e18 <_printf_i+0x1ec>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	682b      	ldr	r3, [r5, #0]
 8007cdc:	0607      	lsls	r7, r0, #24
 8007cde:	f103 0104 	add.w	r1, r3, #4
 8007ce2:	6029      	str	r1, [r5, #0]
 8007ce4:	d501      	bpl.n	8007cea <_printf_i+0xbe>
 8007ce6:	681e      	ldr	r6, [r3, #0]
 8007ce8:	e003      	b.n	8007cf2 <_printf_i+0xc6>
 8007cea:	0646      	lsls	r6, r0, #25
 8007cec:	d5fb      	bpl.n	8007ce6 <_printf_i+0xba>
 8007cee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	da03      	bge.n	8007cfe <_printf_i+0xd2>
 8007cf6:	232d      	movs	r3, #45	; 0x2d
 8007cf8:	4276      	negs	r6, r6
 8007cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfe:	485a      	ldr	r0, [pc, #360]	; (8007e68 <_printf_i+0x23c>)
 8007d00:	230a      	movs	r3, #10
 8007d02:	e012      	b.n	8007d2a <_printf_i+0xfe>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	1d19      	adds	r1, r3, #4
 8007d0a:	6029      	str	r1, [r5, #0]
 8007d0c:	0605      	lsls	r5, r0, #24
 8007d0e:	d501      	bpl.n	8007d14 <_printf_i+0xe8>
 8007d10:	681e      	ldr	r6, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <_printf_i+0xee>
 8007d14:	0641      	lsls	r1, r0, #25
 8007d16:	d5fb      	bpl.n	8007d10 <_printf_i+0xe4>
 8007d18:	881e      	ldrh	r6, [r3, #0]
 8007d1a:	4853      	ldr	r0, [pc, #332]	; (8007e68 <_printf_i+0x23c>)
 8007d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d1e:	bf0c      	ite	eq
 8007d20:	2308      	moveq	r3, #8
 8007d22:	230a      	movne	r3, #10
 8007d24:	2100      	movs	r1, #0
 8007d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d2a:	6865      	ldr	r5, [r4, #4]
 8007d2c:	60a5      	str	r5, [r4, #8]
 8007d2e:	2d00      	cmp	r5, #0
 8007d30:	bfa2      	ittt	ge
 8007d32:	6821      	ldrge	r1, [r4, #0]
 8007d34:	f021 0104 	bicge.w	r1, r1, #4
 8007d38:	6021      	strge	r1, [r4, #0]
 8007d3a:	b90e      	cbnz	r6, 8007d40 <_printf_i+0x114>
 8007d3c:	2d00      	cmp	r5, #0
 8007d3e:	d04b      	beq.n	8007dd8 <_printf_i+0x1ac>
 8007d40:	4615      	mov	r5, r2
 8007d42:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d46:	fb03 6711 	mls	r7, r3, r1, r6
 8007d4a:	5dc7      	ldrb	r7, [r0, r7]
 8007d4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d50:	4637      	mov	r7, r6
 8007d52:	42bb      	cmp	r3, r7
 8007d54:	460e      	mov	r6, r1
 8007d56:	d9f4      	bls.n	8007d42 <_printf_i+0x116>
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d10b      	bne.n	8007d74 <_printf_i+0x148>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	07de      	lsls	r6, r3, #31
 8007d60:	d508      	bpl.n	8007d74 <_printf_i+0x148>
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	6861      	ldr	r1, [r4, #4]
 8007d66:	4299      	cmp	r1, r3
 8007d68:	bfde      	ittt	le
 8007d6a:	2330      	movle	r3, #48	; 0x30
 8007d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d74:	1b52      	subs	r2, r2, r5
 8007d76:	6122      	str	r2, [r4, #16]
 8007d78:	f8cd a000 	str.w	sl, [sp]
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	aa03      	add	r2, sp, #12
 8007d80:	4621      	mov	r1, r4
 8007d82:	4640      	mov	r0, r8
 8007d84:	f7ff fee4 	bl	8007b50 <_printf_common>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d14a      	bne.n	8007e22 <_printf_i+0x1f6>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	b004      	add	sp, #16
 8007d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	f043 0320 	orr.w	r3, r3, #32
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	4833      	ldr	r0, [pc, #204]	; (8007e6c <_printf_i+0x240>)
 8007da0:	2778      	movs	r7, #120	; 0x78
 8007da2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	6829      	ldr	r1, [r5, #0]
 8007daa:	061f      	lsls	r7, r3, #24
 8007dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007db0:	d402      	bmi.n	8007db8 <_printf_i+0x18c>
 8007db2:	065f      	lsls	r7, r3, #25
 8007db4:	bf48      	it	mi
 8007db6:	b2b6      	uxthmi	r6, r6
 8007db8:	07df      	lsls	r7, r3, #31
 8007dba:	bf48      	it	mi
 8007dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc0:	6029      	str	r1, [r5, #0]
 8007dc2:	bf48      	it	mi
 8007dc4:	6023      	strmi	r3, [r4, #0]
 8007dc6:	b91e      	cbnz	r6, 8007dd0 <_printf_i+0x1a4>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	f023 0320 	bic.w	r3, r3, #32
 8007dce:	6023      	str	r3, [r4, #0]
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	e7a7      	b.n	8007d24 <_printf_i+0xf8>
 8007dd4:	4824      	ldr	r0, [pc, #144]	; (8007e68 <_printf_i+0x23c>)
 8007dd6:	e7e4      	b.n	8007da2 <_printf_i+0x176>
 8007dd8:	4615      	mov	r5, r2
 8007dda:	e7bd      	b.n	8007d58 <_printf_i+0x12c>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	6826      	ldr	r6, [r4, #0]
 8007de0:	6961      	ldr	r1, [r4, #20]
 8007de2:	1d18      	adds	r0, r3, #4
 8007de4:	6028      	str	r0, [r5, #0]
 8007de6:	0635      	lsls	r5, r6, #24
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	d501      	bpl.n	8007df0 <_printf_i+0x1c4>
 8007dec:	6019      	str	r1, [r3, #0]
 8007dee:	e002      	b.n	8007df6 <_printf_i+0x1ca>
 8007df0:	0670      	lsls	r0, r6, #25
 8007df2:	d5fb      	bpl.n	8007dec <_printf_i+0x1c0>
 8007df4:	8019      	strh	r1, [r3, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	4615      	mov	r5, r2
 8007dfc:	e7bc      	b.n	8007d78 <_printf_i+0x14c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	1d1a      	adds	r2, r3, #4
 8007e02:	602a      	str	r2, [r5, #0]
 8007e04:	681d      	ldr	r5, [r3, #0]
 8007e06:	6862      	ldr	r2, [r4, #4]
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f7f8 f9f0 	bl	80001f0 <memchr>
 8007e10:	b108      	cbz	r0, 8007e16 <_printf_i+0x1ea>
 8007e12:	1b40      	subs	r0, r0, r5
 8007e14:	6060      	str	r0, [r4, #4]
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e20:	e7aa      	b.n	8007d78 <_printf_i+0x14c>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	462a      	mov	r2, r5
 8007e26:	4649      	mov	r1, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	47d0      	blx	sl
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d0ad      	beq.n	8007d8c <_printf_i+0x160>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	079b      	lsls	r3, r3, #30
 8007e34:	d413      	bmi.n	8007e5e <_printf_i+0x232>
 8007e36:	68e0      	ldr	r0, [r4, #12]
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	4298      	cmp	r0, r3
 8007e3c:	bfb8      	it	lt
 8007e3e:	4618      	movlt	r0, r3
 8007e40:	e7a6      	b.n	8007d90 <_printf_i+0x164>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4632      	mov	r2, r6
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	47d0      	blx	sl
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d09d      	beq.n	8007d8c <_printf_i+0x160>
 8007e50:	3501      	adds	r5, #1
 8007e52:	68e3      	ldr	r3, [r4, #12]
 8007e54:	9903      	ldr	r1, [sp, #12]
 8007e56:	1a5b      	subs	r3, r3, r1
 8007e58:	42ab      	cmp	r3, r5
 8007e5a:	dcf2      	bgt.n	8007e42 <_printf_i+0x216>
 8007e5c:	e7eb      	b.n	8007e36 <_printf_i+0x20a>
 8007e5e:	2500      	movs	r5, #0
 8007e60:	f104 0619 	add.w	r6, r4, #25
 8007e64:	e7f5      	b.n	8007e52 <_printf_i+0x226>
 8007e66:	bf00      	nop
 8007e68:	08008f81 	.word	0x08008f81
 8007e6c:	08008f92 	.word	0x08008f92

08007e70 <memmove>:
 8007e70:	4288      	cmp	r0, r1
 8007e72:	b510      	push	{r4, lr}
 8007e74:	eb01 0402 	add.w	r4, r1, r2
 8007e78:	d902      	bls.n	8007e80 <memmove+0x10>
 8007e7a:	4284      	cmp	r4, r0
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	d807      	bhi.n	8007e90 <memmove+0x20>
 8007e80:	1e43      	subs	r3, r0, #1
 8007e82:	42a1      	cmp	r1, r4
 8007e84:	d008      	beq.n	8007e98 <memmove+0x28>
 8007e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e8e:	e7f8      	b.n	8007e82 <memmove+0x12>
 8007e90:	4402      	add	r2, r0
 8007e92:	4601      	mov	r1, r0
 8007e94:	428a      	cmp	r2, r1
 8007e96:	d100      	bne.n	8007e9a <memmove+0x2a>
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ea2:	e7f7      	b.n	8007e94 <memmove+0x24>

08007ea4 <_sbrk_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d06      	ldr	r5, [pc, #24]	; (8007ec0 <_sbrk_r+0x1c>)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4604      	mov	r4, r0
 8007eac:	4608      	mov	r0, r1
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	f7fa ff72 	bl	8002d98 <_sbrk>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_sbrk_r+0x1a>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_sbrk_r+0x1a>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	200044b8 	.word	0x200044b8

08007ec4 <_realloc_r>:
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4614      	mov	r4, r2
 8007ecc:	460e      	mov	r6, r1
 8007ece:	b921      	cbnz	r1, 8007eda <_realloc_r+0x16>
 8007ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	f7ff bc57 	b.w	8007788 <_malloc_r>
 8007eda:	b92a      	cbnz	r2, 8007ee8 <_realloc_r+0x24>
 8007edc:	f7ff fbe8 	bl	80076b0 <_free_r>
 8007ee0:	4625      	mov	r5, r4
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee8:	f000 f81b 	bl	8007f22 <_malloc_usable_size_r>
 8007eec:	4284      	cmp	r4, r0
 8007eee:	4607      	mov	r7, r0
 8007ef0:	d802      	bhi.n	8007ef8 <_realloc_r+0x34>
 8007ef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ef6:	d812      	bhi.n	8007f1e <_realloc_r+0x5a>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4640      	mov	r0, r8
 8007efc:	f7ff fc44 	bl	8007788 <_malloc_r>
 8007f00:	4605      	mov	r5, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0ed      	beq.n	8007ee2 <_realloc_r+0x1e>
 8007f06:	42bc      	cmp	r4, r7
 8007f08:	4622      	mov	r2, r4
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	bf28      	it	cs
 8007f0e:	463a      	movcs	r2, r7
 8007f10:	f7ff fbc0 	bl	8007694 <memcpy>
 8007f14:	4631      	mov	r1, r6
 8007f16:	4640      	mov	r0, r8
 8007f18:	f7ff fbca 	bl	80076b0 <_free_r>
 8007f1c:	e7e1      	b.n	8007ee2 <_realloc_r+0x1e>
 8007f1e:	4635      	mov	r5, r6
 8007f20:	e7df      	b.n	8007ee2 <_realloc_r+0x1e>

08007f22 <_malloc_usable_size_r>:
 8007f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f26:	1f18      	subs	r0, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bfbc      	itt	lt
 8007f2c:	580b      	ldrlt	r3, [r1, r0]
 8007f2e:	18c0      	addlt	r0, r0, r3
 8007f30:	4770      	bx	lr
	...

08007f34 <pow>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	ed2d 8b02 	vpush	{d8}
 8007f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8007f3e:	eef0 8a60 	vmov.f32	s17, s1
 8007f42:	ec55 4b11 	vmov	r4, r5, d1
 8007f46:	f000 f873 	bl	8008030 <__ieee754_pow>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	ec57 6b10 	vmov	r6, r7, d0
 8007f56:	f7f8 fdf1 	bl	8000b3c <__aeabi_dcmpun>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d13b      	bne.n	8007fd6 <pow+0xa2>
 8007f5e:	ec51 0b18 	vmov	r0, r1, d8
 8007f62:	2200      	movs	r2, #0
 8007f64:	2300      	movs	r3, #0
 8007f66:	f7f8 fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f6a:	b1b8      	cbz	r0, 8007f9c <pow+0x68>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4620      	mov	r0, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	f7f8 fdb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d146      	bne.n	800800a <pow+0xd6>
 8007f7c:	ec45 4b10 	vmov	d0, r4, r5
 8007f80:	f000 f848 	bl	8008014 <finite>
 8007f84:	b338      	cbz	r0, 8007fd6 <pow+0xa2>
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7f8 fdad 	bl	8000aec <__aeabi_dcmplt>
 8007f92:	b300      	cbz	r0, 8007fd6 <pow+0xa2>
 8007f94:	f7ff fb52 	bl	800763c <__errno>
 8007f98:	2322      	movs	r3, #34	; 0x22
 8007f9a:	e01b      	b.n	8007fd4 <pow+0xa0>
 8007f9c:	ec47 6b10 	vmov	d0, r6, r7
 8007fa0:	f000 f838 	bl	8008014 <finite>
 8007fa4:	b9e0      	cbnz	r0, 8007fe0 <pow+0xac>
 8007fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8007faa:	eef0 0a68 	vmov.f32	s1, s17
 8007fae:	f000 f831 	bl	8008014 <finite>
 8007fb2:	b1a8      	cbz	r0, 8007fe0 <pow+0xac>
 8007fb4:	ec45 4b10 	vmov	d0, r4, r5
 8007fb8:	f000 f82c 	bl	8008014 <finite>
 8007fbc:	b180      	cbz	r0, 8007fe0 <pow+0xac>
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 fdb9 	bl	8000b3c <__aeabi_dcmpun>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d0e2      	beq.n	8007f94 <pow+0x60>
 8007fce:	f7ff fb35 	bl	800763c <__errno>
 8007fd2:	2321      	movs	r3, #33	; 0x21
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	ecbd 8b02 	vpop	{d8}
 8007fda:	ec47 6b10 	vmov	d0, r6, r7
 8007fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fd76 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d0f2      	beq.n	8007fd6 <pow+0xa2>
 8007ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ff4:	eef0 0a68 	vmov.f32	s1, s17
 8007ff8:	f000 f80c 	bl	8008014 <finite>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d0ea      	beq.n	8007fd6 <pow+0xa2>
 8008000:	ec45 4b10 	vmov	d0, r4, r5
 8008004:	f000 f806 	bl	8008014 <finite>
 8008008:	e7c3      	b.n	8007f92 <pow+0x5e>
 800800a:	4f01      	ldr	r7, [pc, #4]	; (8008010 <pow+0xdc>)
 800800c:	2600      	movs	r6, #0
 800800e:	e7e2      	b.n	8007fd6 <pow+0xa2>
 8008010:	3ff00000 	.word	0x3ff00000

08008014 <finite>:
 8008014:	b082      	sub	sp, #8
 8008016:	ed8d 0b00 	vstr	d0, [sp]
 800801a:	9801      	ldr	r0, [sp, #4]
 800801c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008020:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008024:	0fc0      	lsrs	r0, r0, #31
 8008026:	b002      	add	sp, #8
 8008028:	4770      	bx	lr
 800802a:	0000      	movs	r0, r0
 800802c:	0000      	movs	r0, r0
	...

08008030 <__ieee754_pow>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ed2d 8b06 	vpush	{d8-d10}
 8008038:	b089      	sub	sp, #36	; 0x24
 800803a:	ed8d 1b00 	vstr	d1, [sp]
 800803e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008042:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008046:	ea58 0102 	orrs.w	r1, r8, r2
 800804a:	ec57 6b10 	vmov	r6, r7, d0
 800804e:	d115      	bne.n	800807c <__ieee754_pow+0x4c>
 8008050:	19b3      	adds	r3, r6, r6
 8008052:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008056:	4152      	adcs	r2, r2
 8008058:	4299      	cmp	r1, r3
 800805a:	4b89      	ldr	r3, [pc, #548]	; (8008280 <__ieee754_pow+0x250>)
 800805c:	4193      	sbcs	r3, r2
 800805e:	f080 84d1 	bcs.w	8008a04 <__ieee754_pow+0x9d4>
 8008062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 f917 	bl	800029c <__adddf3>
 800806e:	ec41 0b10 	vmov	d0, r0, r1
 8008072:	b009      	add	sp, #36	; 0x24
 8008074:	ecbd 8b06 	vpop	{d8-d10}
 8008078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807c:	4b81      	ldr	r3, [pc, #516]	; (8008284 <__ieee754_pow+0x254>)
 800807e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008082:	429c      	cmp	r4, r3
 8008084:	ee10 aa10 	vmov	sl, s0
 8008088:	463d      	mov	r5, r7
 800808a:	dc06      	bgt.n	800809a <__ieee754_pow+0x6a>
 800808c:	d101      	bne.n	8008092 <__ieee754_pow+0x62>
 800808e:	2e00      	cmp	r6, #0
 8008090:	d1e7      	bne.n	8008062 <__ieee754_pow+0x32>
 8008092:	4598      	cmp	r8, r3
 8008094:	dc01      	bgt.n	800809a <__ieee754_pow+0x6a>
 8008096:	d10f      	bne.n	80080b8 <__ieee754_pow+0x88>
 8008098:	b172      	cbz	r2, 80080b8 <__ieee754_pow+0x88>
 800809a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800809e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80080a2:	ea55 050a 	orrs.w	r5, r5, sl
 80080a6:	d1dc      	bne.n	8008062 <__ieee754_pow+0x32>
 80080a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080ac:	18db      	adds	r3, r3, r3
 80080ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80080b2:	4152      	adcs	r2, r2
 80080b4:	429d      	cmp	r5, r3
 80080b6:	e7d0      	b.n	800805a <__ieee754_pow+0x2a>
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	da3b      	bge.n	8008134 <__ieee754_pow+0x104>
 80080bc:	4b72      	ldr	r3, [pc, #456]	; (8008288 <__ieee754_pow+0x258>)
 80080be:	4598      	cmp	r8, r3
 80080c0:	dc51      	bgt.n	8008166 <__ieee754_pow+0x136>
 80080c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80080c6:	4598      	cmp	r8, r3
 80080c8:	f340 84ab 	ble.w	8008a22 <__ieee754_pow+0x9f2>
 80080cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80080d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080d4:	2b14      	cmp	r3, #20
 80080d6:	dd0f      	ble.n	80080f8 <__ieee754_pow+0xc8>
 80080d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80080dc:	fa22 f103 	lsr.w	r1, r2, r3
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	4293      	cmp	r3, r2
 80080e6:	f040 849c 	bne.w	8008a22 <__ieee754_pow+0x9f2>
 80080ea:	f001 0101 	and.w	r1, r1, #1
 80080ee:	f1c1 0302 	rsb	r3, r1, #2
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	b182      	cbz	r2, 8008118 <__ieee754_pow+0xe8>
 80080f6:	e05f      	b.n	80081b8 <__ieee754_pow+0x188>
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	d15b      	bne.n	80081b4 <__ieee754_pow+0x184>
 80080fc:	f1c3 0314 	rsb	r3, r3, #20
 8008100:	fa48 f103 	asr.w	r1, r8, r3
 8008104:	fa01 f303 	lsl.w	r3, r1, r3
 8008108:	4543      	cmp	r3, r8
 800810a:	f040 8487 	bne.w	8008a1c <__ieee754_pow+0x9ec>
 800810e:	f001 0101 	and.w	r1, r1, #1
 8008112:	f1c1 0302 	rsb	r3, r1, #2
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	4b5c      	ldr	r3, [pc, #368]	; (800828c <__ieee754_pow+0x25c>)
 800811a:	4598      	cmp	r8, r3
 800811c:	d132      	bne.n	8008184 <__ieee754_pow+0x154>
 800811e:	f1b9 0f00 	cmp.w	r9, #0
 8008122:	f280 8477 	bge.w	8008a14 <__ieee754_pow+0x9e4>
 8008126:	4959      	ldr	r1, [pc, #356]	; (800828c <__ieee754_pow+0x25c>)
 8008128:	4632      	mov	r2, r6
 800812a:	463b      	mov	r3, r7
 800812c:	2000      	movs	r0, #0
 800812e:	f7f8 fb95 	bl	800085c <__aeabi_ddiv>
 8008132:	e79c      	b.n	800806e <__ieee754_pow+0x3e>
 8008134:	2300      	movs	r3, #0
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	2a00      	cmp	r2, #0
 800813a:	d13d      	bne.n	80081b8 <__ieee754_pow+0x188>
 800813c:	4b51      	ldr	r3, [pc, #324]	; (8008284 <__ieee754_pow+0x254>)
 800813e:	4598      	cmp	r8, r3
 8008140:	d1ea      	bne.n	8008118 <__ieee754_pow+0xe8>
 8008142:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008146:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800814a:	ea53 030a 	orrs.w	r3, r3, sl
 800814e:	f000 8459 	beq.w	8008a04 <__ieee754_pow+0x9d4>
 8008152:	4b4f      	ldr	r3, [pc, #316]	; (8008290 <__ieee754_pow+0x260>)
 8008154:	429c      	cmp	r4, r3
 8008156:	dd08      	ble.n	800816a <__ieee754_pow+0x13a>
 8008158:	f1b9 0f00 	cmp.w	r9, #0
 800815c:	f2c0 8456 	blt.w	8008a0c <__ieee754_pow+0x9dc>
 8008160:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008164:	e783      	b.n	800806e <__ieee754_pow+0x3e>
 8008166:	2302      	movs	r3, #2
 8008168:	e7e5      	b.n	8008136 <__ieee754_pow+0x106>
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	f04f 0000 	mov.w	r0, #0
 8008172:	f04f 0100 	mov.w	r1, #0
 8008176:	f6bf af7a 	bge.w	800806e <__ieee754_pow+0x3e>
 800817a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800817e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008182:	e774      	b.n	800806e <__ieee754_pow+0x3e>
 8008184:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008188:	d106      	bne.n	8008198 <__ieee754_pow+0x168>
 800818a:	4632      	mov	r2, r6
 800818c:	463b      	mov	r3, r7
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fa39 	bl	8000608 <__aeabi_dmul>
 8008196:	e76a      	b.n	800806e <__ieee754_pow+0x3e>
 8008198:	4b3e      	ldr	r3, [pc, #248]	; (8008294 <__ieee754_pow+0x264>)
 800819a:	4599      	cmp	r9, r3
 800819c:	d10c      	bne.n	80081b8 <__ieee754_pow+0x188>
 800819e:	2d00      	cmp	r5, #0
 80081a0:	db0a      	blt.n	80081b8 <__ieee754_pow+0x188>
 80081a2:	ec47 6b10 	vmov	d0, r6, r7
 80081a6:	b009      	add	sp, #36	; 0x24
 80081a8:	ecbd 8b06 	vpop	{d8-d10}
 80081ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b0:	f000 bd20 	b.w	8008bf4 <__ieee754_sqrt>
 80081b4:	2300      	movs	r3, #0
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	ec47 6b10 	vmov	d0, r6, r7
 80081bc:	f000 fc62 	bl	8008a84 <fabs>
 80081c0:	ec51 0b10 	vmov	r0, r1, d0
 80081c4:	f1ba 0f00 	cmp.w	sl, #0
 80081c8:	d129      	bne.n	800821e <__ieee754_pow+0x1ee>
 80081ca:	b124      	cbz	r4, 80081d6 <__ieee754_pow+0x1a6>
 80081cc:	4b2f      	ldr	r3, [pc, #188]	; (800828c <__ieee754_pow+0x25c>)
 80081ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d123      	bne.n	800821e <__ieee754_pow+0x1ee>
 80081d6:	f1b9 0f00 	cmp.w	r9, #0
 80081da:	da05      	bge.n	80081e8 <__ieee754_pow+0x1b8>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	2000      	movs	r0, #0
 80081e2:	492a      	ldr	r1, [pc, #168]	; (800828c <__ieee754_pow+0x25c>)
 80081e4:	f7f8 fb3a 	bl	800085c <__aeabi_ddiv>
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	f6bf af40 	bge.w	800806e <__ieee754_pow+0x3e>
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80081f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80081f8:	431c      	orrs	r4, r3
 80081fa:	d108      	bne.n	800820e <__ieee754_pow+0x1de>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4610      	mov	r0, r2
 8008202:	4619      	mov	r1, r3
 8008204:	f7f8 f848 	bl	8000298 <__aeabi_dsub>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	e78f      	b.n	800812e <__ieee754_pow+0xfe>
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	2b01      	cmp	r3, #1
 8008212:	f47f af2c 	bne.w	800806e <__ieee754_pow+0x3e>
 8008216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800821a:	4619      	mov	r1, r3
 800821c:	e727      	b.n	800806e <__ieee754_pow+0x3e>
 800821e:	0feb      	lsrs	r3, r5, #31
 8008220:	3b01      	subs	r3, #1
 8008222:	9306      	str	r3, [sp, #24]
 8008224:	9a06      	ldr	r2, [sp, #24]
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	d102      	bne.n	8008232 <__ieee754_pow+0x202>
 800822c:	4632      	mov	r2, r6
 800822e:	463b      	mov	r3, r7
 8008230:	e7e6      	b.n	8008200 <__ieee754_pow+0x1d0>
 8008232:	4b19      	ldr	r3, [pc, #100]	; (8008298 <__ieee754_pow+0x268>)
 8008234:	4598      	cmp	r8, r3
 8008236:	f340 80fb 	ble.w	8008430 <__ieee754_pow+0x400>
 800823a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800823e:	4598      	cmp	r8, r3
 8008240:	4b13      	ldr	r3, [pc, #76]	; (8008290 <__ieee754_pow+0x260>)
 8008242:	dd0c      	ble.n	800825e <__ieee754_pow+0x22e>
 8008244:	429c      	cmp	r4, r3
 8008246:	dc0f      	bgt.n	8008268 <__ieee754_pow+0x238>
 8008248:	f1b9 0f00 	cmp.w	r9, #0
 800824c:	da0f      	bge.n	800826e <__ieee754_pow+0x23e>
 800824e:	2000      	movs	r0, #0
 8008250:	b009      	add	sp, #36	; 0x24
 8008252:	ecbd 8b06 	vpop	{d8-d10}
 8008256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	f000 bcc2 	b.w	8008be2 <__math_oflow>
 800825e:	429c      	cmp	r4, r3
 8008260:	dbf2      	blt.n	8008248 <__ieee754_pow+0x218>
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <__ieee754_pow+0x25c>)
 8008264:	429c      	cmp	r4, r3
 8008266:	dd19      	ble.n	800829c <__ieee754_pow+0x26c>
 8008268:	f1b9 0f00 	cmp.w	r9, #0
 800826c:	dcef      	bgt.n	800824e <__ieee754_pow+0x21e>
 800826e:	2000      	movs	r0, #0
 8008270:	b009      	add	sp, #36	; 0x24
 8008272:	ecbd 8b06 	vpop	{d8-d10}
 8008276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f000 bca9 	b.w	8008bd0 <__math_uflow>
 800827e:	bf00      	nop
 8008280:	fff00000 	.word	0xfff00000
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	433fffff 	.word	0x433fffff
 800828c:	3ff00000 	.word	0x3ff00000
 8008290:	3fefffff 	.word	0x3fefffff
 8008294:	3fe00000 	.word	0x3fe00000
 8008298:	41e00000 	.word	0x41e00000
 800829c:	4b60      	ldr	r3, [pc, #384]	; (8008420 <__ieee754_pow+0x3f0>)
 800829e:	2200      	movs	r2, #0
 80082a0:	f7f7 fffa 	bl	8000298 <__aeabi_dsub>
 80082a4:	a354      	add	r3, pc, #336	; (adr r3, 80083f8 <__ieee754_pow+0x3c8>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	4604      	mov	r4, r0
 80082ac:	460d      	mov	r5, r1
 80082ae:	f7f8 f9ab 	bl	8000608 <__aeabi_dmul>
 80082b2:	a353      	add	r3, pc, #332	; (adr r3, 8008400 <__ieee754_pow+0x3d0>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	4606      	mov	r6, r0
 80082ba:	460f      	mov	r7, r1
 80082bc:	4620      	mov	r0, r4
 80082be:	4629      	mov	r1, r5
 80082c0:	f7f8 f9a2 	bl	8000608 <__aeabi_dmul>
 80082c4:	4b57      	ldr	r3, [pc, #348]	; (8008424 <__ieee754_pow+0x3f4>)
 80082c6:	4682      	mov	sl, r0
 80082c8:	468b      	mov	fp, r1
 80082ca:	2200      	movs	r2, #0
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 f99a 	bl	8000608 <__aeabi_dmul>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	a14b      	add	r1, pc, #300	; (adr r1, 8008408 <__ieee754_pow+0x3d8>)
 80082da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082de:	f7f7 ffdb 	bl	8000298 <__aeabi_dsub>
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	f7f8 f98f 	bl	8000608 <__aeabi_dmul>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	2000      	movs	r0, #0
 80082f0:	494d      	ldr	r1, [pc, #308]	; (8008428 <__ieee754_pow+0x3f8>)
 80082f2:	f7f7 ffd1 	bl	8000298 <__aeabi_dsub>
 80082f6:	4622      	mov	r2, r4
 80082f8:	4680      	mov	r8, r0
 80082fa:	4689      	mov	r9, r1
 80082fc:	462b      	mov	r3, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 f981 	bl	8000608 <__aeabi_dmul>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4640      	mov	r0, r8
 800830c:	4649      	mov	r1, r9
 800830e:	f7f8 f97b 	bl	8000608 <__aeabi_dmul>
 8008312:	a33f      	add	r3, pc, #252	; (adr r3, 8008410 <__ieee754_pow+0x3e0>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f8 f976 	bl	8000608 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4650      	mov	r0, sl
 8008322:	4659      	mov	r1, fp
 8008324:	f7f7 ffb8 	bl	8000298 <__aeabi_dsub>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4680      	mov	r8, r0
 800832e:	4689      	mov	r9, r1
 8008330:	4630      	mov	r0, r6
 8008332:	4639      	mov	r1, r7
 8008334:	f7f7 ffb2 	bl	800029c <__adddf3>
 8008338:	2000      	movs	r0, #0
 800833a:	4632      	mov	r2, r6
 800833c:	463b      	mov	r3, r7
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	f7f7 ffa9 	bl	8000298 <__aeabi_dsub>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f7 ffa3 	bl	8000298 <__aeabi_dsub>
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	9a06      	ldr	r2, [sp, #24]
 8008356:	3b01      	subs	r3, #1
 8008358:	4313      	orrs	r3, r2
 800835a:	4682      	mov	sl, r0
 800835c:	468b      	mov	fp, r1
 800835e:	f040 81e7 	bne.w	8008730 <__ieee754_pow+0x700>
 8008362:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008418 <__ieee754_pow+0x3e8>
 8008366:	eeb0 8a47 	vmov.f32	s16, s14
 800836a:	eef0 8a67 	vmov.f32	s17, s15
 800836e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008372:	2600      	movs	r6, #0
 8008374:	4632      	mov	r2, r6
 8008376:	463b      	mov	r3, r7
 8008378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800837c:	f7f7 ff8c 	bl	8000298 <__aeabi_dsub>
 8008380:	4622      	mov	r2, r4
 8008382:	462b      	mov	r3, r5
 8008384:	f7f8 f940 	bl	8000608 <__aeabi_dmul>
 8008388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	4650      	mov	r0, sl
 8008392:	4659      	mov	r1, fp
 8008394:	f7f8 f938 	bl	8000608 <__aeabi_dmul>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4640      	mov	r0, r8
 800839e:	4649      	mov	r1, r9
 80083a0:	f7f7 ff7c 	bl	800029c <__adddf3>
 80083a4:	4632      	mov	r2, r6
 80083a6:	463b      	mov	r3, r7
 80083a8:	4680      	mov	r8, r0
 80083aa:	4689      	mov	r9, r1
 80083ac:	4620      	mov	r0, r4
 80083ae:	4629      	mov	r1, r5
 80083b0:	f7f8 f92a 	bl	8000608 <__aeabi_dmul>
 80083b4:	460b      	mov	r3, r1
 80083b6:	4604      	mov	r4, r0
 80083b8:	460d      	mov	r5, r1
 80083ba:	4602      	mov	r2, r0
 80083bc:	4649      	mov	r1, r9
 80083be:	4640      	mov	r0, r8
 80083c0:	f7f7 ff6c 	bl	800029c <__adddf3>
 80083c4:	4b19      	ldr	r3, [pc, #100]	; (800842c <__ieee754_pow+0x3fc>)
 80083c6:	4299      	cmp	r1, r3
 80083c8:	ec45 4b19 	vmov	d9, r4, r5
 80083cc:	4606      	mov	r6, r0
 80083ce:	460f      	mov	r7, r1
 80083d0:	468b      	mov	fp, r1
 80083d2:	f340 82f0 	ble.w	80089b6 <__ieee754_pow+0x986>
 80083d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80083da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80083de:	4303      	orrs	r3, r0
 80083e0:	f000 81e4 	beq.w	80087ac <__ieee754_pow+0x77c>
 80083e4:	ec51 0b18 	vmov	r0, r1, d8
 80083e8:	2200      	movs	r2, #0
 80083ea:	2300      	movs	r3, #0
 80083ec:	f7f8 fb7e 	bl	8000aec <__aeabi_dcmplt>
 80083f0:	3800      	subs	r0, #0
 80083f2:	bf18      	it	ne
 80083f4:	2001      	movne	r0, #1
 80083f6:	e72b      	b.n	8008250 <__ieee754_pow+0x220>
 80083f8:	60000000 	.word	0x60000000
 80083fc:	3ff71547 	.word	0x3ff71547
 8008400:	f85ddf44 	.word	0xf85ddf44
 8008404:	3e54ae0b 	.word	0x3e54ae0b
 8008408:	55555555 	.word	0x55555555
 800840c:	3fd55555 	.word	0x3fd55555
 8008410:	652b82fe 	.word	0x652b82fe
 8008414:	3ff71547 	.word	0x3ff71547
 8008418:	00000000 	.word	0x00000000
 800841c:	bff00000 	.word	0xbff00000
 8008420:	3ff00000 	.word	0x3ff00000
 8008424:	3fd00000 	.word	0x3fd00000
 8008428:	3fe00000 	.word	0x3fe00000
 800842c:	408fffff 	.word	0x408fffff
 8008430:	4bd5      	ldr	r3, [pc, #852]	; (8008788 <__ieee754_pow+0x758>)
 8008432:	402b      	ands	r3, r5
 8008434:	2200      	movs	r2, #0
 8008436:	b92b      	cbnz	r3, 8008444 <__ieee754_pow+0x414>
 8008438:	4bd4      	ldr	r3, [pc, #848]	; (800878c <__ieee754_pow+0x75c>)
 800843a:	f7f8 f8e5 	bl	8000608 <__aeabi_dmul>
 800843e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008442:	460c      	mov	r4, r1
 8008444:	1523      	asrs	r3, r4, #20
 8008446:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800844a:	4413      	add	r3, r2
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	4bd0      	ldr	r3, [pc, #832]	; (8008790 <__ieee754_pow+0x760>)
 8008450:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008454:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008458:	429c      	cmp	r4, r3
 800845a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800845e:	dd08      	ble.n	8008472 <__ieee754_pow+0x442>
 8008460:	4bcc      	ldr	r3, [pc, #816]	; (8008794 <__ieee754_pow+0x764>)
 8008462:	429c      	cmp	r4, r3
 8008464:	f340 8162 	ble.w	800872c <__ieee754_pow+0x6fc>
 8008468:	9b05      	ldr	r3, [sp, #20]
 800846a:	3301      	adds	r3, #1
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008472:	2400      	movs	r4, #0
 8008474:	00e3      	lsls	r3, r4, #3
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	4bc7      	ldr	r3, [pc, #796]	; (8008798 <__ieee754_pow+0x768>)
 800847a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800847e:	ed93 7b00 	vldr	d7, [r3]
 8008482:	4629      	mov	r1, r5
 8008484:	ec53 2b17 	vmov	r2, r3, d7
 8008488:	eeb0 9a47 	vmov.f32	s18, s14
 800848c:	eef0 9a67 	vmov.f32	s19, s15
 8008490:	4682      	mov	sl, r0
 8008492:	f7f7 ff01 	bl	8000298 <__aeabi_dsub>
 8008496:	4652      	mov	r2, sl
 8008498:	4606      	mov	r6, r0
 800849a:	460f      	mov	r7, r1
 800849c:	462b      	mov	r3, r5
 800849e:	ec51 0b19 	vmov	r0, r1, d9
 80084a2:	f7f7 fefb 	bl	800029c <__adddf3>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	2000      	movs	r0, #0
 80084ac:	49bb      	ldr	r1, [pc, #748]	; (800879c <__ieee754_pow+0x76c>)
 80084ae:	f7f8 f9d5 	bl	800085c <__aeabi_ddiv>
 80084b2:	ec41 0b1a 	vmov	d10, r0, r1
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	f7f8 f8a3 	bl	8000608 <__aeabi_dmul>
 80084c2:	2300      	movs	r3, #0
 80084c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c8:	9302      	str	r3, [sp, #8]
 80084ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084ce:	46ab      	mov	fp, r5
 80084d0:	106d      	asrs	r5, r5, #1
 80084d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80084d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80084da:	ec41 0b18 	vmov	d8, r0, r1
 80084de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80084e2:	2200      	movs	r2, #0
 80084e4:	4640      	mov	r0, r8
 80084e6:	4649      	mov	r1, r9
 80084e8:	4614      	mov	r4, r2
 80084ea:	461d      	mov	r5, r3
 80084ec:	f7f8 f88c 	bl	8000608 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f7f7 fece 	bl	8000298 <__aeabi_dsub>
 80084fc:	ec53 2b19 	vmov	r2, r3, d9
 8008500:	4606      	mov	r6, r0
 8008502:	460f      	mov	r7, r1
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	f7f7 fec6 	bl	8000298 <__aeabi_dsub>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4650      	mov	r0, sl
 8008512:	4659      	mov	r1, fp
 8008514:	f7f7 fec0 	bl	8000298 <__aeabi_dsub>
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f7 feb6 	bl	8000298 <__aeabi_dsub>
 800852c:	ec53 2b1a 	vmov	r2, r3, d10
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	ec53 2b18 	vmov	r2, r3, d8
 8008538:	ec41 0b19 	vmov	d9, r0, r1
 800853c:	ec51 0b18 	vmov	r0, r1, d8
 8008540:	f7f8 f862 	bl	8000608 <__aeabi_dmul>
 8008544:	a37c      	add	r3, pc, #496	; (adr r3, 8008738 <__ieee754_pow+0x708>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	4604      	mov	r4, r0
 800854c:	460d      	mov	r5, r1
 800854e:	f7f8 f85b 	bl	8000608 <__aeabi_dmul>
 8008552:	a37b      	add	r3, pc, #492	; (adr r3, 8008740 <__ieee754_pow+0x710>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f7 fea0 	bl	800029c <__adddf3>
 800855c:	4622      	mov	r2, r4
 800855e:	462b      	mov	r3, r5
 8008560:	f7f8 f852 	bl	8000608 <__aeabi_dmul>
 8008564:	a378      	add	r3, pc, #480	; (adr r3, 8008748 <__ieee754_pow+0x718>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fe97 	bl	800029c <__adddf3>
 800856e:	4622      	mov	r2, r4
 8008570:	462b      	mov	r3, r5
 8008572:	f7f8 f849 	bl	8000608 <__aeabi_dmul>
 8008576:	a376      	add	r3, pc, #472	; (adr r3, 8008750 <__ieee754_pow+0x720>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f7f7 fe8e 	bl	800029c <__adddf3>
 8008580:	4622      	mov	r2, r4
 8008582:	462b      	mov	r3, r5
 8008584:	f7f8 f840 	bl	8000608 <__aeabi_dmul>
 8008588:	a373      	add	r3, pc, #460	; (adr r3, 8008758 <__ieee754_pow+0x728>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f7 fe85 	bl	800029c <__adddf3>
 8008592:	4622      	mov	r2, r4
 8008594:	462b      	mov	r3, r5
 8008596:	f7f8 f837 	bl	8000608 <__aeabi_dmul>
 800859a:	a371      	add	r3, pc, #452	; (adr r3, 8008760 <__ieee754_pow+0x730>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f7 fe7c 	bl	800029c <__adddf3>
 80085a4:	4622      	mov	r2, r4
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	462b      	mov	r3, r5
 80085ac:	4620      	mov	r0, r4
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f8 f824 	bl	8000608 <__aeabi_dmul>
 80085c0:	4642      	mov	r2, r8
 80085c2:	4604      	mov	r4, r0
 80085c4:	460d      	mov	r5, r1
 80085c6:	464b      	mov	r3, r9
 80085c8:	ec51 0b18 	vmov	r0, r1, d8
 80085cc:	f7f7 fe66 	bl	800029c <__adddf3>
 80085d0:	ec53 2b19 	vmov	r2, r3, d9
 80085d4:	f7f8 f818 	bl	8000608 <__aeabi_dmul>
 80085d8:	4622      	mov	r2, r4
 80085da:	462b      	mov	r3, r5
 80085dc:	f7f7 fe5e 	bl	800029c <__adddf3>
 80085e0:	4642      	mov	r2, r8
 80085e2:	4682      	mov	sl, r0
 80085e4:	468b      	mov	fp, r1
 80085e6:	464b      	mov	r3, r9
 80085e8:	4640      	mov	r0, r8
 80085ea:	4649      	mov	r1, r9
 80085ec:	f7f8 f80c 	bl	8000608 <__aeabi_dmul>
 80085f0:	4b6b      	ldr	r3, [pc, #428]	; (80087a0 <__ieee754_pow+0x770>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	4606      	mov	r6, r0
 80085f6:	460f      	mov	r7, r1
 80085f8:	f7f7 fe50 	bl	800029c <__adddf3>
 80085fc:	4652      	mov	r2, sl
 80085fe:	465b      	mov	r3, fp
 8008600:	f7f7 fe4c 	bl	800029c <__adddf3>
 8008604:	2000      	movs	r0, #0
 8008606:	4604      	mov	r4, r0
 8008608:	460d      	mov	r5, r1
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4640      	mov	r0, r8
 8008610:	4649      	mov	r1, r9
 8008612:	f7f7 fff9 	bl	8000608 <__aeabi_dmul>
 8008616:	4b62      	ldr	r3, [pc, #392]	; (80087a0 <__ieee754_pow+0x770>)
 8008618:	4680      	mov	r8, r0
 800861a:	4689      	mov	r9, r1
 800861c:	2200      	movs	r2, #0
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f7 fe39 	bl	8000298 <__aeabi_dsub>
 8008626:	4632      	mov	r2, r6
 8008628:	463b      	mov	r3, r7
 800862a:	f7f7 fe35 	bl	8000298 <__aeabi_dsub>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4650      	mov	r0, sl
 8008634:	4659      	mov	r1, fp
 8008636:	f7f7 fe2f 	bl	8000298 <__aeabi_dsub>
 800863a:	ec53 2b18 	vmov	r2, r3, d8
 800863e:	f7f7 ffe3 	bl	8000608 <__aeabi_dmul>
 8008642:	4622      	mov	r2, r4
 8008644:	4606      	mov	r6, r0
 8008646:	460f      	mov	r7, r1
 8008648:	462b      	mov	r3, r5
 800864a:	ec51 0b19 	vmov	r0, r1, d9
 800864e:	f7f7 ffdb 	bl	8000608 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4630      	mov	r0, r6
 8008658:	4639      	mov	r1, r7
 800865a:	f7f7 fe1f 	bl	800029c <__adddf3>
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4640      	mov	r0, r8
 8008668:	4649      	mov	r1, r9
 800866a:	f7f7 fe17 	bl	800029c <__adddf3>
 800866e:	a33e      	add	r3, pc, #248	; (adr r3, 8008768 <__ieee754_pow+0x738>)
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	2000      	movs	r0, #0
 8008676:	4604      	mov	r4, r0
 8008678:	460d      	mov	r5, r1
 800867a:	f7f7 ffc5 	bl	8000608 <__aeabi_dmul>
 800867e:	4642      	mov	r2, r8
 8008680:	ec41 0b18 	vmov	d8, r0, r1
 8008684:	464b      	mov	r3, r9
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f7f7 fe05 	bl	8000298 <__aeabi_dsub>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4630      	mov	r0, r6
 8008694:	4639      	mov	r1, r7
 8008696:	f7f7 fdff 	bl	8000298 <__aeabi_dsub>
 800869a:	a335      	add	r3, pc, #212	; (adr r3, 8008770 <__ieee754_pow+0x740>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 ffb2 	bl	8000608 <__aeabi_dmul>
 80086a4:	a334      	add	r3, pc, #208	; (adr r3, 8008778 <__ieee754_pow+0x748>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f7 ffa9 	bl	8000608 <__aeabi_dmul>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4630      	mov	r0, r6
 80086bc:	4639      	mov	r1, r7
 80086be:	f7f7 fded 	bl	800029c <__adddf3>
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	4b37      	ldr	r3, [pc, #220]	; (80087a4 <__ieee754_pow+0x774>)
 80086c6:	4413      	add	r3, r2
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f7 fde6 	bl	800029c <__adddf3>
 80086d0:	4682      	mov	sl, r0
 80086d2:	9805      	ldr	r0, [sp, #20]
 80086d4:	468b      	mov	fp, r1
 80086d6:	f7f7 ff2d 	bl	8000534 <__aeabi_i2d>
 80086da:	9a07      	ldr	r2, [sp, #28]
 80086dc:	4b32      	ldr	r3, [pc, #200]	; (80087a8 <__ieee754_pow+0x778>)
 80086de:	4413      	add	r3, r2
 80086e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e4:	4606      	mov	r6, r0
 80086e6:	460f      	mov	r7, r1
 80086e8:	4652      	mov	r2, sl
 80086ea:	465b      	mov	r3, fp
 80086ec:	ec51 0b18 	vmov	r0, r1, d8
 80086f0:	f7f7 fdd4 	bl	800029c <__adddf3>
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	f7f7 fdd0 	bl	800029c <__adddf3>
 80086fc:	4632      	mov	r2, r6
 80086fe:	463b      	mov	r3, r7
 8008700:	f7f7 fdcc 	bl	800029c <__adddf3>
 8008704:	2000      	movs	r0, #0
 8008706:	4632      	mov	r2, r6
 8008708:	463b      	mov	r3, r7
 800870a:	4604      	mov	r4, r0
 800870c:	460d      	mov	r5, r1
 800870e:	f7f7 fdc3 	bl	8000298 <__aeabi_dsub>
 8008712:	4642      	mov	r2, r8
 8008714:	464b      	mov	r3, r9
 8008716:	f7f7 fdbf 	bl	8000298 <__aeabi_dsub>
 800871a:	ec53 2b18 	vmov	r2, r3, d8
 800871e:	f7f7 fdbb 	bl	8000298 <__aeabi_dsub>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4650      	mov	r0, sl
 8008728:	4659      	mov	r1, fp
 800872a:	e610      	b.n	800834e <__ieee754_pow+0x31e>
 800872c:	2401      	movs	r4, #1
 800872e:	e6a1      	b.n	8008474 <__ieee754_pow+0x444>
 8008730:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008780 <__ieee754_pow+0x750>
 8008734:	e617      	b.n	8008366 <__ieee754_pow+0x336>
 8008736:	bf00      	nop
 8008738:	4a454eef 	.word	0x4a454eef
 800873c:	3fca7e28 	.word	0x3fca7e28
 8008740:	93c9db65 	.word	0x93c9db65
 8008744:	3fcd864a 	.word	0x3fcd864a
 8008748:	a91d4101 	.word	0xa91d4101
 800874c:	3fd17460 	.word	0x3fd17460
 8008750:	518f264d 	.word	0x518f264d
 8008754:	3fd55555 	.word	0x3fd55555
 8008758:	db6fabff 	.word	0xdb6fabff
 800875c:	3fdb6db6 	.word	0x3fdb6db6
 8008760:	33333303 	.word	0x33333303
 8008764:	3fe33333 	.word	0x3fe33333
 8008768:	e0000000 	.word	0xe0000000
 800876c:	3feec709 	.word	0x3feec709
 8008770:	dc3a03fd 	.word	0xdc3a03fd
 8008774:	3feec709 	.word	0x3feec709
 8008778:	145b01f5 	.word	0x145b01f5
 800877c:	be3e2fe0 	.word	0xbe3e2fe0
 8008780:	00000000 	.word	0x00000000
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	43400000 	.word	0x43400000
 8008790:	0003988e 	.word	0x0003988e
 8008794:	000bb679 	.word	0x000bb679
 8008798:	08008fa8 	.word	0x08008fa8
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	40080000 	.word	0x40080000
 80087a4:	08008fc8 	.word	0x08008fc8
 80087a8:	08008fb8 	.word	0x08008fb8
 80087ac:	a3b3      	add	r3, pc, #716	; (adr r3, 8008a7c <__ieee754_pow+0xa4c>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f7 fd71 	bl	800029c <__adddf3>
 80087ba:	4622      	mov	r2, r4
 80087bc:	ec41 0b1a 	vmov	d10, r0, r1
 80087c0:	462b      	mov	r3, r5
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f7 fd67 	bl	8000298 <__aeabi_dsub>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	ec51 0b1a 	vmov	r0, r1, d10
 80087d2:	f7f8 f9a9 	bl	8000b28 <__aeabi_dcmpgt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f47f ae04 	bne.w	80083e4 <__ieee754_pow+0x3b4>
 80087dc:	4aa2      	ldr	r2, [pc, #648]	; (8008a68 <__ieee754_pow+0xa38>)
 80087de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087e2:	4293      	cmp	r3, r2
 80087e4:	f340 8107 	ble.w	80089f6 <__ieee754_pow+0x9c6>
 80087e8:	151b      	asrs	r3, r3, #20
 80087ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80087ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80087f2:	fa4a fa03 	asr.w	sl, sl, r3
 80087f6:	44da      	add	sl, fp
 80087f8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80087fc:	489b      	ldr	r0, [pc, #620]	; (8008a6c <__ieee754_pow+0xa3c>)
 80087fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008802:	4108      	asrs	r0, r1
 8008804:	ea00 030a 	and.w	r3, r0, sl
 8008808:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800880c:	f1c1 0114 	rsb	r1, r1, #20
 8008810:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008814:	fa4a fa01 	asr.w	sl, sl, r1
 8008818:	f1bb 0f00 	cmp.w	fp, #0
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	4620      	mov	r0, r4
 8008822:	4629      	mov	r1, r5
 8008824:	bfb8      	it	lt
 8008826:	f1ca 0a00 	rsblt	sl, sl, #0
 800882a:	f7f7 fd35 	bl	8000298 <__aeabi_dsub>
 800882e:	ec41 0b19 	vmov	d9, r0, r1
 8008832:	4642      	mov	r2, r8
 8008834:	464b      	mov	r3, r9
 8008836:	ec51 0b19 	vmov	r0, r1, d9
 800883a:	f7f7 fd2f 	bl	800029c <__adddf3>
 800883e:	a37a      	add	r3, pc, #488	; (adr r3, 8008a28 <__ieee754_pow+0x9f8>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	2000      	movs	r0, #0
 8008846:	4604      	mov	r4, r0
 8008848:	460d      	mov	r5, r1
 800884a:	f7f7 fedd 	bl	8000608 <__aeabi_dmul>
 800884e:	ec53 2b19 	vmov	r2, r3, d9
 8008852:	4606      	mov	r6, r0
 8008854:	460f      	mov	r7, r1
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f7 fd1d 	bl	8000298 <__aeabi_dsub>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4640      	mov	r0, r8
 8008864:	4649      	mov	r1, r9
 8008866:	f7f7 fd17 	bl	8000298 <__aeabi_dsub>
 800886a:	a371      	add	r3, pc, #452	; (adr r3, 8008a30 <__ieee754_pow+0xa00>)
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	f7f7 feca 	bl	8000608 <__aeabi_dmul>
 8008874:	a370      	add	r3, pc, #448	; (adr r3, 8008a38 <__ieee754_pow+0xa08>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	f7f7 fec1 	bl	8000608 <__aeabi_dmul>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f7 fd05 	bl	800029c <__adddf3>
 8008892:	4604      	mov	r4, r0
 8008894:	460d      	mov	r5, r1
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f7 fcfd 	bl	800029c <__adddf3>
 80088a2:	4632      	mov	r2, r6
 80088a4:	463b      	mov	r3, r7
 80088a6:	4680      	mov	r8, r0
 80088a8:	4689      	mov	r9, r1
 80088aa:	f7f7 fcf5 	bl	8000298 <__aeabi_dsub>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4620      	mov	r0, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7f7 fcef 	bl	8000298 <__aeabi_dsub>
 80088ba:	4642      	mov	r2, r8
 80088bc:	4606      	mov	r6, r0
 80088be:	460f      	mov	r7, r1
 80088c0:	464b      	mov	r3, r9
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	f7f7 fe9f 	bl	8000608 <__aeabi_dmul>
 80088ca:	a35d      	add	r3, pc, #372	; (adr r3, 8008a40 <__ieee754_pow+0xa10>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	4604      	mov	r4, r0
 80088d2:	460d      	mov	r5, r1
 80088d4:	f7f7 fe98 	bl	8000608 <__aeabi_dmul>
 80088d8:	a35b      	add	r3, pc, #364	; (adr r3, 8008a48 <__ieee754_pow+0xa18>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fcdb 	bl	8000298 <__aeabi_dsub>
 80088e2:	4622      	mov	r2, r4
 80088e4:	462b      	mov	r3, r5
 80088e6:	f7f7 fe8f 	bl	8000608 <__aeabi_dmul>
 80088ea:	a359      	add	r3, pc, #356	; (adr r3, 8008a50 <__ieee754_pow+0xa20>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fcd4 	bl	800029c <__adddf3>
 80088f4:	4622      	mov	r2, r4
 80088f6:	462b      	mov	r3, r5
 80088f8:	f7f7 fe86 	bl	8000608 <__aeabi_dmul>
 80088fc:	a356      	add	r3, pc, #344	; (adr r3, 8008a58 <__ieee754_pow+0xa28>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fcc9 	bl	8000298 <__aeabi_dsub>
 8008906:	4622      	mov	r2, r4
 8008908:	462b      	mov	r3, r5
 800890a:	f7f7 fe7d 	bl	8000608 <__aeabi_dmul>
 800890e:	a354      	add	r3, pc, #336	; (adr r3, 8008a60 <__ieee754_pow+0xa30>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 fcc2 	bl	800029c <__adddf3>
 8008918:	4622      	mov	r2, r4
 800891a:	462b      	mov	r3, r5
 800891c:	f7f7 fe74 	bl	8000608 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4640      	mov	r0, r8
 8008926:	4649      	mov	r1, r9
 8008928:	f7f7 fcb6 	bl	8000298 <__aeabi_dsub>
 800892c:	4604      	mov	r4, r0
 800892e:	460d      	mov	r5, r1
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4640      	mov	r0, r8
 8008936:	4649      	mov	r1, r9
 8008938:	f7f7 fe66 	bl	8000608 <__aeabi_dmul>
 800893c:	2200      	movs	r2, #0
 800893e:	ec41 0b19 	vmov	d9, r0, r1
 8008942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fca5 	bl	8000298 <__aeabi_dsub>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	ec51 0b19 	vmov	r0, r1, d9
 8008956:	f7f7 ff81 	bl	800085c <__aeabi_ddiv>
 800895a:	4632      	mov	r2, r6
 800895c:	4604      	mov	r4, r0
 800895e:	460d      	mov	r5, r1
 8008960:	463b      	mov	r3, r7
 8008962:	4640      	mov	r0, r8
 8008964:	4649      	mov	r1, r9
 8008966:	f7f7 fe4f 	bl	8000608 <__aeabi_dmul>
 800896a:	4632      	mov	r2, r6
 800896c:	463b      	mov	r3, r7
 800896e:	f7f7 fc95 	bl	800029c <__adddf3>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f7 fc8d 	bl	8000298 <__aeabi_dsub>
 800897e:	4642      	mov	r2, r8
 8008980:	464b      	mov	r3, r9
 8008982:	f7f7 fc89 	bl	8000298 <__aeabi_dsub>
 8008986:	460b      	mov	r3, r1
 8008988:	4602      	mov	r2, r0
 800898a:	4939      	ldr	r1, [pc, #228]	; (8008a70 <__ieee754_pow+0xa40>)
 800898c:	2000      	movs	r0, #0
 800898e:	f7f7 fc83 	bl	8000298 <__aeabi_dsub>
 8008992:	ec41 0b10 	vmov	d0, r0, r1
 8008996:	ee10 3a90 	vmov	r3, s1
 800899a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800899e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a2:	da2b      	bge.n	80089fc <__ieee754_pow+0x9cc>
 80089a4:	4650      	mov	r0, sl
 80089a6:	f000 f877 	bl	8008a98 <scalbn>
 80089aa:	ec51 0b10 	vmov	r0, r1, d0
 80089ae:	ec53 2b18 	vmov	r2, r3, d8
 80089b2:	f7ff bbee 	b.w	8008192 <__ieee754_pow+0x162>
 80089b6:	4b2f      	ldr	r3, [pc, #188]	; (8008a74 <__ieee754_pow+0xa44>)
 80089b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80089bc:	429e      	cmp	r6, r3
 80089be:	f77f af0d 	ble.w	80087dc <__ieee754_pow+0x7ac>
 80089c2:	4b2d      	ldr	r3, [pc, #180]	; (8008a78 <__ieee754_pow+0xa48>)
 80089c4:	440b      	add	r3, r1
 80089c6:	4303      	orrs	r3, r0
 80089c8:	d009      	beq.n	80089de <__ieee754_pow+0x9ae>
 80089ca:	ec51 0b18 	vmov	r0, r1, d8
 80089ce:	2200      	movs	r2, #0
 80089d0:	2300      	movs	r3, #0
 80089d2:	f7f8 f88b 	bl	8000aec <__aeabi_dcmplt>
 80089d6:	3800      	subs	r0, #0
 80089d8:	bf18      	it	ne
 80089da:	2001      	movne	r0, #1
 80089dc:	e448      	b.n	8008270 <__ieee754_pow+0x240>
 80089de:	4622      	mov	r2, r4
 80089e0:	462b      	mov	r3, r5
 80089e2:	f7f7 fc59 	bl	8000298 <__aeabi_dsub>
 80089e6:	4642      	mov	r2, r8
 80089e8:	464b      	mov	r3, r9
 80089ea:	f7f8 f893 	bl	8000b14 <__aeabi_dcmpge>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f43f aef4 	beq.w	80087dc <__ieee754_pow+0x7ac>
 80089f4:	e7e9      	b.n	80089ca <__ieee754_pow+0x99a>
 80089f6:	f04f 0a00 	mov.w	sl, #0
 80089fa:	e71a      	b.n	8008832 <__ieee754_pow+0x802>
 80089fc:	ec51 0b10 	vmov	r0, r1, d0
 8008a00:	4619      	mov	r1, r3
 8008a02:	e7d4      	b.n	80089ae <__ieee754_pow+0x97e>
 8008a04:	491a      	ldr	r1, [pc, #104]	; (8008a70 <__ieee754_pow+0xa40>)
 8008a06:	2000      	movs	r0, #0
 8008a08:	f7ff bb31 	b.w	800806e <__ieee754_pow+0x3e>
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	f7ff bb2d 	b.w	800806e <__ieee754_pow+0x3e>
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7ff bb29 	b.w	800806e <__ieee754_pow+0x3e>
 8008a1c:	9204      	str	r2, [sp, #16]
 8008a1e:	f7ff bb7b 	b.w	8008118 <__ieee754_pow+0xe8>
 8008a22:	2300      	movs	r3, #0
 8008a24:	f7ff bb65 	b.w	80080f2 <__ieee754_pow+0xc2>
 8008a28:	00000000 	.word	0x00000000
 8008a2c:	3fe62e43 	.word	0x3fe62e43
 8008a30:	fefa39ef 	.word	0xfefa39ef
 8008a34:	3fe62e42 	.word	0x3fe62e42
 8008a38:	0ca86c39 	.word	0x0ca86c39
 8008a3c:	be205c61 	.word	0xbe205c61
 8008a40:	72bea4d0 	.word	0x72bea4d0
 8008a44:	3e663769 	.word	0x3e663769
 8008a48:	c5d26bf1 	.word	0xc5d26bf1
 8008a4c:	3ebbbd41 	.word	0x3ebbbd41
 8008a50:	af25de2c 	.word	0xaf25de2c
 8008a54:	3f11566a 	.word	0x3f11566a
 8008a58:	16bebd93 	.word	0x16bebd93
 8008a5c:	3f66c16c 	.word	0x3f66c16c
 8008a60:	5555553e 	.word	0x5555553e
 8008a64:	3fc55555 	.word	0x3fc55555
 8008a68:	3fe00000 	.word	0x3fe00000
 8008a6c:	fff00000 	.word	0xfff00000
 8008a70:	3ff00000 	.word	0x3ff00000
 8008a74:	4090cbff 	.word	0x4090cbff
 8008a78:	3f6f3400 	.word	0x3f6f3400
 8008a7c:	652b82fe 	.word	0x652b82fe
 8008a80:	3c971547 	.word	0x3c971547

08008a84 <fabs>:
 8008a84:	ec51 0b10 	vmov	r0, r1, d0
 8008a88:	ee10 2a10 	vmov	r2, s0
 8008a8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a90:	ec43 2b10 	vmov	d0, r2, r3
 8008a94:	4770      	bx	lr
	...

08008a98 <scalbn>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	ec55 4b10 	vmov	r4, r5, d0
 8008a9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	b999      	cbnz	r1, 8008ad0 <scalbn+0x38>
 8008aa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008aac:	4323      	orrs	r3, r4
 8008aae:	d03f      	beq.n	8008b30 <scalbn+0x98>
 8008ab0:	4b35      	ldr	r3, [pc, #212]	; (8008b88 <scalbn+0xf0>)
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	ee10 0a10 	vmov	r0, s0
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f7f7 fda5 	bl	8000608 <__aeabi_dmul>
 8008abe:	4b33      	ldr	r3, [pc, #204]	; (8008b8c <scalbn+0xf4>)
 8008ac0:	429e      	cmp	r6, r3
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	460d      	mov	r5, r1
 8008ac6:	da10      	bge.n	8008aea <scalbn+0x52>
 8008ac8:	a327      	add	r3, pc, #156	; (adr r3, 8008b68 <scalbn+0xd0>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	e01f      	b.n	8008b10 <scalbn+0x78>
 8008ad0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008ad4:	4291      	cmp	r1, r2
 8008ad6:	d10c      	bne.n	8008af2 <scalbn+0x5a>
 8008ad8:	ee10 2a10 	vmov	r2, s0
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f7f7 fbdc 	bl	800029c <__adddf3>
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	460d      	mov	r5, r1
 8008ae8:	e022      	b.n	8008b30 <scalbn+0x98>
 8008aea:	460b      	mov	r3, r1
 8008aec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008af0:	3936      	subs	r1, #54	; 0x36
 8008af2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008af6:	4296      	cmp	r6, r2
 8008af8:	dd0d      	ble.n	8008b16 <scalbn+0x7e>
 8008afa:	2d00      	cmp	r5, #0
 8008afc:	a11c      	add	r1, pc, #112	; (adr r1, 8008b70 <scalbn+0xd8>)
 8008afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b02:	da02      	bge.n	8008b0a <scalbn+0x72>
 8008b04:	a11c      	add	r1, pc, #112	; (adr r1, 8008b78 <scalbn+0xe0>)
 8008b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b0a:	a319      	add	r3, pc, #100	; (adr r3, 8008b70 <scalbn+0xd8>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fd7a 	bl	8000608 <__aeabi_dmul>
 8008b14:	e7e6      	b.n	8008ae4 <scalbn+0x4c>
 8008b16:	1872      	adds	r2, r6, r1
 8008b18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b1c:	428a      	cmp	r2, r1
 8008b1e:	dcec      	bgt.n	8008afa <scalbn+0x62>
 8008b20:	2a00      	cmp	r2, #0
 8008b22:	dd08      	ble.n	8008b36 <scalbn+0x9e>
 8008b24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b30:	ec45 4b10 	vmov	d0, r4, r5
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b3a:	da08      	bge.n	8008b4e <scalbn+0xb6>
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	a10a      	add	r1, pc, #40	; (adr r1, 8008b68 <scalbn+0xd0>)
 8008b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b44:	dac0      	bge.n	8008ac8 <scalbn+0x30>
 8008b46:	a10e      	add	r1, pc, #56	; (adr r1, 8008b80 <scalbn+0xe8>)
 8008b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b4c:	e7bc      	b.n	8008ac8 <scalbn+0x30>
 8008b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b52:	3236      	adds	r2, #54	; 0x36
 8008b54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <scalbn+0xf8>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	e7d5      	b.n	8008b10 <scalbn+0x78>
 8008b64:	f3af 8000 	nop.w
 8008b68:	c2f8f359 	.word	0xc2f8f359
 8008b6c:	01a56e1f 	.word	0x01a56e1f
 8008b70:	8800759c 	.word	0x8800759c
 8008b74:	7e37e43c 	.word	0x7e37e43c
 8008b78:	8800759c 	.word	0x8800759c
 8008b7c:	fe37e43c 	.word	0xfe37e43c
 8008b80:	c2f8f359 	.word	0xc2f8f359
 8008b84:	81a56e1f 	.word	0x81a56e1f
 8008b88:	43500000 	.word	0x43500000
 8008b8c:	ffff3cb0 	.word	0xffff3cb0
 8008b90:	3c900000 	.word	0x3c900000

08008b94 <with_errno>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4604      	mov	r4, r0
 8008b98:	460d      	mov	r5, r1
 8008b9a:	4616      	mov	r6, r2
 8008b9c:	f7fe fd4e 	bl	800763c <__errno>
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	6006      	str	r6, [r0, #0]
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}

08008ba8 <xflow>:
 8008ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008baa:	4614      	mov	r4, r2
 8008bac:	461d      	mov	r5, r3
 8008bae:	b108      	cbz	r0, 8008bb4 <xflow+0xc>
 8008bb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8008bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7f7 fd22 	bl	8000608 <__aeabi_dmul>
 8008bc4:	2222      	movs	r2, #34	; 0x22
 8008bc6:	b003      	add	sp, #12
 8008bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bcc:	f7ff bfe2 	b.w	8008b94 <with_errno>

08008bd0 <__math_uflow>:
 8008bd0:	b508      	push	{r3, lr}
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bd8:	f7ff ffe6 	bl	8008ba8 <xflow>
 8008bdc:	ec41 0b10 	vmov	d0, r0, r1
 8008be0:	bd08      	pop	{r3, pc}

08008be2 <__math_oflow>:
 8008be2:	b508      	push	{r3, lr}
 8008be4:	2200      	movs	r2, #0
 8008be6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008bea:	f7ff ffdd 	bl	8008ba8 <xflow>
 8008bee:	ec41 0b10 	vmov	d0, r0, r1
 8008bf2:	bd08      	pop	{r3, pc}

08008bf4 <__ieee754_sqrt>:
 8008bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	ec55 4b10 	vmov	r4, r5, d0
 8008bfc:	4e67      	ldr	r6, [pc, #412]	; (8008d9c <__ieee754_sqrt+0x1a8>)
 8008bfe:	43ae      	bics	r6, r5
 8008c00:	ee10 0a10 	vmov	r0, s0
 8008c04:	ee10 2a10 	vmov	r2, s0
 8008c08:	4629      	mov	r1, r5
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	d10d      	bne.n	8008c2a <__ieee754_sqrt+0x36>
 8008c0e:	f7f7 fcfb 	bl	8000608 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 fb3f 	bl	800029c <__adddf3>
 8008c1e:	4604      	mov	r4, r0
 8008c20:	460d      	mov	r5, r1
 8008c22:	ec45 4b10 	vmov	d0, r4, r5
 8008c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	2d00      	cmp	r5, #0
 8008c2c:	dc0b      	bgt.n	8008c46 <__ieee754_sqrt+0x52>
 8008c2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c32:	4326      	orrs	r6, r4
 8008c34:	d0f5      	beq.n	8008c22 <__ieee754_sqrt+0x2e>
 8008c36:	b135      	cbz	r5, 8008c46 <__ieee754_sqrt+0x52>
 8008c38:	f7f7 fb2e 	bl	8000298 <__aeabi_dsub>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	f7f7 fe0c 	bl	800085c <__aeabi_ddiv>
 8008c44:	e7eb      	b.n	8008c1e <__ieee754_sqrt+0x2a>
 8008c46:	1509      	asrs	r1, r1, #20
 8008c48:	f000 808d 	beq.w	8008d66 <__ieee754_sqrt+0x172>
 8008c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c50:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c58:	07c9      	lsls	r1, r1, #31
 8008c5a:	bf5c      	itt	pl
 8008c5c:	005b      	lslpl	r3, r3, #1
 8008c5e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008c62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c66:	bf58      	it	pl
 8008c68:	0052      	lslpl	r2, r2, #1
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008c70:	1076      	asrs	r6, r6, #1
 8008c72:	0052      	lsls	r2, r2, #1
 8008c74:	f04f 0e16 	mov.w	lr, #22
 8008c78:	46ac      	mov	ip, r5
 8008c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c7e:	eb0c 0001 	add.w	r0, ip, r1
 8008c82:	4298      	cmp	r0, r3
 8008c84:	bfde      	ittt	le
 8008c86:	1a1b      	suble	r3, r3, r0
 8008c88:	eb00 0c01 	addle.w	ip, r0, r1
 8008c8c:	186d      	addle	r5, r5, r1
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	f1be 0e01 	subs.w	lr, lr, #1
 8008c94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008c98:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008c9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008ca0:	d1ed      	bne.n	8008c7e <__ieee754_sqrt+0x8a>
 8008ca2:	4674      	mov	r4, lr
 8008ca4:	2720      	movs	r7, #32
 8008ca6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008caa:	4563      	cmp	r3, ip
 8008cac:	eb01 000e 	add.w	r0, r1, lr
 8008cb0:	dc02      	bgt.n	8008cb8 <__ieee754_sqrt+0xc4>
 8008cb2:	d113      	bne.n	8008cdc <__ieee754_sqrt+0xe8>
 8008cb4:	4290      	cmp	r0, r2
 8008cb6:	d811      	bhi.n	8008cdc <__ieee754_sqrt+0xe8>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	eb00 0e01 	add.w	lr, r0, r1
 8008cbe:	da57      	bge.n	8008d70 <__ieee754_sqrt+0x17c>
 8008cc0:	f1be 0f00 	cmp.w	lr, #0
 8008cc4:	db54      	blt.n	8008d70 <__ieee754_sqrt+0x17c>
 8008cc6:	f10c 0801 	add.w	r8, ip, #1
 8008cca:	eba3 030c 	sub.w	r3, r3, ip
 8008cce:	4290      	cmp	r0, r2
 8008cd0:	bf88      	it	hi
 8008cd2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008cd6:	1a12      	subs	r2, r2, r0
 8008cd8:	440c      	add	r4, r1
 8008cda:	46c4      	mov	ip, r8
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	3f01      	subs	r7, #1
 8008ce0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ce4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008ce8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008cec:	d1dd      	bne.n	8008caa <__ieee754_sqrt+0xb6>
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	d01b      	beq.n	8008d2a <__ieee754_sqrt+0x136>
 8008cf2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008da0 <__ieee754_sqrt+0x1ac>
 8008cf6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008da4 <__ieee754_sqrt+0x1b0>
 8008cfa:	e9da 0100 	ldrd	r0, r1, [sl]
 8008cfe:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d02:	f7f7 fac9 	bl	8000298 <__aeabi_dsub>
 8008d06:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4649      	mov	r1, r9
 8008d12:	f7f7 fef5 	bl	8000b00 <__aeabi_dcmple>
 8008d16:	b140      	cbz	r0, 8008d2a <__ieee754_sqrt+0x136>
 8008d18:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008d1c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d20:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d24:	d126      	bne.n	8008d74 <__ieee754_sqrt+0x180>
 8008d26:	3501      	adds	r5, #1
 8008d28:	463c      	mov	r4, r7
 8008d2a:	106a      	asrs	r2, r5, #1
 8008d2c:	0863      	lsrs	r3, r4, #1
 8008d2e:	07e9      	lsls	r1, r5, #31
 8008d30:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008d34:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008d38:	bf48      	it	mi
 8008d3a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008d3e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008d42:	461c      	mov	r4, r3
 8008d44:	e76d      	b.n	8008c22 <__ieee754_sqrt+0x2e>
 8008d46:	0ad3      	lsrs	r3, r2, #11
 8008d48:	3815      	subs	r0, #21
 8008d4a:	0552      	lsls	r2, r2, #21
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0fa      	beq.n	8008d46 <__ieee754_sqrt+0x152>
 8008d50:	02dc      	lsls	r4, r3, #11
 8008d52:	d50a      	bpl.n	8008d6a <__ieee754_sqrt+0x176>
 8008d54:	f1c1 0420 	rsb	r4, r1, #32
 8008d58:	fa22 f404 	lsr.w	r4, r2, r4
 8008d5c:	1e4d      	subs	r5, r1, #1
 8008d5e:	408a      	lsls	r2, r1
 8008d60:	4323      	orrs	r3, r4
 8008d62:	1b41      	subs	r1, r0, r5
 8008d64:	e772      	b.n	8008c4c <__ieee754_sqrt+0x58>
 8008d66:	4608      	mov	r0, r1
 8008d68:	e7f0      	b.n	8008d4c <__ieee754_sqrt+0x158>
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	e7ef      	b.n	8008d50 <__ieee754_sqrt+0x15c>
 8008d70:	46e0      	mov	r8, ip
 8008d72:	e7aa      	b.n	8008cca <__ieee754_sqrt+0xd6>
 8008d74:	f7f7 fa92 	bl	800029c <__adddf3>
 8008d78:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4640      	mov	r0, r8
 8008d82:	4649      	mov	r1, r9
 8008d84:	f7f7 feb2 	bl	8000aec <__aeabi_dcmplt>
 8008d88:	b120      	cbz	r0, 8008d94 <__ieee754_sqrt+0x1a0>
 8008d8a:	1ca0      	adds	r0, r4, #2
 8008d8c:	bf08      	it	eq
 8008d8e:	3501      	addeq	r5, #1
 8008d90:	3402      	adds	r4, #2
 8008d92:	e7ca      	b.n	8008d2a <__ieee754_sqrt+0x136>
 8008d94:	3401      	adds	r4, #1
 8008d96:	f024 0401 	bic.w	r4, r4, #1
 8008d9a:	e7c6      	b.n	8008d2a <__ieee754_sqrt+0x136>
 8008d9c:	7ff00000 	.word	0x7ff00000
 8008da0:	20000068 	.word	0x20000068
 8008da4:	20000070 	.word	0x20000070

08008da8 <_init>:
 8008da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008daa:	bf00      	nop
 8008dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dae:	bc08      	pop	{r3}
 8008db0:	469e      	mov	lr, r3
 8008db2:	4770      	bx	lr

08008db4 <_fini>:
 8008db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db6:	bf00      	nop
 8008db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dba:	bc08      	pop	{r3}
 8008dbc:	469e      	mov	lr, r3
 8008dbe:	4770      	bx	lr
